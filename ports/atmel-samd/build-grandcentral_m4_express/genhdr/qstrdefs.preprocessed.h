# 0 "<stdin>"
# 1 "/Users/charlesmoreno/Documents/calpoly/SeniorProj/circuitpython/ports/atmel-samd//"
# 0 "<built-in>"
#define __STDC__ 1
# 0 "<built-in>"
#define __STDC_VERSION__ 201112L
# 0 "<built-in>"
#define __STDC_UTF_16__ 1
# 0 "<built-in>"
#define __STDC_UTF_32__ 1
# 0 "<built-in>"
#define __STDC_HOSTED__ 1
# 0 "<built-in>"
#define __GNUC__ 14
# 0 "<built-in>"
#define __GNUC_MINOR__ 2
# 0 "<built-in>"
#define __GNUC_PATCHLEVEL__ 1
# 0 "<built-in>"
#define __VERSION__ "14.2.1 20241119"
# 0 "<built-in>"
#define __ATOMIC_RELAXED 0
# 0 "<built-in>"
#define __ATOMIC_SEQ_CST 5
# 0 "<built-in>"
#define __ATOMIC_ACQUIRE 2
# 0 "<built-in>"
#define __ATOMIC_RELEASE 3
# 0 "<built-in>"
#define __ATOMIC_ACQ_REL 4
# 0 "<built-in>"
#define __ATOMIC_CONSUME 1
# 0 "<built-in>"
#define __OPTIMIZE_SIZE__ 1
# 0 "<built-in>"
#define __OPTIMIZE__ 1
# 0 "<built-in>"
#define __FINITE_MATH_ONLY__ 0
# 0 "<built-in>"
#define __SIZEOF_INT__ 4
# 0 "<built-in>"
#define __SIZEOF_LONG__ 4
# 0 "<built-in>"
#define __SIZEOF_LONG_LONG__ 8
# 0 "<built-in>"
#define __SIZEOF_SHORT__ 2
# 0 "<built-in>"
#define __SIZEOF_FLOAT__ 4
# 0 "<built-in>"
#define __SIZEOF_DOUBLE__ 8
# 0 "<built-in>"
#define __SIZEOF_LONG_DOUBLE__ 8
# 0 "<built-in>"
#define __SIZEOF_SIZE_T__ 4
# 0 "<built-in>"
#define __CHAR_BIT__ 8
# 0 "<built-in>"
#define __BIGGEST_ALIGNMENT__ 8
# 0 "<built-in>"
#define __ORDER_LITTLE_ENDIAN__ 1234
# 0 "<built-in>"
#define __ORDER_BIG_ENDIAN__ 4321
# 0 "<built-in>"
#define __ORDER_PDP_ENDIAN__ 3412
# 0 "<built-in>"
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
# 0 "<built-in>"
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
# 0 "<built-in>"
#define __SIZEOF_POINTER__ 4
# 0 "<built-in>"
#define __GNUC_EXECUTION_CHARSET_NAME "UTF-8"
# 0 "<built-in>"
#define __GNUC_WIDE_EXECUTION_CHARSET_NAME "UTF-32LE"
# 0 "<built-in>"
#define __SIZE_TYPE__ unsigned int
# 0 "<built-in>"
#define __PTRDIFF_TYPE__ int
# 0 "<built-in>"
#define __WCHAR_TYPE__ unsigned int
# 0 "<built-in>"
#define __WINT_TYPE__ unsigned int
# 0 "<built-in>"
#define __INTMAX_TYPE__ long long int
# 0 "<built-in>"
#define __UINTMAX_TYPE__ long long unsigned int
# 0 "<built-in>"
#define __CHAR16_TYPE__ short unsigned int
# 0 "<built-in>"
#define __CHAR32_TYPE__ long unsigned int
# 0 "<built-in>"
#define __SIG_ATOMIC_TYPE__ int
# 0 "<built-in>"
#define __INT8_TYPE__ signed char
# 0 "<built-in>"
#define __INT16_TYPE__ short int
# 0 "<built-in>"
#define __INT32_TYPE__ long int
# 0 "<built-in>"
#define __INT64_TYPE__ long long int
# 0 "<built-in>"
#define __UINT8_TYPE__ unsigned char
# 0 "<built-in>"
#define __UINT16_TYPE__ short unsigned int
# 0 "<built-in>"
#define __UINT32_TYPE__ long unsigned int
# 0 "<built-in>"
#define __UINT64_TYPE__ long long unsigned int
# 0 "<built-in>"
#define __INT_LEAST8_TYPE__ signed char
# 0 "<built-in>"
#define __INT_LEAST16_TYPE__ short int
# 0 "<built-in>"
#define __INT_LEAST32_TYPE__ long int
# 0 "<built-in>"
#define __INT_LEAST64_TYPE__ long long int
# 0 "<built-in>"
#define __UINT_LEAST8_TYPE__ unsigned char
# 0 "<built-in>"
#define __UINT_LEAST16_TYPE__ short unsigned int
# 0 "<built-in>"
#define __UINT_LEAST32_TYPE__ long unsigned int
# 0 "<built-in>"
#define __UINT_LEAST64_TYPE__ long long unsigned int
# 0 "<built-in>"
#define __INT_FAST8_TYPE__ int
# 0 "<built-in>"
#define __INT_FAST16_TYPE__ int
# 0 "<built-in>"
#define __INT_FAST32_TYPE__ int
# 0 "<built-in>"
#define __INT_FAST64_TYPE__ long long int
# 0 "<built-in>"
#define __UINT_FAST8_TYPE__ unsigned int
# 0 "<built-in>"
#define __UINT_FAST16_TYPE__ unsigned int
# 0 "<built-in>"
#define __UINT_FAST32_TYPE__ unsigned int
# 0 "<built-in>"
#define __UINT_FAST64_TYPE__ long long unsigned int
# 0 "<built-in>"
#define __INTPTR_TYPE__ int
# 0 "<built-in>"
#define __UINTPTR_TYPE__ unsigned int
# 0 "<built-in>"
#define __GXX_ABI_VERSION 1019
# 0 "<built-in>"
#define __SCHAR_MAX__ 0x7f
# 0 "<built-in>"
#define __SHRT_MAX__ 0x7fff
# 0 "<built-in>"
#define __INT_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __LONG_MAX__ 0x7fffffffL
# 0 "<built-in>"
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
# 0 "<built-in>"
#define __WCHAR_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __WCHAR_MIN__ 0U
# 0 "<built-in>"
#define __WINT_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __WINT_MIN__ 0U
# 0 "<built-in>"
#define __PTRDIFF_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __SIZE_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __SCHAR_WIDTH__ 8
# 0 "<built-in>"
#define __SHRT_WIDTH__ 16
# 0 "<built-in>"
#define __INT_WIDTH__ 32
# 0 "<built-in>"
#define __LONG_WIDTH__ 32
# 0 "<built-in>"
#define __LONG_LONG_WIDTH__ 64
# 0 "<built-in>"
#define __WCHAR_WIDTH__ 32
# 0 "<built-in>"
#define __WINT_WIDTH__ 32
# 0 "<built-in>"
#define __PTRDIFF_WIDTH__ 32
# 0 "<built-in>"
#define __SIZE_WIDTH__ 32
# 0 "<built-in>"
#define __INTMAX_MAX__ 0x7fffffffffffffffLL
# 0 "<built-in>"
#define __INTMAX_C(c) c ## LL
# 0 "<built-in>"
#define __UINTMAX_MAX__ 0xffffffffffffffffULL
# 0 "<built-in>"
#define __UINTMAX_C(c) c ## ULL
# 0 "<built-in>"
#define __INTMAX_WIDTH__ 64
# 0 "<built-in>"
#define __SIG_ATOMIC_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
# 0 "<built-in>"
#define __SIG_ATOMIC_WIDTH__ 32
# 0 "<built-in>"
#define __INT8_MAX__ 0x7f
# 0 "<built-in>"
#define __INT16_MAX__ 0x7fff
# 0 "<built-in>"
#define __INT32_MAX__ 0x7fffffffL
# 0 "<built-in>"
#define __INT64_MAX__ 0x7fffffffffffffffLL
# 0 "<built-in>"
#define __UINT8_MAX__ 0xff
# 0 "<built-in>"
#define __UINT16_MAX__ 0xffff
# 0 "<built-in>"
#define __UINT32_MAX__ 0xffffffffUL
# 0 "<built-in>"
#define __UINT64_MAX__ 0xffffffffffffffffULL
# 0 "<built-in>"
#define __INT_LEAST8_MAX__ 0x7f
# 0 "<built-in>"
#define __INT8_C(c) c
# 0 "<built-in>"
#define __INT_LEAST8_WIDTH__ 8
# 0 "<built-in>"
#define __INT_LEAST16_MAX__ 0x7fff
# 0 "<built-in>"
#define __INT16_C(c) c
# 0 "<built-in>"
#define __INT_LEAST16_WIDTH__ 16
# 0 "<built-in>"
#define __INT_LEAST32_MAX__ 0x7fffffffL
# 0 "<built-in>"
#define __INT32_C(c) c ## L
# 0 "<built-in>"
#define __INT_LEAST32_WIDTH__ 32
# 0 "<built-in>"
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffLL
# 0 "<built-in>"
#define __INT64_C(c) c ## LL
# 0 "<built-in>"
#define __INT_LEAST64_WIDTH__ 64
# 0 "<built-in>"
#define __UINT_LEAST8_MAX__ 0xff
# 0 "<built-in>"
#define __UINT8_C(c) c
# 0 "<built-in>"
#define __UINT_LEAST16_MAX__ 0xffff
# 0 "<built-in>"
#define __UINT16_C(c) c
# 0 "<built-in>"
#define __UINT_LEAST32_MAX__ 0xffffffffUL
# 0 "<built-in>"
#define __UINT32_C(c) c ## UL
# 0 "<built-in>"
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffULL
# 0 "<built-in>"
#define __UINT64_C(c) c ## ULL
# 0 "<built-in>"
#define __INT_FAST8_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __INT_FAST8_WIDTH__ 32
# 0 "<built-in>"
#define __INT_FAST16_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __INT_FAST16_WIDTH__ 32
# 0 "<built-in>"
#define __INT_FAST32_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __INT_FAST32_WIDTH__ 32
# 0 "<built-in>"
#define __INT_FAST64_MAX__ 0x7fffffffffffffffLL
# 0 "<built-in>"
#define __INT_FAST64_WIDTH__ 64
# 0 "<built-in>"
#define __UINT_FAST8_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __UINT_FAST16_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __UINT_FAST32_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __UINT_FAST64_MAX__ 0xffffffffffffffffULL
# 0 "<built-in>"
#define __INTPTR_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __INTPTR_WIDTH__ 32
# 0 "<built-in>"
#define __UINTPTR_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __GCC_IEC_559 0
# 0 "<built-in>"
#define __GCC_IEC_559_COMPLEX 0
# 0 "<built-in>"
#define __FLT_EVAL_METHOD__ 0
# 0 "<built-in>"
#define __FLT_EVAL_METHOD_TS_18661_3__ 0
# 0 "<built-in>"
#define __DEC_EVAL_METHOD__ 2
# 0 "<built-in>"
#define __FLT_RADIX__ 2
# 0 "<built-in>"
#define __FLT_MANT_DIG__ 24
# 0 "<built-in>"
#define __FLT_DIG__ 6
# 0 "<built-in>"
#define __FLT_MIN_EXP__ (-125)
# 0 "<built-in>"
#define __FLT_MIN_10_EXP__ (-37)
# 0 "<built-in>"
#define __FLT_MAX_EXP__ 128
# 0 "<built-in>"
#define __FLT_MAX_10_EXP__ 38
# 0 "<built-in>"
#define __FLT_DECIMAL_DIG__ 9
# 0 "<built-in>"
#define __FLT_MAX__ 3.4028234663852886e+38F
# 0 "<built-in>"
#define __FLT_NORM_MAX__ 3.4028234663852886e+38F
# 0 "<built-in>"
#define __FLT_MIN__ 1.1754943508222875e-38F
# 0 "<built-in>"
#define __FLT_EPSILON__ 1.1920928955078125e-7F
# 0 "<built-in>"
#define __FLT_DENORM_MIN__ 1.4012984643248171e-45F
# 0 "<built-in>"
#define __FLT_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FP_FAST_FMAF 1
# 0 "<built-in>"
#define __FLT_IS_IEC_60559__ 1
# 0 "<built-in>"
#define __DBL_MANT_DIG__ 53
# 0 "<built-in>"
#define __DBL_DIG__ 15
# 0 "<built-in>"
#define __DBL_MIN_EXP__ (-1021)
# 0 "<built-in>"
#define __DBL_MIN_10_EXP__ (-307)
# 0 "<built-in>"
#define __DBL_MAX_EXP__ 1024
# 0 "<built-in>"
#define __DBL_MAX_10_EXP__ 308
# 0 "<built-in>"
#define __DBL_DECIMAL_DIG__ 17
# 0 "<built-in>"
#define __DBL_MAX__ ((double)1.7976931348623157e+308L)
# 0 "<built-in>"
#define __DBL_NORM_MAX__ ((double)1.7976931348623157e+308L)
# 0 "<built-in>"
#define __DBL_MIN__ ((double)2.2250738585072014e-308L)
# 0 "<built-in>"
#define __DBL_EPSILON__ ((double)2.2204460492503131e-16L)
# 0 "<built-in>"
#define __DBL_DENORM_MIN__ ((double)4.9406564584124654e-324L)
# 0 "<built-in>"
#define __DBL_HAS_DENORM__ 1
# 0 "<built-in>"
#define __DBL_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __DBL_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __DBL_IS_IEC_60559__ 1
# 0 "<built-in>"
#define __LDBL_MANT_DIG__ 53
# 0 "<built-in>"
#define __LDBL_DIG__ 15
# 0 "<built-in>"
#define __LDBL_MIN_EXP__ (-1021)
# 0 "<built-in>"
#define __LDBL_MIN_10_EXP__ (-307)
# 0 "<built-in>"
#define __LDBL_MAX_EXP__ 1024
# 0 "<built-in>"
#define __LDBL_MAX_10_EXP__ 308
# 0 "<built-in>"
#define __DECIMAL_DIG__ 17
# 0 "<built-in>"
#define __LDBL_DECIMAL_DIG__ 17
# 0 "<built-in>"
#define __LDBL_MAX__ 1.7976931348623157e+308L
# 0 "<built-in>"
#define __LDBL_NORM_MAX__ 1.7976931348623157e+308L
# 0 "<built-in>"
#define __LDBL_MIN__ 2.2250738585072014e-308L
# 0 "<built-in>"
#define __LDBL_EPSILON__ 2.2204460492503131e-16L
# 0 "<built-in>"
#define __LDBL_DENORM_MIN__ 4.9406564584124654e-324L
# 0 "<built-in>"
#define __LDBL_HAS_DENORM__ 1
# 0 "<built-in>"
#define __LDBL_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __LDBL_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __LDBL_IS_IEC_60559__ 1
# 0 "<built-in>"
#define __FLT32_MANT_DIG__ 24
# 0 "<built-in>"
#define __FLT32_DIG__ 6
# 0 "<built-in>"
#define __FLT32_MIN_EXP__ (-125)
# 0 "<built-in>"
#define __FLT32_MIN_10_EXP__ (-37)
# 0 "<built-in>"
#define __FLT32_MAX_EXP__ 128
# 0 "<built-in>"
#define __FLT32_MAX_10_EXP__ 38
# 0 "<built-in>"
#define __FLT32_DECIMAL_DIG__ 9
# 0 "<built-in>"
#define __FLT32_MAX__ 3.4028234663852886e+38F32
# 0 "<built-in>"
#define __FLT32_NORM_MAX__ 3.4028234663852886e+38F32
# 0 "<built-in>"
#define __FLT32_MIN__ 1.1754943508222875e-38F32
# 0 "<built-in>"
#define __FLT32_EPSILON__ 1.1920928955078125e-7F32
# 0 "<built-in>"
#define __FLT32_DENORM_MIN__ 1.4012984643248171e-45F32
# 0 "<built-in>"
#define __FLT32_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT32_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT32_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FP_FAST_FMAF32 1
# 0 "<built-in>"
#define __FLT32_IS_IEC_60559__ 1
# 0 "<built-in>"
#define __FLT64_MANT_DIG__ 53
# 0 "<built-in>"
#define __FLT64_DIG__ 15
# 0 "<built-in>"
#define __FLT64_MIN_EXP__ (-1021)
# 0 "<built-in>"
#define __FLT64_MIN_10_EXP__ (-307)
# 0 "<built-in>"
#define __FLT64_MAX_EXP__ 1024
# 0 "<built-in>"
#define __FLT64_MAX_10_EXP__ 308
# 0 "<built-in>"
#define __FLT64_DECIMAL_DIG__ 17
# 0 "<built-in>"
#define __FLT64_MAX__ 1.7976931348623157e+308F64
# 0 "<built-in>"
#define __FLT64_NORM_MAX__ 1.7976931348623157e+308F64
# 0 "<built-in>"
#define __FLT64_MIN__ 2.2250738585072014e-308F64
# 0 "<built-in>"
#define __FLT64_EPSILON__ 2.2204460492503131e-16F64
# 0 "<built-in>"
#define __FLT64_DENORM_MIN__ 4.9406564584124654e-324F64
# 0 "<built-in>"
#define __FLT64_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT64_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT64_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FLT64_IS_IEC_60559__ 1
# 0 "<built-in>"
#define __FLT32X_MANT_DIG__ 53
# 0 "<built-in>"
#define __FLT32X_DIG__ 15
# 0 "<built-in>"
#define __FLT32X_MIN_EXP__ (-1021)
# 0 "<built-in>"
#define __FLT32X_MIN_10_EXP__ (-307)
# 0 "<built-in>"
#define __FLT32X_MAX_EXP__ 1024
# 0 "<built-in>"
#define __FLT32X_MAX_10_EXP__ 308
# 0 "<built-in>"
#define __FLT32X_DECIMAL_DIG__ 17
# 0 "<built-in>"
#define __FLT32X_MAX__ 1.7976931348623157e+308F32x
# 0 "<built-in>"
#define __FLT32X_NORM_MAX__ 1.7976931348623157e+308F32x
# 0 "<built-in>"
#define __FLT32X_MIN__ 2.2250738585072014e-308F32x
# 0 "<built-in>"
#define __FLT32X_EPSILON__ 2.2204460492503131e-16F32x
# 0 "<built-in>"
#define __FLT32X_DENORM_MIN__ 4.9406564584124654e-324F32x
# 0 "<built-in>"
#define __FLT32X_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT32X_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT32X_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FLT32X_IS_IEC_60559__ 1
# 0 "<built-in>"
#define __SFRACT_FBIT__ 7
# 0 "<built-in>"
#define __SFRACT_IBIT__ 0
# 0 "<built-in>"
#define __SFRACT_MIN__ (-0.5HR-0.5HR)
# 0 "<built-in>"
#define __SFRACT_MAX__ 0X7FP-7HR
# 0 "<built-in>"
#define __SFRACT_EPSILON__ 0x1P-7HR
# 0 "<built-in>"
#define __USFRACT_FBIT__ 8
# 0 "<built-in>"
#define __USFRACT_IBIT__ 0
# 0 "<built-in>"
#define __USFRACT_MIN__ 0.0UHR
# 0 "<built-in>"
#define __USFRACT_MAX__ 0XFFP-8UHR
# 0 "<built-in>"
#define __USFRACT_EPSILON__ 0x1P-8UHR
# 0 "<built-in>"
#define __FRACT_FBIT__ 15
# 0 "<built-in>"
#define __FRACT_IBIT__ 0
# 0 "<built-in>"
#define __FRACT_MIN__ (-0.5R-0.5R)
# 0 "<built-in>"
#define __FRACT_MAX__ 0X7FFFP-15R
# 0 "<built-in>"
#define __FRACT_EPSILON__ 0x1P-15R
# 0 "<built-in>"
#define __UFRACT_FBIT__ 16
# 0 "<built-in>"
#define __UFRACT_IBIT__ 0
# 0 "<built-in>"
#define __UFRACT_MIN__ 0.0UR
# 0 "<built-in>"
#define __UFRACT_MAX__ 0XFFFFP-16UR
# 0 "<built-in>"
#define __UFRACT_EPSILON__ 0x1P-16UR
# 0 "<built-in>"
#define __LFRACT_FBIT__ 31
# 0 "<built-in>"
#define __LFRACT_IBIT__ 0
# 0 "<built-in>"
#define __LFRACT_MIN__ (-0.5LR-0.5LR)
# 0 "<built-in>"
#define __LFRACT_MAX__ 0X7FFFFFFFP-31LR
# 0 "<built-in>"
#define __LFRACT_EPSILON__ 0x1P-31LR
# 0 "<built-in>"
#define __ULFRACT_FBIT__ 32
# 0 "<built-in>"
#define __ULFRACT_IBIT__ 0
# 0 "<built-in>"
#define __ULFRACT_MIN__ 0.0ULR
# 0 "<built-in>"
#define __ULFRACT_MAX__ 0XFFFFFFFFP-32ULR
# 0 "<built-in>"
#define __ULFRACT_EPSILON__ 0x1P-32ULR
# 0 "<built-in>"
#define __LLFRACT_FBIT__ 63
# 0 "<built-in>"
#define __LLFRACT_IBIT__ 0
# 0 "<built-in>"
#define __LLFRACT_MIN__ (-0.5LLR-0.5LLR)
# 0 "<built-in>"
#define __LLFRACT_MAX__ 0X7FFFFFFFFFFFFFFFP-63LLR
# 0 "<built-in>"
#define __LLFRACT_EPSILON__ 0x1P-63LLR
# 0 "<built-in>"
#define __ULLFRACT_FBIT__ 64
# 0 "<built-in>"
#define __ULLFRACT_IBIT__ 0
# 0 "<built-in>"
#define __ULLFRACT_MIN__ 0.0ULLR
# 0 "<built-in>"
#define __ULLFRACT_MAX__ 0XFFFFFFFFFFFFFFFFP-64ULLR
# 0 "<built-in>"
#define __ULLFRACT_EPSILON__ 0x1P-64ULLR
# 0 "<built-in>"
#define __SACCUM_FBIT__ 7
# 0 "<built-in>"
#define __SACCUM_IBIT__ 8
# 0 "<built-in>"
#define __SACCUM_MIN__ (-0X1P7HK-0X1P7HK)
# 0 "<built-in>"
#define __SACCUM_MAX__ 0X7FFFP-7HK
# 0 "<built-in>"
#define __SACCUM_EPSILON__ 0x1P-7HK
# 0 "<built-in>"
#define __USACCUM_FBIT__ 8
# 0 "<built-in>"
#define __USACCUM_IBIT__ 8
# 0 "<built-in>"
#define __USACCUM_MIN__ 0.0UHK
# 0 "<built-in>"
#define __USACCUM_MAX__ 0XFFFFP-8UHK
# 0 "<built-in>"
#define __USACCUM_EPSILON__ 0x1P-8UHK
# 0 "<built-in>"
#define __ACCUM_FBIT__ 15
# 0 "<built-in>"
#define __ACCUM_IBIT__ 16
# 0 "<built-in>"
#define __ACCUM_MIN__ (-0X1P15K-0X1P15K)
# 0 "<built-in>"
#define __ACCUM_MAX__ 0X7FFFFFFFP-15K
# 0 "<built-in>"
#define __ACCUM_EPSILON__ 0x1P-15K
# 0 "<built-in>"
#define __UACCUM_FBIT__ 16
# 0 "<built-in>"
#define __UACCUM_IBIT__ 16
# 0 "<built-in>"
#define __UACCUM_MIN__ 0.0UK
# 0 "<built-in>"
#define __UACCUM_MAX__ 0XFFFFFFFFP-16UK
# 0 "<built-in>"
#define __UACCUM_EPSILON__ 0x1P-16UK
# 0 "<built-in>"
#define __LACCUM_FBIT__ 31
# 0 "<built-in>"
#define __LACCUM_IBIT__ 32
# 0 "<built-in>"
#define __LACCUM_MIN__ (-0X1P31LK-0X1P31LK)
# 0 "<built-in>"
#define __LACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LK
# 0 "<built-in>"
#define __LACCUM_EPSILON__ 0x1P-31LK
# 0 "<built-in>"
#define __ULACCUM_FBIT__ 32
# 0 "<built-in>"
#define __ULACCUM_IBIT__ 32
# 0 "<built-in>"
#define __ULACCUM_MIN__ 0.0ULK
# 0 "<built-in>"
#define __ULACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULK
# 0 "<built-in>"
#define __ULACCUM_EPSILON__ 0x1P-32ULK
# 0 "<built-in>"
#define __LLACCUM_FBIT__ 31
# 0 "<built-in>"
#define __LLACCUM_IBIT__ 32
# 0 "<built-in>"
#define __LLACCUM_MIN__ (-0X1P31LLK-0X1P31LLK)
# 0 "<built-in>"
#define __LLACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LLK
# 0 "<built-in>"
#define __LLACCUM_EPSILON__ 0x1P-31LLK
# 0 "<built-in>"
#define __ULLACCUM_FBIT__ 32
# 0 "<built-in>"
#define __ULLACCUM_IBIT__ 32
# 0 "<built-in>"
#define __ULLACCUM_MIN__ 0.0ULLK
# 0 "<built-in>"
#define __ULLACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULLK
# 0 "<built-in>"
#define __ULLACCUM_EPSILON__ 0x1P-32ULLK
# 0 "<built-in>"
#define __QQ_FBIT__ 7
# 0 "<built-in>"
#define __QQ_IBIT__ 0
# 0 "<built-in>"
#define __HQ_FBIT__ 15
# 0 "<built-in>"
#define __HQ_IBIT__ 0
# 0 "<built-in>"
#define __SQ_FBIT__ 31
# 0 "<built-in>"
#define __SQ_IBIT__ 0
# 0 "<built-in>"
#define __DQ_FBIT__ 63
# 0 "<built-in>"
#define __DQ_IBIT__ 0
# 0 "<built-in>"
#define __TQ_FBIT__ 127
# 0 "<built-in>"
#define __TQ_IBIT__ 0
# 0 "<built-in>"
#define __UQQ_FBIT__ 8
# 0 "<built-in>"
#define __UQQ_IBIT__ 0
# 0 "<built-in>"
#define __UHQ_FBIT__ 16
# 0 "<built-in>"
#define __UHQ_IBIT__ 0
# 0 "<built-in>"
#define __USQ_FBIT__ 32
# 0 "<built-in>"
#define __USQ_IBIT__ 0
# 0 "<built-in>"
#define __UDQ_FBIT__ 64
# 0 "<built-in>"
#define __UDQ_IBIT__ 0
# 0 "<built-in>"
#define __UTQ_FBIT__ 128
# 0 "<built-in>"
#define __UTQ_IBIT__ 0
# 0 "<built-in>"
#define __HA_FBIT__ 7
# 0 "<built-in>"
#define __HA_IBIT__ 8
# 0 "<built-in>"
#define __SA_FBIT__ 15
# 0 "<built-in>"
#define __SA_IBIT__ 16
# 0 "<built-in>"
#define __DA_FBIT__ 31
# 0 "<built-in>"
#define __DA_IBIT__ 32
# 0 "<built-in>"
#define __TA_FBIT__ 63
# 0 "<built-in>"
#define __TA_IBIT__ 64
# 0 "<built-in>"
#define __UHA_FBIT__ 8
# 0 "<built-in>"
#define __UHA_IBIT__ 8
# 0 "<built-in>"
#define __USA_FBIT__ 16
# 0 "<built-in>"
#define __USA_IBIT__ 16
# 0 "<built-in>"
#define __UDA_FBIT__ 32
# 0 "<built-in>"
#define __UDA_IBIT__ 32
# 0 "<built-in>"
#define __UTA_FBIT__ 64
# 0 "<built-in>"
#define __UTA_IBIT__ 64
# 0 "<built-in>"
#define __REGISTER_PREFIX__ 
# 0 "<built-in>"
#define __USER_LABEL_PREFIX__ 
# 0 "<built-in>"
#define __GNUC_STDC_INLINE__ 1
# 0 "<built-in>"
#define __CHAR_UNSIGNED__ 1
# 0 "<built-in>"
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
# 0 "<built-in>"
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
# 0 "<built-in>"
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
# 0 "<built-in>"
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_INT_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_LLONG_LOCK_FREE 1
# 0 "<built-in>"
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
# 0 "<built-in>"
#define __GCC_DESTRUCTIVE_SIZE 64
# 0 "<built-in>"
#define __GCC_CONSTRUCTIVE_SIZE 64
# 0 "<built-in>"
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
# 0 "<built-in>"
#define __HAVE_SPECULATION_SAFE_VALUE 1
# 0 "<built-in>"
#define __GCC_HAVE_DWARF2_CFI_ASM 1
# 0 "<built-in>"
#define __PRAGMA_REDEFINE_EXTNAME 1
# 0 "<built-in>"
#define __SIZEOF_WCHAR_T__ 4
# 0 "<built-in>"
#define __SIZEOF_WINT_T__ 4
# 0 "<built-in>"
#define __SIZEOF_PTRDIFF_T__ 4
# 0 "<built-in>"
#define __ARM_FEATURE_DSP 1
# 0 "<built-in>"
#define __ARM_FEATURE_QBIT 1
# 0 "<built-in>"
#define __ARM_FEATURE_SAT 1
# 0 "<built-in>"
#undef __ARM_FEATURE_CRYPTO
# 0 "<built-in>"
#undef __ARM_FEATURE_AES
# 0 "<built-in>"
#undef __ARM_FEATURE_SHA2
# 0 "<built-in>"
#define __ARM_FEATURE_UNALIGNED 1
# 0 "<built-in>"
#undef __ARM_FEATURE_QRDMX
# 0 "<built-in>"
#undef __ARM_FEATURE_CRC32
# 0 "<built-in>"
#undef __ARM_FEATURE_DOTPROD
# 0 "<built-in>"
#undef __ARM_FEATURE_COMPLEX
# 0 "<built-in>"
#define __ARM_32BIT_STATE 1
# 0 "<built-in>"
#undef __ARM_FEATURE_PAUTH
# 0 "<built-in>"
#undef __ARM_FEATURE_BTI
# 0 "<built-in>"
#undef __ARM_FEATURE_BTI_DEFAULT
# 0 "<built-in>"
#undef __ARM_FEATURE_PAC_DEFAULT
# 0 "<built-in>"
#undef __ARM_FEATURE_MVE
# 0 "<built-in>"
#undef __ARM_FEATURE_CMSE
# 0 "<built-in>"
#undef __ARM_FEATURE_LDREX
# 0 "<built-in>"
#define __ARM_FEATURE_LDREX 7
# 0 "<built-in>"
#define __ARM_FEATURE_CLZ 1
# 0 "<built-in>"
#undef __ARM_FEATURE_NUMERIC_MAXMIN
# 0 "<built-in>"
#define __ARM_FEATURE_SIMD32 1
# 0 "<built-in>"
#define __ARM_SIZEOF_MINIMAL_ENUM 1
# 0 "<built-in>"
#define __ARM_SIZEOF_WCHAR_T 4
# 0 "<built-in>"
#undef __ARM_ARCH_PROFILE
# 0 "<built-in>"
#define __ARM_ARCH_PROFILE 77
# 0 "<built-in>"
#define __arm__ 1
# 0 "<built-in>"
#undef __ARM_ARCH
# 0 "<built-in>"
#define __ARM_ARCH 7
# 0 "<built-in>"
#define __APCS_32__ 1
# 0 "<built-in>"
#define __GCC_ASM_FLAG_OUTPUTS__ 1
# 0 "<built-in>"
#define __thumb__ 1
# 0 "<built-in>"
#define __thumb2__ 1
# 0 "<built-in>"
#define __THUMBEL__ 1
# 0 "<built-in>"
#undef __ARM_ARCH_ISA_THUMB
# 0 "<built-in>"
#define __ARM_ARCH_ISA_THUMB 2
# 0 "<built-in>"
#define __ARMEL__ 1
# 0 "<built-in>"
#define __VFP_FP__ 1
# 0 "<built-in>"
#undef __ARM_FP
# 0 "<built-in>"
#define __ARM_FP 4
# 0 "<built-in>"
#undef __ARM_FP16_FORMAT_IEEE
# 0 "<built-in>"
#undef __ARM_FP16_FORMAT_ALTERNATIVE
# 0 "<built-in>"
#undef __ARM_FP16_ARGS
# 0 "<built-in>"
#undef __ARM_FEATURE_FP16_SCALAR_ARITHMETIC
# 0 "<built-in>"
#undef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC
# 0 "<built-in>"
#undef __ARM_FEATURE_FP16_FML
# 0 "<built-in>"
#define __ARM_FEATURE_FMA 1
# 0 "<built-in>"
#undef __ARM_NEON__
# 0 "<built-in>"
#undef __ARM_NEON
# 0 "<built-in>"
#undef __ARM_NEON_FP
# 0 "<built-in>"
#define __THUMB_INTERWORK__ 1
# 0 "<built-in>"
#define __ARM_ARCH_7EM__ 1
# 0 "<built-in>"
#define __ARM_PCS_VFP 1
# 0 "<built-in>"
#define __ARM_EABI__ 1
# 0 "<built-in>"
#undef __FDPIC__
# 0 "<built-in>"
#define __ARM_ARCH_EXT_IDIV__ 1
# 0 "<built-in>"
#define __ARM_FEATURE_IDIV 1
# 0 "<built-in>"
#define __ARM_ASM_SYNTAX_UNIFIED__ 1
# 0 "<built-in>"
#undef __ARM_FEATURE_COPROC
# 0 "<built-in>"
#define __ARM_FEATURE_COPROC 15
# 0 "<built-in>"
#undef __ARM_FEATURE_CDE
# 0 "<built-in>"
#undef __ARM_FEATURE_CDE_COPROC
# 0 "<built-in>"
#undef __ARM_FEATURE_MATMUL_INT8
# 0 "<built-in>"
#undef __ARM_FEATURE_BF16_SCALAR_ARITHMETIC
# 0 "<built-in>"
#undef __ARM_FEATURE_BF16_VECTOR_ARITHMETIC
# 0 "<built-in>"
#undef __ARM_BF16_FORMAT_ALTERNATIVE
# 0 "<built-in>"
#define __GXX_TYPEINFO_EQUALITY_INLINE 0
# 0 "<built-in>"
#define __ELF__ 1
# 0 "<command-line>"
#define __USES_INITFINI__ 1
# 0 "<command-line>"
#define CIRCUITPY 1
# 0 "<command-line>"
#define CIRCUITPY_FULL_BUILD 1
# 0 "<command-line>"
#define CIRCUITPY_OPTIMIZE_PROPERTY_FLASH_SIZE 1
# 0 "<command-line>"
#define MICROPY_PY_ASYNC_AWAIT 1
# 0 "<command-line>"
#define MICROPY_PY_ASYNCIO 1
# 0 "<command-line>"
#define MICROPY_PY_SELECT 1
# 0 "<command-line>"
#define MICROPY_PY_SELECT_SELECT 1
# 0 "<command-line>"
#define CIRCUITPY_AESIO 1
# 0 "<command-line>"
#define CIRCUITPY_ALARM 1
# 0 "<command-line>"
#define CIRCUITPY_ALARM_TOUCH 1
# 0 "<command-line>"
#define CIRCUITPY_ANALOGBUFIO 0
# 0 "<command-line>"
#define CIRCUITPY_ANALOGIO 1
# 0 "<command-line>"
#define CIRCUITPY_ARRAY 1
# 0 "<command-line>"
#define CIRCUITPY_ATEXIT 1
# 0 "<command-line>"
#define CIRCUITPY_AUDIOBUSIO 1
# 0 "<command-line>"
#define CIRCUITPY_AUDIOBUSIO_I2SOUT 1
# 0 "<command-line>"
#define CIRCUITPY_AUDIOBUSIO_PDMIN 1
# 0 "<command-line>"
#define CIRCUITPY_AUDIOIO 1
# 0 "<command-line>"
#define CIRCUITPY_AUDIOPWMIO 0
# 0 "<command-line>"
#define CIRCUITPY_AUDIOCORE 1
# 0 "<command-line>"
#define CIRCUITPY_AUDIOMIXER 1
# 0 "<command-line>"
#define CIRCUITPY_AUDIOCORE_DEBUG 0
# 0 "<command-line>"
#define CIRCUITPY_AUDIOMP3 1
# 0 "<command-line>"
#define CIRCUITPY_AUDIODELAYS 0
# 0 "<command-line>"
#define CIRCUITPY_AUDIOFILTERS 0
# 0 "<command-line>"
#define CIRCUITPY_AURORA_EPAPER 0
# 0 "<command-line>"
#define CIRCUITPY_BINASCII 1
# 0 "<command-line>"
#define CIRCUITPY_BITBANG_APA102 0
# 0 "<command-line>"
#define CIRCUITPY_BITBANGIO 1
# 0 "<command-line>"
#define CIRCUITPY_BITOPS 0
# 0 "<command-line>"
#define CIRCUITPY_BLEIO_HCI 1
# 0 "<command-line>"
#define CIRCUITPY_BLEIO_NATIVE 0
# 0 "<command-line>"
#define CIRCUITPY_BLEIO 1
# 0 "<command-line>"
#define CIRCUITPY_BLE_FILE_SERVICE 0
# 0 "<command-line>"
#define CIRCUITPY_BOARD 1
# 0 "<command-line>"
#define CIRCUITPY_BUSDEVICE 1
# 0 "<command-line>"
#define CIRCUITPY_BUILTINS_POW3 1
# 0 "<command-line>"
#define CIRCUITPY_BUSIO 1
# 0 "<command-line>"
#define CIRCUITPY_BUSIO_I2C 1
# 0 "<command-line>"
#define CIRCUITPY_BUSIO_SPI 1
# 0 "<command-line>"
#define CIRCUITPY_BUSIO_UART 1
# 0 "<command-line>"
#define CIRCUITPY_CAMERA 0
# 0 "<command-line>"
#define CIRCUITPY_CANIO 0
# 0 "<command-line>"
#define CIRCUITPY_CODEOP 1
# 0 "<command-line>"
#define CIRCUITPY_COLLECTIONS 1
# 0 "<command-line>"
#define CIRCUITPY_COMPUTED_GOTO_SAVE_SPACE 0
# 0 "<command-line>"
#define CIRCUITPY_CYW43 0
# 0 "<command-line>"
#define CIRCUITPY_DIGITALIO 1
# 0 "<command-line>"
#define CIRCUITPY_COPROC 0
# 0 "<command-line>"
#define CIRCUITPY_COUNTIO 1
# 0 "<command-line>"
#define CIRCUITPY_DISPLAYIO 1
# 0 "<command-line>"
#define CIRCUITPY_BUSDISPLAY 1
# 0 "<command-line>"
#define CIRCUITPY_FOURWIRE 1
# 0 "<command-line>"
#define CIRCUITPY_EPAPERDISPLAY 1
# 0 "<command-line>"
#define CIRCUITPY_I2CDISPLAYBUS 1
# 0 "<command-line>"
#define CIRCUITPY_PARALLELDISPLAYBUS 1
# 0 "<command-line>"
#define CIRCUITPY_DOTCLOCKFRAMEBUFFER 0
# 0 "<command-line>"
#define CIRCUITPY_BITMAPFILTER 0
# 0 "<command-line>"
#define CIRCUITPY_BITMAPTOOLS 1
# 0 "<command-line>"
#define CIRCUITPY_FRAMEBUFFERIO 1
# 0 "<command-line>"
#define CIRCUITPY_VECTORIO 1
# 0 "<command-line>"
#define CIRCUITPY_DUALBANK 0
# 0 "<command-line>"
#define CIRCUITPY_ENABLE_MPY_NATIVE 0
# 0 "<command-line>"
#define CIRCUITPY_OS_GETENV 1
# 0 "<command-line>"
#define CIRCUITPY_ERRNO 1
# 0 "<command-line>"
#define CIRCUITPY_ESPIDF 0
# 0 "<command-line>"
#define CIRCUITPY_ESPNOW 0
# 0 "<command-line>"
#define CIRCUITPY_ESPULP 0
# 0 "<command-line>"
#define CIRCUITPY_ESP_USB_SERIAL_JTAG 0
# 0 "<command-line>"
#define CIRCUITPY_ESPCAMERA 0
# 0 "<command-line>"
#define CIRCUITPY__EVE 0
# 0 "<command-line>"
#define CIRCUITPY_FLOPPYIO 1
# 0 "<command-line>"
#define CIRCUITPY_FREQUENCYIO 1
# 0 "<command-line>"
#define CIRCUITPY_FUTURE 1
# 0 "<command-line>"
#define CIRCUITPY_GETPASS 1
# 0 "<command-line>"
#define CIRCUITPY_GIFIO 1
# 0 "<command-line>"
#define CIRCUITPY_GNSS 0
# 0 "<command-line>"
#define CIRCUITPY_HASHLIB 0
# 0 "<command-line>"
#define CIRCUITPY_HASHLIB_MBEDTLS 0
# 0 "<command-line>"
#define CIRCUITPY_HASHLIB_MBEDTLS_ONLY 0
# 0 "<command-line>"
#define CIRCUITPY_I2CTARGET 1
# 0 "<command-line>"
#define CIRCUITPY_IMAGECAPTURE 1
# 0 "<command-line>"
#define CIRCUITPY_IO 1
# 0 "<command-line>"
#define CIRCUITPY_IO_IOBASE 1
# 0 "<command-line>"
#define CIRCUITPY_IPADDRESS 0
# 0 "<command-line>"
#define CIRCUITPY_IS31FL3741 0
# 0 "<command-line>"
#define CIRCUITPY_JPEGIO 1
# 0 "<command-line>"
#define CIRCUITPY_JSON 1
# 0 "<command-line>"
#define CIRCUITPY_KEYPAD 1
# 0 "<command-line>"
#define CIRCUITPY_KEYPAD_KEYS 1
# 0 "<command-line>"
#define CIRCUITPY_KEYPAD_KEYMATRIX 1
# 0 "<command-line>"
#define CIRCUITPY_KEYPAD_SHIFTREGISTERKEYS 1
# 0 "<command-line>"
#define CIRCUITPY_KEYPAD_DEMUX 0
# 0 "<command-line>"
#define CIRCUITPY_LOCALE 1
# 0 "<command-line>"
#define CIRCUITPY_MATH 1
# 0 "<command-line>"
#define CIRCUITPY_MAX3421E 1
# 0 "<command-line>"
#define CIRCUITPY_MEMORYMAP 0
# 0 "<command-line>"
#define CIRCUITPY_MEMORYMONITOR 0
# 0 "<command-line>"
#define CIRCUITPY_MICROCONTROLLER 1
# 0 "<command-line>"
#define CIRCUITPY_MDNS 0
# 0 "<command-line>"
#define CIRCUITPY_MSGPACK 1
# 0 "<command-line>"
#define CIRCUITPY_NEOPIXEL_WRITE 1
# 0 "<command-line>"
#define CIRCUITPY_NVM 1
# 0 "<command-line>"
#define CIRCUITPY_ONEWIREIO 1
# 0 "<command-line>"
#define CIRCUITPY_OPT_LOAD_ATTR_FAST_PATH 1
# 0 "<command-line>"
#define CIRCUITPY_OPT_MAP_LOOKUP_CACHE 1
# 0 "<command-line>"
#define CIRCUITPY_OS 1
# 0 "<command-line>"
#define CIRCUITPY_PEW 0
# 0 "<command-line>"
#define CIRCUITPY_PICODVI 0
# 0 "<command-line>"
#define CIRCUITPY_PIXELBUF 1
# 0 "<command-line>"
#define CIRCUITPY_PIXELMAP 1
# 0 "<command-line>"
#define CIRCUITPY_PORT_SERIAL 0
# 0 "<command-line>"
#define CIRCUITPY_PS2IO 1
# 0 "<command-line>"
#define CIRCUITPY_PULSEIO 1
# 0 "<command-line>"
#define CIRCUITPY_PULSEIO_PULSEOUT 1
# 0 "<command-line>"
#define CIRCUITPY_PWMIO 1
# 0 "<command-line>"
#define CIRCUITPY_QRIO 1
# 0 "<command-line>"
#define CIRCUITPY_RAINBOWIO 1
# 0 "<command-line>"
#define CIRCUITPY_RANDOM 1
# 0 "<command-line>"
#define CIRCUITPY_RE 1
# 0 "<command-line>"
#define CIRCUITPY_REQUIRE_I2C_PULLUPS 1
# 0 "<command-line>"
#define CIRCUITPY_I2C_ALLOW_STRAPPING_PINS 0
# 0 "<command-line>"
#define CIRCUITPY_RP2PIO 0
# 0 "<command-line>"
#define CIRCUITPY_RGBMATRIX 1
# 0 "<command-line>"
#define CIRCUITPY_ROTARYIO 1
# 0 "<command-line>"
#define CIRCUITPY_ROTARYIO_SOFTENCODER 1
# 0 "<command-line>"
#define CIRCUITPY_RTC 1
# 0 "<command-line>"
#define CIRCUITPY_SAFEMODE_PY 1
# 0 "<command-line>"
#define CIRCUITPY_SAMD 1
# 0 "<command-line>"
#define CIRCUITPY_SDCARDIO 1
# 0 "<command-line>"
#define CIRCUITPY_SDIOIO 1
# 0 "<command-line>"
#define CIRCUITPY_SERIAL_BLE 0
# 0 "<command-line>"
#define CIRCUITPY_SETTABLE_PROCESSOR_FREQUENCY 0
# 0 "<command-line>"
#define CIRCUITPY_SHARPDISPLAY 1
# 0 "<command-line>"
#define CIRCUITPY_SKIP_SAFE_MODE_WAIT 0
# 0 "<command-line>"
#define CIRCUITPY_SOCKETPOOL 0
# 0 "<command-line>"
#define CIRCUITPY_SPITARGET 1
# 0 "<command-line>"
#define CIRCUITPY_SOCKETPOOL_IPV6 0
# 0 "<command-line>"
#define CIRCUITPY_SSL 0
# 0 "<command-line>"
#define CIRCUITPY_SSL_MBEDTLS 0
# 0 "<command-line>"
#define CIRCUITPY_STAGE 0
# 0 "<command-line>"
#define CIRCUITPY_STATUS_BAR 1
# 0 "<command-line>"
#define CIRCUITPY_STORAGE 1
# 0 "<command-line>"
#define CIRCUITPY_STORAGE_EXTEND 0
# 0 "<command-line>"
#define CIRCUITPY_STRUCT 1
# 0 "<command-line>"
#define CIRCUITPY_SUPERVISOR 1
# 0 "<command-line>"
#define CIRCUITPY_SYNTHIO 1
# 0 "<command-line>"
#define CIRCUITPY_SYNTHIO_MAX_CHANNELS 12
# 0 "<command-line>"
#define CIRCUITPY_SYS 1
# 0 "<command-line>"
#define CIRCUITPY_TERMINALIO 1
# 0 "<command-line>"
#define CIRCUITPY_TERMINALIO_VT100 1
# 0 "<command-line>"
#define CIRCUITPY_FONTIO 1
# 0 "<command-line>"
#define CIRCUITPY_LVFONTIO 0
# 0 "<command-line>"
#define CIRCUITPY_TILEPALETTEMAPPER 1
# 0 "<command-line>"
#define CIRCUITPY_TIME 1
# 0 "<command-line>"
#define CIRCUITPY_TOUCHIO_USE_NATIVE 0
# 0 "<command-line>"
#define CIRCUITPY_TOUCHIO 1
# 0 "<command-line>"
#define CIRCUITPY_TRACEBACK 1
# 0 "<command-line>"
#define CIRCUITPY_UHEAP 0
# 0 "<command-line>"
#define CIRCUITPY_USB_DEVICE 1
# 0 "<command-line>"
#define USB_NUM_ENDPOINT_PAIRS 8
# 0 "<command-line>"
#define USB_NUM_IN_ENDPOINTS 8
# 0 "<command-line>"
#define USB_NUM_OUT_ENDPOINTS 8
# 0 "<command-line>"
#define CIRCUITPY_USB_IDENTIFICATION 1
# 0 "<command-line>"
#define CIRCUITPY_USB_CDC 1
# 0 "<command-line>"
#define CIRCUITPY_USB_CDC_CONSOLE_ENABLED_DEFAULT 1
# 0 "<command-line>"
#define CIRCUITPY_USB_CDC_DATA_ENABLED_DEFAULT 0
# 0 "<command-line>"
#define CIRCUITPY_USB_HID 1
# 0 "<command-line>"
#define CIRCUITPY_USB_HID_ENABLED_DEFAULT 1
# 0 "<command-line>"
#define CIRCUITPY_USB_VIDEO 0
# 0 "<command-line>"
#define CIRCUITPY_USB_HOST 0
# 0 "<command-line>"
#define CIRCUITPY_USB_MIDI 1
# 0 "<command-line>"
#define CIRCUITPY_USB_MIDI_ENABLED_DEFAULT 1
# 0 "<command-line>"
#define CIRCUITPY_USB_MSC 1
# 0 "<command-line>"
#define CIRCUITPY_USB_MSC_ENABLED_DEFAULT 1
# 0 "<command-line>"
#define CIRCUITPY_USB_VENDOR 0
# 0 "<command-line>"
#define CIRCUITPY_PYUSB 1
# 0 "<command-line>"
#define CIRCUITPY_TINYUSB 1
# 0 "<command-line>"
#define CIRCUITPY_USB_HOST 0
# 0 "<command-line>"
#define CIRCUITPY_PYUSB 1
# 0 "<command-line>"
#define CIRCUITPY_USB_KEYBOARD_WORKFLOW 1
# 0 "<command-line>"
#define CIRCUITPY_USTACK 0
# 0 "<command-line>"
#define CIRCUITPY_ZLIB 1
# 0 "<command-line>"
#define CIRCUITPY_ULAB 1
# 0 "<command-line>"
#define CIRCUITPY_VIDEOCORE 0
# 0 "<command-line>"
#define CIRCUITPY_WARNINGS 1
# 0 "<command-line>"
#define CIRCUITPY_WATCHDOG 1
# 0 "<command-line>"
#define CIRCUITPY_WIFI 0
# 0 "<command-line>"
#define CIRCUITPY_WEB_WORKFLOW 0
# 0 "<command-line>"
#define CIRCUITPY_WIFI_RADIO_SETTABLE_MAC_ADDRESS 1
# 0 "<command-line>"
#define CIRCUITPY_WIFI_RADIO_SETTABLE_LISTEN_INTERVAL 0
# 0 "<command-line>"
#define CIRCUITPY_TUSB_MEM_ALIGN 4
# 0 "<command-line>"
#define CIRCUITPY_TUSB_ATTR_USBRAM .bss.usbram
# 0 "<command-line>"
#define CIRCUITPY_SWO_TRACE 0
# 0 "<command-line>"
#define CIRCUITPY_MIN_GCC_VERSION 13
# 0 "<command-line>"
#define LONGINT_IMPL_MPZ 1
# 0 "<command-line>"
#define FFCONF_H "lib/oofatfs/ffconf.h"
# 0 "<command-line>"
#define _DEBUG 0
# 0 "<command-line>"
#define CIRCUITPY_CREATOR_ID 0x239A
# 0 "<command-line>"
#define CIRCUITPY_CREATION_ID 0x8032
# 0 "<command-line>"
#define INTERNAL_FLASH_FILESYSTEM 0
# 0 "<command-line>"
#define QSPI_FLASH_FILESYSTEM 1
# 0 "<command-line>"
#define SPI_FLASH_FILESYSTEM 0
# 0 "<command-line>"
#define DISABLE_FILESYSTEM 0
# 0 "<command-line>"
#define EXTERNAL_FLASH_DEVICES W25Q64JVxQ, GD25Q64C
# 0 "<command-line>"
#define USB_INTERFACE_NAME "CircuitPython"
# 0 "<command-line>"
#define USB_VID 0x239A
# 0 "<command-line>"
#define USB_PID 0x8032
# 0 "<command-line>"
#define USB_MANUFACTURER "Adafruit Industries LLC"
# 0 "<command-line>"
#define USB_MANUFACTURER_8 "Adafruit"
# 0 "<command-line>"
#define USB_PRODUCT_16 "Grand Central M4"
# 0 "<command-line>"
#define USB_PRODUCT "Grand Central M4 Express"
# 0 "<command-line>"
#define CFG_TUD_CDC 2
# 0 "<command-line>"
#define USB_HIGHSPEED 0
# 0 "<command-line>"
#define CIRCUITPY_DEBUG 1
# 0 "<command-line>"
#define CIRCUITPY_LTO 1
# 0 "<command-line>"
#define CIRCUITPY_TRANSLATE_OBJECT 1
# 0 "<command-line>"
#define CFG_TUSB_MCU OPT_MCU_SAMD51
# 0 "<command-line>"
#define CFG_TUD_MIDI_RX_BUFSIZE 128
# 0 "<command-line>"
#define CFG_TUD_CDC_RX_BUFSIZE 256
# 0 "<command-line>"
#define CFG_TUD_MIDI_TX_BUFSIZE 128
# 0 "<command-line>"
#define CFG_TUD_CDC_TX_BUFSIZE 256
# 0 "<command-line>"
#define CFG_TUD_MSC_BUFSIZE 1024
# 0 "<command-line>"
#define __SAMD51P20A__ 1
# 0 "<command-line>"
#define CIRCUITPY_SOFTWARE_SAFE_MODE 0x0ADABEEF
# 0 "<command-line>"
#define CIRCUITPY_CANARY_WORD 0xADAF00
# 0 "<command-line>"
#define CIRCUITPY_SAFE_RESTART_WORD 0xDEADBEEF
# 0 "<command-line>"
#define CIRCUITPY_BOARD_ID "grandcentral_m4_express"
# 0 "<command-line>"
#undef _FORTIFY_SOURCE
# 0 "<command-line>"
#define CIRCUITPY_ULAB 1
# 0 "<command-line>"
#define MODULE_ULAB_ENABLED 1
# 0 "<command-line>"
#define ULAB_HAS_USER_MODULE 0
# 0 "<command-line>"
#define SAM_D5X_E5X 1
# 0 "<command-line>"
#define SAMD51 1
# 1 "<stdin>"
# 29 "<stdin>"
# 1 "../../py/mpconfig.h" 1
# 27 "../../py/mpconfig.h"
#define MICROPY_INCLUDED_PY_MPCONFIG_H 
# 37 "../../py/mpconfig.h"
# 1 "build-grandcentral_m4_express/genhdr/mpversion.h" 1

#define MICROPY_GIT_TAG "10.0.0-alpha.2-11-gb9f631e219-dirty"
#define MICROPY_GIT_HASH "b9f631e219-dirty"
#define MICROPY_BUILD_DATE "2025-04-14"
#define MICROPY_VERSION_MAJOR (10)
#define MICROPY_VERSION_MINOR (0)
#define MICROPY_VERSION_MICRO (0)
#define MICROPY_VERSION_PRERELEASE 0
#define MICROPY_VERSION_STRING "10.0.0"

#define MICROPY_VERSION (MICROPY_VERSION_MAJOR << 16 | MICROPY_VERSION_MINOR << 8 | MICROPY_VERSION_MICRO)
#define MICROPY_FULL_VERSION_INFO "Adafruit CircuitPython " MICROPY_GIT_TAG " on " MICROPY_BUILD_DATE "; " MICROPY_BANNER_MACHINE
# 38 "../../py/mpconfig.h" 2
# 71 "../../py/mpconfig.h"
#define MICROPY_PREVIEW_VERSION_2 (0)
# 88 "../../py/mpconfig.h"
#define MICROPY_CONFIG_ROM_LEVEL_MINIMUM (0)

#define MICROPY_CONFIG_ROM_LEVEL_CORE_FEATURES (10)

#define MICROPY_CONFIG_ROM_LEVEL_BASIC_FEATURES (20)

#define MICROPY_CONFIG_ROM_LEVEL_EXTRA_FEATURES (30)

#define MICROPY_CONFIG_ROM_LEVEL_FULL_FEATURES (40)

#define MICROPY_CONFIG_ROM_LEVEL_EVERYTHING (50)




# 1 "./mpconfigport.h" 1






       


# 1 "asf4/samd51/include/sam.h" 1
# 29 "asf4/samd51/include/sam.h"
#define _SAM_ 
# 48 "asf4/samd51/include/sam.h"
# 1 "asf4/samd51/include/samd51p20a.h" 1
# 31 "asf4/samd51/include/samd51p20a.h"
#define _SAMD51P20A_ 
# 49 "asf4/samd51/include/samd51p20a.h"
# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stdint.h" 1 3 4
# 9 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stdint.h" 3 4
# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 1 3 4
# 10 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define _STDINT_H 

# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/machine/_default_types.h" 1 3 4





#define _MACHINE__DEFAULT_TYPES_H 

# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/features.h" 1 3 4
# 22 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/features.h" 3 4
#define _SYS_FEATURES_H 





# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/_newlib_version.h" 1 3 4



#define _NEWLIB_VERSION_H__ 1

#define _NEWLIB_VERSION "4.4.0"
#define __NEWLIB__ 4
#define __NEWLIB_MINOR__ 4
#define __NEWLIB_PATCHLEVEL__ 0
# 29 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/features.h" 2 3 4




#define __GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))






#define __GNUC_PREREQ__(ma,mi) __GNUC_PREREQ(ma, mi)
# 146 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/features.h" 3 4
#undef _DEFAULT_SOURCE
#define _DEFAULT_SOURCE 1



#undef _POSIX_SOURCE
#define _POSIX_SOURCE 1
#undef _POSIX_C_SOURCE
#define _POSIX_C_SOURCE 202405L
# 173 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/features.h" 3 4
#undef _ATFILE_SOURCE
#define _ATFILE_SOURCE 1
# 271 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/features.h" 3 4
#define __ATFILE_VISIBLE 1





#define __BSD_VISIBLE 1







#define __GNU_VISIBLE 0







#define __ISO_C_VISIBLE 2011
# 304 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/features.h" 3 4
#define __LARGEFILE_VISIBLE 0



#define __MISC_VISIBLE 1





#define __POSIX_VISIBLE 202405
# 332 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/features.h" 3 4
#define __SVID_VISIBLE 1
# 348 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/features.h" 3 4
#define __XSI_VISIBLE 0
# 366 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/features.h" 3 4
#define __SSP_FORTIFY_LEVEL 0
# 9 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/machine/_default_types.h" 2 3 4






#define __EXP(x) __ ##x ##__
# 26 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/machine/_default_types.h" 3 4
#define __have_longlong64 1






#define __have_long32 1








# 41 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef signed char __int8_t;

typedef unsigned char __uint8_t;



#define ___int8_t_defined 1







typedef short int __int16_t;

typedef short unsigned int __uint16_t;



#define ___int16_t_defined 1
# 77 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long int __int32_t;

typedef long unsigned int __uint32_t;



#define ___int32_t_defined 1
# 103 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;



#define ___int64_t_defined 1
# 134 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;



#define ___int_least8_t_defined 1
# 160 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;



#define ___int_least16_t_defined 1
# 182 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long int __int_least32_t;

typedef long unsigned int __uint_least32_t;



#define ___int_least32_t_defined 1
# 200 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;



#define ___int_least64_t_defined 1







typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 244 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/machine/_default_types.h" 3 4
#undef __EXP
# 13 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 2 3 4
# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_intsup.h" 1 3 4
# 10 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_intsup.h" 3 4
#define _SYS__INTSUP_H 





#define __STDINT_EXP(x) __ ##x ##__
# 35 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_intsup.h" 3 4
       
       
       
       
       
       
       
       
#undef signed
#undef unsigned
#undef char
#undef short
#undef int
#undef __int20
#undef __int20__
#undef long
#define signed +0
#define unsigned +0
#define char +0
#define short +1
#define __int20 +2
#define __int20__ +2
#define int +2
#define long +4
# 67 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_intsup.h" 3 4
#define _INTPTR_EQ_INT 






#define _INT32_EQ_LONG 







#define __INT8 "hh"
# 93 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_intsup.h" 3 4
#define __INT16 "h"
# 104 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_intsup.h" 3 4
#define __INT32 "l"
# 113 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_intsup.h" 3 4
#define __INT64 "ll"






#define __FAST8 
# 129 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_intsup.h" 3 4
#define __FAST16 






#define __FAST32 
# 147 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_intsup.h" 3 4
#define __FAST64 "ll"



#define __LEAST8 "hh"
# 162 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_intsup.h" 3 4
#define __LEAST16 "h"
# 173 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_intsup.h" 3 4
#define __LEAST32 "l"
# 182 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_intsup.h" 3 4
#define __LEAST64 "ll"

#undef signed
#undef unsigned
#undef char
#undef short
#undef int
#undef long
       
       
       
       
       
# 194 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_intsup.h" 3 4
#undef __int20
       
# 195 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_intsup.h" 3 4
#undef __int20__
       
       
# 14 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 2 3 4
# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h" 1 3 4
# 10 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h" 3 4
#define _SYS__STDINT_H 
# 20 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h" 3 4
typedef __int8_t int8_t ;
#define _INT8_T_DECLARED 


typedef __uint8_t uint8_t ;
#define _UINT8_T_DECLARED 

#define __int8_t_defined 1




typedef __int16_t int16_t ;
#define _INT16_T_DECLARED 


typedef __uint16_t uint16_t ;
#define _UINT16_T_DECLARED 

#define __int16_t_defined 1




typedef __int32_t int32_t ;
#define _INT32_T_DECLARED 


typedef __uint32_t uint32_t ;
#define _UINT32_T_DECLARED 

#define __int32_t_defined 1




typedef __int64_t int64_t ;
#define _INT64_T_DECLARED 


typedef __uint64_t uint64_t ;
#define _UINT64_T_DECLARED 

#define __int64_t_defined 1



typedef __intmax_t intmax_t;
#define _INTMAX_T_DECLARED 



typedef __uintmax_t uintmax_t;
#define _UINTMAX_T_DECLARED 



typedef __intptr_t intptr_t;
#define _INTPTR_T_DECLARED 



typedef __uintptr_t uintptr_t;
#define _UINTPTR_T_DECLARED 
# 15 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 2 3 4






typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;
#define __int_least8_t_defined 1



typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;
#define __int_least16_t_defined 1



typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;
#define __int_least32_t_defined 1



typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;
#define __int_least64_t_defined 1
# 51 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
  typedef int int_fast8_t;
  typedef unsigned int uint_fast8_t;
#define __int_fast8_t_defined 1







  typedef int int_fast16_t;
  typedef unsigned int uint_fast16_t;
#define __int_fast16_t_defined 1







  typedef int int_fast32_t;
  typedef unsigned int uint_fast32_t;
#define __int_fast32_t_defined 1







  typedef long long int int_fast64_t;
  typedef long long unsigned int uint_fast64_t;
#define __int_fast64_t_defined 1
# 128 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define INTPTR_MIN (-__INTPTR_MAX__ - 1)
#define INTPTR_MAX (__INTPTR_MAX__)
#define UINTPTR_MAX (__UINTPTR_MAX__)
# 152 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define INT8_MIN (-__INT8_MAX__ - 1)
#define INT8_MAX (__INT8_MAX__)
#define UINT8_MAX (__UINT8_MAX__)







#define INT_LEAST8_MIN (-__INT_LEAST8_MAX__ - 1)
#define INT_LEAST8_MAX (__INT_LEAST8_MAX__)
#define UINT_LEAST8_MAX (__UINT_LEAST8_MAX__)
# 174 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define INT16_MIN (-__INT16_MAX__ - 1)
#define INT16_MAX (__INT16_MAX__)
#define UINT16_MAX (__UINT16_MAX__)







#define INT_LEAST16_MIN (-__INT_LEAST16_MAX__ - 1)
#define INT_LEAST16_MAX (__INT_LEAST16_MAX__)
#define UINT_LEAST16_MAX (__UINT_LEAST16_MAX__)
# 196 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define INT32_MIN (-__INT32_MAX__ - 1)
#define INT32_MAX (__INT32_MAX__)
#define UINT32_MAX (__UINT32_MAX__)
# 212 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define INT_LEAST32_MIN (-__INT_LEAST32_MAX__ - 1)
#define INT_LEAST32_MAX (__INT_LEAST32_MAX__)
#define UINT_LEAST32_MAX (__UINT_LEAST32_MAX__)
# 230 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define INT64_MIN (-__INT64_MAX__ - 1)
#define INT64_MAX (__INT64_MAX__)
#define UINT64_MAX (__UINT64_MAX__)
# 246 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define INT_LEAST64_MIN (-__INT_LEAST64_MAX__ - 1)
#define INT_LEAST64_MAX (__INT_LEAST64_MAX__)
#define UINT_LEAST64_MAX (__UINT_LEAST64_MAX__)
# 262 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define INT_FAST8_MIN (-__INT_FAST8_MAX__ - 1)
#define INT_FAST8_MAX (__INT_FAST8_MAX__)
#define UINT_FAST8_MAX (__UINT_FAST8_MAX__)
# 278 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define INT_FAST16_MIN (-__INT_FAST16_MAX__ - 1)
#define INT_FAST16_MAX (__INT_FAST16_MAX__)
#define UINT_FAST16_MAX (__UINT_FAST16_MAX__)
# 294 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define INT_FAST32_MIN (-__INT_FAST32_MAX__ - 1)
#define INT_FAST32_MAX (__INT_FAST32_MAX__)
#define UINT_FAST32_MAX (__UINT_FAST32_MAX__)
# 310 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define INT_FAST64_MIN (-__INT_FAST64_MAX__ - 1)
#define INT_FAST64_MAX (__INT_FAST64_MAX__)
#define UINT_FAST64_MAX (__UINT_FAST64_MAX__)
# 326 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define INTMAX_MAX (__INTMAX_MAX__)
#define INTMAX_MIN (-INTMAX_MAX - 1)







#define UINTMAX_MAX (__UINTMAX_MAX__)







#define SIZE_MAX (__SIZE_MAX__)





#define SIG_ATOMIC_MIN (-__STDINT_EXP(INT_MAX) - 1)
#define SIG_ATOMIC_MAX (__STDINT_EXP(INT_MAX))



#define PTRDIFF_MAX (__PTRDIFF_MAX__)



#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)




#define WCHAR_MIN (__WCHAR_MIN__)
# 374 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define WCHAR_MAX (__WCHAR_MAX__)
# 384 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define WINT_MAX (__WINT_MAX__)




#define WINT_MIN (__WINT_MIN__)






#define INT8_C(x) __INT8_C(x)
#define UINT8_C(x) __UINT8_C(x)
# 408 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define INT16_C(x) __INT16_C(x)
#define UINT16_C(x) __UINT16_C(x)
# 420 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define INT32_C(x) __INT32_C(x)
#define UINT32_C(x) __UINT32_C(x)
# 433 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define INT64_C(x) __INT64_C(x)
#define UINT64_C(x) __UINT64_C(x)
# 449 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdint.h" 3 4
#define INTMAX_C(x) __INTMAX_C(x)
#define UINTMAX_C(x) __UINTMAX_C(x)
# 10 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stdint.h" 2 3 4



#define _GCC_WRAP_STDINT_H 
# 50 "asf4/samd51/include/samd51p20a.h" 2


# 51 "asf4/samd51/include/samd51p20a.h"
typedef volatile const uint32_t RoReg;
typedef volatile const uint16_t RoReg16;
typedef volatile const uint8_t RoReg8;





typedef volatile uint32_t WoReg;
typedef volatile uint16_t WoReg16;
typedef volatile uint8_t WoReg8;
typedef volatile uint32_t RwReg;
typedef volatile uint16_t RwReg16;
typedef volatile uint8_t RwReg8;
# 74 "asf4/samd51/include/samd51p20a.h"
#define _U_(x) x ## U
#define _L_(x) x ## L
#define _UL_(x) x ## UL
# 91 "asf4/samd51/include/samd51p20a.h"
typedef enum IRQn
{

  NonMaskableInt_IRQn = -14,
  HardFault_IRQn = -13,
  MemoryManagement_IRQn = -12,
  BusFault_IRQn = -11,
  UsageFault_IRQn = -10,
  SVCall_IRQn = -5,
  DebugMonitor_IRQn = -4,
  PendSV_IRQn = -2,
  SysTick_IRQn = -1,

  PM_IRQn = 0,
  MCLK_IRQn = 1,
  OSCCTRL_0_IRQn = 2,
  OSCCTRL_1_IRQn = 3,
  OSCCTRL_2_IRQn = 4,
  OSCCTRL_3_IRQn = 5,
  OSCCTRL_4_IRQn = 6,
  OSC32KCTRL_IRQn = 7,
  SUPC_0_IRQn = 8,
  SUPC_1_IRQn = 9,
  WDT_IRQn = 10,
  RTC_IRQn = 11,
  EIC_0_IRQn = 12,
  EIC_1_IRQn = 13,
  EIC_2_IRQn = 14,
  EIC_3_IRQn = 15,
  EIC_4_IRQn = 16,
  EIC_5_IRQn = 17,
  EIC_6_IRQn = 18,
  EIC_7_IRQn = 19,
  EIC_8_IRQn = 20,
  EIC_9_IRQn = 21,
  EIC_10_IRQn = 22,
  EIC_11_IRQn = 23,
  EIC_12_IRQn = 24,
  EIC_13_IRQn = 25,
  EIC_14_IRQn = 26,
  EIC_15_IRQn = 27,
  FREQM_IRQn = 28,
  NVMCTRL_0_IRQn = 29,
  NVMCTRL_1_IRQn = 30,
  DMAC_0_IRQn = 31,
  DMAC_1_IRQn = 32,
  DMAC_2_IRQn = 33,
  DMAC_3_IRQn = 34,
  DMAC_4_IRQn = 35,
  EVSYS_0_IRQn = 36,
  EVSYS_1_IRQn = 37,
  EVSYS_2_IRQn = 38,
  EVSYS_3_IRQn = 39,
  EVSYS_4_IRQn = 40,
  PAC_IRQn = 41,
  TAL_0_IRQn = 42,
  TAL_1_IRQn = 43,
  RAMECC_IRQn = 45,
  SERCOM0_0_IRQn = 46,
  SERCOM0_1_IRQn = 47,
  SERCOM0_2_IRQn = 48,
  SERCOM0_3_IRQn = 49,
  SERCOM1_0_IRQn = 50,
  SERCOM1_1_IRQn = 51,
  SERCOM1_2_IRQn = 52,
  SERCOM1_3_IRQn = 53,
  SERCOM2_0_IRQn = 54,
  SERCOM2_1_IRQn = 55,
  SERCOM2_2_IRQn = 56,
  SERCOM2_3_IRQn = 57,
  SERCOM3_0_IRQn = 58,
  SERCOM3_1_IRQn = 59,
  SERCOM3_2_IRQn = 60,
  SERCOM3_3_IRQn = 61,
  SERCOM4_0_IRQn = 62,
  SERCOM4_1_IRQn = 63,
  SERCOM4_2_IRQn = 64,
  SERCOM4_3_IRQn = 65,
  SERCOM5_0_IRQn = 66,
  SERCOM5_1_IRQn = 67,
  SERCOM5_2_IRQn = 68,
  SERCOM5_3_IRQn = 69,
  SERCOM6_0_IRQn = 70,
  SERCOM6_1_IRQn = 71,
  SERCOM6_2_IRQn = 72,
  SERCOM6_3_IRQn = 73,
  SERCOM7_0_IRQn = 74,
  SERCOM7_1_IRQn = 75,
  SERCOM7_2_IRQn = 76,
  SERCOM7_3_IRQn = 77,
  USB_0_IRQn = 80,
  USB_1_IRQn = 81,
  USB_2_IRQn = 82,
  USB_3_IRQn = 83,
  TCC0_0_IRQn = 85,
  TCC0_1_IRQn = 86,
  TCC0_2_IRQn = 87,
  TCC0_3_IRQn = 88,
  TCC0_4_IRQn = 89,
  TCC0_5_IRQn = 90,
  TCC0_6_IRQn = 91,
  TCC1_0_IRQn = 92,
  TCC1_1_IRQn = 93,
  TCC1_2_IRQn = 94,
  TCC1_3_IRQn = 95,
  TCC1_4_IRQn = 96,
  TCC2_0_IRQn = 97,
  TCC2_1_IRQn = 98,
  TCC2_2_IRQn = 99,
  TCC2_3_IRQn = 100,
  TCC3_0_IRQn = 101,
  TCC3_1_IRQn = 102,
  TCC3_2_IRQn = 103,
  TCC4_0_IRQn = 104,
  TCC4_1_IRQn = 105,
  TCC4_2_IRQn = 106,
  TC0_IRQn = 107,
  TC1_IRQn = 108,
  TC2_IRQn = 109,
  TC3_IRQn = 110,
  TC4_IRQn = 111,
  TC5_IRQn = 112,
  TC6_IRQn = 113,
  TC7_IRQn = 114,
  PDEC_0_IRQn = 115,
  PDEC_1_IRQn = 116,
  PDEC_2_IRQn = 117,
  ADC0_0_IRQn = 118,
  ADC0_1_IRQn = 119,
  ADC1_0_IRQn = 120,
  ADC1_1_IRQn = 121,
  AC_IRQn = 122,
  DAC_0_IRQn = 123,
  DAC_1_IRQn = 124,
  DAC_2_IRQn = 125,
  DAC_3_IRQn = 126,
  DAC_4_IRQn = 127,
  I2S_IRQn = 128,
  PCC_IRQn = 129,
  AES_IRQn = 130,
  TRNG_IRQn = 131,
  ICM_IRQn = 132,
  PUKCC_IRQn = 133,
  QSPI_IRQn = 134,
  SDHC0_IRQn = 135,
  SDHC1_IRQn = 136,

  PERIPH_COUNT_IRQn = 137
} IRQn_Type;

typedef struct _DeviceVectors
{

  void* pvStack;


  void* pfnReset_Handler;
  void* pfnNMI_Handler;
  void* pfnHardFault_Handler;
  void* pfnMemManage_Handler;
  void* pfnBusFault_Handler;
  void* pfnUsageFault_Handler;
  void* pvReservedM9;
  void* pvReservedM8;
  void* pvReservedM7;
  void* pvReservedM6;
  void* pfnSVC_Handler;
  void* pfnDebugMon_Handler;
  void* pvReservedM3;
  void* pfnPendSV_Handler;
  void* pfnSysTick_Handler;


  void* pfnPM_Handler;
  void* pfnMCLK_Handler;
  void* pfnOSCCTRL_0_Handler;
  void* pfnOSCCTRL_1_Handler;
  void* pfnOSCCTRL_2_Handler;
  void* pfnOSCCTRL_3_Handler;
  void* pfnOSCCTRL_4_Handler;
  void* pfnOSC32KCTRL_Handler;
  void* pfnSUPC_0_Handler;
  void* pfnSUPC_1_Handler;
  void* pfnWDT_Handler;
  void* pfnRTC_Handler;
  void* pfnEIC_0_Handler;
  void* pfnEIC_1_Handler;
  void* pfnEIC_2_Handler;
  void* pfnEIC_3_Handler;
  void* pfnEIC_4_Handler;
  void* pfnEIC_5_Handler;
  void* pfnEIC_6_Handler;
  void* pfnEIC_7_Handler;
  void* pfnEIC_8_Handler;
  void* pfnEIC_9_Handler;
  void* pfnEIC_10_Handler;
  void* pfnEIC_11_Handler;
  void* pfnEIC_12_Handler;
  void* pfnEIC_13_Handler;
  void* pfnEIC_14_Handler;
  void* pfnEIC_15_Handler;
  void* pfnFREQM_Handler;
  void* pfnNVMCTRL_0_Handler;
  void* pfnNVMCTRL_1_Handler;
  void* pfnDMAC_0_Handler;
  void* pfnDMAC_1_Handler;
  void* pfnDMAC_2_Handler;
  void* pfnDMAC_3_Handler;
  void* pfnDMAC_4_Handler;
  void* pfnEVSYS_0_Handler;
  void* pfnEVSYS_1_Handler;
  void* pfnEVSYS_2_Handler;
  void* pfnEVSYS_3_Handler;
  void* pfnEVSYS_4_Handler;
  void* pfnPAC_Handler;
  void* pfnTAL_0_Handler;
  void* pfnTAL_1_Handler;
  void* pvReserved44;
  void* pfnRAMECC_Handler;
  void* pfnSERCOM0_0_Handler;
  void* pfnSERCOM0_1_Handler;
  void* pfnSERCOM0_2_Handler;
  void* pfnSERCOM0_3_Handler;
  void* pfnSERCOM1_0_Handler;
  void* pfnSERCOM1_1_Handler;
  void* pfnSERCOM1_2_Handler;
  void* pfnSERCOM1_3_Handler;
  void* pfnSERCOM2_0_Handler;
  void* pfnSERCOM2_1_Handler;
  void* pfnSERCOM2_2_Handler;
  void* pfnSERCOM2_3_Handler;
  void* pfnSERCOM3_0_Handler;
  void* pfnSERCOM3_1_Handler;
  void* pfnSERCOM3_2_Handler;
  void* pfnSERCOM3_3_Handler;
  void* pfnSERCOM4_0_Handler;
  void* pfnSERCOM4_1_Handler;
  void* pfnSERCOM4_2_Handler;
  void* pfnSERCOM4_3_Handler;
  void* pfnSERCOM5_0_Handler;
  void* pfnSERCOM5_1_Handler;
  void* pfnSERCOM5_2_Handler;
  void* pfnSERCOM5_3_Handler;
  void* pfnSERCOM6_0_Handler;
  void* pfnSERCOM6_1_Handler;
  void* pfnSERCOM6_2_Handler;
  void* pfnSERCOM6_3_Handler;
  void* pfnSERCOM7_0_Handler;
  void* pfnSERCOM7_1_Handler;
  void* pfnSERCOM7_2_Handler;
  void* pfnSERCOM7_3_Handler;
  void* pvReserved78;
  void* pvReserved79;
  void* pfnUSB_0_Handler;
  void* pfnUSB_1_Handler;
  void* pfnUSB_2_Handler;
  void* pfnUSB_3_Handler;
  void* pvReserved84;
  void* pfnTCC0_0_Handler;
  void* pfnTCC0_1_Handler;
  void* pfnTCC0_2_Handler;
  void* pfnTCC0_3_Handler;
  void* pfnTCC0_4_Handler;
  void* pfnTCC0_5_Handler;
  void* pfnTCC0_6_Handler;
  void* pfnTCC1_0_Handler;
  void* pfnTCC1_1_Handler;
  void* pfnTCC1_2_Handler;
  void* pfnTCC1_3_Handler;
  void* pfnTCC1_4_Handler;
  void* pfnTCC2_0_Handler;
  void* pfnTCC2_1_Handler;
  void* pfnTCC2_2_Handler;
  void* pfnTCC2_3_Handler;
  void* pfnTCC3_0_Handler;
  void* pfnTCC3_1_Handler;
  void* pfnTCC3_2_Handler;
  void* pfnTCC4_0_Handler;
  void* pfnTCC4_1_Handler;
  void* pfnTCC4_2_Handler;
  void* pfnTC0_Handler;
  void* pfnTC1_Handler;
  void* pfnTC2_Handler;
  void* pfnTC3_Handler;
  void* pfnTC4_Handler;
  void* pfnTC5_Handler;
  void* pfnTC6_Handler;
  void* pfnTC7_Handler;
  void* pfnPDEC_0_Handler;
  void* pfnPDEC_1_Handler;
  void* pfnPDEC_2_Handler;
  void* pfnADC0_0_Handler;
  void* pfnADC0_1_Handler;
  void* pfnADC1_0_Handler;
  void* pfnADC1_1_Handler;
  void* pfnAC_Handler;
  void* pfnDAC_0_Handler;
  void* pfnDAC_1_Handler;
  void* pfnDAC_2_Handler;
  void* pfnDAC_3_Handler;
  void* pfnDAC_4_Handler;
  void* pfnI2S_Handler;
  void* pfnPCC_Handler;
  void* pfnAES_Handler;
  void* pfnTRNG_Handler;
  void* pfnICM_Handler;
  void* pfnPUKCC_Handler;
  void* pfnQSPI_Handler;
  void* pfnSDHC0_Handler;
  void* pfnSDHC1_Handler;
} DeviceVectors;


void Reset_Handler ( void );
void NMI_Handler ( void );
void HardFault_Handler ( void );
void MemManage_Handler ( void );
void BusFault_Handler ( void );
void UsageFault_Handler ( void );
void SVC_Handler ( void );
void DebugMon_Handler ( void );
void PendSV_Handler ( void );
void SysTick_Handler ( void );


void PM_Handler ( void );
void MCLK_Handler ( void );
void OSCCTRL_0_Handler ( void );
void OSCCTRL_1_Handler ( void );
void OSCCTRL_2_Handler ( void );
void OSCCTRL_3_Handler ( void );
void OSCCTRL_4_Handler ( void );
void OSC32KCTRL_Handler ( void );
void SUPC_0_Handler ( void );
void SUPC_1_Handler ( void );
void WDT_Handler ( void );
void RTC_Handler ( void );
void EIC_0_Handler ( void );
void EIC_1_Handler ( void );
void EIC_2_Handler ( void );
void EIC_3_Handler ( void );
void EIC_4_Handler ( void );
void EIC_5_Handler ( void );
void EIC_6_Handler ( void );
void EIC_7_Handler ( void );
void EIC_8_Handler ( void );
void EIC_9_Handler ( void );
void EIC_10_Handler ( void );
void EIC_11_Handler ( void );
void EIC_12_Handler ( void );
void EIC_13_Handler ( void );
void EIC_14_Handler ( void );
void EIC_15_Handler ( void );
void FREQM_Handler ( void );
void NVMCTRL_0_Handler ( void );
void NVMCTRL_1_Handler ( void );
void DMAC_0_Handler ( void );
void DMAC_1_Handler ( void );
void DMAC_2_Handler ( void );
void DMAC_3_Handler ( void );
void DMAC_4_Handler ( void );
void EVSYS_0_Handler ( void );
void EVSYS_1_Handler ( void );
void EVSYS_2_Handler ( void );
void EVSYS_3_Handler ( void );
void EVSYS_4_Handler ( void );
void PAC_Handler ( void );
void TAL_0_Handler ( void );
void TAL_1_Handler ( void );
void RAMECC_Handler ( void );
void SERCOM0_0_Handler ( void );
void SERCOM0_1_Handler ( void );
void SERCOM0_2_Handler ( void );
void SERCOM0_3_Handler ( void );
void SERCOM1_0_Handler ( void );
void SERCOM1_1_Handler ( void );
void SERCOM1_2_Handler ( void );
void SERCOM1_3_Handler ( void );
void SERCOM2_0_Handler ( void );
void SERCOM2_1_Handler ( void );
void SERCOM2_2_Handler ( void );
void SERCOM2_3_Handler ( void );
void SERCOM3_0_Handler ( void );
void SERCOM3_1_Handler ( void );
void SERCOM3_2_Handler ( void );
void SERCOM3_3_Handler ( void );
void SERCOM4_0_Handler ( void );
void SERCOM4_1_Handler ( void );
void SERCOM4_2_Handler ( void );
void SERCOM4_3_Handler ( void );
void SERCOM5_0_Handler ( void );
void SERCOM5_1_Handler ( void );
void SERCOM5_2_Handler ( void );
void SERCOM5_3_Handler ( void );
void SERCOM6_0_Handler ( void );
void SERCOM6_1_Handler ( void );
void SERCOM6_2_Handler ( void );
void SERCOM6_3_Handler ( void );
void SERCOM7_0_Handler ( void );
void SERCOM7_1_Handler ( void );
void SERCOM7_2_Handler ( void );
void SERCOM7_3_Handler ( void );
void USB_0_Handler ( void );
void USB_1_Handler ( void );
void USB_2_Handler ( void );
void USB_3_Handler ( void );
void TCC0_0_Handler ( void );
void TCC0_1_Handler ( void );
void TCC0_2_Handler ( void );
void TCC0_3_Handler ( void );
void TCC0_4_Handler ( void );
void TCC0_5_Handler ( void );
void TCC0_6_Handler ( void );
void TCC1_0_Handler ( void );
void TCC1_1_Handler ( void );
void TCC1_2_Handler ( void );
void TCC1_3_Handler ( void );
void TCC1_4_Handler ( void );
void TCC2_0_Handler ( void );
void TCC2_1_Handler ( void );
void TCC2_2_Handler ( void );
void TCC2_3_Handler ( void );
void TCC3_0_Handler ( void );
void TCC3_1_Handler ( void );
void TCC3_2_Handler ( void );
void TCC4_0_Handler ( void );
void TCC4_1_Handler ( void );
void TCC4_2_Handler ( void );
void TC0_Handler ( void );
void TC1_Handler ( void );
void TC2_Handler ( void );
void TC3_Handler ( void );
void TC4_Handler ( void );
void TC5_Handler ( void );
void TC6_Handler ( void );
void TC7_Handler ( void );
void PDEC_0_Handler ( void );
void PDEC_1_Handler ( void );
void PDEC_2_Handler ( void );
void ADC0_0_Handler ( void );
void ADC0_1_Handler ( void );
void ADC1_0_Handler ( void );
void ADC1_1_Handler ( void );
void AC_Handler ( void );
void DAC_0_Handler ( void );
void DAC_1_Handler ( void );
void DAC_2_Handler ( void );
void DAC_3_Handler ( void );
void DAC_4_Handler ( void );
void I2S_Handler ( void );
void PCC_Handler ( void );
void AES_Handler ( void );
void TRNG_Handler ( void );
void ICM_Handler ( void );
void PUKCC_Handler ( void );
void QSPI_Handler ( void );
void SDHC0_Handler ( void );
void SDHC1_Handler ( void );






#define __CM4_REV 1
#define __DEBUG_LVL 3
#define __FPU_PRESENT 1
#define __MPU_PRESENT 1
#define __NVIC_PRIO_BITS 3
#define __TRACE_LVL 2
#define __VTOR_PRESENT 1
#define __Vendor_SysTickConfig 0





# 1 "asf4/samd51/CMSIS/Include/core_cm4.h" 1
# 32 "asf4/samd51/CMSIS/Include/core_cm4.h"
#define __CORE_CM4_H_GENERIC 
# 64 "asf4/samd51/CMSIS/Include/core_cm4.h"
#define __CM4_CMSIS_VERSION_MAIN ( 5U)
#define __CM4_CMSIS_VERSION_SUB ( 0U)
#define __CM4_CMSIS_VERSION ((__CM4_CMSIS_VERSION_MAIN << 16U) | __CM4_CMSIS_VERSION_SUB )


#define __CORTEX_M (4U)
# 101 "asf4/samd51/CMSIS/Include/core_cm4.h"
#define __FPU_USED 1U
# 160 "asf4/samd51/CMSIS/Include/core_cm4.h"
# 1 "asf4/samd51/CMSIS/Include/cmsis_compiler.h" 1
# 26 "asf4/samd51/CMSIS/Include/cmsis_compiler.h"
#define __CMSIS_COMPILER_H 
# 48 "asf4/samd51/CMSIS/Include/cmsis_compiler.h"
# 1 "asf4/samd51/CMSIS/Include/cmsis_gcc.h" 1
# 26 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
#define __CMSIS_GCC_H 


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"



#define __ASM __asm


#define __INLINE inline


#define __STATIC_INLINE static inline


#define __NO_RETURN __attribute__((noreturn))


#define __USED __attribute__((used))


#define __WEAK __attribute__((weak))


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed)) T_UINT32 { uint32_t v; };
#pragma GCC diagnostic pop
#define __UNALIGNED_UINT32(x) (((struct T_UINT32 *)(x))->v)


#define __ALIGNED(x) __attribute__((aligned(x)))


#define __PACKED __attribute__((packed, aligned(1)))


#define __PACKED_STRUCT struct __attribute__((packed, aligned(1)))
# 83 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_irq(void)
{
  __asm volatile ("cpsid i" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, control" : "=r" (result) );
  return(result);
}
# 135 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_CONTROL(uint32_t control)
{
  __asm volatile ("MSR control, %0" : : "r" (control) : "memory");
}
# 159 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_IPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, ipsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_APSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, apsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_xPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, xpsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_PSP(void)
{
  register uint32_t result;

  __asm volatile ("MRS %0, psp" : "=r" (result) );
  return(result);
}
# 231 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PSP(uint32_t topOfProcStack)
{
  __asm volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
}
# 255 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_MSP(void)
{
  register uint32_t result;

  __asm volatile ("MRS %0, msp" : "=r" (result) );
  return(result);
}
# 285 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_MSP(uint32_t topOfMainStack)
{
  __asm volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
}
# 309 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, primask" : "=r" (result) );
  return(result);
}
# 339 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PRIMASK(uint32_t priMask)
{
  __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
}
# 366 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_fault_irq(void)
{
  __asm volatile ("cpsie f" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_fault_irq(void)
{
  __asm volatile ("cpsid f" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, basepri" : "=r" (result) );
  return(result);
}
# 418 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI(uint32_t basePri)
{
  __asm volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
}
# 443 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI_MAX(uint32_t basePri)
{
  __asm volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_FAULTMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, faultmask" : "=r" (result) );
  return(result);
}
# 484 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_FAULTMASK(uint32_t faultMask)
{
  __asm volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
}
# 634 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_FPSCR(void)
{


  uint32_t result;

  __asm volatile ("VMRS %0, fpscr" : "=r" (result) );
  return(result);



}







__attribute__((always_inline)) static inline void __set_FPSCR(uint32_t fpscr)
{


  __asm volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");



}
# 685 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
#define __CMSIS_GCC_OUT_REG(r) "=r" (r)
#define __CMSIS_GCC_RW_REG(r) "+r" (r)
#define __CMSIS_GCC_USE_REG(r) "r" (r)
# 698 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
#define __NOP() __ASM volatile ("nop")
# 708 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
#define __WFI() __ASM volatile ("wfi")
# 720 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
#define __WFE() __ASM volatile ("wfe")
# 731 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
#define __SEV() __ASM volatile ("sev")
# 740 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __ISB(void)
{
  __asm volatile ("isb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DSB(void)
{
  __asm volatile ("dsb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DMB(void)
{
  __asm volatile ("dmb 0xF":::"memory");
}
# 774 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV(uint32_t value)
{

  return __builtin_bswap32(value);






}
# 793 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
# 808 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline int32_t __REVSH(int32_t value)
{

  return (short)__builtin_bswap16(value);






}
# 828 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  return (op1 >> op2) | (op1 << (32U - op2));
}
# 841 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
#define __BKPT(value) __ASM volatile ("bkpt "#value)
# 850 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RBIT(uint32_t value)
{
  uint32_t result;




   __asm volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
# 870 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
  return(result);
}
# 880 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
#define __CLZ __builtin_clz
# 893 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDREXB(volatile uint8_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint8_t) result);
}
# 915 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDREXH(volatile uint16_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint16_t) result);
}
# 937 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __asm volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
   return(result);
}
# 954 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
{
   uint32_t result;

   __asm volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 971 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
{
   uint32_t result;

   __asm volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 988 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __asm volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
   return(result);
}






__attribute__((always_inline)) static inline void __CLREX(void)
{
  __asm volatile ("clrex" ::: "memory");
}
# 1022 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
#define __SSAT(ARG1,ARG2) ({ int32_t __RES, __ARG1 = (ARG1); __ASM ("ssat %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })
# 1037 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
#define __USAT(ARG1,ARG2) ({ uint32_t __RES, __ARG1 = (ARG1); __ASM ("usat %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })
# 1052 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RRX(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rrx %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
# 1067 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDRBT(volatile uint8_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint8_t) result);
}
# 1089 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDRHT(volatile uint16_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint16_t) result);
}
# 1111 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDRT(volatile uint32_t *ptr)
{
    uint32_t result;

   __asm volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
   return(result);
}
# 1126 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRBT(uint8_t value, volatile uint8_t *ptr)
{
   __asm volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 1138 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRHT(uint16_t value, volatile uint16_t *ptr)
{
   __asm volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 1150 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRT(uint32_t value, volatile uint32_t *ptr)
{
   __asm volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
}
# 1352 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __SADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usad8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("usada8 %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

#define __SSAT16(ARG1,ARG2) ({ int32_t __RES, __ARG1 = (ARG1); __ASM ("ssat16 %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })






#define __USAT16(ARG1,ARG2) ({ uint32_t __RES, __ARG1 = (ARG1); __ASM ("usat16 %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })






__attribute__((always_inline)) static inline uint32_t __UXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUAD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUADX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLALD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLALDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SMUSD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsd %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsld %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SEL (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sel %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QADD( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QSUB( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qsub %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
# 1879 "asf4/samd51/CMSIS/Include/cmsis_gcc.h"
#define __PKHBT(ARG1,ARG2,ARG3) ( ((((uint32_t)(ARG1)) ) & 0x0000FFFFUL) | ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL) )


#define __PKHTB(ARG1,ARG2,ARG3) ( ((((uint32_t)(ARG1)) ) & 0xFFFF0000UL) | ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL) )


__attribute__((always_inline)) static inline int32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)
{
 int32_t result;

 __asm volatile ("smmla %0, %1, %2, %3" : "=r" (result): "r" (op1), "r" (op2), "r" (op3) );
 return(result);
}





#pragma GCC diagnostic pop
# 49 "asf4/samd51/CMSIS/Include/cmsis_compiler.h" 2
# 161 "asf4/samd51/CMSIS/Include/core_cm4.h" 2
# 172 "asf4/samd51/CMSIS/Include/core_cm4.h"
#define __CORE_CM4_H_DEPENDANT 
# 217 "asf4/samd51/CMSIS/Include/core_cm4.h"
#define __I volatile const

#define __O volatile
#define __IO volatile


#define __IM volatile const
#define __OM volatile
#define __IOM volatile
# 257 "asf4/samd51/CMSIS/Include/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t _reserved0:16;
    uint32_t GE:4;
    uint32_t _reserved1:7;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} APSR_Type;


#define APSR_N_Pos 31U
#define APSR_N_Msk (1UL << APSR_N_Pos)

#define APSR_Z_Pos 30U
#define APSR_Z_Msk (1UL << APSR_Z_Pos)

#define APSR_C_Pos 29U
#define APSR_C_Msk (1UL << APSR_C_Pos)

#define APSR_V_Pos 28U
#define APSR_V_Msk (1UL << APSR_V_Pos)

#define APSR_Q_Pos 27U
#define APSR_Q_Msk (1UL << APSR_Q_Pos)

#define APSR_GE_Pos 16U
#define APSR_GE_Msk (0xFUL << APSR_GE_Pos)





typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:23;
  } b;
  uint32_t w;
} IPSR_Type;


#define IPSR_ISR_Pos 0U
#define IPSR_ISR_Msk (0x1FFUL )





typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:1;
    uint32_t ICI_IT_1:6;
    uint32_t GE:4;
    uint32_t _reserved1:4;
    uint32_t T:1;
    uint32_t ICI_IT_2:2;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} xPSR_Type;


#define xPSR_N_Pos 31U
#define xPSR_N_Msk (1UL << xPSR_N_Pos)

#define xPSR_Z_Pos 30U
#define xPSR_Z_Msk (1UL << xPSR_Z_Pos)

#define xPSR_C_Pos 29U
#define xPSR_C_Msk (1UL << xPSR_C_Pos)

#define xPSR_V_Pos 28U
#define xPSR_V_Msk (1UL << xPSR_V_Pos)

#define xPSR_Q_Pos 27U
#define xPSR_Q_Msk (1UL << xPSR_Q_Pos)

#define xPSR_ICI_IT_2_Pos 25U
#define xPSR_ICI_IT_2_Msk (3UL << xPSR_ICI_IT_2_Pos)

#define xPSR_T_Pos 24U
#define xPSR_T_Msk (1UL << xPSR_T_Pos)

#define xPSR_GE_Pos 16U
#define xPSR_GE_Msk (0xFUL << xPSR_GE_Pos)

#define xPSR_ICI_IT_1_Pos 10U
#define xPSR_ICI_IT_1_Msk (0x3FUL << xPSR_ICI_IT_1_Pos)

#define xPSR_ISR_Pos 0U
#define xPSR_ISR_Msk (0x1FFUL )





typedef union
{
  struct
  {
    uint32_t nPRIV:1;
    uint32_t SPSEL:1;
    uint32_t FPCA:1;
    uint32_t _reserved0:29;
  } b;
  uint32_t w;
} CONTROL_Type;


#define CONTROL_FPCA_Pos 2U
#define CONTROL_FPCA_Msk (1UL << CONTROL_FPCA_Pos)

#define CONTROL_SPSEL_Pos 1U
#define CONTROL_SPSEL_Msk (1UL << CONTROL_SPSEL_Pos)

#define CONTROL_nPRIV_Pos 0U
#define CONTROL_nPRIV_Msk (1UL )
# 404 "asf4/samd51/CMSIS/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t ISER[8U];
        uint32_t RESERVED0[24U];
  volatile uint32_t ICER[8U];
        uint32_t RSERVED1[24U];
  volatile uint32_t ISPR[8U];
        uint32_t RESERVED2[24U];
  volatile uint32_t ICPR[8U];
        uint32_t RESERVED3[24U];
  volatile uint32_t IABR[8U];
        uint32_t RESERVED4[56U];
  volatile uint8_t IP[240U];
        uint32_t RESERVED5[644U];
  volatile uint32_t STIR;
} NVIC_Type;


#define NVIC_STIR_INTID_Pos 0U
#define NVIC_STIR_INTID_Msk (0x1FFUL )
# 438 "asf4/samd51/CMSIS/Include/core_cm4.h"
typedef struct
{
  volatile const uint32_t CPUID;
  volatile uint32_t ICSR;
  volatile uint32_t VTOR;
  volatile uint32_t AIRCR;
  volatile uint32_t SCR;
  volatile uint32_t CCR;
  volatile uint8_t SHP[12U];
  volatile uint32_t SHCSR;
  volatile uint32_t CFSR;
  volatile uint32_t HFSR;
  volatile uint32_t DFSR;
  volatile uint32_t MMFAR;
  volatile uint32_t BFAR;
  volatile uint32_t AFSR;
  volatile const uint32_t PFR[2U];
  volatile const uint32_t DFR;
  volatile const uint32_t ADR;
  volatile const uint32_t MMFR[4U];
  volatile const uint32_t ISAR[5U];
        uint32_t RESERVED0[5U];
  volatile uint32_t CPACR;
} SCB_Type;


#define SCB_CPUID_IMPLEMENTER_Pos 24U
#define SCB_CPUID_IMPLEMENTER_Msk (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)

#define SCB_CPUID_VARIANT_Pos 20U
#define SCB_CPUID_VARIANT_Msk (0xFUL << SCB_CPUID_VARIANT_Pos)

#define SCB_CPUID_ARCHITECTURE_Pos 16U
#define SCB_CPUID_ARCHITECTURE_Msk (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)

#define SCB_CPUID_PARTNO_Pos 4U
#define SCB_CPUID_PARTNO_Msk (0xFFFUL << SCB_CPUID_PARTNO_Pos)

#define SCB_CPUID_REVISION_Pos 0U
#define SCB_CPUID_REVISION_Msk (0xFUL )


#define SCB_ICSR_NMIPENDSET_Pos 31U
#define SCB_ICSR_NMIPENDSET_Msk (1UL << SCB_ICSR_NMIPENDSET_Pos)

#define SCB_ICSR_PENDSVSET_Pos 28U
#define SCB_ICSR_PENDSVSET_Msk (1UL << SCB_ICSR_PENDSVSET_Pos)

#define SCB_ICSR_PENDSVCLR_Pos 27U
#define SCB_ICSR_PENDSVCLR_Msk (1UL << SCB_ICSR_PENDSVCLR_Pos)

#define SCB_ICSR_PENDSTSET_Pos 26U
#define SCB_ICSR_PENDSTSET_Msk (1UL << SCB_ICSR_PENDSTSET_Pos)

#define SCB_ICSR_PENDSTCLR_Pos 25U
#define SCB_ICSR_PENDSTCLR_Msk (1UL << SCB_ICSR_PENDSTCLR_Pos)

#define SCB_ICSR_ISRPREEMPT_Pos 23U
#define SCB_ICSR_ISRPREEMPT_Msk (1UL << SCB_ICSR_ISRPREEMPT_Pos)

#define SCB_ICSR_ISRPENDING_Pos 22U
#define SCB_ICSR_ISRPENDING_Msk (1UL << SCB_ICSR_ISRPENDING_Pos)

#define SCB_ICSR_VECTPENDING_Pos 12U
#define SCB_ICSR_VECTPENDING_Msk (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)

#define SCB_ICSR_RETTOBASE_Pos 11U
#define SCB_ICSR_RETTOBASE_Msk (1UL << SCB_ICSR_RETTOBASE_Pos)

#define SCB_ICSR_VECTACTIVE_Pos 0U
#define SCB_ICSR_VECTACTIVE_Msk (0x1FFUL )


#define SCB_VTOR_TBLOFF_Pos 7U
#define SCB_VTOR_TBLOFF_Msk (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)


#define SCB_AIRCR_VECTKEY_Pos 16U
#define SCB_AIRCR_VECTKEY_Msk (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)

#define SCB_AIRCR_VECTKEYSTAT_Pos 16U
#define SCB_AIRCR_VECTKEYSTAT_Msk (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)

#define SCB_AIRCR_ENDIANESS_Pos 15U
#define SCB_AIRCR_ENDIANESS_Msk (1UL << SCB_AIRCR_ENDIANESS_Pos)

#define SCB_AIRCR_PRIGROUP_Pos 8U
#define SCB_AIRCR_PRIGROUP_Msk (7UL << SCB_AIRCR_PRIGROUP_Pos)

#define SCB_AIRCR_SYSRESETREQ_Pos 2U
#define SCB_AIRCR_SYSRESETREQ_Msk (1UL << SCB_AIRCR_SYSRESETREQ_Pos)

#define SCB_AIRCR_VECTCLRACTIVE_Pos 1U
#define SCB_AIRCR_VECTCLRACTIVE_Msk (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)

#define SCB_AIRCR_VECTRESET_Pos 0U
#define SCB_AIRCR_VECTRESET_Msk (1UL )


#define SCB_SCR_SEVONPEND_Pos 4U
#define SCB_SCR_SEVONPEND_Msk (1UL << SCB_SCR_SEVONPEND_Pos)

#define SCB_SCR_SLEEPDEEP_Pos 2U
#define SCB_SCR_SLEEPDEEP_Msk (1UL << SCB_SCR_SLEEPDEEP_Pos)

#define SCB_SCR_SLEEPONEXIT_Pos 1U
#define SCB_SCR_SLEEPONEXIT_Msk (1UL << SCB_SCR_SLEEPONEXIT_Pos)


#define SCB_CCR_STKALIGN_Pos 9U
#define SCB_CCR_STKALIGN_Msk (1UL << SCB_CCR_STKALIGN_Pos)

#define SCB_CCR_BFHFNMIGN_Pos 8U
#define SCB_CCR_BFHFNMIGN_Msk (1UL << SCB_CCR_BFHFNMIGN_Pos)

#define SCB_CCR_DIV_0_TRP_Pos 4U
#define SCB_CCR_DIV_0_TRP_Msk (1UL << SCB_CCR_DIV_0_TRP_Pos)

#define SCB_CCR_UNALIGN_TRP_Pos 3U
#define SCB_CCR_UNALIGN_TRP_Msk (1UL << SCB_CCR_UNALIGN_TRP_Pos)

#define SCB_CCR_USERSETMPEND_Pos 1U
#define SCB_CCR_USERSETMPEND_Msk (1UL << SCB_CCR_USERSETMPEND_Pos)

#define SCB_CCR_NONBASETHRDENA_Pos 0U
#define SCB_CCR_NONBASETHRDENA_Msk (1UL )


#define SCB_SHCSR_USGFAULTENA_Pos 18U
#define SCB_SHCSR_USGFAULTENA_Msk (1UL << SCB_SHCSR_USGFAULTENA_Pos)

#define SCB_SHCSR_BUSFAULTENA_Pos 17U
#define SCB_SHCSR_BUSFAULTENA_Msk (1UL << SCB_SHCSR_BUSFAULTENA_Pos)

#define SCB_SHCSR_MEMFAULTENA_Pos 16U
#define SCB_SHCSR_MEMFAULTENA_Msk (1UL << SCB_SHCSR_MEMFAULTENA_Pos)

#define SCB_SHCSR_SVCALLPENDED_Pos 15U
#define SCB_SHCSR_SVCALLPENDED_Msk (1UL << SCB_SHCSR_SVCALLPENDED_Pos)

#define SCB_SHCSR_BUSFAULTPENDED_Pos 14U
#define SCB_SHCSR_BUSFAULTPENDED_Msk (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)

#define SCB_SHCSR_MEMFAULTPENDED_Pos 13U
#define SCB_SHCSR_MEMFAULTPENDED_Msk (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)

#define SCB_SHCSR_USGFAULTPENDED_Pos 12U
#define SCB_SHCSR_USGFAULTPENDED_Msk (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)

#define SCB_SHCSR_SYSTICKACT_Pos 11U
#define SCB_SHCSR_SYSTICKACT_Msk (1UL << SCB_SHCSR_SYSTICKACT_Pos)

#define SCB_SHCSR_PENDSVACT_Pos 10U
#define SCB_SHCSR_PENDSVACT_Msk (1UL << SCB_SHCSR_PENDSVACT_Pos)

#define SCB_SHCSR_MONITORACT_Pos 8U
#define SCB_SHCSR_MONITORACT_Msk (1UL << SCB_SHCSR_MONITORACT_Pos)

#define SCB_SHCSR_SVCALLACT_Pos 7U
#define SCB_SHCSR_SVCALLACT_Msk (1UL << SCB_SHCSR_SVCALLACT_Pos)

#define SCB_SHCSR_USGFAULTACT_Pos 3U
#define SCB_SHCSR_USGFAULTACT_Msk (1UL << SCB_SHCSR_USGFAULTACT_Pos)

#define SCB_SHCSR_BUSFAULTACT_Pos 1U
#define SCB_SHCSR_BUSFAULTACT_Msk (1UL << SCB_SHCSR_BUSFAULTACT_Pos)

#define SCB_SHCSR_MEMFAULTACT_Pos 0U
#define SCB_SHCSR_MEMFAULTACT_Msk (1UL )


#define SCB_CFSR_USGFAULTSR_Pos 16U
#define SCB_CFSR_USGFAULTSR_Msk (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)

#define SCB_CFSR_BUSFAULTSR_Pos 8U
#define SCB_CFSR_BUSFAULTSR_Msk (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)

#define SCB_CFSR_MEMFAULTSR_Pos 0U
#define SCB_CFSR_MEMFAULTSR_Msk (0xFFUL )


#define SCB_CFSR_MMARVALID_Pos (SCB_SHCSR_MEMFAULTACT_Pos + 7U)
#define SCB_CFSR_MMARVALID_Msk (1UL << SCB_CFSR_MMARVALID_Pos)

#define SCB_CFSR_MLSPERR_Pos (SCB_SHCSR_MEMFAULTACT_Pos + 5U)
#define SCB_CFSR_MLSPERR_Msk (1UL << SCB_CFSR_MLSPERR_Pos)

#define SCB_CFSR_MSTKERR_Pos (SCB_SHCSR_MEMFAULTACT_Pos + 4U)
#define SCB_CFSR_MSTKERR_Msk (1UL << SCB_CFSR_MSTKERR_Pos)

#define SCB_CFSR_MUNSTKERR_Pos (SCB_SHCSR_MEMFAULTACT_Pos + 3U)
#define SCB_CFSR_MUNSTKERR_Msk (1UL << SCB_CFSR_MUNSTKERR_Pos)

#define SCB_CFSR_DACCVIOL_Pos (SCB_SHCSR_MEMFAULTACT_Pos + 1U)
#define SCB_CFSR_DACCVIOL_Msk (1UL << SCB_CFSR_DACCVIOL_Pos)

#define SCB_CFSR_IACCVIOL_Pos (SCB_SHCSR_MEMFAULTACT_Pos + 0U)
#define SCB_CFSR_IACCVIOL_Msk (1UL )


#define SCB_CFSR_BFARVALID_Pos (SCB_CFSR_BUSFAULTSR_Pos + 7U)
#define SCB_CFSR_BFARVALID_Msk (1UL << SCB_CFSR_BFARVALID_Pos)

#define SCB_CFSR_LSPERR_Pos (SCB_CFSR_BUSFAULTSR_Pos + 5U)
#define SCB_CFSR_LSPERR_Msk (1UL << SCB_CFSR_LSPERR_Pos)

#define SCB_CFSR_STKERR_Pos (SCB_CFSR_BUSFAULTSR_Pos + 4U)
#define SCB_CFSR_STKERR_Msk (1UL << SCB_CFSR_STKERR_Pos)

#define SCB_CFSR_UNSTKERR_Pos (SCB_CFSR_BUSFAULTSR_Pos + 3U)
#define SCB_CFSR_UNSTKERR_Msk (1UL << SCB_CFSR_UNSTKERR_Pos)

#define SCB_CFSR_IMPRECISERR_Pos (SCB_CFSR_BUSFAULTSR_Pos + 2U)
#define SCB_CFSR_IMPRECISERR_Msk (1UL << SCB_CFSR_IMPRECISERR_Pos)

#define SCB_CFSR_PRECISERR_Pos (SCB_CFSR_BUSFAULTSR_Pos + 1U)
#define SCB_CFSR_PRECISERR_Msk (1UL << SCB_CFSR_PRECISERR_Pos)

#define SCB_CFSR_IBUSERR_Pos (SCB_CFSR_BUSFAULTSR_Pos + 0U)
#define SCB_CFSR_IBUSERR_Msk (1UL << SCB_CFSR_IBUSERR_Pos)


#define SCB_CFSR_DIVBYZERO_Pos (SCB_CFSR_USGFAULTSR_Pos + 9U)
#define SCB_CFSR_DIVBYZERO_Msk (1UL << SCB_CFSR_DIVBYZERO_Pos)

#define SCB_CFSR_UNALIGNED_Pos (SCB_CFSR_USGFAULTSR_Pos + 8U)
#define SCB_CFSR_UNALIGNED_Msk (1UL << SCB_CFSR_UNALIGNED_Pos)

#define SCB_CFSR_NOCP_Pos (SCB_CFSR_USGFAULTSR_Pos + 3U)
#define SCB_CFSR_NOCP_Msk (1UL << SCB_CFSR_NOCP_Pos)

#define SCB_CFSR_INVPC_Pos (SCB_CFSR_USGFAULTSR_Pos + 2U)
#define SCB_CFSR_INVPC_Msk (1UL << SCB_CFSR_INVPC_Pos)

#define SCB_CFSR_INVSTATE_Pos (SCB_CFSR_USGFAULTSR_Pos + 1U)
#define SCB_CFSR_INVSTATE_Msk (1UL << SCB_CFSR_INVSTATE_Pos)

#define SCB_CFSR_UNDEFINSTR_Pos (SCB_CFSR_USGFAULTSR_Pos + 0U)
#define SCB_CFSR_UNDEFINSTR_Msk (1UL << SCB_CFSR_UNDEFINSTR_Pos)


#define SCB_HFSR_DEBUGEVT_Pos 31U
#define SCB_HFSR_DEBUGEVT_Msk (1UL << SCB_HFSR_DEBUGEVT_Pos)

#define SCB_HFSR_FORCED_Pos 30U
#define SCB_HFSR_FORCED_Msk (1UL << SCB_HFSR_FORCED_Pos)

#define SCB_HFSR_VECTTBL_Pos 1U
#define SCB_HFSR_VECTTBL_Msk (1UL << SCB_HFSR_VECTTBL_Pos)


#define SCB_DFSR_EXTERNAL_Pos 4U
#define SCB_DFSR_EXTERNAL_Msk (1UL << SCB_DFSR_EXTERNAL_Pos)

#define SCB_DFSR_VCATCH_Pos 3U
#define SCB_DFSR_VCATCH_Msk (1UL << SCB_DFSR_VCATCH_Pos)

#define SCB_DFSR_DWTTRAP_Pos 2U
#define SCB_DFSR_DWTTRAP_Msk (1UL << SCB_DFSR_DWTTRAP_Pos)

#define SCB_DFSR_BKPT_Pos 1U
#define SCB_DFSR_BKPT_Msk (1UL << SCB_DFSR_BKPT_Pos)

#define SCB_DFSR_HALTED_Pos 0U
#define SCB_DFSR_HALTED_Msk (1UL )
# 717 "asf4/samd51/CMSIS/Include/core_cm4.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile const uint32_t ICTR;
  volatile uint32_t ACTLR;
} SCnSCB_Type;


#define SCnSCB_ICTR_INTLINESNUM_Pos 0U
#define SCnSCB_ICTR_INTLINESNUM_Msk (0xFUL )


#define SCnSCB_ACTLR_DISOOFP_Pos 9U
#define SCnSCB_ACTLR_DISOOFP_Msk (1UL << SCnSCB_ACTLR_DISOOFP_Pos)

#define SCnSCB_ACTLR_DISFPCA_Pos 8U
#define SCnSCB_ACTLR_DISFPCA_Msk (1UL << SCnSCB_ACTLR_DISFPCA_Pos)

#define SCnSCB_ACTLR_DISFOLD_Pos 2U
#define SCnSCB_ACTLR_DISFOLD_Msk (1UL << SCnSCB_ACTLR_DISFOLD_Pos)

#define SCnSCB_ACTLR_DISDEFWBUF_Pos 1U
#define SCnSCB_ACTLR_DISDEFWBUF_Msk (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)

#define SCnSCB_ACTLR_DISMCYCINT_Pos 0U
#define SCnSCB_ACTLR_DISMCYCINT_Msk (1UL )
# 757 "asf4/samd51/CMSIS/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t LOAD;
  volatile uint32_t VAL;
  volatile const uint32_t CALIB;
} SysTick_Type;


#define SysTick_CTRL_COUNTFLAG_Pos 16U
#define SysTick_CTRL_COUNTFLAG_Msk (1UL << SysTick_CTRL_COUNTFLAG_Pos)

#define SysTick_CTRL_CLKSOURCE_Pos 2U
#define SysTick_CTRL_CLKSOURCE_Msk (1UL << SysTick_CTRL_CLKSOURCE_Pos)

#define SysTick_CTRL_TICKINT_Pos 1U
#define SysTick_CTRL_TICKINT_Msk (1UL << SysTick_CTRL_TICKINT_Pos)

#define SysTick_CTRL_ENABLE_Pos 0U
#define SysTick_CTRL_ENABLE_Msk (1UL )


#define SysTick_LOAD_RELOAD_Pos 0U
#define SysTick_LOAD_RELOAD_Msk (0xFFFFFFUL )


#define SysTick_VAL_CURRENT_Pos 0U
#define SysTick_VAL_CURRENT_Msk (0xFFFFFFUL )


#define SysTick_CALIB_NOREF_Pos 31U
#define SysTick_CALIB_NOREF_Msk (1UL << SysTick_CALIB_NOREF_Pos)

#define SysTick_CALIB_SKEW_Pos 30U
#define SysTick_CALIB_SKEW_Msk (1UL << SysTick_CALIB_SKEW_Pos)

#define SysTick_CALIB_TENMS_Pos 0U
#define SysTick_CALIB_TENMS_Msk (0xFFFFFFUL )
# 809 "asf4/samd51/CMSIS/Include/core_cm4.h"
typedef struct
{
  volatile union
  {
    volatile uint8_t u8;
    volatile uint16_t u16;
    volatile uint32_t u32;
  } PORT [32U];
        uint32_t RESERVED0[864U];
  volatile uint32_t TER;
        uint32_t RESERVED1[15U];
  volatile uint32_t TPR;
        uint32_t RESERVED2[15U];
  volatile uint32_t TCR;
        uint32_t RESERVED3[29U];
  volatile uint32_t IWR;
  volatile const uint32_t IRR;
  volatile uint32_t IMCR;
        uint32_t RESERVED4[43U];
  volatile uint32_t LAR;
  volatile const uint32_t LSR;
        uint32_t RESERVED5[6U];
  volatile const uint32_t PID4;
  volatile const uint32_t PID5;
  volatile const uint32_t PID6;
  volatile const uint32_t PID7;
  volatile const uint32_t PID0;
  volatile const uint32_t PID1;
  volatile const uint32_t PID2;
  volatile const uint32_t PID3;
  volatile const uint32_t CID0;
  volatile const uint32_t CID1;
  volatile const uint32_t CID2;
  volatile const uint32_t CID3;
} ITM_Type;


#define ITM_TPR_PRIVMASK_Pos 0U
#define ITM_TPR_PRIVMASK_Msk (0xFUL )


#define ITM_TCR_BUSY_Pos 23U
#define ITM_TCR_BUSY_Msk (1UL << ITM_TCR_BUSY_Pos)

#define ITM_TCR_TraceBusID_Pos 16U
#define ITM_TCR_TraceBusID_Msk (0x7FUL << ITM_TCR_TraceBusID_Pos)

#define ITM_TCR_GTSFREQ_Pos 10U
#define ITM_TCR_GTSFREQ_Msk (3UL << ITM_TCR_GTSFREQ_Pos)

#define ITM_TCR_TSPrescale_Pos 8U
#define ITM_TCR_TSPrescale_Msk (3UL << ITM_TCR_TSPrescale_Pos)

#define ITM_TCR_SWOENA_Pos 4U
#define ITM_TCR_SWOENA_Msk (1UL << ITM_TCR_SWOENA_Pos)

#define ITM_TCR_DWTENA_Pos 3U
#define ITM_TCR_DWTENA_Msk (1UL << ITM_TCR_DWTENA_Pos)

#define ITM_TCR_SYNCENA_Pos 2U
#define ITM_TCR_SYNCENA_Msk (1UL << ITM_TCR_SYNCENA_Pos)

#define ITM_TCR_TSENA_Pos 1U
#define ITM_TCR_TSENA_Msk (1UL << ITM_TCR_TSENA_Pos)

#define ITM_TCR_ITMENA_Pos 0U
#define ITM_TCR_ITMENA_Msk (1UL )


#define ITM_IWR_ATVALIDM_Pos 0U
#define ITM_IWR_ATVALIDM_Msk (1UL )


#define ITM_IRR_ATREADYM_Pos 0U
#define ITM_IRR_ATREADYM_Msk (1UL )


#define ITM_IMCR_INTEGRATION_Pos 0U
#define ITM_IMCR_INTEGRATION_Msk (1UL )


#define ITM_LSR_ByteAcc_Pos 2U
#define ITM_LSR_ByteAcc_Msk (1UL << ITM_LSR_ByteAcc_Pos)

#define ITM_LSR_Access_Pos 1U
#define ITM_LSR_Access_Msk (1UL << ITM_LSR_Access_Pos)

#define ITM_LSR_Present_Pos 0U
#define ITM_LSR_Present_Msk (1UL )
# 912 "asf4/samd51/CMSIS/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t CYCCNT;
  volatile uint32_t CPICNT;
  volatile uint32_t EXCCNT;
  volatile uint32_t SLEEPCNT;
  volatile uint32_t LSUCNT;
  volatile uint32_t FOLDCNT;
  volatile const uint32_t PCSR;
  volatile uint32_t COMP0;
  volatile uint32_t MASK0;
  volatile uint32_t FUNCTION0;
        uint32_t RESERVED0[1U];
  volatile uint32_t COMP1;
  volatile uint32_t MASK1;
  volatile uint32_t FUNCTION1;
        uint32_t RESERVED1[1U];
  volatile uint32_t COMP2;
  volatile uint32_t MASK2;
  volatile uint32_t FUNCTION2;
        uint32_t RESERVED2[1U];
  volatile uint32_t COMP3;
  volatile uint32_t MASK3;
  volatile uint32_t FUNCTION3;
} DWT_Type;


#define DWT_CTRL_NUMCOMP_Pos 28U
#define DWT_CTRL_NUMCOMP_Msk (0xFUL << DWT_CTRL_NUMCOMP_Pos)

#define DWT_CTRL_NOTRCPKT_Pos 27U
#define DWT_CTRL_NOTRCPKT_Msk (0x1UL << DWT_CTRL_NOTRCPKT_Pos)

#define DWT_CTRL_NOEXTTRIG_Pos 26U
#define DWT_CTRL_NOEXTTRIG_Msk (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)

#define DWT_CTRL_NOCYCCNT_Pos 25U
#define DWT_CTRL_NOCYCCNT_Msk (0x1UL << DWT_CTRL_NOCYCCNT_Pos)

#define DWT_CTRL_NOPRFCNT_Pos 24U
#define DWT_CTRL_NOPRFCNT_Msk (0x1UL << DWT_CTRL_NOPRFCNT_Pos)

#define DWT_CTRL_CYCEVTENA_Pos 22U
#define DWT_CTRL_CYCEVTENA_Msk (0x1UL << DWT_CTRL_CYCEVTENA_Pos)

#define DWT_CTRL_FOLDEVTENA_Pos 21U
#define DWT_CTRL_FOLDEVTENA_Msk (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)

#define DWT_CTRL_LSUEVTENA_Pos 20U
#define DWT_CTRL_LSUEVTENA_Msk (0x1UL << DWT_CTRL_LSUEVTENA_Pos)

#define DWT_CTRL_SLEEPEVTENA_Pos 19U
#define DWT_CTRL_SLEEPEVTENA_Msk (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)

#define DWT_CTRL_EXCEVTENA_Pos 18U
#define DWT_CTRL_EXCEVTENA_Msk (0x1UL << DWT_CTRL_EXCEVTENA_Pos)

#define DWT_CTRL_CPIEVTENA_Pos 17U
#define DWT_CTRL_CPIEVTENA_Msk (0x1UL << DWT_CTRL_CPIEVTENA_Pos)

#define DWT_CTRL_EXCTRCENA_Pos 16U
#define DWT_CTRL_EXCTRCENA_Msk (0x1UL << DWT_CTRL_EXCTRCENA_Pos)

#define DWT_CTRL_PCSAMPLENA_Pos 12U
#define DWT_CTRL_PCSAMPLENA_Msk (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)

#define DWT_CTRL_SYNCTAP_Pos 10U
#define DWT_CTRL_SYNCTAP_Msk (0x3UL << DWT_CTRL_SYNCTAP_Pos)

#define DWT_CTRL_CYCTAP_Pos 9U
#define DWT_CTRL_CYCTAP_Msk (0x1UL << DWT_CTRL_CYCTAP_Pos)

#define DWT_CTRL_POSTINIT_Pos 5U
#define DWT_CTRL_POSTINIT_Msk (0xFUL << DWT_CTRL_POSTINIT_Pos)

#define DWT_CTRL_POSTPRESET_Pos 1U
#define DWT_CTRL_POSTPRESET_Msk (0xFUL << DWT_CTRL_POSTPRESET_Pos)

#define DWT_CTRL_CYCCNTENA_Pos 0U
#define DWT_CTRL_CYCCNTENA_Msk (0x1UL )


#define DWT_CPICNT_CPICNT_Pos 0U
#define DWT_CPICNT_CPICNT_Msk (0xFFUL )


#define DWT_EXCCNT_EXCCNT_Pos 0U
#define DWT_EXCCNT_EXCCNT_Msk (0xFFUL )


#define DWT_SLEEPCNT_SLEEPCNT_Pos 0U
#define DWT_SLEEPCNT_SLEEPCNT_Msk (0xFFUL )


#define DWT_LSUCNT_LSUCNT_Pos 0U
#define DWT_LSUCNT_LSUCNT_Msk (0xFFUL )


#define DWT_FOLDCNT_FOLDCNT_Pos 0U
#define DWT_FOLDCNT_FOLDCNT_Msk (0xFFUL )


#define DWT_MASK_MASK_Pos 0U
#define DWT_MASK_MASK_Msk (0x1FUL )


#define DWT_FUNCTION_MATCHED_Pos 24U
#define DWT_FUNCTION_MATCHED_Msk (0x1UL << DWT_FUNCTION_MATCHED_Pos)

#define DWT_FUNCTION_DATAVADDR1_Pos 16U
#define DWT_FUNCTION_DATAVADDR1_Msk (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)

#define DWT_FUNCTION_DATAVADDR0_Pos 12U
#define DWT_FUNCTION_DATAVADDR0_Msk (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)

#define DWT_FUNCTION_DATAVSIZE_Pos 10U
#define DWT_FUNCTION_DATAVSIZE_Msk (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)

#define DWT_FUNCTION_LNK1ENA_Pos 9U
#define DWT_FUNCTION_LNK1ENA_Msk (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)

#define DWT_FUNCTION_DATAVMATCH_Pos 8U
#define DWT_FUNCTION_DATAVMATCH_Msk (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)

#define DWT_FUNCTION_CYCMATCH_Pos 7U
#define DWT_FUNCTION_CYCMATCH_Msk (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)

#define DWT_FUNCTION_EMITRANGE_Pos 5U
#define DWT_FUNCTION_EMITRANGE_Msk (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)

#define DWT_FUNCTION_FUNCTION_Pos 0U
#define DWT_FUNCTION_FUNCTION_Msk (0xFUL )
# 1059 "asf4/samd51/CMSIS/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t SSPSR;
  volatile uint32_t CSPSR;
        uint32_t RESERVED0[2U];
  volatile uint32_t ACPR;
        uint32_t RESERVED1[55U];
  volatile uint32_t SPPR;
        uint32_t RESERVED2[131U];
  volatile const uint32_t FFSR;
  volatile uint32_t FFCR;
  volatile const uint32_t FSCR;
        uint32_t RESERVED3[759U];
  volatile const uint32_t TRIGGER;
  volatile const uint32_t FIFO0;
  volatile const uint32_t ITATBCTR2;
        uint32_t RESERVED4[1U];
  volatile const uint32_t ITATBCTR0;
  volatile const uint32_t FIFO1;
  volatile uint32_t ITCTRL;
        uint32_t RESERVED5[39U];
  volatile uint32_t CLAIMSET;
  volatile uint32_t CLAIMCLR;
        uint32_t RESERVED7[8U];
  volatile const uint32_t DEVID;
  volatile const uint32_t DEVTYPE;
} TPI_Type;


#define TPI_ACPR_PRESCALER_Pos 0U
#define TPI_ACPR_PRESCALER_Msk (0x1FFFUL )


#define TPI_SPPR_TXMODE_Pos 0U
#define TPI_SPPR_TXMODE_Msk (0x3UL )


#define TPI_FFSR_FtNonStop_Pos 3U
#define TPI_FFSR_FtNonStop_Msk (0x1UL << TPI_FFSR_FtNonStop_Pos)

#define TPI_FFSR_TCPresent_Pos 2U
#define TPI_FFSR_TCPresent_Msk (0x1UL << TPI_FFSR_TCPresent_Pos)

#define TPI_FFSR_FtStopped_Pos 1U
#define TPI_FFSR_FtStopped_Msk (0x1UL << TPI_FFSR_FtStopped_Pos)

#define TPI_FFSR_FlInProg_Pos 0U
#define TPI_FFSR_FlInProg_Msk (0x1UL )


#define TPI_FFCR_TrigIn_Pos 8U
#define TPI_FFCR_TrigIn_Msk (0x1UL << TPI_FFCR_TrigIn_Pos)

#define TPI_FFCR_EnFCont_Pos 1U
#define TPI_FFCR_EnFCont_Msk (0x1UL << TPI_FFCR_EnFCont_Pos)


#define TPI_TRIGGER_TRIGGER_Pos 0U
#define TPI_TRIGGER_TRIGGER_Msk (0x1UL )


#define TPI_FIFO0_ITM_ATVALID_Pos 29U
#define TPI_FIFO0_ITM_ATVALID_Msk (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)

#define TPI_FIFO0_ITM_bytecount_Pos 27U
#define TPI_FIFO0_ITM_bytecount_Msk (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)

#define TPI_FIFO0_ETM_ATVALID_Pos 26U
#define TPI_FIFO0_ETM_ATVALID_Msk (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)

#define TPI_FIFO0_ETM_bytecount_Pos 24U
#define TPI_FIFO0_ETM_bytecount_Msk (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)

#define TPI_FIFO0_ETM2_Pos 16U
#define TPI_FIFO0_ETM2_Msk (0xFFUL << TPI_FIFO0_ETM2_Pos)

#define TPI_FIFO0_ETM1_Pos 8U
#define TPI_FIFO0_ETM1_Msk (0xFFUL << TPI_FIFO0_ETM1_Pos)

#define TPI_FIFO0_ETM0_Pos 0U
#define TPI_FIFO0_ETM0_Msk (0xFFUL )


#define TPI_ITATBCTR2_ATREADY_Pos 0U
#define TPI_ITATBCTR2_ATREADY_Msk (0x1UL )


#define TPI_FIFO1_ITM_ATVALID_Pos 29U
#define TPI_FIFO1_ITM_ATVALID_Msk (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)

#define TPI_FIFO1_ITM_bytecount_Pos 27U
#define TPI_FIFO1_ITM_bytecount_Msk (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)

#define TPI_FIFO1_ETM_ATVALID_Pos 26U
#define TPI_FIFO1_ETM_ATVALID_Msk (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)

#define TPI_FIFO1_ETM_bytecount_Pos 24U
#define TPI_FIFO1_ETM_bytecount_Msk (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)

#define TPI_FIFO1_ITM2_Pos 16U
#define TPI_FIFO1_ITM2_Msk (0xFFUL << TPI_FIFO1_ITM2_Pos)

#define TPI_FIFO1_ITM1_Pos 8U
#define TPI_FIFO1_ITM1_Msk (0xFFUL << TPI_FIFO1_ITM1_Pos)

#define TPI_FIFO1_ITM0_Pos 0U
#define TPI_FIFO1_ITM0_Msk (0xFFUL )


#define TPI_ITATBCTR0_ATREADY_Pos 0U
#define TPI_ITATBCTR0_ATREADY_Msk (0x1UL )


#define TPI_ITCTRL_Mode_Pos 0U
#define TPI_ITCTRL_Mode_Msk (0x1UL )


#define TPI_DEVID_NRZVALID_Pos 11U
#define TPI_DEVID_NRZVALID_Msk (0x1UL << TPI_DEVID_NRZVALID_Pos)

#define TPI_DEVID_MANCVALID_Pos 10U
#define TPI_DEVID_MANCVALID_Msk (0x1UL << TPI_DEVID_MANCVALID_Pos)

#define TPI_DEVID_PTINVALID_Pos 9U
#define TPI_DEVID_PTINVALID_Msk (0x1UL << TPI_DEVID_PTINVALID_Pos)

#define TPI_DEVID_MinBufSz_Pos 6U
#define TPI_DEVID_MinBufSz_Msk (0x7UL << TPI_DEVID_MinBufSz_Pos)

#define TPI_DEVID_AsynClkIn_Pos 5U
#define TPI_DEVID_AsynClkIn_Msk (0x1UL << TPI_DEVID_AsynClkIn_Pos)

#define TPI_DEVID_NrTraceInput_Pos 0U
#define TPI_DEVID_NrTraceInput_Msk (0x1FUL )


#define TPI_DEVTYPE_MajorType_Pos 4U
#define TPI_DEVTYPE_MajorType_Msk (0xFUL << TPI_DEVTYPE_MajorType_Pos)

#define TPI_DEVTYPE_SubType_Pos 0U
#define TPI_DEVTYPE_SubType_Msk (0xFUL )
# 1215 "asf4/samd51/CMSIS/Include/core_cm4.h"
typedef struct
{
  volatile const uint32_t TYPE;
  volatile uint32_t CTRL;
  volatile uint32_t RNR;
  volatile uint32_t RBAR;
  volatile uint32_t RASR;
  volatile uint32_t RBAR_A1;
  volatile uint32_t RASR_A1;
  volatile uint32_t RBAR_A2;
  volatile uint32_t RASR_A2;
  volatile uint32_t RBAR_A3;
  volatile uint32_t RASR_A3;
} MPU_Type;


#define MPU_TYPE_IREGION_Pos 16U
#define MPU_TYPE_IREGION_Msk (0xFFUL << MPU_TYPE_IREGION_Pos)

#define MPU_TYPE_DREGION_Pos 8U
#define MPU_TYPE_DREGION_Msk (0xFFUL << MPU_TYPE_DREGION_Pos)

#define MPU_TYPE_SEPARATE_Pos 0U
#define MPU_TYPE_SEPARATE_Msk (1UL )


#define MPU_CTRL_PRIVDEFENA_Pos 2U
#define MPU_CTRL_PRIVDEFENA_Msk (1UL << MPU_CTRL_PRIVDEFENA_Pos)

#define MPU_CTRL_HFNMIENA_Pos 1U
#define MPU_CTRL_HFNMIENA_Msk (1UL << MPU_CTRL_HFNMIENA_Pos)

#define MPU_CTRL_ENABLE_Pos 0U
#define MPU_CTRL_ENABLE_Msk (1UL )


#define MPU_RNR_REGION_Pos 0U
#define MPU_RNR_REGION_Msk (0xFFUL )


#define MPU_RBAR_ADDR_Pos 5U
#define MPU_RBAR_ADDR_Msk (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)

#define MPU_RBAR_VALID_Pos 4U
#define MPU_RBAR_VALID_Msk (1UL << MPU_RBAR_VALID_Pos)

#define MPU_RBAR_REGION_Pos 0U
#define MPU_RBAR_REGION_Msk (0xFUL )


#define MPU_RASR_ATTRS_Pos 16U
#define MPU_RASR_ATTRS_Msk (0xFFFFUL << MPU_RASR_ATTRS_Pos)

#define MPU_RASR_XN_Pos 28U
#define MPU_RASR_XN_Msk (1UL << MPU_RASR_XN_Pos)

#define MPU_RASR_AP_Pos 24U
#define MPU_RASR_AP_Msk (0x7UL << MPU_RASR_AP_Pos)

#define MPU_RASR_TEX_Pos 19U
#define MPU_RASR_TEX_Msk (0x7UL << MPU_RASR_TEX_Pos)

#define MPU_RASR_S_Pos 18U
#define MPU_RASR_S_Msk (1UL << MPU_RASR_S_Pos)

#define MPU_RASR_C_Pos 17U
#define MPU_RASR_C_Msk (1UL << MPU_RASR_C_Pos)

#define MPU_RASR_B_Pos 16U
#define MPU_RASR_B_Msk (1UL << MPU_RASR_B_Pos)

#define MPU_RASR_SRD_Pos 8U
#define MPU_RASR_SRD_Msk (0xFFUL << MPU_RASR_SRD_Pos)

#define MPU_RASR_SIZE_Pos 1U
#define MPU_RASR_SIZE_Msk (0x1FUL << MPU_RASR_SIZE_Pos)

#define MPU_RASR_ENABLE_Pos 0U
#define MPU_RASR_ENABLE_Msk (1UL )
# 1309 "asf4/samd51/CMSIS/Include/core_cm4.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile uint32_t FPCCR;
  volatile uint32_t FPCAR;
  volatile uint32_t FPDSCR;
  volatile const uint32_t MVFR0;
  volatile const uint32_t MVFR1;
} FPU_Type;


#define FPU_FPCCR_ASPEN_Pos 31U
#define FPU_FPCCR_ASPEN_Msk (1UL << FPU_FPCCR_ASPEN_Pos)

#define FPU_FPCCR_LSPEN_Pos 30U
#define FPU_FPCCR_LSPEN_Msk (1UL << FPU_FPCCR_LSPEN_Pos)

#define FPU_FPCCR_MONRDY_Pos 8U
#define FPU_FPCCR_MONRDY_Msk (1UL << FPU_FPCCR_MONRDY_Pos)

#define FPU_FPCCR_BFRDY_Pos 6U
#define FPU_FPCCR_BFRDY_Msk (1UL << FPU_FPCCR_BFRDY_Pos)

#define FPU_FPCCR_MMRDY_Pos 5U
#define FPU_FPCCR_MMRDY_Msk (1UL << FPU_FPCCR_MMRDY_Pos)

#define FPU_FPCCR_HFRDY_Pos 4U
#define FPU_FPCCR_HFRDY_Msk (1UL << FPU_FPCCR_HFRDY_Pos)

#define FPU_FPCCR_THREAD_Pos 3U
#define FPU_FPCCR_THREAD_Msk (1UL << FPU_FPCCR_THREAD_Pos)

#define FPU_FPCCR_USER_Pos 1U
#define FPU_FPCCR_USER_Msk (1UL << FPU_FPCCR_USER_Pos)

#define FPU_FPCCR_LSPACT_Pos 0U
#define FPU_FPCCR_LSPACT_Msk (1UL )


#define FPU_FPCAR_ADDRESS_Pos 3U
#define FPU_FPCAR_ADDRESS_Msk (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)


#define FPU_FPDSCR_AHP_Pos 26U
#define FPU_FPDSCR_AHP_Msk (1UL << FPU_FPDSCR_AHP_Pos)

#define FPU_FPDSCR_DN_Pos 25U
#define FPU_FPDSCR_DN_Msk (1UL << FPU_FPDSCR_DN_Pos)

#define FPU_FPDSCR_FZ_Pos 24U
#define FPU_FPDSCR_FZ_Msk (1UL << FPU_FPDSCR_FZ_Pos)

#define FPU_FPDSCR_RMode_Pos 22U
#define FPU_FPDSCR_RMode_Msk (3UL << FPU_FPDSCR_RMode_Pos)


#define FPU_MVFR0_FP_rounding_modes_Pos 28U
#define FPU_MVFR0_FP_rounding_modes_Msk (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)

#define FPU_MVFR0_Short_vectors_Pos 24U
#define FPU_MVFR0_Short_vectors_Msk (0xFUL << FPU_MVFR0_Short_vectors_Pos)

#define FPU_MVFR0_Square_root_Pos 20U
#define FPU_MVFR0_Square_root_Msk (0xFUL << FPU_MVFR0_Square_root_Pos)

#define FPU_MVFR0_Divide_Pos 16U
#define FPU_MVFR0_Divide_Msk (0xFUL << FPU_MVFR0_Divide_Pos)

#define FPU_MVFR0_FP_excep_trapping_Pos 12U
#define FPU_MVFR0_FP_excep_trapping_Msk (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)

#define FPU_MVFR0_Double_precision_Pos 8U
#define FPU_MVFR0_Double_precision_Msk (0xFUL << FPU_MVFR0_Double_precision_Pos)

#define FPU_MVFR0_Single_precision_Pos 4U
#define FPU_MVFR0_Single_precision_Msk (0xFUL << FPU_MVFR0_Single_precision_Pos)

#define FPU_MVFR0_A_SIMD_registers_Pos 0U
#define FPU_MVFR0_A_SIMD_registers_Msk (0xFUL )


#define FPU_MVFR1_FP_fused_MAC_Pos 28U
#define FPU_MVFR1_FP_fused_MAC_Msk (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)

#define FPU_MVFR1_FP_HPFP_Pos 24U
#define FPU_MVFR1_FP_HPFP_Msk (0xFUL << FPU_MVFR1_FP_HPFP_Pos)

#define FPU_MVFR1_D_NaN_mode_Pos 4U
#define FPU_MVFR1_D_NaN_mode_Msk (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)

#define FPU_MVFR1_FtZ_mode_Pos 0U
#define FPU_MVFR1_FtZ_mode_Msk (0xFUL )
# 1415 "asf4/samd51/CMSIS/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t DHCSR;
  volatile uint32_t DCRSR;
  volatile uint32_t DCRDR;
  volatile uint32_t DEMCR;
} CoreDebug_Type;


#define CoreDebug_DHCSR_DBGKEY_Pos 16U
#define CoreDebug_DHCSR_DBGKEY_Msk (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)

#define CoreDebug_DHCSR_S_RESET_ST_Pos 25U
#define CoreDebug_DHCSR_S_RESET_ST_Msk (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)

#define CoreDebug_DHCSR_S_RETIRE_ST_Pos 24U
#define CoreDebug_DHCSR_S_RETIRE_ST_Msk (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)

#define CoreDebug_DHCSR_S_LOCKUP_Pos 19U
#define CoreDebug_DHCSR_S_LOCKUP_Msk (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)

#define CoreDebug_DHCSR_S_SLEEP_Pos 18U
#define CoreDebug_DHCSR_S_SLEEP_Msk (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)

#define CoreDebug_DHCSR_S_HALT_Pos 17U
#define CoreDebug_DHCSR_S_HALT_Msk (1UL << CoreDebug_DHCSR_S_HALT_Pos)

#define CoreDebug_DHCSR_S_REGRDY_Pos 16U
#define CoreDebug_DHCSR_S_REGRDY_Msk (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)

#define CoreDebug_DHCSR_C_SNAPSTALL_Pos 5U
#define CoreDebug_DHCSR_C_SNAPSTALL_Msk (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)

#define CoreDebug_DHCSR_C_MASKINTS_Pos 3U
#define CoreDebug_DHCSR_C_MASKINTS_Msk (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)

#define CoreDebug_DHCSR_C_STEP_Pos 2U
#define CoreDebug_DHCSR_C_STEP_Msk (1UL << CoreDebug_DHCSR_C_STEP_Pos)

#define CoreDebug_DHCSR_C_HALT_Pos 1U
#define CoreDebug_DHCSR_C_HALT_Msk (1UL << CoreDebug_DHCSR_C_HALT_Pos)

#define CoreDebug_DHCSR_C_DEBUGEN_Pos 0U
#define CoreDebug_DHCSR_C_DEBUGEN_Msk (1UL )


#define CoreDebug_DCRSR_REGWnR_Pos 16U
#define CoreDebug_DCRSR_REGWnR_Msk (1UL << CoreDebug_DCRSR_REGWnR_Pos)

#define CoreDebug_DCRSR_REGSEL_Pos 0U
#define CoreDebug_DCRSR_REGSEL_Msk (0x1FUL )


#define CoreDebug_DEMCR_TRCENA_Pos 24U
#define CoreDebug_DEMCR_TRCENA_Msk (1UL << CoreDebug_DEMCR_TRCENA_Pos)

#define CoreDebug_DEMCR_MON_REQ_Pos 19U
#define CoreDebug_DEMCR_MON_REQ_Msk (1UL << CoreDebug_DEMCR_MON_REQ_Pos)

#define CoreDebug_DEMCR_MON_STEP_Pos 18U
#define CoreDebug_DEMCR_MON_STEP_Msk (1UL << CoreDebug_DEMCR_MON_STEP_Pos)

#define CoreDebug_DEMCR_MON_PEND_Pos 17U
#define CoreDebug_DEMCR_MON_PEND_Msk (1UL << CoreDebug_DEMCR_MON_PEND_Pos)

#define CoreDebug_DEMCR_MON_EN_Pos 16U
#define CoreDebug_DEMCR_MON_EN_Msk (1UL << CoreDebug_DEMCR_MON_EN_Pos)

#define CoreDebug_DEMCR_VC_HARDERR_Pos 10U
#define CoreDebug_DEMCR_VC_HARDERR_Msk (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)

#define CoreDebug_DEMCR_VC_INTERR_Pos 9U
#define CoreDebug_DEMCR_VC_INTERR_Msk (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)

#define CoreDebug_DEMCR_VC_BUSERR_Pos 8U
#define CoreDebug_DEMCR_VC_BUSERR_Msk (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)

#define CoreDebug_DEMCR_VC_STATERR_Pos 7U
#define CoreDebug_DEMCR_VC_STATERR_Msk (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)

#define CoreDebug_DEMCR_VC_CHKERR_Pos 6U
#define CoreDebug_DEMCR_VC_CHKERR_Msk (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)

#define CoreDebug_DEMCR_VC_NOCPERR_Pos 5U
#define CoreDebug_DEMCR_VC_NOCPERR_Msk (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)

#define CoreDebug_DEMCR_VC_MMERR_Pos 4U
#define CoreDebug_DEMCR_VC_MMERR_Msk (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)

#define CoreDebug_DEMCR_VC_CORERESET_Pos 0U
#define CoreDebug_DEMCR_VC_CORERESET_Msk (1UL )
# 1523 "asf4/samd51/CMSIS/Include/core_cm4.h"
#define _VAL2FLD(field,value) (((uint32_t)(value) << field ## _Pos) & field ## _Msk)







#define _FLD2VAL(field,value) (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
# 1544 "asf4/samd51/CMSIS/Include/core_cm4.h"
#define SCS_BASE (0xE000E000UL)
#define ITM_BASE (0xE0000000UL)
#define DWT_BASE (0xE0001000UL)
#define TPI_BASE (0xE0040000UL)
#define CoreDebug_BASE (0xE000EDF0UL)
#define SysTick_BASE (SCS_BASE + 0x0010UL)
#define NVIC_BASE (SCS_BASE + 0x0100UL)
#define SCB_BASE (SCS_BASE + 0x0D00UL)

#define SCnSCB ((SCnSCB_Type *) SCS_BASE )
#define SCB ((SCB_Type *) SCB_BASE )
#define SysTick ((SysTick_Type *) SysTick_BASE )
#define NVIC ((NVIC_Type *) NVIC_BASE )
#define ITM ((ITM_Type *) ITM_BASE )
#define DWT ((DWT_Type *) DWT_BASE )
#define TPI ((TPI_Type *) TPI_BASE )
#define CoreDebug ((CoreDebug_Type *) CoreDebug_BASE)


#define MPU_BASE (SCS_BASE + 0x0D90UL)
#define MPU ((MPU_Type *) MPU_BASE )


#define FPU_BASE (SCS_BASE + 0x0F30UL)
#define FPU ((FPU_Type *) FPU_BASE )
# 1602 "asf4/samd51/CMSIS/Include/core_cm4.h"
#define NVIC_SetPriorityGrouping __NVIC_SetPriorityGrouping
#define NVIC_GetPriorityGrouping __NVIC_GetPriorityGrouping
#define NVIC_EnableIRQ __NVIC_EnableIRQ
#define NVIC_GetEnableIRQ __NVIC_GetEnableIRQ
#define NVIC_DisableIRQ __NVIC_DisableIRQ
#define NVIC_GetPendingIRQ __NVIC_GetPendingIRQ
#define NVIC_SetPendingIRQ __NVIC_SetPendingIRQ
#define NVIC_ClearPendingIRQ __NVIC_ClearPendingIRQ
#define NVIC_GetActive __NVIC_GetActive
#define NVIC_SetPriority __NVIC_SetPriority
#define NVIC_GetPriority __NVIC_GetPriority
#define NVIC_SystemReset __NVIC_SystemReset
# 1622 "asf4/samd51/CMSIS/Include/core_cm4.h"
#define NVIC_SetVector __NVIC_SetVector
#define NVIC_GetVector __NVIC_GetVector


#define NVIC_USER_IRQ_OFFSET 16
# 1639 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);

  reg_value = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;
  reg_value &= ~((uint32_t)((0xFFFFUL << 16U) | (7UL << 8U)));
  reg_value = (reg_value |
                ((uint32_t)0x5FAUL << 16U) |
                (PriorityGroupTmp << 8U) );
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = reg_value;
}







static inline uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) >> 8U));
}
# 1670 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  }
}
# 1687 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1706 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    __DSB();
    __ISB();
  }
}
# 1725 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1744 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  }
}
# 1759 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  }
}
# 1776 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1798 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)(int32_t)IRQn)] = (uint8_t)((priority << (8U - 3)) & (uint32_t)0xFFUL);
  }
  else
  {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 3)) & (uint32_t)0xFFUL);
  }
}
# 1820 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)(int32_t)IRQn)] >> (8U - 3)));
  }
  else
  {
    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - 3)));
  }
}
# 1845 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(3)) ? (uint32_t)(3) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(3)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(3));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority & (uint32_t)((1UL << (SubPriorityBits )) - 1UL)))
         );
}
# 1872 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(3)) ? (uint32_t)(3) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(3)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(3));

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
  *pSubPriority = (Priority ) & (uint32_t)((1UL << (SubPriorityBits )) - 1UL);
}
# 1895 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  vectors[(int32_t)IRQn + 16] = vector;
}
# 1910 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
{
  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  return vectors[(int32_t)IRQn + 16];
}






static inline void __NVIC_SystemReset(void)
{
  __DSB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = (uint32_t)((0x5FAUL << 16U) |
                           (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) |
                            (1UL << 2U) );
  __DSB();

  for(;;)
  {
    __asm volatile ("nop");
  }
}
# 1955 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = ((FPU_Type *) ((0xE000E000UL) + 0x0F30UL) )->MVFR0;
  if ((mvfr0 & ((0xFUL << 4U) | (0xFUL << 8U))) == 0x020U)
  {
    return 1U;
  }
  else
  {
    return 0U;
  }
}
# 1996 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > (0xFFFFFFUL ))
  {
    return (1UL);
  }

  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = (uint32_t)(ticks - 1UL);
  __NVIC_SetPriority (SysTick_IRQn, (1UL << 3) - 1UL);
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL = 0UL;
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2U) |
                   (1UL << 1U) |
                   (1UL );
  return (0UL);
}
# 2026 "asf4/samd51/CMSIS/Include/core_cm4.h"
extern volatile int32_t ITM_RxBuffer;
#define ITM_RXBUFFER_EMPTY ((int32_t)0x5AA55AA5U)
# 2038 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline uint32_t ITM_SendChar (uint32_t ch)
{
  if (((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL )) != 0UL) &&
      ((((ITM_Type *) (0xE0000000UL) )->TER & 1UL ) != 0UL) )
  {
    while (((ITM_Type *) (0xE0000000UL) )->PORT[0U].u32 == 0UL)
    {
      __asm volatile ("nop");
    }
    ((ITM_Type *) (0xE0000000UL) )->PORT[0U].u8 = (uint8_t)ch;
  }
  return (ch);
}
# 2059 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline int32_t ITM_ReceiveChar (void)
{
  int32_t ch = -1;

  if (ITM_RxBuffer != ((int32_t)0x5AA55AA5U))
  {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = ((int32_t)0x5AA55AA5U);
  }

  return (ch);
}
# 2079 "asf4/samd51/CMSIS/Include/core_cm4.h"
static inline int32_t ITM_CheckChar (void)
{

  if (ITM_RxBuffer == ((int32_t)0x5AA55AA5U))
  {
    return (0);
  }
  else
  {
    return (1);
  }
}
# 569 "asf4/samd51/include/samd51p20a.h" 2

# 1 "asf4/samd51/include/system_samd51.h" 1
# 31 "asf4/samd51/include/system_samd51.h"
#define _SYSTEM_SAMD51_H_INCLUDED_ 







extern uint32_t SystemCoreClock;

void SystemInit(void);
void SystemCoreClockUpdate(void);
# 571 "asf4/samd51/include/samd51p20a.h" 2
# 581 "asf4/samd51/include/samd51p20a.h"
# 1 "asf4/samd51/include/component/ac.h" 1
# 31 "asf4/samd51/include/component/ac.h"
#define _SAMD51_AC_COMPONENT_ 







#define AC_U2501 
#define REV_AC 0x100



typedef union {
  struct {
    uint8_t SWRST:1;
    uint8_t ENABLE:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} AC_CTRLA_Type;


#define AC_CTRLA_OFFSET 0x00
#define AC_CTRLA_RESETVALUE _U_(0x00)

#define AC_CTRLA_SWRST_Pos 0
#define AC_CTRLA_SWRST (_U_(0x1) << AC_CTRLA_SWRST_Pos)
#define AC_CTRLA_ENABLE_Pos 1
#define AC_CTRLA_ENABLE (_U_(0x1) << AC_CTRLA_ENABLE_Pos)
#define AC_CTRLA_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t START0:1;
    uint8_t START1:1;
    uint8_t :6;
  } bit;
  struct {
    uint8_t START:2;
    uint8_t :6;
  } vec;
  uint8_t reg;
} AC_CTRLB_Type;


#define AC_CTRLB_OFFSET 0x01
#define AC_CTRLB_RESETVALUE _U_(0x00)

#define AC_CTRLB_START0_Pos 0
#define AC_CTRLB_START0 (_U_(1) << AC_CTRLB_START0_Pos)
#define AC_CTRLB_START1_Pos 1
#define AC_CTRLB_START1 (_U_(1) << AC_CTRLB_START1_Pos)
#define AC_CTRLB_START_Pos 0
#define AC_CTRLB_START_Msk (_U_(0x3) << AC_CTRLB_START_Pos)
#define AC_CTRLB_START(value) (AC_CTRLB_START_Msk & ((value) << AC_CTRLB_START_Pos))
#define AC_CTRLB_MASK _U_(0x03)



typedef union {
  struct {
    uint16_t COMPEO0:1;
    uint16_t COMPEO1:1;
    uint16_t :2;
    uint16_t WINEO0:1;
    uint16_t :3;
    uint16_t COMPEI0:1;
    uint16_t COMPEI1:1;
    uint16_t :2;
    uint16_t INVEI0:1;
    uint16_t INVEI1:1;
    uint16_t :2;
  } bit;
  struct {
    uint16_t COMPEO:2;
    uint16_t :2;
    uint16_t WINEO:1;
    uint16_t :3;
    uint16_t COMPEI:2;
    uint16_t :2;
    uint16_t INVEI:2;
    uint16_t :2;
  } vec;
  uint16_t reg;
} AC_EVCTRL_Type;


#define AC_EVCTRL_OFFSET 0x02
#define AC_EVCTRL_RESETVALUE _U_(0x0000)

#define AC_EVCTRL_COMPEO0_Pos 0
#define AC_EVCTRL_COMPEO0 (_U_(1) << AC_EVCTRL_COMPEO0_Pos)
#define AC_EVCTRL_COMPEO1_Pos 1
#define AC_EVCTRL_COMPEO1 (_U_(1) << AC_EVCTRL_COMPEO1_Pos)
#define AC_EVCTRL_COMPEO_Pos 0
#define AC_EVCTRL_COMPEO_Msk (_U_(0x3) << AC_EVCTRL_COMPEO_Pos)
#define AC_EVCTRL_COMPEO(value) (AC_EVCTRL_COMPEO_Msk & ((value) << AC_EVCTRL_COMPEO_Pos))
#define AC_EVCTRL_WINEO0_Pos 4
#define AC_EVCTRL_WINEO0 (_U_(1) << AC_EVCTRL_WINEO0_Pos)
#define AC_EVCTRL_WINEO_Pos 4
#define AC_EVCTRL_WINEO_Msk (_U_(0x1) << AC_EVCTRL_WINEO_Pos)
#define AC_EVCTRL_WINEO(value) (AC_EVCTRL_WINEO_Msk & ((value) << AC_EVCTRL_WINEO_Pos))
#define AC_EVCTRL_COMPEI0_Pos 8
#define AC_EVCTRL_COMPEI0 (_U_(1) << AC_EVCTRL_COMPEI0_Pos)
#define AC_EVCTRL_COMPEI1_Pos 9
#define AC_EVCTRL_COMPEI1 (_U_(1) << AC_EVCTRL_COMPEI1_Pos)
#define AC_EVCTRL_COMPEI_Pos 8
#define AC_EVCTRL_COMPEI_Msk (_U_(0x3) << AC_EVCTRL_COMPEI_Pos)
#define AC_EVCTRL_COMPEI(value) (AC_EVCTRL_COMPEI_Msk & ((value) << AC_EVCTRL_COMPEI_Pos))
#define AC_EVCTRL_INVEI0_Pos 12
#define AC_EVCTRL_INVEI0 (_U_(1) << AC_EVCTRL_INVEI0_Pos)
#define AC_EVCTRL_INVEI1_Pos 13
#define AC_EVCTRL_INVEI1 (_U_(1) << AC_EVCTRL_INVEI1_Pos)
#define AC_EVCTRL_INVEI_Pos 12
#define AC_EVCTRL_INVEI_Msk (_U_(0x3) << AC_EVCTRL_INVEI_Pos)
#define AC_EVCTRL_INVEI(value) (AC_EVCTRL_INVEI_Msk & ((value) << AC_EVCTRL_INVEI_Pos))
#define AC_EVCTRL_MASK _U_(0x3313)



typedef union {
  struct {
    uint8_t COMP0:1;
    uint8_t COMP1:1;
    uint8_t :2;
    uint8_t WIN0:1;
    uint8_t :3;
  } bit;
  struct {
    uint8_t COMP:2;
    uint8_t :2;
    uint8_t WIN:1;
    uint8_t :3;
  } vec;
  uint8_t reg;
} AC_INTENCLR_Type;


#define AC_INTENCLR_OFFSET 0x04
#define AC_INTENCLR_RESETVALUE _U_(0x00)

#define AC_INTENCLR_COMP0_Pos 0
#define AC_INTENCLR_COMP0 (_U_(1) << AC_INTENCLR_COMP0_Pos)
#define AC_INTENCLR_COMP1_Pos 1
#define AC_INTENCLR_COMP1 (_U_(1) << AC_INTENCLR_COMP1_Pos)
#define AC_INTENCLR_COMP_Pos 0
#define AC_INTENCLR_COMP_Msk (_U_(0x3) << AC_INTENCLR_COMP_Pos)
#define AC_INTENCLR_COMP(value) (AC_INTENCLR_COMP_Msk & ((value) << AC_INTENCLR_COMP_Pos))
#define AC_INTENCLR_WIN0_Pos 4
#define AC_INTENCLR_WIN0 (_U_(1) << AC_INTENCLR_WIN0_Pos)
#define AC_INTENCLR_WIN_Pos 4
#define AC_INTENCLR_WIN_Msk (_U_(0x1) << AC_INTENCLR_WIN_Pos)
#define AC_INTENCLR_WIN(value) (AC_INTENCLR_WIN_Msk & ((value) << AC_INTENCLR_WIN_Pos))
#define AC_INTENCLR_MASK _U_(0x13)



typedef union {
  struct {
    uint8_t COMP0:1;
    uint8_t COMP1:1;
    uint8_t :2;
    uint8_t WIN0:1;
    uint8_t :3;
  } bit;
  struct {
    uint8_t COMP:2;
    uint8_t :2;
    uint8_t WIN:1;
    uint8_t :3;
  } vec;
  uint8_t reg;
} AC_INTENSET_Type;


#define AC_INTENSET_OFFSET 0x05
#define AC_INTENSET_RESETVALUE _U_(0x00)

#define AC_INTENSET_COMP0_Pos 0
#define AC_INTENSET_COMP0 (_U_(1) << AC_INTENSET_COMP0_Pos)
#define AC_INTENSET_COMP1_Pos 1
#define AC_INTENSET_COMP1 (_U_(1) << AC_INTENSET_COMP1_Pos)
#define AC_INTENSET_COMP_Pos 0
#define AC_INTENSET_COMP_Msk (_U_(0x3) << AC_INTENSET_COMP_Pos)
#define AC_INTENSET_COMP(value) (AC_INTENSET_COMP_Msk & ((value) << AC_INTENSET_COMP_Pos))
#define AC_INTENSET_WIN0_Pos 4
#define AC_INTENSET_WIN0 (_U_(1) << AC_INTENSET_WIN0_Pos)
#define AC_INTENSET_WIN_Pos 4
#define AC_INTENSET_WIN_Msk (_U_(0x1) << AC_INTENSET_WIN_Pos)
#define AC_INTENSET_WIN(value) (AC_INTENSET_WIN_Msk & ((value) << AC_INTENSET_WIN_Pos))
#define AC_INTENSET_MASK _U_(0x13)



typedef union {
  struct {
    volatile const uint8_t COMP0:1;
    volatile const uint8_t COMP1:1;
    volatile const uint8_t :2;
    volatile const uint8_t WIN0:1;
    volatile const uint8_t :3;
  } bit;
  struct {
    volatile const uint8_t COMP:2;
    volatile const uint8_t :2;
    volatile const uint8_t WIN:1;
    volatile const uint8_t :3;
  } vec;
  uint8_t reg;
} AC_INTFLAG_Type;


#define AC_INTFLAG_OFFSET 0x06
#define AC_INTFLAG_RESETVALUE _U_(0x00)

#define AC_INTFLAG_COMP0_Pos 0
#define AC_INTFLAG_COMP0 (_U_(1) << AC_INTFLAG_COMP0_Pos)
#define AC_INTFLAG_COMP1_Pos 1
#define AC_INTFLAG_COMP1 (_U_(1) << AC_INTFLAG_COMP1_Pos)
#define AC_INTFLAG_COMP_Pos 0
#define AC_INTFLAG_COMP_Msk (_U_(0x3) << AC_INTFLAG_COMP_Pos)
#define AC_INTFLAG_COMP(value) (AC_INTFLAG_COMP_Msk & ((value) << AC_INTFLAG_COMP_Pos))
#define AC_INTFLAG_WIN0_Pos 4
#define AC_INTFLAG_WIN0 (_U_(1) << AC_INTFLAG_WIN0_Pos)
#define AC_INTFLAG_WIN_Pos 4
#define AC_INTFLAG_WIN_Msk (_U_(0x1) << AC_INTFLAG_WIN_Pos)
#define AC_INTFLAG_WIN(value) (AC_INTFLAG_WIN_Msk & ((value) << AC_INTFLAG_WIN_Pos))
#define AC_INTFLAG_MASK _U_(0x13)



typedef union {
  struct {
    uint8_t STATE0:1;
    uint8_t STATE1:1;
    uint8_t :2;
    uint8_t WSTATE0:2;
    uint8_t :2;
  } bit;
  struct {
    uint8_t STATE:2;
    uint8_t :6;
  } vec;
  uint8_t reg;
} AC_STATUSA_Type;


#define AC_STATUSA_OFFSET 0x07
#define AC_STATUSA_RESETVALUE _U_(0x00)

#define AC_STATUSA_STATE0_Pos 0
#define AC_STATUSA_STATE0 (_U_(1) << AC_STATUSA_STATE0_Pos)
#define AC_STATUSA_STATE1_Pos 1
#define AC_STATUSA_STATE1 (_U_(1) << AC_STATUSA_STATE1_Pos)
#define AC_STATUSA_STATE_Pos 0
#define AC_STATUSA_STATE_Msk (_U_(0x3) << AC_STATUSA_STATE_Pos)
#define AC_STATUSA_STATE(value) (AC_STATUSA_STATE_Msk & ((value) << AC_STATUSA_STATE_Pos))
#define AC_STATUSA_WSTATE0_Pos 4
#define AC_STATUSA_WSTATE0_Msk (_U_(0x3) << AC_STATUSA_WSTATE0_Pos)
#define AC_STATUSA_WSTATE0(value) (AC_STATUSA_WSTATE0_Msk & ((value) << AC_STATUSA_WSTATE0_Pos))
#define AC_STATUSA_WSTATE0_ABOVE_Val _U_(0x0)
#define AC_STATUSA_WSTATE0_INSIDE_Val _U_(0x1)
#define AC_STATUSA_WSTATE0_BELOW_Val _U_(0x2)
#define AC_STATUSA_WSTATE0_ABOVE (AC_STATUSA_WSTATE0_ABOVE_Val << AC_STATUSA_WSTATE0_Pos)
#define AC_STATUSA_WSTATE0_INSIDE (AC_STATUSA_WSTATE0_INSIDE_Val << AC_STATUSA_WSTATE0_Pos)
#define AC_STATUSA_WSTATE0_BELOW (AC_STATUSA_WSTATE0_BELOW_Val << AC_STATUSA_WSTATE0_Pos)
#define AC_STATUSA_MASK _U_(0x33)



typedef union {
  struct {
    uint8_t READY0:1;
    uint8_t READY1:1;
    uint8_t :6;
  } bit;
  struct {
    uint8_t READY:2;
    uint8_t :6;
  } vec;
  uint8_t reg;
} AC_STATUSB_Type;


#define AC_STATUSB_OFFSET 0x08
#define AC_STATUSB_RESETVALUE _U_(0x00)

#define AC_STATUSB_READY0_Pos 0
#define AC_STATUSB_READY0 (_U_(1) << AC_STATUSB_READY0_Pos)
#define AC_STATUSB_READY1_Pos 1
#define AC_STATUSB_READY1 (_U_(1) << AC_STATUSB_READY1_Pos)
#define AC_STATUSB_READY_Pos 0
#define AC_STATUSB_READY_Msk (_U_(0x3) << AC_STATUSB_READY_Pos)
#define AC_STATUSB_READY(value) (AC_STATUSB_READY_Msk & ((value) << AC_STATUSB_READY_Pos))
#define AC_STATUSB_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t DBGRUN:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} AC_DBGCTRL_Type;


#define AC_DBGCTRL_OFFSET 0x09
#define AC_DBGCTRL_RESETVALUE _U_(0x00)

#define AC_DBGCTRL_DBGRUN_Pos 0
#define AC_DBGCTRL_DBGRUN (_U_(0x1) << AC_DBGCTRL_DBGRUN_Pos)
#define AC_DBGCTRL_MASK _U_(0x01)



typedef union {
  struct {
    uint8_t WEN0:1;
    uint8_t WINTSEL0:2;
    uint8_t :5;
  } bit;
  uint8_t reg;
} AC_WINCTRL_Type;


#define AC_WINCTRL_OFFSET 0x0A
#define AC_WINCTRL_RESETVALUE _U_(0x00)

#define AC_WINCTRL_WEN0_Pos 0
#define AC_WINCTRL_WEN0 (_U_(0x1) << AC_WINCTRL_WEN0_Pos)
#define AC_WINCTRL_WINTSEL0_Pos 1
#define AC_WINCTRL_WINTSEL0_Msk (_U_(0x3) << AC_WINCTRL_WINTSEL0_Pos)
#define AC_WINCTRL_WINTSEL0(value) (AC_WINCTRL_WINTSEL0_Msk & ((value) << AC_WINCTRL_WINTSEL0_Pos))
#define AC_WINCTRL_WINTSEL0_ABOVE_Val _U_(0x0)
#define AC_WINCTRL_WINTSEL0_INSIDE_Val _U_(0x1)
#define AC_WINCTRL_WINTSEL0_BELOW_Val _U_(0x2)
#define AC_WINCTRL_WINTSEL0_OUTSIDE_Val _U_(0x3)
#define AC_WINCTRL_WINTSEL0_ABOVE (AC_WINCTRL_WINTSEL0_ABOVE_Val << AC_WINCTRL_WINTSEL0_Pos)
#define AC_WINCTRL_WINTSEL0_INSIDE (AC_WINCTRL_WINTSEL0_INSIDE_Val << AC_WINCTRL_WINTSEL0_Pos)
#define AC_WINCTRL_WINTSEL0_BELOW (AC_WINCTRL_WINTSEL0_BELOW_Val << AC_WINCTRL_WINTSEL0_Pos)
#define AC_WINCTRL_WINTSEL0_OUTSIDE (AC_WINCTRL_WINTSEL0_OUTSIDE_Val << AC_WINCTRL_WINTSEL0_Pos)
#define AC_WINCTRL_MASK _U_(0x07)



typedef union {
  struct {
    uint8_t VALUE:6;
    uint8_t :2;
  } bit;
  uint8_t reg;
} AC_SCALER_Type;


#define AC_SCALER_OFFSET 0x0C
#define AC_SCALER_RESETVALUE _U_(0x00)

#define AC_SCALER_VALUE_Pos 0
#define AC_SCALER_VALUE_Msk (_U_(0x3F) << AC_SCALER_VALUE_Pos)
#define AC_SCALER_VALUE(value) (AC_SCALER_VALUE_Msk & ((value) << AC_SCALER_VALUE_Pos))
#define AC_SCALER_MASK _U_(0x3F)



typedef union {
  struct {
    uint32_t :1;
    uint32_t ENABLE:1;
    uint32_t SINGLE:1;
    uint32_t INTSEL:2;
    uint32_t :1;
    uint32_t RUNSTDBY:1;
    uint32_t :1;
    uint32_t MUXNEG:3;
    uint32_t :1;
    uint32_t MUXPOS:3;
    uint32_t SWAP:1;
    uint32_t SPEED:2;
    uint32_t :1;
    uint32_t HYSTEN:1;
    uint32_t HYST:2;
    uint32_t :2;
    uint32_t FLEN:3;
    uint32_t :1;
    uint32_t OUT:2;
    uint32_t :2;
  } bit;
  uint32_t reg;
} AC_COMPCTRL_Type;


#define AC_COMPCTRL_OFFSET 0x10
#define AC_COMPCTRL_RESETVALUE _U_(0x00000000)

#define AC_COMPCTRL_ENABLE_Pos 1
#define AC_COMPCTRL_ENABLE (_U_(0x1) << AC_COMPCTRL_ENABLE_Pos)
#define AC_COMPCTRL_SINGLE_Pos 2
#define AC_COMPCTRL_SINGLE (_U_(0x1) << AC_COMPCTRL_SINGLE_Pos)
#define AC_COMPCTRL_INTSEL_Pos 3
#define AC_COMPCTRL_INTSEL_Msk (_U_(0x3) << AC_COMPCTRL_INTSEL_Pos)
#define AC_COMPCTRL_INTSEL(value) (AC_COMPCTRL_INTSEL_Msk & ((value) << AC_COMPCTRL_INTSEL_Pos))
#define AC_COMPCTRL_INTSEL_TOGGLE_Val _U_(0x0)
#define AC_COMPCTRL_INTSEL_RISING_Val _U_(0x1)
#define AC_COMPCTRL_INTSEL_FALLING_Val _U_(0x2)
#define AC_COMPCTRL_INTSEL_EOC_Val _U_(0x3)
#define AC_COMPCTRL_INTSEL_TOGGLE (AC_COMPCTRL_INTSEL_TOGGLE_Val << AC_COMPCTRL_INTSEL_Pos)
#define AC_COMPCTRL_INTSEL_RISING (AC_COMPCTRL_INTSEL_RISING_Val << AC_COMPCTRL_INTSEL_Pos)
#define AC_COMPCTRL_INTSEL_FALLING (AC_COMPCTRL_INTSEL_FALLING_Val << AC_COMPCTRL_INTSEL_Pos)
#define AC_COMPCTRL_INTSEL_EOC (AC_COMPCTRL_INTSEL_EOC_Val << AC_COMPCTRL_INTSEL_Pos)
#define AC_COMPCTRL_RUNSTDBY_Pos 6
#define AC_COMPCTRL_RUNSTDBY (_U_(0x1) << AC_COMPCTRL_RUNSTDBY_Pos)
#define AC_COMPCTRL_MUXNEG_Pos 8
#define AC_COMPCTRL_MUXNEG_Msk (_U_(0x7) << AC_COMPCTRL_MUXNEG_Pos)
#define AC_COMPCTRL_MUXNEG(value) (AC_COMPCTRL_MUXNEG_Msk & ((value) << AC_COMPCTRL_MUXNEG_Pos))
#define AC_COMPCTRL_MUXNEG_PIN0_Val _U_(0x0)
#define AC_COMPCTRL_MUXNEG_PIN1_Val _U_(0x1)
#define AC_COMPCTRL_MUXNEG_PIN2_Val _U_(0x2)
#define AC_COMPCTRL_MUXNEG_PIN3_Val _U_(0x3)
#define AC_COMPCTRL_MUXNEG_GND_Val _U_(0x4)
#define AC_COMPCTRL_MUXNEG_VSCALE_Val _U_(0x5)
#define AC_COMPCTRL_MUXNEG_BANDGAP_Val _U_(0x6)
#define AC_COMPCTRL_MUXNEG_DAC_Val _U_(0x7)
#define AC_COMPCTRL_MUXNEG_PIN0 (AC_COMPCTRL_MUXNEG_PIN0_Val << AC_COMPCTRL_MUXNEG_Pos)
#define AC_COMPCTRL_MUXNEG_PIN1 (AC_COMPCTRL_MUXNEG_PIN1_Val << AC_COMPCTRL_MUXNEG_Pos)
#define AC_COMPCTRL_MUXNEG_PIN2 (AC_COMPCTRL_MUXNEG_PIN2_Val << AC_COMPCTRL_MUXNEG_Pos)
#define AC_COMPCTRL_MUXNEG_PIN3 (AC_COMPCTRL_MUXNEG_PIN3_Val << AC_COMPCTRL_MUXNEG_Pos)
#define AC_COMPCTRL_MUXNEG_GND (AC_COMPCTRL_MUXNEG_GND_Val << AC_COMPCTRL_MUXNEG_Pos)
#define AC_COMPCTRL_MUXNEG_VSCALE (AC_COMPCTRL_MUXNEG_VSCALE_Val << AC_COMPCTRL_MUXNEG_Pos)
#define AC_COMPCTRL_MUXNEG_BANDGAP (AC_COMPCTRL_MUXNEG_BANDGAP_Val << AC_COMPCTRL_MUXNEG_Pos)
#define AC_COMPCTRL_MUXNEG_DAC (AC_COMPCTRL_MUXNEG_DAC_Val << AC_COMPCTRL_MUXNEG_Pos)
#define AC_COMPCTRL_MUXPOS_Pos 12
#define AC_COMPCTRL_MUXPOS_Msk (_U_(0x7) << AC_COMPCTRL_MUXPOS_Pos)
#define AC_COMPCTRL_MUXPOS(value) (AC_COMPCTRL_MUXPOS_Msk & ((value) << AC_COMPCTRL_MUXPOS_Pos))
#define AC_COMPCTRL_MUXPOS_PIN0_Val _U_(0x0)
#define AC_COMPCTRL_MUXPOS_PIN1_Val _U_(0x1)
#define AC_COMPCTRL_MUXPOS_PIN2_Val _U_(0x2)
#define AC_COMPCTRL_MUXPOS_PIN3_Val _U_(0x3)
#define AC_COMPCTRL_MUXPOS_VSCALE_Val _U_(0x4)
#define AC_COMPCTRL_MUXPOS_PIN0 (AC_COMPCTRL_MUXPOS_PIN0_Val << AC_COMPCTRL_MUXPOS_Pos)
#define AC_COMPCTRL_MUXPOS_PIN1 (AC_COMPCTRL_MUXPOS_PIN1_Val << AC_COMPCTRL_MUXPOS_Pos)
#define AC_COMPCTRL_MUXPOS_PIN2 (AC_COMPCTRL_MUXPOS_PIN2_Val << AC_COMPCTRL_MUXPOS_Pos)
#define AC_COMPCTRL_MUXPOS_PIN3 (AC_COMPCTRL_MUXPOS_PIN3_Val << AC_COMPCTRL_MUXPOS_Pos)
#define AC_COMPCTRL_MUXPOS_VSCALE (AC_COMPCTRL_MUXPOS_VSCALE_Val << AC_COMPCTRL_MUXPOS_Pos)
#define AC_COMPCTRL_SWAP_Pos 15
#define AC_COMPCTRL_SWAP (_U_(0x1) << AC_COMPCTRL_SWAP_Pos)
#define AC_COMPCTRL_SPEED_Pos 16
#define AC_COMPCTRL_SPEED_Msk (_U_(0x3) << AC_COMPCTRL_SPEED_Pos)
#define AC_COMPCTRL_SPEED(value) (AC_COMPCTRL_SPEED_Msk & ((value) << AC_COMPCTRL_SPEED_Pos))
#define AC_COMPCTRL_SPEED_HIGH_Val _U_(0x3)
#define AC_COMPCTRL_SPEED_HIGH (AC_COMPCTRL_SPEED_HIGH_Val << AC_COMPCTRL_SPEED_Pos)
#define AC_COMPCTRL_HYSTEN_Pos 19
#define AC_COMPCTRL_HYSTEN (_U_(0x1) << AC_COMPCTRL_HYSTEN_Pos)
#define AC_COMPCTRL_HYST_Pos 20
#define AC_COMPCTRL_HYST_Msk (_U_(0x3) << AC_COMPCTRL_HYST_Pos)
#define AC_COMPCTRL_HYST(value) (AC_COMPCTRL_HYST_Msk & ((value) << AC_COMPCTRL_HYST_Pos))
#define AC_COMPCTRL_HYST_HYST50_Val _U_(0x0)
#define AC_COMPCTRL_HYST_HYST100_Val _U_(0x1)
#define AC_COMPCTRL_HYST_HYST150_Val _U_(0x2)
#define AC_COMPCTRL_HYST_HYST50 (AC_COMPCTRL_HYST_HYST50_Val << AC_COMPCTRL_HYST_Pos)
#define AC_COMPCTRL_HYST_HYST100 (AC_COMPCTRL_HYST_HYST100_Val << AC_COMPCTRL_HYST_Pos)
#define AC_COMPCTRL_HYST_HYST150 (AC_COMPCTRL_HYST_HYST150_Val << AC_COMPCTRL_HYST_Pos)
#define AC_COMPCTRL_FLEN_Pos 24
#define AC_COMPCTRL_FLEN_Msk (_U_(0x7) << AC_COMPCTRL_FLEN_Pos)
#define AC_COMPCTRL_FLEN(value) (AC_COMPCTRL_FLEN_Msk & ((value) << AC_COMPCTRL_FLEN_Pos))
#define AC_COMPCTRL_FLEN_OFF_Val _U_(0x0)
#define AC_COMPCTRL_FLEN_MAJ3_Val _U_(0x1)
#define AC_COMPCTRL_FLEN_MAJ5_Val _U_(0x2)
#define AC_COMPCTRL_FLEN_OFF (AC_COMPCTRL_FLEN_OFF_Val << AC_COMPCTRL_FLEN_Pos)
#define AC_COMPCTRL_FLEN_MAJ3 (AC_COMPCTRL_FLEN_MAJ3_Val << AC_COMPCTRL_FLEN_Pos)
#define AC_COMPCTRL_FLEN_MAJ5 (AC_COMPCTRL_FLEN_MAJ5_Val << AC_COMPCTRL_FLEN_Pos)
#define AC_COMPCTRL_OUT_Pos 28
#define AC_COMPCTRL_OUT_Msk (_U_(0x3) << AC_COMPCTRL_OUT_Pos)
#define AC_COMPCTRL_OUT(value) (AC_COMPCTRL_OUT_Msk & ((value) << AC_COMPCTRL_OUT_Pos))
#define AC_COMPCTRL_OUT_OFF_Val _U_(0x0)
#define AC_COMPCTRL_OUT_ASYNC_Val _U_(0x1)
#define AC_COMPCTRL_OUT_SYNC_Val _U_(0x2)
#define AC_COMPCTRL_OUT_OFF (AC_COMPCTRL_OUT_OFF_Val << AC_COMPCTRL_OUT_Pos)
#define AC_COMPCTRL_OUT_ASYNC (AC_COMPCTRL_OUT_ASYNC_Val << AC_COMPCTRL_OUT_Pos)
#define AC_COMPCTRL_OUT_SYNC (AC_COMPCTRL_OUT_SYNC_Val << AC_COMPCTRL_OUT_Pos)
#define AC_COMPCTRL_MASK _U_(0x373BF75E)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t WINCTRL:1;
    uint32_t COMPCTRL0:1;
    uint32_t COMPCTRL1:1;
    uint32_t :27;
  } bit;
  struct {
    uint32_t :3;
    uint32_t COMPCTRL:2;
    uint32_t :27;
  } vec;
  uint32_t reg;
} AC_SYNCBUSY_Type;


#define AC_SYNCBUSY_OFFSET 0x20
#define AC_SYNCBUSY_RESETVALUE _U_(0x00000000)

#define AC_SYNCBUSY_SWRST_Pos 0
#define AC_SYNCBUSY_SWRST (_U_(0x1) << AC_SYNCBUSY_SWRST_Pos)
#define AC_SYNCBUSY_ENABLE_Pos 1
#define AC_SYNCBUSY_ENABLE (_U_(0x1) << AC_SYNCBUSY_ENABLE_Pos)
#define AC_SYNCBUSY_WINCTRL_Pos 2
#define AC_SYNCBUSY_WINCTRL (_U_(0x1) << AC_SYNCBUSY_WINCTRL_Pos)
#define AC_SYNCBUSY_COMPCTRL0_Pos 3
#define AC_SYNCBUSY_COMPCTRL0 (_U_(1) << AC_SYNCBUSY_COMPCTRL0_Pos)
#define AC_SYNCBUSY_COMPCTRL1_Pos 4
#define AC_SYNCBUSY_COMPCTRL1 (_U_(1) << AC_SYNCBUSY_COMPCTRL1_Pos)
#define AC_SYNCBUSY_COMPCTRL_Pos 3
#define AC_SYNCBUSY_COMPCTRL_Msk (_U_(0x3) << AC_SYNCBUSY_COMPCTRL_Pos)
#define AC_SYNCBUSY_COMPCTRL(value) (AC_SYNCBUSY_COMPCTRL_Msk & ((value) << AC_SYNCBUSY_COMPCTRL_Pos))
#define AC_SYNCBUSY_MASK _U_(0x0000001F)



typedef union {
  struct {
    uint16_t BIAS0:2;
    uint16_t :14;
  } bit;
  uint16_t reg;
} AC_CALIB_Type;


#define AC_CALIB_OFFSET 0x24
#define AC_CALIB_RESETVALUE _U_(0x0101)

#define AC_CALIB_BIAS0_Pos 0
#define AC_CALIB_BIAS0_Msk (_U_(0x3) << AC_CALIB_BIAS0_Pos)
#define AC_CALIB_BIAS0(value) (AC_CALIB_BIAS0_Msk & ((value) << AC_CALIB_BIAS0_Pos))
#define AC_CALIB_MASK _U_(0x0003)



typedef struct {
  volatile AC_CTRLA_Type CTRLA;
  volatile AC_CTRLB_Type CTRLB;
  volatile AC_EVCTRL_Type EVCTRL;
  volatile AC_INTENCLR_Type INTENCLR;
  volatile AC_INTENSET_Type INTENSET;
  volatile AC_INTFLAG_Type INTFLAG;
  volatile const AC_STATUSA_Type STATUSA;
  volatile const AC_STATUSB_Type STATUSB;
  volatile AC_DBGCTRL_Type DBGCTRL;
  volatile AC_WINCTRL_Type WINCTRL;
       RoReg8 Reserved1[0x1];
  volatile AC_SCALER_Type SCALER[2];
       RoReg8 Reserved2[0x2];
  volatile AC_COMPCTRL_Type COMPCTRL[2];
       RoReg8 Reserved3[0x8];
  volatile const AC_SYNCBUSY_Type SYNCBUSY;
  volatile AC_CALIB_Type CALIB;
} Ac;
# 582 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/adc.h" 1
# 31 "asf4/samd51/include/component/adc.h"
#define _SAMD51_ADC_COMPONENT_ 







#define ADC_U2500 
#define REV_ADC 0x100



typedef union {
  struct {
    uint16_t SWRST:1;
    uint16_t ENABLE:1;
    uint16_t :1;
    uint16_t DUALSEL:2;
    uint16_t SLAVEEN:1;
    uint16_t RUNSTDBY:1;
    uint16_t ONDEMAND:1;
    uint16_t PRESCALER:3;
    uint16_t :4;
    uint16_t R2R:1;
  } bit;
  uint16_t reg;
} ADC_CTRLA_Type;


#define ADC_CTRLA_OFFSET 0x00
#define ADC_CTRLA_RESETVALUE _U_(0x0000)

#define ADC_CTRLA_SWRST_Pos 0
#define ADC_CTRLA_SWRST (_U_(0x1) << ADC_CTRLA_SWRST_Pos)
#define ADC_CTRLA_ENABLE_Pos 1
#define ADC_CTRLA_ENABLE (_U_(0x1) << ADC_CTRLA_ENABLE_Pos)
#define ADC_CTRLA_DUALSEL_Pos 3
#define ADC_CTRLA_DUALSEL_Msk (_U_(0x3) << ADC_CTRLA_DUALSEL_Pos)
#define ADC_CTRLA_DUALSEL(value) (ADC_CTRLA_DUALSEL_Msk & ((value) << ADC_CTRLA_DUALSEL_Pos))
#define ADC_CTRLA_DUALSEL_BOTH_Val _U_(0x0)
#define ADC_CTRLA_DUALSEL_INTERLEAVE_Val _U_(0x1)
#define ADC_CTRLA_DUALSEL_BOTH (ADC_CTRLA_DUALSEL_BOTH_Val << ADC_CTRLA_DUALSEL_Pos)
#define ADC_CTRLA_DUALSEL_INTERLEAVE (ADC_CTRLA_DUALSEL_INTERLEAVE_Val << ADC_CTRLA_DUALSEL_Pos)
#define ADC_CTRLA_SLAVEEN_Pos 5
#define ADC_CTRLA_SLAVEEN (_U_(0x1) << ADC_CTRLA_SLAVEEN_Pos)
#define ADC_CTRLA_RUNSTDBY_Pos 6
#define ADC_CTRLA_RUNSTDBY (_U_(0x1) << ADC_CTRLA_RUNSTDBY_Pos)
#define ADC_CTRLA_ONDEMAND_Pos 7
#define ADC_CTRLA_ONDEMAND (_U_(0x1) << ADC_CTRLA_ONDEMAND_Pos)
#define ADC_CTRLA_PRESCALER_Pos 8
#define ADC_CTRLA_PRESCALER_Msk (_U_(0x7) << ADC_CTRLA_PRESCALER_Pos)
#define ADC_CTRLA_PRESCALER(value) (ADC_CTRLA_PRESCALER_Msk & ((value) << ADC_CTRLA_PRESCALER_Pos))
#define ADC_CTRLA_PRESCALER_DIV2_Val _U_(0x0)
#define ADC_CTRLA_PRESCALER_DIV4_Val _U_(0x1)
#define ADC_CTRLA_PRESCALER_DIV8_Val _U_(0x2)
#define ADC_CTRLA_PRESCALER_DIV16_Val _U_(0x3)
#define ADC_CTRLA_PRESCALER_DIV32_Val _U_(0x4)
#define ADC_CTRLA_PRESCALER_DIV64_Val _U_(0x5)
#define ADC_CTRLA_PRESCALER_DIV128_Val _U_(0x6)
#define ADC_CTRLA_PRESCALER_DIV256_Val _U_(0x7)
#define ADC_CTRLA_PRESCALER_DIV2 (ADC_CTRLA_PRESCALER_DIV2_Val << ADC_CTRLA_PRESCALER_Pos)
#define ADC_CTRLA_PRESCALER_DIV4 (ADC_CTRLA_PRESCALER_DIV4_Val << ADC_CTRLA_PRESCALER_Pos)
#define ADC_CTRLA_PRESCALER_DIV8 (ADC_CTRLA_PRESCALER_DIV8_Val << ADC_CTRLA_PRESCALER_Pos)
#define ADC_CTRLA_PRESCALER_DIV16 (ADC_CTRLA_PRESCALER_DIV16_Val << ADC_CTRLA_PRESCALER_Pos)
#define ADC_CTRLA_PRESCALER_DIV32 (ADC_CTRLA_PRESCALER_DIV32_Val << ADC_CTRLA_PRESCALER_Pos)
#define ADC_CTRLA_PRESCALER_DIV64 (ADC_CTRLA_PRESCALER_DIV64_Val << ADC_CTRLA_PRESCALER_Pos)
#define ADC_CTRLA_PRESCALER_DIV128 (ADC_CTRLA_PRESCALER_DIV128_Val << ADC_CTRLA_PRESCALER_Pos)
#define ADC_CTRLA_PRESCALER_DIV256 (ADC_CTRLA_PRESCALER_DIV256_Val << ADC_CTRLA_PRESCALER_Pos)
#define ADC_CTRLA_R2R_Pos 15
#define ADC_CTRLA_R2R (_U_(0x1) << ADC_CTRLA_R2R_Pos)
#define ADC_CTRLA_MASK _U_(0x87FB)



typedef union {
  struct {
    uint8_t FLUSHEI:1;
    uint8_t STARTEI:1;
    uint8_t FLUSHINV:1;
    uint8_t STARTINV:1;
    uint8_t RESRDYEO:1;
    uint8_t WINMONEO:1;
    uint8_t :2;
  } bit;
  uint8_t reg;
} ADC_EVCTRL_Type;


#define ADC_EVCTRL_OFFSET 0x02
#define ADC_EVCTRL_RESETVALUE _U_(0x00)

#define ADC_EVCTRL_FLUSHEI_Pos 0
#define ADC_EVCTRL_FLUSHEI (_U_(0x1) << ADC_EVCTRL_FLUSHEI_Pos)
#define ADC_EVCTRL_STARTEI_Pos 1
#define ADC_EVCTRL_STARTEI (_U_(0x1) << ADC_EVCTRL_STARTEI_Pos)
#define ADC_EVCTRL_FLUSHINV_Pos 2
#define ADC_EVCTRL_FLUSHINV (_U_(0x1) << ADC_EVCTRL_FLUSHINV_Pos)
#define ADC_EVCTRL_STARTINV_Pos 3
#define ADC_EVCTRL_STARTINV (_U_(0x1) << ADC_EVCTRL_STARTINV_Pos)
#define ADC_EVCTRL_RESRDYEO_Pos 4
#define ADC_EVCTRL_RESRDYEO (_U_(0x1) << ADC_EVCTRL_RESRDYEO_Pos)
#define ADC_EVCTRL_WINMONEO_Pos 5
#define ADC_EVCTRL_WINMONEO (_U_(0x1) << ADC_EVCTRL_WINMONEO_Pos)
#define ADC_EVCTRL_MASK _U_(0x3F)



typedef union {
  struct {
    uint8_t DBGRUN:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} ADC_DBGCTRL_Type;


#define ADC_DBGCTRL_OFFSET 0x03
#define ADC_DBGCTRL_RESETVALUE _U_(0x00)

#define ADC_DBGCTRL_DBGRUN_Pos 0
#define ADC_DBGCTRL_DBGRUN (_U_(0x1) << ADC_DBGCTRL_DBGRUN_Pos)
#define ADC_DBGCTRL_MASK _U_(0x01)



typedef union {
  struct {
    uint16_t MUXPOS:5;
    uint16_t :2;
    uint16_t DIFFMODE:1;
    uint16_t MUXNEG:5;
    uint16_t :2;
    uint16_t DSEQSTOP:1;
  } bit;
  uint16_t reg;
} ADC_INPUTCTRL_Type;


#define ADC_INPUTCTRL_OFFSET 0x04
#define ADC_INPUTCTRL_RESETVALUE _U_(0x0000)

#define ADC_INPUTCTRL_MUXPOS_Pos 0
#define ADC_INPUTCTRL_MUXPOS_Msk (_U_(0x1F) << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS(value) (ADC_INPUTCTRL_MUXPOS_Msk & ((value) << ADC_INPUTCTRL_MUXPOS_Pos))
#define ADC_INPUTCTRL_MUXPOS_AIN0_Val _U_(0x0)
#define ADC_INPUTCTRL_MUXPOS_AIN1_Val _U_(0x1)
#define ADC_INPUTCTRL_MUXPOS_AIN2_Val _U_(0x2)
#define ADC_INPUTCTRL_MUXPOS_AIN3_Val _U_(0x3)
#define ADC_INPUTCTRL_MUXPOS_AIN4_Val _U_(0x4)
#define ADC_INPUTCTRL_MUXPOS_AIN5_Val _U_(0x5)
#define ADC_INPUTCTRL_MUXPOS_AIN6_Val _U_(0x6)
#define ADC_INPUTCTRL_MUXPOS_AIN7_Val _U_(0x7)
#define ADC_INPUTCTRL_MUXPOS_AIN8_Val _U_(0x8)
#define ADC_INPUTCTRL_MUXPOS_AIN9_Val _U_(0x9)
#define ADC_INPUTCTRL_MUXPOS_AIN10_Val _U_(0xA)
#define ADC_INPUTCTRL_MUXPOS_AIN11_Val _U_(0xB)
#define ADC_INPUTCTRL_MUXPOS_AIN12_Val _U_(0xC)
#define ADC_INPUTCTRL_MUXPOS_AIN13_Val _U_(0xD)
#define ADC_INPUTCTRL_MUXPOS_AIN14_Val _U_(0xE)
#define ADC_INPUTCTRL_MUXPOS_AIN15_Val _U_(0xF)
#define ADC_INPUTCTRL_MUXPOS_AIN16_Val _U_(0x10)
#define ADC_INPUTCTRL_MUXPOS_AIN17_Val _U_(0x11)
#define ADC_INPUTCTRL_MUXPOS_AIN18_Val _U_(0x12)
#define ADC_INPUTCTRL_MUXPOS_AIN19_Val _U_(0x13)
#define ADC_INPUTCTRL_MUXPOS_AIN20_Val _U_(0x14)
#define ADC_INPUTCTRL_MUXPOS_AIN21_Val _U_(0x15)
#define ADC_INPUTCTRL_MUXPOS_AIN22_Val _U_(0x16)
#define ADC_INPUTCTRL_MUXPOS_AIN23_Val _U_(0x17)
#define ADC_INPUTCTRL_MUXPOS_SCALEDCOREVCC_Val _U_(0x18)
#define ADC_INPUTCTRL_MUXPOS_SCALEDVBAT_Val _U_(0x19)
#define ADC_INPUTCTRL_MUXPOS_SCALEDIOVCC_Val _U_(0x1A)
#define ADC_INPUTCTRL_MUXPOS_BANDGAP_Val _U_(0x1B)
#define ADC_INPUTCTRL_MUXPOS_PTAT_Val _U_(0x1C)
#define ADC_INPUTCTRL_MUXPOS_CTAT_Val _U_(0x1D)
#define ADC_INPUTCTRL_MUXPOS_DAC_Val _U_(0x1E)
#define ADC_INPUTCTRL_MUXPOS_PTC_Val _U_(0x1F)
#define ADC_INPUTCTRL_MUXPOS_AIN0 (ADC_INPUTCTRL_MUXPOS_AIN0_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN1 (ADC_INPUTCTRL_MUXPOS_AIN1_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN2 (ADC_INPUTCTRL_MUXPOS_AIN2_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN3 (ADC_INPUTCTRL_MUXPOS_AIN3_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN4 (ADC_INPUTCTRL_MUXPOS_AIN4_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN5 (ADC_INPUTCTRL_MUXPOS_AIN5_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN6 (ADC_INPUTCTRL_MUXPOS_AIN6_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN7 (ADC_INPUTCTRL_MUXPOS_AIN7_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN8 (ADC_INPUTCTRL_MUXPOS_AIN8_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN9 (ADC_INPUTCTRL_MUXPOS_AIN9_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN10 (ADC_INPUTCTRL_MUXPOS_AIN10_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN11 (ADC_INPUTCTRL_MUXPOS_AIN11_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN12 (ADC_INPUTCTRL_MUXPOS_AIN12_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN13 (ADC_INPUTCTRL_MUXPOS_AIN13_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN14 (ADC_INPUTCTRL_MUXPOS_AIN14_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN15 (ADC_INPUTCTRL_MUXPOS_AIN15_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN16 (ADC_INPUTCTRL_MUXPOS_AIN16_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN17 (ADC_INPUTCTRL_MUXPOS_AIN17_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN18 (ADC_INPUTCTRL_MUXPOS_AIN18_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN19 (ADC_INPUTCTRL_MUXPOS_AIN19_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN20 (ADC_INPUTCTRL_MUXPOS_AIN20_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN21 (ADC_INPUTCTRL_MUXPOS_AIN21_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN22 (ADC_INPUTCTRL_MUXPOS_AIN22_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_AIN23 (ADC_INPUTCTRL_MUXPOS_AIN23_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_SCALEDCOREVCC (ADC_INPUTCTRL_MUXPOS_SCALEDCOREVCC_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_SCALEDVBAT (ADC_INPUTCTRL_MUXPOS_SCALEDVBAT_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_SCALEDIOVCC (ADC_INPUTCTRL_MUXPOS_SCALEDIOVCC_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_BANDGAP (ADC_INPUTCTRL_MUXPOS_BANDGAP_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_PTAT (ADC_INPUTCTRL_MUXPOS_PTAT_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_CTAT (ADC_INPUTCTRL_MUXPOS_CTAT_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_DAC (ADC_INPUTCTRL_MUXPOS_DAC_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_MUXPOS_PTC (ADC_INPUTCTRL_MUXPOS_PTC_Val << ADC_INPUTCTRL_MUXPOS_Pos)
#define ADC_INPUTCTRL_DIFFMODE_Pos 7
#define ADC_INPUTCTRL_DIFFMODE (_U_(0x1) << ADC_INPUTCTRL_DIFFMODE_Pos)
#define ADC_INPUTCTRL_MUXNEG_Pos 8
#define ADC_INPUTCTRL_MUXNEG_Msk (_U_(0x1F) << ADC_INPUTCTRL_MUXNEG_Pos)
#define ADC_INPUTCTRL_MUXNEG(value) (ADC_INPUTCTRL_MUXNEG_Msk & ((value) << ADC_INPUTCTRL_MUXNEG_Pos))
#define ADC_INPUTCTRL_MUXNEG_AIN0_Val _U_(0x0)
#define ADC_INPUTCTRL_MUXNEG_AIN1_Val _U_(0x1)
#define ADC_INPUTCTRL_MUXNEG_AIN2_Val _U_(0x2)
#define ADC_INPUTCTRL_MUXNEG_AIN3_Val _U_(0x3)
#define ADC_INPUTCTRL_MUXNEG_AIN4_Val _U_(0x4)
#define ADC_INPUTCTRL_MUXNEG_AIN5_Val _U_(0x5)
#define ADC_INPUTCTRL_MUXNEG_AIN6_Val _U_(0x6)
#define ADC_INPUTCTRL_MUXNEG_AIN7_Val _U_(0x7)
#define ADC_INPUTCTRL_MUXNEG_GND_Val _U_(0x18)
#define ADC_INPUTCTRL_MUXNEG_AIN0 (ADC_INPUTCTRL_MUXNEG_AIN0_Val << ADC_INPUTCTRL_MUXNEG_Pos)
#define ADC_INPUTCTRL_MUXNEG_AIN1 (ADC_INPUTCTRL_MUXNEG_AIN1_Val << ADC_INPUTCTRL_MUXNEG_Pos)
#define ADC_INPUTCTRL_MUXNEG_AIN2 (ADC_INPUTCTRL_MUXNEG_AIN2_Val << ADC_INPUTCTRL_MUXNEG_Pos)
#define ADC_INPUTCTRL_MUXNEG_AIN3 (ADC_INPUTCTRL_MUXNEG_AIN3_Val << ADC_INPUTCTRL_MUXNEG_Pos)
#define ADC_INPUTCTRL_MUXNEG_AIN4 (ADC_INPUTCTRL_MUXNEG_AIN4_Val << ADC_INPUTCTRL_MUXNEG_Pos)
#define ADC_INPUTCTRL_MUXNEG_AIN5 (ADC_INPUTCTRL_MUXNEG_AIN5_Val << ADC_INPUTCTRL_MUXNEG_Pos)
#define ADC_INPUTCTRL_MUXNEG_AIN6 (ADC_INPUTCTRL_MUXNEG_AIN6_Val << ADC_INPUTCTRL_MUXNEG_Pos)
#define ADC_INPUTCTRL_MUXNEG_AIN7 (ADC_INPUTCTRL_MUXNEG_AIN7_Val << ADC_INPUTCTRL_MUXNEG_Pos)
#define ADC_INPUTCTRL_MUXNEG_GND (ADC_INPUTCTRL_MUXNEG_GND_Val << ADC_INPUTCTRL_MUXNEG_Pos)
#define ADC_INPUTCTRL_DSEQSTOP_Pos 15
#define ADC_INPUTCTRL_DSEQSTOP (_U_(0x1) << ADC_INPUTCTRL_DSEQSTOP_Pos)
#define ADC_INPUTCTRL_MASK _U_(0x9F9F)



typedef union {
  struct {
    uint16_t LEFTADJ:1;
    uint16_t FREERUN:1;
    uint16_t CORREN:1;
    uint16_t RESSEL:2;
    uint16_t :3;
    uint16_t WINMODE:3;
    uint16_t WINSS:1;
    uint16_t :4;
  } bit;
  uint16_t reg;
} ADC_CTRLB_Type;


#define ADC_CTRLB_OFFSET 0x06
#define ADC_CTRLB_RESETVALUE _U_(0x0000)

#define ADC_CTRLB_LEFTADJ_Pos 0
#define ADC_CTRLB_LEFTADJ (_U_(0x1) << ADC_CTRLB_LEFTADJ_Pos)
#define ADC_CTRLB_FREERUN_Pos 1
#define ADC_CTRLB_FREERUN (_U_(0x1) << ADC_CTRLB_FREERUN_Pos)
#define ADC_CTRLB_CORREN_Pos 2
#define ADC_CTRLB_CORREN (_U_(0x1) << ADC_CTRLB_CORREN_Pos)
#define ADC_CTRLB_RESSEL_Pos 3
#define ADC_CTRLB_RESSEL_Msk (_U_(0x3) << ADC_CTRLB_RESSEL_Pos)
#define ADC_CTRLB_RESSEL(value) (ADC_CTRLB_RESSEL_Msk & ((value) << ADC_CTRLB_RESSEL_Pos))
#define ADC_CTRLB_RESSEL_12BIT_Val _U_(0x0)
#define ADC_CTRLB_RESSEL_16BIT_Val _U_(0x1)
#define ADC_CTRLB_RESSEL_10BIT_Val _U_(0x2)
#define ADC_CTRLB_RESSEL_8BIT_Val _U_(0x3)
#define ADC_CTRLB_RESSEL_12BIT (ADC_CTRLB_RESSEL_12BIT_Val << ADC_CTRLB_RESSEL_Pos)
#define ADC_CTRLB_RESSEL_16BIT (ADC_CTRLB_RESSEL_16BIT_Val << ADC_CTRLB_RESSEL_Pos)
#define ADC_CTRLB_RESSEL_10BIT (ADC_CTRLB_RESSEL_10BIT_Val << ADC_CTRLB_RESSEL_Pos)
#define ADC_CTRLB_RESSEL_8BIT (ADC_CTRLB_RESSEL_8BIT_Val << ADC_CTRLB_RESSEL_Pos)
#define ADC_CTRLB_WINMODE_Pos 8
#define ADC_CTRLB_WINMODE_Msk (_U_(0x7) << ADC_CTRLB_WINMODE_Pos)
#define ADC_CTRLB_WINMODE(value) (ADC_CTRLB_WINMODE_Msk & ((value) << ADC_CTRLB_WINMODE_Pos))
#define ADC_CTRLB_WINMODE_DISABLE_Val _U_(0x0)
#define ADC_CTRLB_WINMODE_MODE1_Val _U_(0x1)
#define ADC_CTRLB_WINMODE_MODE2_Val _U_(0x2)
#define ADC_CTRLB_WINMODE_MODE3_Val _U_(0x3)
#define ADC_CTRLB_WINMODE_MODE4_Val _U_(0x4)
#define ADC_CTRLB_WINMODE_DISABLE (ADC_CTRLB_WINMODE_DISABLE_Val << ADC_CTRLB_WINMODE_Pos)
#define ADC_CTRLB_WINMODE_MODE1 (ADC_CTRLB_WINMODE_MODE1_Val << ADC_CTRLB_WINMODE_Pos)
#define ADC_CTRLB_WINMODE_MODE2 (ADC_CTRLB_WINMODE_MODE2_Val << ADC_CTRLB_WINMODE_Pos)
#define ADC_CTRLB_WINMODE_MODE3 (ADC_CTRLB_WINMODE_MODE3_Val << ADC_CTRLB_WINMODE_Pos)
#define ADC_CTRLB_WINMODE_MODE4 (ADC_CTRLB_WINMODE_MODE4_Val << ADC_CTRLB_WINMODE_Pos)
#define ADC_CTRLB_WINSS_Pos 11
#define ADC_CTRLB_WINSS (_U_(0x1) << ADC_CTRLB_WINSS_Pos)
#define ADC_CTRLB_MASK _U_(0x0F1F)



typedef union {
  struct {
    uint8_t REFSEL:4;
    uint8_t :3;
    uint8_t REFCOMP:1;
  } bit;
  uint8_t reg;
} ADC_REFCTRL_Type;


#define ADC_REFCTRL_OFFSET 0x08
#define ADC_REFCTRL_RESETVALUE _U_(0x00)

#define ADC_REFCTRL_REFSEL_Pos 0
#define ADC_REFCTRL_REFSEL_Msk (_U_(0xF) << ADC_REFCTRL_REFSEL_Pos)
#define ADC_REFCTRL_REFSEL(value) (ADC_REFCTRL_REFSEL_Msk & ((value) << ADC_REFCTRL_REFSEL_Pos))
#define ADC_REFCTRL_REFSEL_INTREF_Val _U_(0x0)
#define ADC_REFCTRL_REFSEL_INTVCC0_Val _U_(0x2)
#define ADC_REFCTRL_REFSEL_INTVCC1_Val _U_(0x3)
#define ADC_REFCTRL_REFSEL_AREFA_Val _U_(0x4)
#define ADC_REFCTRL_REFSEL_AREFB_Val _U_(0x5)
#define ADC_REFCTRL_REFSEL_AREFC_Val _U_(0x6)
#define ADC_REFCTRL_REFSEL_INTREF (ADC_REFCTRL_REFSEL_INTREF_Val << ADC_REFCTRL_REFSEL_Pos)
#define ADC_REFCTRL_REFSEL_INTVCC0 (ADC_REFCTRL_REFSEL_INTVCC0_Val << ADC_REFCTRL_REFSEL_Pos)
#define ADC_REFCTRL_REFSEL_INTVCC1 (ADC_REFCTRL_REFSEL_INTVCC1_Val << ADC_REFCTRL_REFSEL_Pos)
#define ADC_REFCTRL_REFSEL_AREFA (ADC_REFCTRL_REFSEL_AREFA_Val << ADC_REFCTRL_REFSEL_Pos)
#define ADC_REFCTRL_REFSEL_AREFB (ADC_REFCTRL_REFSEL_AREFB_Val << ADC_REFCTRL_REFSEL_Pos)
#define ADC_REFCTRL_REFSEL_AREFC (ADC_REFCTRL_REFSEL_AREFC_Val << ADC_REFCTRL_REFSEL_Pos)
#define ADC_REFCTRL_REFCOMP_Pos 7
#define ADC_REFCTRL_REFCOMP (_U_(0x1) << ADC_REFCTRL_REFCOMP_Pos)
#define ADC_REFCTRL_MASK _U_(0x8F)



typedef union {
  struct {
    uint8_t SAMPLENUM:4;
    uint8_t ADJRES:3;
    uint8_t :1;
  } bit;
  uint8_t reg;
} ADC_AVGCTRL_Type;


#define ADC_AVGCTRL_OFFSET 0x0A
#define ADC_AVGCTRL_RESETVALUE _U_(0x00)

#define ADC_AVGCTRL_SAMPLENUM_Pos 0
#define ADC_AVGCTRL_SAMPLENUM_Msk (_U_(0xF) << ADC_AVGCTRL_SAMPLENUM_Pos)
#define ADC_AVGCTRL_SAMPLENUM(value) (ADC_AVGCTRL_SAMPLENUM_Msk & ((value) << ADC_AVGCTRL_SAMPLENUM_Pos))
#define ADC_AVGCTRL_SAMPLENUM_1_Val _U_(0x0)
#define ADC_AVGCTRL_SAMPLENUM_2_Val _U_(0x1)
#define ADC_AVGCTRL_SAMPLENUM_4_Val _U_(0x2)
#define ADC_AVGCTRL_SAMPLENUM_8_Val _U_(0x3)
#define ADC_AVGCTRL_SAMPLENUM_16_Val _U_(0x4)
#define ADC_AVGCTRL_SAMPLENUM_32_Val _U_(0x5)
#define ADC_AVGCTRL_SAMPLENUM_64_Val _U_(0x6)
#define ADC_AVGCTRL_SAMPLENUM_128_Val _U_(0x7)
#define ADC_AVGCTRL_SAMPLENUM_256_Val _U_(0x8)
#define ADC_AVGCTRL_SAMPLENUM_512_Val _U_(0x9)
#define ADC_AVGCTRL_SAMPLENUM_1024_Val _U_(0xA)
#define ADC_AVGCTRL_SAMPLENUM_1 (ADC_AVGCTRL_SAMPLENUM_1_Val << ADC_AVGCTRL_SAMPLENUM_Pos)
#define ADC_AVGCTRL_SAMPLENUM_2 (ADC_AVGCTRL_SAMPLENUM_2_Val << ADC_AVGCTRL_SAMPLENUM_Pos)
#define ADC_AVGCTRL_SAMPLENUM_4 (ADC_AVGCTRL_SAMPLENUM_4_Val << ADC_AVGCTRL_SAMPLENUM_Pos)
#define ADC_AVGCTRL_SAMPLENUM_8 (ADC_AVGCTRL_SAMPLENUM_8_Val << ADC_AVGCTRL_SAMPLENUM_Pos)
#define ADC_AVGCTRL_SAMPLENUM_16 (ADC_AVGCTRL_SAMPLENUM_16_Val << ADC_AVGCTRL_SAMPLENUM_Pos)
#define ADC_AVGCTRL_SAMPLENUM_32 (ADC_AVGCTRL_SAMPLENUM_32_Val << ADC_AVGCTRL_SAMPLENUM_Pos)
#define ADC_AVGCTRL_SAMPLENUM_64 (ADC_AVGCTRL_SAMPLENUM_64_Val << ADC_AVGCTRL_SAMPLENUM_Pos)
#define ADC_AVGCTRL_SAMPLENUM_128 (ADC_AVGCTRL_SAMPLENUM_128_Val << ADC_AVGCTRL_SAMPLENUM_Pos)
#define ADC_AVGCTRL_SAMPLENUM_256 (ADC_AVGCTRL_SAMPLENUM_256_Val << ADC_AVGCTRL_SAMPLENUM_Pos)
#define ADC_AVGCTRL_SAMPLENUM_512 (ADC_AVGCTRL_SAMPLENUM_512_Val << ADC_AVGCTRL_SAMPLENUM_Pos)
#define ADC_AVGCTRL_SAMPLENUM_1024 (ADC_AVGCTRL_SAMPLENUM_1024_Val << ADC_AVGCTRL_SAMPLENUM_Pos)
#define ADC_AVGCTRL_ADJRES_Pos 4
#define ADC_AVGCTRL_ADJRES_Msk (_U_(0x7) << ADC_AVGCTRL_ADJRES_Pos)
#define ADC_AVGCTRL_ADJRES(value) (ADC_AVGCTRL_ADJRES_Msk & ((value) << ADC_AVGCTRL_ADJRES_Pos))
#define ADC_AVGCTRL_MASK _U_(0x7F)



typedef union {
  struct {
    uint8_t SAMPLEN:6;
    uint8_t :1;
    uint8_t OFFCOMP:1;
  } bit;
  uint8_t reg;
} ADC_SAMPCTRL_Type;


#define ADC_SAMPCTRL_OFFSET 0x0B
#define ADC_SAMPCTRL_RESETVALUE _U_(0x00)

#define ADC_SAMPCTRL_SAMPLEN_Pos 0
#define ADC_SAMPCTRL_SAMPLEN_Msk (_U_(0x3F) << ADC_SAMPCTRL_SAMPLEN_Pos)
#define ADC_SAMPCTRL_SAMPLEN(value) (ADC_SAMPCTRL_SAMPLEN_Msk & ((value) << ADC_SAMPCTRL_SAMPLEN_Pos))
#define ADC_SAMPCTRL_OFFCOMP_Pos 7
#define ADC_SAMPCTRL_OFFCOMP (_U_(0x1) << ADC_SAMPCTRL_OFFCOMP_Pos)
#define ADC_SAMPCTRL_MASK _U_(0xBF)



typedef union {
  struct {
    uint16_t WINLT:16;
  } bit;
  uint16_t reg;
} ADC_WINLT_Type;


#define ADC_WINLT_OFFSET 0x0C
#define ADC_WINLT_RESETVALUE _U_(0x0000)

#define ADC_WINLT_WINLT_Pos 0
#define ADC_WINLT_WINLT_Msk (_U_(0xFFFF) << ADC_WINLT_WINLT_Pos)
#define ADC_WINLT_WINLT(value) (ADC_WINLT_WINLT_Msk & ((value) << ADC_WINLT_WINLT_Pos))
#define ADC_WINLT_MASK _U_(0xFFFF)



typedef union {
  struct {
    uint16_t WINUT:16;
  } bit;
  uint16_t reg;
} ADC_WINUT_Type;


#define ADC_WINUT_OFFSET 0x0E
#define ADC_WINUT_RESETVALUE _U_(0x0000)

#define ADC_WINUT_WINUT_Pos 0
#define ADC_WINUT_WINUT_Msk (_U_(0xFFFF) << ADC_WINUT_WINUT_Pos)
#define ADC_WINUT_WINUT(value) (ADC_WINUT_WINUT_Msk & ((value) << ADC_WINUT_WINUT_Pos))
#define ADC_WINUT_MASK _U_(0xFFFF)



typedef union {
  struct {
    uint16_t GAINCORR:12;
    uint16_t :4;
  } bit;
  uint16_t reg;
} ADC_GAINCORR_Type;


#define ADC_GAINCORR_OFFSET 0x10
#define ADC_GAINCORR_RESETVALUE _U_(0x0000)

#define ADC_GAINCORR_GAINCORR_Pos 0
#define ADC_GAINCORR_GAINCORR_Msk (_U_(0xFFF) << ADC_GAINCORR_GAINCORR_Pos)
#define ADC_GAINCORR_GAINCORR(value) (ADC_GAINCORR_GAINCORR_Msk & ((value) << ADC_GAINCORR_GAINCORR_Pos))
#define ADC_GAINCORR_MASK _U_(0x0FFF)



typedef union {
  struct {
    uint16_t OFFSETCORR:12;
    uint16_t :4;
  } bit;
  uint16_t reg;
} ADC_OFFSETCORR_Type;


#define ADC_OFFSETCORR_OFFSET 0x12
#define ADC_OFFSETCORR_RESETVALUE _U_(0x0000)

#define ADC_OFFSETCORR_OFFSETCORR_Pos 0
#define ADC_OFFSETCORR_OFFSETCORR_Msk (_U_(0xFFF) << ADC_OFFSETCORR_OFFSETCORR_Pos)
#define ADC_OFFSETCORR_OFFSETCORR(value) (ADC_OFFSETCORR_OFFSETCORR_Msk & ((value) << ADC_OFFSETCORR_OFFSETCORR_Pos))
#define ADC_OFFSETCORR_MASK _U_(0x0FFF)



typedef union {
  struct {
    uint8_t FLUSH:1;
    uint8_t START:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} ADC_SWTRIG_Type;


#define ADC_SWTRIG_OFFSET 0x14
#define ADC_SWTRIG_RESETVALUE _U_(0x00)

#define ADC_SWTRIG_FLUSH_Pos 0
#define ADC_SWTRIG_FLUSH (_U_(0x1) << ADC_SWTRIG_FLUSH_Pos)
#define ADC_SWTRIG_START_Pos 1
#define ADC_SWTRIG_START (_U_(0x1) << ADC_SWTRIG_START_Pos)
#define ADC_SWTRIG_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t RESRDY:1;
    uint8_t OVERRUN:1;
    uint8_t WINMON:1;
    uint8_t :5;
  } bit;
  uint8_t reg;
} ADC_INTENCLR_Type;


#define ADC_INTENCLR_OFFSET 0x2C
#define ADC_INTENCLR_RESETVALUE _U_(0x00)

#define ADC_INTENCLR_RESRDY_Pos 0
#define ADC_INTENCLR_RESRDY (_U_(0x1) << ADC_INTENCLR_RESRDY_Pos)
#define ADC_INTENCLR_OVERRUN_Pos 1
#define ADC_INTENCLR_OVERRUN (_U_(0x1) << ADC_INTENCLR_OVERRUN_Pos)
#define ADC_INTENCLR_WINMON_Pos 2
#define ADC_INTENCLR_WINMON (_U_(0x1) << ADC_INTENCLR_WINMON_Pos)
#define ADC_INTENCLR_MASK _U_(0x07)



typedef union {
  struct {
    uint8_t RESRDY:1;
    uint8_t OVERRUN:1;
    uint8_t WINMON:1;
    uint8_t :5;
  } bit;
  uint8_t reg;
} ADC_INTENSET_Type;


#define ADC_INTENSET_OFFSET 0x2D
#define ADC_INTENSET_RESETVALUE _U_(0x00)

#define ADC_INTENSET_RESRDY_Pos 0
#define ADC_INTENSET_RESRDY (_U_(0x1) << ADC_INTENSET_RESRDY_Pos)
#define ADC_INTENSET_OVERRUN_Pos 1
#define ADC_INTENSET_OVERRUN (_U_(0x1) << ADC_INTENSET_OVERRUN_Pos)
#define ADC_INTENSET_WINMON_Pos 2
#define ADC_INTENSET_WINMON (_U_(0x1) << ADC_INTENSET_WINMON_Pos)
#define ADC_INTENSET_MASK _U_(0x07)



typedef union {
  struct {
    volatile const uint8_t RESRDY:1;
    volatile const uint8_t OVERRUN:1;
    volatile const uint8_t WINMON:1;
    volatile const uint8_t :5;
  } bit;
  uint8_t reg;
} ADC_INTFLAG_Type;


#define ADC_INTFLAG_OFFSET 0x2E
#define ADC_INTFLAG_RESETVALUE _U_(0x00)

#define ADC_INTFLAG_RESRDY_Pos 0
#define ADC_INTFLAG_RESRDY (_U_(0x1) << ADC_INTFLAG_RESRDY_Pos)
#define ADC_INTFLAG_OVERRUN_Pos 1
#define ADC_INTFLAG_OVERRUN (_U_(0x1) << ADC_INTFLAG_OVERRUN_Pos)
#define ADC_INTFLAG_WINMON_Pos 2
#define ADC_INTFLAG_WINMON (_U_(0x1) << ADC_INTFLAG_WINMON_Pos)
#define ADC_INTFLAG_MASK _U_(0x07)



typedef union {
  struct {
    uint8_t ADCBUSY:1;
    uint8_t :1;
    uint8_t WCC:6;
  } bit;
  uint8_t reg;
} ADC_STATUS_Type;


#define ADC_STATUS_OFFSET 0x2F
#define ADC_STATUS_RESETVALUE _U_(0x00)

#define ADC_STATUS_ADCBUSY_Pos 0
#define ADC_STATUS_ADCBUSY (_U_(0x1) << ADC_STATUS_ADCBUSY_Pos)
#define ADC_STATUS_WCC_Pos 2
#define ADC_STATUS_WCC_Msk (_U_(0x3F) << ADC_STATUS_WCC_Pos)
#define ADC_STATUS_WCC(value) (ADC_STATUS_WCC_Msk & ((value) << ADC_STATUS_WCC_Pos))
#define ADC_STATUS_MASK _U_(0xFD)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t INPUTCTRL:1;
    uint32_t CTRLB:1;
    uint32_t REFCTRL:1;
    uint32_t AVGCTRL:1;
    uint32_t SAMPCTRL:1;
    uint32_t WINLT:1;
    uint32_t WINUT:1;
    uint32_t GAINCORR:1;
    uint32_t OFFSETCORR:1;
    uint32_t SWTRIG:1;
    uint32_t :20;
  } bit;
  uint32_t reg;
} ADC_SYNCBUSY_Type;


#define ADC_SYNCBUSY_OFFSET 0x30
#define ADC_SYNCBUSY_RESETVALUE _U_(0x00000000)

#define ADC_SYNCBUSY_SWRST_Pos 0
#define ADC_SYNCBUSY_SWRST (_U_(0x1) << ADC_SYNCBUSY_SWRST_Pos)
#define ADC_SYNCBUSY_ENABLE_Pos 1
#define ADC_SYNCBUSY_ENABLE (_U_(0x1) << ADC_SYNCBUSY_ENABLE_Pos)
#define ADC_SYNCBUSY_INPUTCTRL_Pos 2
#define ADC_SYNCBUSY_INPUTCTRL (_U_(0x1) << ADC_SYNCBUSY_INPUTCTRL_Pos)
#define ADC_SYNCBUSY_CTRLB_Pos 3
#define ADC_SYNCBUSY_CTRLB (_U_(0x1) << ADC_SYNCBUSY_CTRLB_Pos)
#define ADC_SYNCBUSY_REFCTRL_Pos 4
#define ADC_SYNCBUSY_REFCTRL (_U_(0x1) << ADC_SYNCBUSY_REFCTRL_Pos)
#define ADC_SYNCBUSY_AVGCTRL_Pos 5
#define ADC_SYNCBUSY_AVGCTRL (_U_(0x1) << ADC_SYNCBUSY_AVGCTRL_Pos)
#define ADC_SYNCBUSY_SAMPCTRL_Pos 6
#define ADC_SYNCBUSY_SAMPCTRL (_U_(0x1) << ADC_SYNCBUSY_SAMPCTRL_Pos)
#define ADC_SYNCBUSY_WINLT_Pos 7
#define ADC_SYNCBUSY_WINLT (_U_(0x1) << ADC_SYNCBUSY_WINLT_Pos)
#define ADC_SYNCBUSY_WINUT_Pos 8
#define ADC_SYNCBUSY_WINUT (_U_(0x1) << ADC_SYNCBUSY_WINUT_Pos)
#define ADC_SYNCBUSY_GAINCORR_Pos 9
#define ADC_SYNCBUSY_GAINCORR (_U_(0x1) << ADC_SYNCBUSY_GAINCORR_Pos)
#define ADC_SYNCBUSY_OFFSETCORR_Pos 10
#define ADC_SYNCBUSY_OFFSETCORR (_U_(0x1) << ADC_SYNCBUSY_OFFSETCORR_Pos)
#define ADC_SYNCBUSY_SWTRIG_Pos 11
#define ADC_SYNCBUSY_SWTRIG (_U_(0x1) << ADC_SYNCBUSY_SWTRIG_Pos)
#define ADC_SYNCBUSY_MASK _U_(0x00000FFF)



typedef union {
  struct {
    uint32_t DATA:32;
  } bit;
  uint32_t reg;
} ADC_DSEQDATA_Type;


#define ADC_DSEQDATA_OFFSET 0x34
#define ADC_DSEQDATA_RESETVALUE _U_(0x00000000)

#define ADC_DSEQDATA_DATA_Pos 0
#define ADC_DSEQDATA_DATA_Msk (_U_(0xFFFFFFFF) << ADC_DSEQDATA_DATA_Pos)
#define ADC_DSEQDATA_DATA(value) (ADC_DSEQDATA_DATA_Msk & ((value) << ADC_DSEQDATA_DATA_Pos))
#define ADC_DSEQDATA_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t INPUTCTRL:1;
    uint32_t CTRLB:1;
    uint32_t REFCTRL:1;
    uint32_t AVGCTRL:1;
    uint32_t SAMPCTRL:1;
    uint32_t WINLT:1;
    uint32_t WINUT:1;
    uint32_t GAINCORR:1;
    uint32_t OFFSETCORR:1;
    uint32_t :22;
    uint32_t AUTOSTART:1;
  } bit;
  uint32_t reg;
} ADC_DSEQCTRL_Type;


#define ADC_DSEQCTRL_OFFSET 0x38
#define ADC_DSEQCTRL_RESETVALUE _U_(0x00000000)

#define ADC_DSEQCTRL_INPUTCTRL_Pos 0
#define ADC_DSEQCTRL_INPUTCTRL (_U_(0x1) << ADC_DSEQCTRL_INPUTCTRL_Pos)
#define ADC_DSEQCTRL_CTRLB_Pos 1
#define ADC_DSEQCTRL_CTRLB (_U_(0x1) << ADC_DSEQCTRL_CTRLB_Pos)
#define ADC_DSEQCTRL_REFCTRL_Pos 2
#define ADC_DSEQCTRL_REFCTRL (_U_(0x1) << ADC_DSEQCTRL_REFCTRL_Pos)
#define ADC_DSEQCTRL_AVGCTRL_Pos 3
#define ADC_DSEQCTRL_AVGCTRL (_U_(0x1) << ADC_DSEQCTRL_AVGCTRL_Pos)
#define ADC_DSEQCTRL_SAMPCTRL_Pos 4
#define ADC_DSEQCTRL_SAMPCTRL (_U_(0x1) << ADC_DSEQCTRL_SAMPCTRL_Pos)
#define ADC_DSEQCTRL_WINLT_Pos 5
#define ADC_DSEQCTRL_WINLT (_U_(0x1) << ADC_DSEQCTRL_WINLT_Pos)
#define ADC_DSEQCTRL_WINUT_Pos 6
#define ADC_DSEQCTRL_WINUT (_U_(0x1) << ADC_DSEQCTRL_WINUT_Pos)
#define ADC_DSEQCTRL_GAINCORR_Pos 7
#define ADC_DSEQCTRL_GAINCORR (_U_(0x1) << ADC_DSEQCTRL_GAINCORR_Pos)
#define ADC_DSEQCTRL_OFFSETCORR_Pos 8
#define ADC_DSEQCTRL_OFFSETCORR (_U_(0x1) << ADC_DSEQCTRL_OFFSETCORR_Pos)
#define ADC_DSEQCTRL_AUTOSTART_Pos 31
#define ADC_DSEQCTRL_AUTOSTART (_U_(0x1) << ADC_DSEQCTRL_AUTOSTART_Pos)
#define ADC_DSEQCTRL_MASK _U_(0x800001FF)



typedef union {
  struct {
    uint32_t INPUTCTRL:1;
    uint32_t CTRLB:1;
    uint32_t REFCTRL:1;
    uint32_t AVGCTRL:1;
    uint32_t SAMPCTRL:1;
    uint32_t WINLT:1;
    uint32_t WINUT:1;
    uint32_t GAINCORR:1;
    uint32_t OFFSETCORR:1;
    uint32_t :22;
    uint32_t BUSY:1;
  } bit;
  uint32_t reg;
} ADC_DSEQSTAT_Type;


#define ADC_DSEQSTAT_OFFSET 0x3C
#define ADC_DSEQSTAT_RESETVALUE _U_(0x00000000)

#define ADC_DSEQSTAT_INPUTCTRL_Pos 0
#define ADC_DSEQSTAT_INPUTCTRL (_U_(0x1) << ADC_DSEQSTAT_INPUTCTRL_Pos)
#define ADC_DSEQSTAT_CTRLB_Pos 1
#define ADC_DSEQSTAT_CTRLB (_U_(0x1) << ADC_DSEQSTAT_CTRLB_Pos)
#define ADC_DSEQSTAT_REFCTRL_Pos 2
#define ADC_DSEQSTAT_REFCTRL (_U_(0x1) << ADC_DSEQSTAT_REFCTRL_Pos)
#define ADC_DSEQSTAT_AVGCTRL_Pos 3
#define ADC_DSEQSTAT_AVGCTRL (_U_(0x1) << ADC_DSEQSTAT_AVGCTRL_Pos)
#define ADC_DSEQSTAT_SAMPCTRL_Pos 4
#define ADC_DSEQSTAT_SAMPCTRL (_U_(0x1) << ADC_DSEQSTAT_SAMPCTRL_Pos)
#define ADC_DSEQSTAT_WINLT_Pos 5
#define ADC_DSEQSTAT_WINLT (_U_(0x1) << ADC_DSEQSTAT_WINLT_Pos)
#define ADC_DSEQSTAT_WINUT_Pos 6
#define ADC_DSEQSTAT_WINUT (_U_(0x1) << ADC_DSEQSTAT_WINUT_Pos)
#define ADC_DSEQSTAT_GAINCORR_Pos 7
#define ADC_DSEQSTAT_GAINCORR (_U_(0x1) << ADC_DSEQSTAT_GAINCORR_Pos)
#define ADC_DSEQSTAT_OFFSETCORR_Pos 8
#define ADC_DSEQSTAT_OFFSETCORR (_U_(0x1) << ADC_DSEQSTAT_OFFSETCORR_Pos)
#define ADC_DSEQSTAT_BUSY_Pos 31
#define ADC_DSEQSTAT_BUSY (_U_(0x1) << ADC_DSEQSTAT_BUSY_Pos)
#define ADC_DSEQSTAT_MASK _U_(0x800001FF)



typedef union {
  struct {
    uint16_t RESULT:16;
  } bit;
  uint16_t reg;
} ADC_RESULT_Type;


#define ADC_RESULT_OFFSET 0x40
#define ADC_RESULT_RESETVALUE _U_(0x0000)

#define ADC_RESULT_RESULT_Pos 0
#define ADC_RESULT_RESULT_Msk (_U_(0xFFFF) << ADC_RESULT_RESULT_Pos)
#define ADC_RESULT_RESULT(value) (ADC_RESULT_RESULT_Msk & ((value) << ADC_RESULT_RESULT_Pos))
#define ADC_RESULT_MASK _U_(0xFFFF)



typedef union {
  struct {
    uint16_t RESS:16;
  } bit;
  uint16_t reg;
} ADC_RESS_Type;


#define ADC_RESS_OFFSET 0x44
#define ADC_RESS_RESETVALUE _U_(0x0000)

#define ADC_RESS_RESS_Pos 0
#define ADC_RESS_RESS_Msk (_U_(0xFFFF) << ADC_RESS_RESS_Pos)
#define ADC_RESS_RESS(value) (ADC_RESS_RESS_Msk & ((value) << ADC_RESS_RESS_Pos))
#define ADC_RESS_MASK _U_(0xFFFF)



typedef union {
  struct {
    uint16_t BIASCOMP:3;
    uint16_t :1;
    uint16_t BIASR2R:3;
    uint16_t :1;
    uint16_t BIASREFBUF:3;
    uint16_t :5;
  } bit;
  uint16_t reg;
} ADC_CALIB_Type;


#define ADC_CALIB_OFFSET 0x48
#define ADC_CALIB_RESETVALUE _U_(0x0000)

#define ADC_CALIB_BIASCOMP_Pos 0
#define ADC_CALIB_BIASCOMP_Msk (_U_(0x7) << ADC_CALIB_BIASCOMP_Pos)
#define ADC_CALIB_BIASCOMP(value) (ADC_CALIB_BIASCOMP_Msk & ((value) << ADC_CALIB_BIASCOMP_Pos))
#define ADC_CALIB_BIASR2R_Pos 4
#define ADC_CALIB_BIASR2R_Msk (_U_(0x7) << ADC_CALIB_BIASR2R_Pos)
#define ADC_CALIB_BIASR2R(value) (ADC_CALIB_BIASR2R_Msk & ((value) << ADC_CALIB_BIASR2R_Pos))
#define ADC_CALIB_BIASREFBUF_Pos 8
#define ADC_CALIB_BIASREFBUF_Msk (_U_(0x7) << ADC_CALIB_BIASREFBUF_Pos)
#define ADC_CALIB_BIASREFBUF(value) (ADC_CALIB_BIASREFBUF_Msk & ((value) << ADC_CALIB_BIASREFBUF_Pos))
#define ADC_CALIB_MASK _U_(0x0777)



typedef struct {
  volatile ADC_CTRLA_Type CTRLA;
  volatile ADC_EVCTRL_Type EVCTRL;
  volatile ADC_DBGCTRL_Type DBGCTRL;
  volatile ADC_INPUTCTRL_Type INPUTCTRL;
  volatile ADC_CTRLB_Type CTRLB;
  volatile ADC_REFCTRL_Type REFCTRL;
       RoReg8 Reserved1[0x1];
  volatile ADC_AVGCTRL_Type AVGCTRL;
  volatile ADC_SAMPCTRL_Type SAMPCTRL;
  volatile ADC_WINLT_Type WINLT;
  volatile ADC_WINUT_Type WINUT;
  volatile ADC_GAINCORR_Type GAINCORR;
  volatile ADC_OFFSETCORR_Type OFFSETCORR;
  volatile ADC_SWTRIG_Type SWTRIG;
       RoReg8 Reserved2[0x17];
  volatile ADC_INTENCLR_Type INTENCLR;
  volatile ADC_INTENSET_Type INTENSET;
  volatile ADC_INTFLAG_Type INTFLAG;
  volatile const ADC_STATUS_Type STATUS;
  volatile const ADC_SYNCBUSY_Type SYNCBUSY;
  volatile ADC_DSEQDATA_Type DSEQDATA;
  volatile ADC_DSEQCTRL_Type DSEQCTRL;
  volatile const ADC_DSEQSTAT_Type DSEQSTAT;
  volatile const ADC_RESULT_Type RESULT;
       RoReg8 Reserved3[0x2];
  volatile const ADC_RESS_Type RESS;
       RoReg8 Reserved4[0x2];
  volatile ADC_CALIB_Type CALIB;
} Adc;
# 583 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/aes.h" 1
# 31 "asf4/samd51/include/component/aes.h"
#define _SAMD51_AES_COMPONENT_ 







#define AES_U2238 
#define REV_AES 0x220



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t AESMODE:3;
    uint32_t CFBS:3;
    uint32_t KEYSIZE:2;
    uint32_t CIPHER:1;
    uint32_t STARTMODE:1;
    uint32_t LOD:1;
    uint32_t KEYGEN:1;
    uint32_t XORKEY:1;
    uint32_t :1;
    uint32_t CTYPE:4;
    uint32_t :12;
  } bit;
  uint32_t reg;
} AES_CTRLA_Type;


#define AES_CTRLA_OFFSET 0x00
#define AES_CTRLA_RESETVALUE _U_(0x00000000)

#define AES_CTRLA_SWRST_Pos 0
#define AES_CTRLA_SWRST (_U_(0x1) << AES_CTRLA_SWRST_Pos)
#define AES_CTRLA_ENABLE_Pos 1
#define AES_CTRLA_ENABLE (_U_(0x1) << AES_CTRLA_ENABLE_Pos)
#define AES_CTRLA_AESMODE_Pos 2
#define AES_CTRLA_AESMODE_Msk (_U_(0x7) << AES_CTRLA_AESMODE_Pos)
#define AES_CTRLA_AESMODE(value) (AES_CTRLA_AESMODE_Msk & ((value) << AES_CTRLA_AESMODE_Pos))
#define AES_CTRLA_AESMODE_ECB_Val _U_(0x0)
#define AES_CTRLA_AESMODE_CBC_Val _U_(0x1)
#define AES_CTRLA_AESMODE_OFB_Val _U_(0x2)
#define AES_CTRLA_AESMODE_CFB_Val _U_(0x3)
#define AES_CTRLA_AESMODE_COUNTER_Val _U_(0x4)
#define AES_CTRLA_AESMODE_CCM_Val _U_(0x5)
#define AES_CTRLA_AESMODE_GCM_Val _U_(0x6)
#define AES_CTRLA_AESMODE_ECB (AES_CTRLA_AESMODE_ECB_Val << AES_CTRLA_AESMODE_Pos)
#define AES_CTRLA_AESMODE_CBC (AES_CTRLA_AESMODE_CBC_Val << AES_CTRLA_AESMODE_Pos)
#define AES_CTRLA_AESMODE_OFB (AES_CTRLA_AESMODE_OFB_Val << AES_CTRLA_AESMODE_Pos)
#define AES_CTRLA_AESMODE_CFB (AES_CTRLA_AESMODE_CFB_Val << AES_CTRLA_AESMODE_Pos)
#define AES_CTRLA_AESMODE_COUNTER (AES_CTRLA_AESMODE_COUNTER_Val << AES_CTRLA_AESMODE_Pos)
#define AES_CTRLA_AESMODE_CCM (AES_CTRLA_AESMODE_CCM_Val << AES_CTRLA_AESMODE_Pos)
#define AES_CTRLA_AESMODE_GCM (AES_CTRLA_AESMODE_GCM_Val << AES_CTRLA_AESMODE_Pos)
#define AES_CTRLA_CFBS_Pos 5
#define AES_CTRLA_CFBS_Msk (_U_(0x7) << AES_CTRLA_CFBS_Pos)
#define AES_CTRLA_CFBS(value) (AES_CTRLA_CFBS_Msk & ((value) << AES_CTRLA_CFBS_Pos))
#define AES_CTRLA_CFBS_128BIT_Val _U_(0x0)
#define AES_CTRLA_CFBS_64BIT_Val _U_(0x1)
#define AES_CTRLA_CFBS_32BIT_Val _U_(0x2)
#define AES_CTRLA_CFBS_16BIT_Val _U_(0x3)
#define AES_CTRLA_CFBS_8BIT_Val _U_(0x4)
#define AES_CTRLA_CFBS_128BIT (AES_CTRLA_CFBS_128BIT_Val << AES_CTRLA_CFBS_Pos)
#define AES_CTRLA_CFBS_64BIT (AES_CTRLA_CFBS_64BIT_Val << AES_CTRLA_CFBS_Pos)
#define AES_CTRLA_CFBS_32BIT (AES_CTRLA_CFBS_32BIT_Val << AES_CTRLA_CFBS_Pos)
#define AES_CTRLA_CFBS_16BIT (AES_CTRLA_CFBS_16BIT_Val << AES_CTRLA_CFBS_Pos)
#define AES_CTRLA_CFBS_8BIT (AES_CTRLA_CFBS_8BIT_Val << AES_CTRLA_CFBS_Pos)
#define AES_CTRLA_KEYSIZE_Pos 8
#define AES_CTRLA_KEYSIZE_Msk (_U_(0x3) << AES_CTRLA_KEYSIZE_Pos)
#define AES_CTRLA_KEYSIZE(value) (AES_CTRLA_KEYSIZE_Msk & ((value) << AES_CTRLA_KEYSIZE_Pos))
#define AES_CTRLA_KEYSIZE_128BIT_Val _U_(0x0)
#define AES_CTRLA_KEYSIZE_192BIT_Val _U_(0x1)
#define AES_CTRLA_KEYSIZE_256BIT_Val _U_(0x2)
#define AES_CTRLA_KEYSIZE_128BIT (AES_CTRLA_KEYSIZE_128BIT_Val << AES_CTRLA_KEYSIZE_Pos)
#define AES_CTRLA_KEYSIZE_192BIT (AES_CTRLA_KEYSIZE_192BIT_Val << AES_CTRLA_KEYSIZE_Pos)
#define AES_CTRLA_KEYSIZE_256BIT (AES_CTRLA_KEYSIZE_256BIT_Val << AES_CTRLA_KEYSIZE_Pos)
#define AES_CTRLA_CIPHER_Pos 10
#define AES_CTRLA_CIPHER (_U_(0x1) << AES_CTRLA_CIPHER_Pos)
#define AES_CTRLA_CIPHER_DEC_Val _U_(0x0)
#define AES_CTRLA_CIPHER_ENC_Val _U_(0x1)
#define AES_CTRLA_CIPHER_DEC (AES_CTRLA_CIPHER_DEC_Val << AES_CTRLA_CIPHER_Pos)
#define AES_CTRLA_CIPHER_ENC (AES_CTRLA_CIPHER_ENC_Val << AES_CTRLA_CIPHER_Pos)
#define AES_CTRLA_STARTMODE_Pos 11
#define AES_CTRLA_STARTMODE (_U_(0x1) << AES_CTRLA_STARTMODE_Pos)
#define AES_CTRLA_STARTMODE_MANUAL_Val _U_(0x0)
#define AES_CTRLA_STARTMODE_AUTO_Val _U_(0x1)
#define AES_CTRLA_STARTMODE_MANUAL (AES_CTRLA_STARTMODE_MANUAL_Val << AES_CTRLA_STARTMODE_Pos)
#define AES_CTRLA_STARTMODE_AUTO (AES_CTRLA_STARTMODE_AUTO_Val << AES_CTRLA_STARTMODE_Pos)
#define AES_CTRLA_LOD_Pos 12
#define AES_CTRLA_LOD (_U_(0x1) << AES_CTRLA_LOD_Pos)
#define AES_CTRLA_LOD_NONE_Val _U_(0x0)
#define AES_CTRLA_LOD_LAST_Val _U_(0x1)
#define AES_CTRLA_LOD_NONE (AES_CTRLA_LOD_NONE_Val << AES_CTRLA_LOD_Pos)
#define AES_CTRLA_LOD_LAST (AES_CTRLA_LOD_LAST_Val << AES_CTRLA_LOD_Pos)
#define AES_CTRLA_KEYGEN_Pos 13
#define AES_CTRLA_KEYGEN (_U_(0x1) << AES_CTRLA_KEYGEN_Pos)
#define AES_CTRLA_KEYGEN_NONE_Val _U_(0x0)
#define AES_CTRLA_KEYGEN_LAST_Val _U_(0x1)
#define AES_CTRLA_KEYGEN_NONE (AES_CTRLA_KEYGEN_NONE_Val << AES_CTRLA_KEYGEN_Pos)
#define AES_CTRLA_KEYGEN_LAST (AES_CTRLA_KEYGEN_LAST_Val << AES_CTRLA_KEYGEN_Pos)
#define AES_CTRLA_XORKEY_Pos 14
#define AES_CTRLA_XORKEY (_U_(0x1) << AES_CTRLA_XORKEY_Pos)
#define AES_CTRLA_XORKEY_NONE_Val _U_(0x0)
#define AES_CTRLA_XORKEY_XOR_Val _U_(0x1)
#define AES_CTRLA_XORKEY_NONE (AES_CTRLA_XORKEY_NONE_Val << AES_CTRLA_XORKEY_Pos)
#define AES_CTRLA_XORKEY_XOR (AES_CTRLA_XORKEY_XOR_Val << AES_CTRLA_XORKEY_Pos)
#define AES_CTRLA_CTYPE_Pos 16
#define AES_CTRLA_CTYPE_Msk (_U_(0xF) << AES_CTRLA_CTYPE_Pos)
#define AES_CTRLA_CTYPE(value) (AES_CTRLA_CTYPE_Msk & ((value) << AES_CTRLA_CTYPE_Pos))
#define AES_CTRLA_MASK _U_(0x000F7FFF)



typedef union {
  struct {
    uint8_t START:1;
    uint8_t NEWMSG:1;
    uint8_t EOM:1;
    uint8_t GFMUL:1;
    uint8_t :4;
  } bit;
  uint8_t reg;
} AES_CTRLB_Type;


#define AES_CTRLB_OFFSET 0x04
#define AES_CTRLB_RESETVALUE _U_(0x00)

#define AES_CTRLB_START_Pos 0
#define AES_CTRLB_START (_U_(0x1) << AES_CTRLB_START_Pos)
#define AES_CTRLB_NEWMSG_Pos 1
#define AES_CTRLB_NEWMSG (_U_(0x1) << AES_CTRLB_NEWMSG_Pos)
#define AES_CTRLB_EOM_Pos 2
#define AES_CTRLB_EOM (_U_(0x1) << AES_CTRLB_EOM_Pos)
#define AES_CTRLB_GFMUL_Pos 3
#define AES_CTRLB_GFMUL (_U_(0x1) << AES_CTRLB_GFMUL_Pos)
#define AES_CTRLB_MASK _U_(0x0F)



typedef union {
  struct {
    uint8_t ENCCMP:1;
    uint8_t GFMCMP:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} AES_INTENCLR_Type;


#define AES_INTENCLR_OFFSET 0x05
#define AES_INTENCLR_RESETVALUE _U_(0x00)

#define AES_INTENCLR_ENCCMP_Pos 0
#define AES_INTENCLR_ENCCMP (_U_(0x1) << AES_INTENCLR_ENCCMP_Pos)
#define AES_INTENCLR_GFMCMP_Pos 1
#define AES_INTENCLR_GFMCMP (_U_(0x1) << AES_INTENCLR_GFMCMP_Pos)
#define AES_INTENCLR_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t ENCCMP:1;
    uint8_t GFMCMP:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} AES_INTENSET_Type;


#define AES_INTENSET_OFFSET 0x06
#define AES_INTENSET_RESETVALUE _U_(0x00)

#define AES_INTENSET_ENCCMP_Pos 0
#define AES_INTENSET_ENCCMP (_U_(0x1) << AES_INTENSET_ENCCMP_Pos)
#define AES_INTENSET_GFMCMP_Pos 1
#define AES_INTENSET_GFMCMP (_U_(0x1) << AES_INTENSET_GFMCMP_Pos)
#define AES_INTENSET_MASK _U_(0x03)



typedef union {
  struct {
    volatile const uint8_t ENCCMP:1;
    volatile const uint8_t GFMCMP:1;
    volatile const uint8_t :6;
  } bit;
  uint8_t reg;
} AES_INTFLAG_Type;


#define AES_INTFLAG_OFFSET 0x07
#define AES_INTFLAG_RESETVALUE _U_(0x00)

#define AES_INTFLAG_ENCCMP_Pos 0
#define AES_INTFLAG_ENCCMP (_U_(0x1) << AES_INTFLAG_ENCCMP_Pos)
#define AES_INTFLAG_GFMCMP_Pos 1
#define AES_INTFLAG_GFMCMP (_U_(0x1) << AES_INTFLAG_GFMCMP_Pos)
#define AES_INTFLAG_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t INDATAPTR:2;
    uint8_t :6;
  } bit;
  uint8_t reg;
} AES_DATABUFPTR_Type;


#define AES_DATABUFPTR_OFFSET 0x08
#define AES_DATABUFPTR_RESETVALUE _U_(0x00)

#define AES_DATABUFPTR_INDATAPTR_Pos 0
#define AES_DATABUFPTR_INDATAPTR_Msk (_U_(0x3) << AES_DATABUFPTR_INDATAPTR_Pos)
#define AES_DATABUFPTR_INDATAPTR(value) (AES_DATABUFPTR_INDATAPTR_Msk & ((value) << AES_DATABUFPTR_INDATAPTR_Pos))
#define AES_DATABUFPTR_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t DBGRUN:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} AES_DBGCTRL_Type;


#define AES_DBGCTRL_OFFSET 0x09
#define AES_DBGCTRL_RESETVALUE _U_(0x00)

#define AES_DBGCTRL_DBGRUN_Pos 0
#define AES_DBGCTRL_DBGRUN (_U_(0x1) << AES_DBGCTRL_DBGRUN_Pos)
#define AES_DBGCTRL_MASK _U_(0x01)



typedef union {
  uint32_t reg;
} AES_KEYWORD_Type;


#define AES_KEYWORD_OFFSET 0x0C
#define AES_KEYWORD_RESETVALUE _U_(0x00000000)
#define AES_KEYWORD_MASK _U_(0xFFFFFFFF)



typedef union {
  uint32_t reg;
} AES_INDATA_Type;


#define AES_INDATA_OFFSET 0x38
#define AES_INDATA_RESETVALUE _U_(0x00000000)
#define AES_INDATA_MASK _U_(0xFFFFFFFF)



typedef union {
  uint32_t reg;
} AES_INTVECTV_Type;


#define AES_INTVECTV_OFFSET 0x3C
#define AES_INTVECTV_RESETVALUE _U_(0x00000000)
#define AES_INTVECTV_MASK _U_(0xFFFFFFFF)



typedef union {
  uint32_t reg;
} AES_HASHKEY_Type;


#define AES_HASHKEY_OFFSET 0x5C
#define AES_HASHKEY_RESETVALUE _U_(0x00000000)
#define AES_HASHKEY_MASK _U_(0xFFFFFFFF)



typedef union {
  uint32_t reg;
} AES_GHASH_Type;


#define AES_GHASH_OFFSET 0x6C
#define AES_GHASH_RESETVALUE _U_(0x00000000)
#define AES_GHASH_MASK _U_(0xFFFFFFFF)



typedef union {
  uint32_t reg;
} AES_CIPLEN_Type;


#define AES_CIPLEN_OFFSET 0x80
#define AES_CIPLEN_RESETVALUE _U_(0x00000000)
#define AES_CIPLEN_MASK _U_(0xFFFFFFFF)



typedef union {
  uint32_t reg;
} AES_RANDSEED_Type;


#define AES_RANDSEED_OFFSET 0x84
#define AES_RANDSEED_RESETVALUE _U_(0x00000000)
#define AES_RANDSEED_MASK _U_(0xFFFFFFFF)



typedef struct {
  volatile AES_CTRLA_Type CTRLA;
  volatile AES_CTRLB_Type CTRLB;
  volatile AES_INTENCLR_Type INTENCLR;
  volatile AES_INTENSET_Type INTENSET;
  volatile AES_INTFLAG_Type INTFLAG;
  volatile AES_DATABUFPTR_Type DATABUFPTR;
  volatile AES_DBGCTRL_Type DBGCTRL;
       RoReg8 Reserved1[0x2];
  volatile AES_KEYWORD_Type KEYWORD[8];
       RoReg8 Reserved2[0xC];
  volatile AES_INDATA_Type INDATA;
  volatile AES_INTVECTV_Type INTVECTV[4];
       RoReg8 Reserved3[0x10];
  volatile AES_HASHKEY_Type HASHKEY[4];
  volatile AES_GHASH_Type GHASH[4];
       RoReg8 Reserved4[0x4];
  volatile AES_CIPLEN_Type CIPLEN;
  volatile AES_RANDSEED_Type RANDSEED;
} Aes;
# 584 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/ccl.h" 1
# 31 "asf4/samd51/include/component/ccl.h"
#define _SAMD51_CCL_COMPONENT_ 







#define CCL_U2225 
#define REV_CCL 0x110



typedef union {
  struct {
    uint8_t SWRST:1;
    uint8_t ENABLE:1;
    uint8_t :4;
    uint8_t RUNSTDBY:1;
    uint8_t :1;
  } bit;
  uint8_t reg;
} CCL_CTRL_Type;


#define CCL_CTRL_OFFSET 0x0
#define CCL_CTRL_RESETVALUE _U_(0x00)

#define CCL_CTRL_SWRST_Pos 0
#define CCL_CTRL_SWRST (_U_(0x1) << CCL_CTRL_SWRST_Pos)
#define CCL_CTRL_ENABLE_Pos 1
#define CCL_CTRL_ENABLE (_U_(0x1) << CCL_CTRL_ENABLE_Pos)
#define CCL_CTRL_RUNSTDBY_Pos 6
#define CCL_CTRL_RUNSTDBY (_U_(0x1) << CCL_CTRL_RUNSTDBY_Pos)
#define CCL_CTRL_MASK _U_(0x43)



typedef union {
  struct {
    uint8_t SEQSEL:4;
    uint8_t :4;
  } bit;
  uint8_t reg;
} CCL_SEQCTRL_Type;


#define CCL_SEQCTRL_OFFSET 0x4
#define CCL_SEQCTRL_RESETVALUE _U_(0x00)

#define CCL_SEQCTRL_SEQSEL_Pos 0
#define CCL_SEQCTRL_SEQSEL_Msk (_U_(0xF) << CCL_SEQCTRL_SEQSEL_Pos)
#define CCL_SEQCTRL_SEQSEL(value) (CCL_SEQCTRL_SEQSEL_Msk & ((value) << CCL_SEQCTRL_SEQSEL_Pos))
#define CCL_SEQCTRL_SEQSEL_DISABLE_Val _U_(0x0)
#define CCL_SEQCTRL_SEQSEL_DFF_Val _U_(0x1)
#define CCL_SEQCTRL_SEQSEL_JK_Val _U_(0x2)
#define CCL_SEQCTRL_SEQSEL_LATCH_Val _U_(0x3)
#define CCL_SEQCTRL_SEQSEL_RS_Val _U_(0x4)
#define CCL_SEQCTRL_SEQSEL_DISABLE (CCL_SEQCTRL_SEQSEL_DISABLE_Val << CCL_SEQCTRL_SEQSEL_Pos)
#define CCL_SEQCTRL_SEQSEL_DFF (CCL_SEQCTRL_SEQSEL_DFF_Val << CCL_SEQCTRL_SEQSEL_Pos)
#define CCL_SEQCTRL_SEQSEL_JK (CCL_SEQCTRL_SEQSEL_JK_Val << CCL_SEQCTRL_SEQSEL_Pos)
#define CCL_SEQCTRL_SEQSEL_LATCH (CCL_SEQCTRL_SEQSEL_LATCH_Val << CCL_SEQCTRL_SEQSEL_Pos)
#define CCL_SEQCTRL_SEQSEL_RS (CCL_SEQCTRL_SEQSEL_RS_Val << CCL_SEQCTRL_SEQSEL_Pos)
#define CCL_SEQCTRL_MASK _U_(0x0F)



typedef union {
  struct {
    uint32_t :1;
    uint32_t ENABLE:1;
    uint32_t :2;
    uint32_t FILTSEL:2;
    uint32_t :1;
    uint32_t EDGESEL:1;
    uint32_t INSEL0:4;
    uint32_t INSEL1:4;
    uint32_t INSEL2:4;
    uint32_t INVEI:1;
    uint32_t LUTEI:1;
    uint32_t LUTEO:1;
    uint32_t :1;
    uint32_t TRUTH:8;
  } bit;
  uint32_t reg;
} CCL_LUTCTRL_Type;


#define CCL_LUTCTRL_OFFSET 0x8
#define CCL_LUTCTRL_RESETVALUE _U_(0x00000000)

#define CCL_LUTCTRL_ENABLE_Pos 1
#define CCL_LUTCTRL_ENABLE (_U_(0x1) << CCL_LUTCTRL_ENABLE_Pos)
#define CCL_LUTCTRL_FILTSEL_Pos 4
#define CCL_LUTCTRL_FILTSEL_Msk (_U_(0x3) << CCL_LUTCTRL_FILTSEL_Pos)
#define CCL_LUTCTRL_FILTSEL(value) (CCL_LUTCTRL_FILTSEL_Msk & ((value) << CCL_LUTCTRL_FILTSEL_Pos))
#define CCL_LUTCTRL_FILTSEL_DISABLE_Val _U_(0x0)
#define CCL_LUTCTRL_FILTSEL_SYNCH_Val _U_(0x1)
#define CCL_LUTCTRL_FILTSEL_FILTER_Val _U_(0x2)
#define CCL_LUTCTRL_FILTSEL_DISABLE (CCL_LUTCTRL_FILTSEL_DISABLE_Val << CCL_LUTCTRL_FILTSEL_Pos)
#define CCL_LUTCTRL_FILTSEL_SYNCH (CCL_LUTCTRL_FILTSEL_SYNCH_Val << CCL_LUTCTRL_FILTSEL_Pos)
#define CCL_LUTCTRL_FILTSEL_FILTER (CCL_LUTCTRL_FILTSEL_FILTER_Val << CCL_LUTCTRL_FILTSEL_Pos)
#define CCL_LUTCTRL_EDGESEL_Pos 7
#define CCL_LUTCTRL_EDGESEL (_U_(0x1) << CCL_LUTCTRL_EDGESEL_Pos)
#define CCL_LUTCTRL_INSEL0_Pos 8
#define CCL_LUTCTRL_INSEL0_Msk (_U_(0xF) << CCL_LUTCTRL_INSEL0_Pos)
#define CCL_LUTCTRL_INSEL0(value) (CCL_LUTCTRL_INSEL0_Msk & ((value) << CCL_LUTCTRL_INSEL0_Pos))
#define CCL_LUTCTRL_INSEL0_MASK_Val _U_(0x0)
#define CCL_LUTCTRL_INSEL0_FEEDBACK_Val _U_(0x1)
#define CCL_LUTCTRL_INSEL0_LINK_Val _U_(0x2)
#define CCL_LUTCTRL_INSEL0_EVENT_Val _U_(0x3)
#define CCL_LUTCTRL_INSEL0_IO_Val _U_(0x4)
#define CCL_LUTCTRL_INSEL0_AC_Val _U_(0x5)
#define CCL_LUTCTRL_INSEL0_TC_Val _U_(0x6)
#define CCL_LUTCTRL_INSEL0_ALTTC_Val _U_(0x7)
#define CCL_LUTCTRL_INSEL0_TCC_Val _U_(0x8)
#define CCL_LUTCTRL_INSEL0_SERCOM_Val _U_(0x9)
#define CCL_LUTCTRL_INSEL0_MASK (CCL_LUTCTRL_INSEL0_MASK_Val << CCL_LUTCTRL_INSEL0_Pos)
#define CCL_LUTCTRL_INSEL0_FEEDBACK (CCL_LUTCTRL_INSEL0_FEEDBACK_Val << CCL_LUTCTRL_INSEL0_Pos)
#define CCL_LUTCTRL_INSEL0_LINK (CCL_LUTCTRL_INSEL0_LINK_Val << CCL_LUTCTRL_INSEL0_Pos)
#define CCL_LUTCTRL_INSEL0_EVENT (CCL_LUTCTRL_INSEL0_EVENT_Val << CCL_LUTCTRL_INSEL0_Pos)
#define CCL_LUTCTRL_INSEL0_IO (CCL_LUTCTRL_INSEL0_IO_Val << CCL_LUTCTRL_INSEL0_Pos)
#define CCL_LUTCTRL_INSEL0_AC (CCL_LUTCTRL_INSEL0_AC_Val << CCL_LUTCTRL_INSEL0_Pos)
#define CCL_LUTCTRL_INSEL0_TC (CCL_LUTCTRL_INSEL0_TC_Val << CCL_LUTCTRL_INSEL0_Pos)
#define CCL_LUTCTRL_INSEL0_ALTTC (CCL_LUTCTRL_INSEL0_ALTTC_Val << CCL_LUTCTRL_INSEL0_Pos)
#define CCL_LUTCTRL_INSEL0_TCC (CCL_LUTCTRL_INSEL0_TCC_Val << CCL_LUTCTRL_INSEL0_Pos)
#define CCL_LUTCTRL_INSEL0_SERCOM (CCL_LUTCTRL_INSEL0_SERCOM_Val << CCL_LUTCTRL_INSEL0_Pos)
#define CCL_LUTCTRL_INSEL1_Pos 12
#define CCL_LUTCTRL_INSEL1_Msk (_U_(0xF) << CCL_LUTCTRL_INSEL1_Pos)
#define CCL_LUTCTRL_INSEL1(value) (CCL_LUTCTRL_INSEL1_Msk & ((value) << CCL_LUTCTRL_INSEL1_Pos))
#define CCL_LUTCTRL_INSEL1_MASK_Val _U_(0x0)
#define CCL_LUTCTRL_INSEL1_FEEDBACK_Val _U_(0x1)
#define CCL_LUTCTRL_INSEL1_LINK_Val _U_(0x2)
#define CCL_LUTCTRL_INSEL1_EVENT_Val _U_(0x3)
#define CCL_LUTCTRL_INSEL1_IO_Val _U_(0x4)
#define CCL_LUTCTRL_INSEL1_AC_Val _U_(0x5)
#define CCL_LUTCTRL_INSEL1_TC_Val _U_(0x6)
#define CCL_LUTCTRL_INSEL1_ALTTC_Val _U_(0x7)
#define CCL_LUTCTRL_INSEL1_TCC_Val _U_(0x8)
#define CCL_LUTCTRL_INSEL1_SERCOM_Val _U_(0x9)
#define CCL_LUTCTRL_INSEL1_MASK (CCL_LUTCTRL_INSEL1_MASK_Val << CCL_LUTCTRL_INSEL1_Pos)
#define CCL_LUTCTRL_INSEL1_FEEDBACK (CCL_LUTCTRL_INSEL1_FEEDBACK_Val << CCL_LUTCTRL_INSEL1_Pos)
#define CCL_LUTCTRL_INSEL1_LINK (CCL_LUTCTRL_INSEL1_LINK_Val << CCL_LUTCTRL_INSEL1_Pos)
#define CCL_LUTCTRL_INSEL1_EVENT (CCL_LUTCTRL_INSEL1_EVENT_Val << CCL_LUTCTRL_INSEL1_Pos)
#define CCL_LUTCTRL_INSEL1_IO (CCL_LUTCTRL_INSEL1_IO_Val << CCL_LUTCTRL_INSEL1_Pos)
#define CCL_LUTCTRL_INSEL1_AC (CCL_LUTCTRL_INSEL1_AC_Val << CCL_LUTCTRL_INSEL1_Pos)
#define CCL_LUTCTRL_INSEL1_TC (CCL_LUTCTRL_INSEL1_TC_Val << CCL_LUTCTRL_INSEL1_Pos)
#define CCL_LUTCTRL_INSEL1_ALTTC (CCL_LUTCTRL_INSEL1_ALTTC_Val << CCL_LUTCTRL_INSEL1_Pos)
#define CCL_LUTCTRL_INSEL1_TCC (CCL_LUTCTRL_INSEL1_TCC_Val << CCL_LUTCTRL_INSEL1_Pos)
#define CCL_LUTCTRL_INSEL1_SERCOM (CCL_LUTCTRL_INSEL1_SERCOM_Val << CCL_LUTCTRL_INSEL1_Pos)
#define CCL_LUTCTRL_INSEL2_Pos 16
#define CCL_LUTCTRL_INSEL2_Msk (_U_(0xF) << CCL_LUTCTRL_INSEL2_Pos)
#define CCL_LUTCTRL_INSEL2(value) (CCL_LUTCTRL_INSEL2_Msk & ((value) << CCL_LUTCTRL_INSEL2_Pos))
#define CCL_LUTCTRL_INSEL2_MASK_Val _U_(0x0)
#define CCL_LUTCTRL_INSEL2_FEEDBACK_Val _U_(0x1)
#define CCL_LUTCTRL_INSEL2_LINK_Val _U_(0x2)
#define CCL_LUTCTRL_INSEL2_EVENT_Val _U_(0x3)
#define CCL_LUTCTRL_INSEL2_IO_Val _U_(0x4)
#define CCL_LUTCTRL_INSEL2_AC_Val _U_(0x5)
#define CCL_LUTCTRL_INSEL2_TC_Val _U_(0x6)
#define CCL_LUTCTRL_INSEL2_ALTTC_Val _U_(0x7)
#define CCL_LUTCTRL_INSEL2_TCC_Val _U_(0x8)
#define CCL_LUTCTRL_INSEL2_SERCOM_Val _U_(0x9)
#define CCL_LUTCTRL_INSEL2_MASK (CCL_LUTCTRL_INSEL2_MASK_Val << CCL_LUTCTRL_INSEL2_Pos)
#define CCL_LUTCTRL_INSEL2_FEEDBACK (CCL_LUTCTRL_INSEL2_FEEDBACK_Val << CCL_LUTCTRL_INSEL2_Pos)
#define CCL_LUTCTRL_INSEL2_LINK (CCL_LUTCTRL_INSEL2_LINK_Val << CCL_LUTCTRL_INSEL2_Pos)
#define CCL_LUTCTRL_INSEL2_EVENT (CCL_LUTCTRL_INSEL2_EVENT_Val << CCL_LUTCTRL_INSEL2_Pos)
#define CCL_LUTCTRL_INSEL2_IO (CCL_LUTCTRL_INSEL2_IO_Val << CCL_LUTCTRL_INSEL2_Pos)
#define CCL_LUTCTRL_INSEL2_AC (CCL_LUTCTRL_INSEL2_AC_Val << CCL_LUTCTRL_INSEL2_Pos)
#define CCL_LUTCTRL_INSEL2_TC (CCL_LUTCTRL_INSEL2_TC_Val << CCL_LUTCTRL_INSEL2_Pos)
#define CCL_LUTCTRL_INSEL2_ALTTC (CCL_LUTCTRL_INSEL2_ALTTC_Val << CCL_LUTCTRL_INSEL2_Pos)
#define CCL_LUTCTRL_INSEL2_TCC (CCL_LUTCTRL_INSEL2_TCC_Val << CCL_LUTCTRL_INSEL2_Pos)
#define CCL_LUTCTRL_INSEL2_SERCOM (CCL_LUTCTRL_INSEL2_SERCOM_Val << CCL_LUTCTRL_INSEL2_Pos)
#define CCL_LUTCTRL_INVEI_Pos 20
#define CCL_LUTCTRL_INVEI (_U_(0x1) << CCL_LUTCTRL_INVEI_Pos)
#define CCL_LUTCTRL_LUTEI_Pos 21
#define CCL_LUTCTRL_LUTEI (_U_(0x1) << CCL_LUTCTRL_LUTEI_Pos)
#define CCL_LUTCTRL_LUTEO_Pos 22
#define CCL_LUTCTRL_LUTEO (_U_(0x1) << CCL_LUTCTRL_LUTEO_Pos)
#define CCL_LUTCTRL_TRUTH_Pos 24
#define CCL_LUTCTRL_TRUTH_Msk (_U_(0xFF) << CCL_LUTCTRL_TRUTH_Pos)
#define CCL_LUTCTRL_TRUTH(value) (CCL_LUTCTRL_TRUTH_Msk & ((value) << CCL_LUTCTRL_TRUTH_Pos))
#define CCL_LUTCTRL_MASK _U_(0xFF7FFFB2)



typedef struct {
  volatile CCL_CTRL_Type CTRL;
       RoReg8 Reserved1[0x3];
  volatile CCL_SEQCTRL_Type SEQCTRL[2];
       RoReg8 Reserved2[0x2];
  volatile CCL_LUTCTRL_Type LUTCTRL[4];
} Ccl;
# 585 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/cmcc.h" 1
# 31 "asf4/samd51/include/component/cmcc.h"
#define _SAMD51_CMCC_COMPONENT_ 







#define CMCC_U2015 
#define REV_CMCC 0x600



typedef union {
  struct {
    uint32_t :1;
    uint32_t GCLK:1;
    uint32_t :2;
    uint32_t RRP:1;
    uint32_t WAYNUM:2;
    uint32_t LCKDOWN:1;
    uint32_t CSIZE:3;
    uint32_t CLSIZE:3;
    uint32_t :18;
  } bit;
  uint32_t reg;
} CMCC_TYPE_Type;


#define CMCC_TYPE_OFFSET 0x00
#define CMCC_TYPE_RESETVALUE _U_(0x000012D2)

#define CMCC_TYPE_GCLK_Pos 1
#define CMCC_TYPE_GCLK (_U_(0x1) << CMCC_TYPE_GCLK_Pos)
#define CMCC_TYPE_RRP_Pos 4
#define CMCC_TYPE_RRP (_U_(0x1) << CMCC_TYPE_RRP_Pos)
#define CMCC_TYPE_WAYNUM_Pos 5
#define CMCC_TYPE_WAYNUM_Msk (_U_(0x3) << CMCC_TYPE_WAYNUM_Pos)
#define CMCC_TYPE_WAYNUM(value) (CMCC_TYPE_WAYNUM_Msk & ((value) << CMCC_TYPE_WAYNUM_Pos))
#define CMCC_TYPE_WAYNUM_DMAPPED_Val _U_(0x0)
#define CMCC_TYPE_WAYNUM_ARCH2WAY_Val _U_(0x1)
#define CMCC_TYPE_WAYNUM_ARCH4WAY_Val _U_(0x2)
#define CMCC_TYPE_WAYNUM_DMAPPED (CMCC_TYPE_WAYNUM_DMAPPED_Val << CMCC_TYPE_WAYNUM_Pos)
#define CMCC_TYPE_WAYNUM_ARCH2WAY (CMCC_TYPE_WAYNUM_ARCH2WAY_Val << CMCC_TYPE_WAYNUM_Pos)
#define CMCC_TYPE_WAYNUM_ARCH4WAY (CMCC_TYPE_WAYNUM_ARCH4WAY_Val << CMCC_TYPE_WAYNUM_Pos)
#define CMCC_TYPE_LCKDOWN_Pos 7
#define CMCC_TYPE_LCKDOWN (_U_(0x1) << CMCC_TYPE_LCKDOWN_Pos)
#define CMCC_TYPE_CSIZE_Pos 8
#define CMCC_TYPE_CSIZE_Msk (_U_(0x7) << CMCC_TYPE_CSIZE_Pos)
#define CMCC_TYPE_CSIZE(value) (CMCC_TYPE_CSIZE_Msk & ((value) << CMCC_TYPE_CSIZE_Pos))
#define CMCC_TYPE_CSIZE_CSIZE_1KB_Val _U_(0x0)
#define CMCC_TYPE_CSIZE_CSIZE_2KB_Val _U_(0x1)
#define CMCC_TYPE_CSIZE_CSIZE_4KB_Val _U_(0x2)
#define CMCC_TYPE_CSIZE_CSIZE_8KB_Val _U_(0x3)
#define CMCC_TYPE_CSIZE_CSIZE_16KB_Val _U_(0x4)
#define CMCC_TYPE_CSIZE_CSIZE_32KB_Val _U_(0x5)
#define CMCC_TYPE_CSIZE_CSIZE_64KB_Val _U_(0x6)
#define CMCC_TYPE_CSIZE_CSIZE_1KB (CMCC_TYPE_CSIZE_CSIZE_1KB_Val << CMCC_TYPE_CSIZE_Pos)
#define CMCC_TYPE_CSIZE_CSIZE_2KB (CMCC_TYPE_CSIZE_CSIZE_2KB_Val << CMCC_TYPE_CSIZE_Pos)
#define CMCC_TYPE_CSIZE_CSIZE_4KB (CMCC_TYPE_CSIZE_CSIZE_4KB_Val << CMCC_TYPE_CSIZE_Pos)
#define CMCC_TYPE_CSIZE_CSIZE_8KB (CMCC_TYPE_CSIZE_CSIZE_8KB_Val << CMCC_TYPE_CSIZE_Pos)
#define CMCC_TYPE_CSIZE_CSIZE_16KB (CMCC_TYPE_CSIZE_CSIZE_16KB_Val << CMCC_TYPE_CSIZE_Pos)
#define CMCC_TYPE_CSIZE_CSIZE_32KB (CMCC_TYPE_CSIZE_CSIZE_32KB_Val << CMCC_TYPE_CSIZE_Pos)
#define CMCC_TYPE_CSIZE_CSIZE_64KB (CMCC_TYPE_CSIZE_CSIZE_64KB_Val << CMCC_TYPE_CSIZE_Pos)
#define CMCC_TYPE_CLSIZE_Pos 11
#define CMCC_TYPE_CLSIZE_Msk (_U_(0x7) << CMCC_TYPE_CLSIZE_Pos)
#define CMCC_TYPE_CLSIZE(value) (CMCC_TYPE_CLSIZE_Msk & ((value) << CMCC_TYPE_CLSIZE_Pos))
#define CMCC_TYPE_CLSIZE_CLSIZE_4B_Val _U_(0x0)
#define CMCC_TYPE_CLSIZE_CLSIZE_8B_Val _U_(0x1)
#define CMCC_TYPE_CLSIZE_CLSIZE_16B_Val _U_(0x2)
#define CMCC_TYPE_CLSIZE_CLSIZE_32B_Val _U_(0x3)
#define CMCC_TYPE_CLSIZE_CLSIZE_64B_Val _U_(0x4)
#define CMCC_TYPE_CLSIZE_CLSIZE_128B_Val _U_(0x5)
#define CMCC_TYPE_CLSIZE_CLSIZE_4B (CMCC_TYPE_CLSIZE_CLSIZE_4B_Val << CMCC_TYPE_CLSIZE_Pos)
#define CMCC_TYPE_CLSIZE_CLSIZE_8B (CMCC_TYPE_CLSIZE_CLSIZE_8B_Val << CMCC_TYPE_CLSIZE_Pos)
#define CMCC_TYPE_CLSIZE_CLSIZE_16B (CMCC_TYPE_CLSIZE_CLSIZE_16B_Val << CMCC_TYPE_CLSIZE_Pos)
#define CMCC_TYPE_CLSIZE_CLSIZE_32B (CMCC_TYPE_CLSIZE_CLSIZE_32B_Val << CMCC_TYPE_CLSIZE_Pos)
#define CMCC_TYPE_CLSIZE_CLSIZE_64B (CMCC_TYPE_CLSIZE_CLSIZE_64B_Val << CMCC_TYPE_CLSIZE_Pos)
#define CMCC_TYPE_CLSIZE_CLSIZE_128B (CMCC_TYPE_CLSIZE_CLSIZE_128B_Val << CMCC_TYPE_CLSIZE_Pos)
#define CMCC_TYPE_MASK _U_(0x00003FF2)



typedef union {
  struct {
    uint32_t :1;
    uint32_t ICDIS:1;
    uint32_t DCDIS:1;
    uint32_t :1;
    uint32_t CSIZESW:3;
    uint32_t :25;
  } bit;
  uint32_t reg;
} CMCC_CFG_Type;


#define CMCC_CFG_OFFSET 0x04
#define CMCC_CFG_RESETVALUE _U_(0x00000020)

#define CMCC_CFG_ICDIS_Pos 1
#define CMCC_CFG_ICDIS (_U_(0x1) << CMCC_CFG_ICDIS_Pos)
#define CMCC_CFG_DCDIS_Pos 2
#define CMCC_CFG_DCDIS (_U_(0x1) << CMCC_CFG_DCDIS_Pos)
#define CMCC_CFG_CSIZESW_Pos 4
#define CMCC_CFG_CSIZESW_Msk (_U_(0x7) << CMCC_CFG_CSIZESW_Pos)
#define CMCC_CFG_CSIZESW(value) (CMCC_CFG_CSIZESW_Msk & ((value) << CMCC_CFG_CSIZESW_Pos))
#define CMCC_CFG_CSIZESW_CONF_CSIZE_1KB_Val _U_(0x0)
#define CMCC_CFG_CSIZESW_CONF_CSIZE_2KB_Val _U_(0x1)
#define CMCC_CFG_CSIZESW_CONF_CSIZE_4KB_Val _U_(0x2)
#define CMCC_CFG_CSIZESW_CONF_CSIZE_8KB_Val _U_(0x3)
#define CMCC_CFG_CSIZESW_CONF_CSIZE_16KB_Val _U_(0x4)
#define CMCC_CFG_CSIZESW_CONF_CSIZE_32KB_Val _U_(0x5)
#define CMCC_CFG_CSIZESW_CONF_CSIZE_64KB_Val _U_(0x6)
#define CMCC_CFG_CSIZESW_CONF_CSIZE_1KB (CMCC_CFG_CSIZESW_CONF_CSIZE_1KB_Val << CMCC_CFG_CSIZESW_Pos)
#define CMCC_CFG_CSIZESW_CONF_CSIZE_2KB (CMCC_CFG_CSIZESW_CONF_CSIZE_2KB_Val << CMCC_CFG_CSIZESW_Pos)
#define CMCC_CFG_CSIZESW_CONF_CSIZE_4KB (CMCC_CFG_CSIZESW_CONF_CSIZE_4KB_Val << CMCC_CFG_CSIZESW_Pos)
#define CMCC_CFG_CSIZESW_CONF_CSIZE_8KB (CMCC_CFG_CSIZESW_CONF_CSIZE_8KB_Val << CMCC_CFG_CSIZESW_Pos)
#define CMCC_CFG_CSIZESW_CONF_CSIZE_16KB (CMCC_CFG_CSIZESW_CONF_CSIZE_16KB_Val << CMCC_CFG_CSIZESW_Pos)
#define CMCC_CFG_CSIZESW_CONF_CSIZE_32KB (CMCC_CFG_CSIZESW_CONF_CSIZE_32KB_Val << CMCC_CFG_CSIZESW_Pos)
#define CMCC_CFG_CSIZESW_CONF_CSIZE_64KB (CMCC_CFG_CSIZESW_CONF_CSIZE_64KB_Val << CMCC_CFG_CSIZESW_Pos)
#define CMCC_CFG_MASK _U_(0x00000076)



typedef union {
  struct {
    uint32_t CEN:1;
    uint32_t :31;
  } bit;
  uint32_t reg;
} CMCC_CTRL_Type;


#define CMCC_CTRL_OFFSET 0x08
#define CMCC_CTRL_RESETVALUE _U_(0x00000000)

#define CMCC_CTRL_CEN_Pos 0
#define CMCC_CTRL_CEN (_U_(0x1) << CMCC_CTRL_CEN_Pos)
#define CMCC_CTRL_MASK _U_(0x00000001)



typedef union {
  struct {
    uint32_t CSTS:1;
    uint32_t :31;
  } bit;
  uint32_t reg;
} CMCC_SR_Type;


#define CMCC_SR_OFFSET 0x0C
#define CMCC_SR_RESETVALUE _U_(0x00000000)

#define CMCC_SR_CSTS_Pos 0
#define CMCC_SR_CSTS (_U_(0x1) << CMCC_SR_CSTS_Pos)
#define CMCC_SR_MASK _U_(0x00000001)



typedef union {
  struct {
    uint32_t LCKWAY:4;
    uint32_t :28;
  } bit;
  uint32_t reg;
} CMCC_LCKWAY_Type;


#define CMCC_LCKWAY_OFFSET 0x10
#define CMCC_LCKWAY_RESETVALUE _U_(0x00000000)

#define CMCC_LCKWAY_LCKWAY_Pos 0
#define CMCC_LCKWAY_LCKWAY_Msk (_U_(0xF) << CMCC_LCKWAY_LCKWAY_Pos)
#define CMCC_LCKWAY_LCKWAY(value) (CMCC_LCKWAY_LCKWAY_Msk & ((value) << CMCC_LCKWAY_LCKWAY_Pos))
#define CMCC_LCKWAY_MASK _U_(0x0000000F)



typedef union {
  struct {
    uint32_t INVALL:1;
    uint32_t :31;
  } bit;
  uint32_t reg;
} CMCC_MAINT0_Type;


#define CMCC_MAINT0_OFFSET 0x20
#define CMCC_MAINT0_RESETVALUE _U_(0x00000000)

#define CMCC_MAINT0_INVALL_Pos 0
#define CMCC_MAINT0_INVALL (_U_(0x1) << CMCC_MAINT0_INVALL_Pos)
#define CMCC_MAINT0_MASK _U_(0x00000001)



typedef union {
  struct {
    uint32_t :4;
    uint32_t INDEX:8;
    uint32_t :16;
    uint32_t WAY:4;
  } bit;
  uint32_t reg;
} CMCC_MAINT1_Type;


#define CMCC_MAINT1_OFFSET 0x24
#define CMCC_MAINT1_RESETVALUE _U_(0x00000000)

#define CMCC_MAINT1_INDEX_Pos 4
#define CMCC_MAINT1_INDEX_Msk (_U_(0xFF) << CMCC_MAINT1_INDEX_Pos)
#define CMCC_MAINT1_INDEX(value) (CMCC_MAINT1_INDEX_Msk & ((value) << CMCC_MAINT1_INDEX_Pos))
#define CMCC_MAINT1_WAY_Pos 28
#define CMCC_MAINT1_WAY_Msk (_U_(0xF) << CMCC_MAINT1_WAY_Pos)
#define CMCC_MAINT1_WAY(value) (CMCC_MAINT1_WAY_Msk & ((value) << CMCC_MAINT1_WAY_Pos))
#define CMCC_MAINT1_WAY_WAY0_Val _U_(0x0)
#define CMCC_MAINT1_WAY_WAY1_Val _U_(0x1)
#define CMCC_MAINT1_WAY_WAY2_Val _U_(0x2)
#define CMCC_MAINT1_WAY_WAY3_Val _U_(0x3)
#define CMCC_MAINT1_WAY_WAY0 (CMCC_MAINT1_WAY_WAY0_Val << CMCC_MAINT1_WAY_Pos)
#define CMCC_MAINT1_WAY_WAY1 (CMCC_MAINT1_WAY_WAY1_Val << CMCC_MAINT1_WAY_Pos)
#define CMCC_MAINT1_WAY_WAY2 (CMCC_MAINT1_WAY_WAY2_Val << CMCC_MAINT1_WAY_Pos)
#define CMCC_MAINT1_WAY_WAY3 (CMCC_MAINT1_WAY_WAY3_Val << CMCC_MAINT1_WAY_Pos)
#define CMCC_MAINT1_MASK _U_(0xF0000FF0)



typedef union {
  struct {
    uint32_t MODE:2;
    uint32_t :30;
  } bit;
  uint32_t reg;
} CMCC_MCFG_Type;


#define CMCC_MCFG_OFFSET 0x28
#define CMCC_MCFG_RESETVALUE _U_(0x00000000)

#define CMCC_MCFG_MODE_Pos 0
#define CMCC_MCFG_MODE_Msk (_U_(0x3) << CMCC_MCFG_MODE_Pos)
#define CMCC_MCFG_MODE(value) (CMCC_MCFG_MODE_Msk & ((value) << CMCC_MCFG_MODE_Pos))
#define CMCC_MCFG_MODE_CYCLE_COUNT_Val _U_(0x0)
#define CMCC_MCFG_MODE_IHIT_COUNT_Val _U_(0x1)
#define CMCC_MCFG_MODE_DHIT_COUNT_Val _U_(0x2)
#define CMCC_MCFG_MODE_CYCLE_COUNT (CMCC_MCFG_MODE_CYCLE_COUNT_Val << CMCC_MCFG_MODE_Pos)
#define CMCC_MCFG_MODE_IHIT_COUNT (CMCC_MCFG_MODE_IHIT_COUNT_Val << CMCC_MCFG_MODE_Pos)
#define CMCC_MCFG_MODE_DHIT_COUNT (CMCC_MCFG_MODE_DHIT_COUNT_Val << CMCC_MCFG_MODE_Pos)
#define CMCC_MCFG_MASK _U_(0x00000003)



typedef union {
  struct {
    uint32_t MENABLE:1;
    uint32_t :31;
  } bit;
  uint32_t reg;
} CMCC_MEN_Type;


#define CMCC_MEN_OFFSET 0x2C
#define CMCC_MEN_RESETVALUE _U_(0x00000000)

#define CMCC_MEN_MENABLE_Pos 0
#define CMCC_MEN_MENABLE (_U_(0x1) << CMCC_MEN_MENABLE_Pos)
#define CMCC_MEN_MASK _U_(0x00000001)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t :31;
  } bit;
  uint32_t reg;
} CMCC_MCTRL_Type;


#define CMCC_MCTRL_OFFSET 0x30
#define CMCC_MCTRL_RESETVALUE _U_(0x00000000)

#define CMCC_MCTRL_SWRST_Pos 0
#define CMCC_MCTRL_SWRST (_U_(0x1) << CMCC_MCTRL_SWRST_Pos)
#define CMCC_MCTRL_MASK _U_(0x00000001)



typedef union {
  struct {
    uint32_t EVENT_CNT:32;
  } bit;
  uint32_t reg;
} CMCC_MSR_Type;


#define CMCC_MSR_OFFSET 0x34
#define CMCC_MSR_RESETVALUE _U_(0x00000000)

#define CMCC_MSR_EVENT_CNT_Pos 0
#define CMCC_MSR_EVENT_CNT_Msk (_U_(0xFFFFFFFF) << CMCC_MSR_EVENT_CNT_Pos)
#define CMCC_MSR_EVENT_CNT(value) (CMCC_MSR_EVENT_CNT_Msk & ((value) << CMCC_MSR_EVENT_CNT_Pos))
#define CMCC_MSR_MASK _U_(0xFFFFFFFF)



typedef struct {
  volatile const CMCC_TYPE_Type TYPE;
  volatile CMCC_CFG_Type CFG;
  volatile CMCC_CTRL_Type CTRL;
  volatile const CMCC_SR_Type SR;
  volatile CMCC_LCKWAY_Type LCKWAY;
       RoReg8 Reserved1[0xC];
  volatile CMCC_MAINT0_Type MAINT0;
  volatile CMCC_MAINT1_Type MAINT1;
  volatile CMCC_MCFG_Type MCFG;
  volatile CMCC_MEN_Type MEN;
  volatile CMCC_MCTRL_Type MCTRL;
  volatile const CMCC_MSR_Type MSR;
} Cmcc;
# 586 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/dac.h" 1
# 31 "asf4/samd51/include/component/dac.h"
#define _SAMD51_DAC_COMPONENT_ 







#define DAC_U2502 
#define REV_DAC 0x100



typedef union {
  struct {
    uint8_t SWRST:1;
    uint8_t ENABLE:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} DAC_CTRLA_Type;


#define DAC_CTRLA_OFFSET 0x00
#define DAC_CTRLA_RESETVALUE _U_(0x00)

#define DAC_CTRLA_SWRST_Pos 0
#define DAC_CTRLA_SWRST (_U_(0x1) << DAC_CTRLA_SWRST_Pos)
#define DAC_CTRLA_ENABLE_Pos 1
#define DAC_CTRLA_ENABLE (_U_(0x1) << DAC_CTRLA_ENABLE_Pos)
#define DAC_CTRLA_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t DIFF:1;
    uint8_t REFSEL:2;
    uint8_t :5;
  } bit;
  uint8_t reg;
} DAC_CTRLB_Type;


#define DAC_CTRLB_OFFSET 0x01
#define DAC_CTRLB_RESETVALUE _U_(0x02)

#define DAC_CTRLB_DIFF_Pos 0
#define DAC_CTRLB_DIFF (_U_(0x1) << DAC_CTRLB_DIFF_Pos)
#define DAC_CTRLB_REFSEL_Pos 1
#define DAC_CTRLB_REFSEL_Msk (_U_(0x3) << DAC_CTRLB_REFSEL_Pos)
#define DAC_CTRLB_REFSEL(value) (DAC_CTRLB_REFSEL_Msk & ((value) << DAC_CTRLB_REFSEL_Pos))
#define DAC_CTRLB_REFSEL_VREFPU_Val _U_(0x0)
#define DAC_CTRLB_REFSEL_VDDANA_Val _U_(0x1)
#define DAC_CTRLB_REFSEL_VREFPB_Val _U_(0x2)
#define DAC_CTRLB_REFSEL_INTREF_Val _U_(0x3)
#define DAC_CTRLB_REFSEL_VREFPU (DAC_CTRLB_REFSEL_VREFPU_Val << DAC_CTRLB_REFSEL_Pos)
#define DAC_CTRLB_REFSEL_VDDANA (DAC_CTRLB_REFSEL_VDDANA_Val << DAC_CTRLB_REFSEL_Pos)
#define DAC_CTRLB_REFSEL_VREFPB (DAC_CTRLB_REFSEL_VREFPB_Val << DAC_CTRLB_REFSEL_Pos)
#define DAC_CTRLB_REFSEL_INTREF (DAC_CTRLB_REFSEL_INTREF_Val << DAC_CTRLB_REFSEL_Pos)
#define DAC_CTRLB_MASK _U_(0x07)



typedef union {
  struct {
    uint8_t STARTEI0:1;
    uint8_t STARTEI1:1;
    uint8_t EMPTYEO0:1;
    uint8_t EMPTYEO1:1;
    uint8_t INVEI0:1;
    uint8_t INVEI1:1;
    uint8_t RESRDYEO0:1;
    uint8_t RESRDYEO1:1;
  } bit;
  struct {
    uint8_t STARTEI:2;
    uint8_t EMPTYEO:2;
    uint8_t INVEI:2;
    uint8_t RESRDYEO:2;
  } vec;
  uint8_t reg;
} DAC_EVCTRL_Type;


#define DAC_EVCTRL_OFFSET 0x02
#define DAC_EVCTRL_RESETVALUE _U_(0x00)

#define DAC_EVCTRL_STARTEI0_Pos 0
#define DAC_EVCTRL_STARTEI0 (_U_(1) << DAC_EVCTRL_STARTEI0_Pos)
#define DAC_EVCTRL_STARTEI1_Pos 1
#define DAC_EVCTRL_STARTEI1 (_U_(1) << DAC_EVCTRL_STARTEI1_Pos)
#define DAC_EVCTRL_STARTEI_Pos 0
#define DAC_EVCTRL_STARTEI_Msk (_U_(0x3) << DAC_EVCTRL_STARTEI_Pos)
#define DAC_EVCTRL_STARTEI(value) (DAC_EVCTRL_STARTEI_Msk & ((value) << DAC_EVCTRL_STARTEI_Pos))
#define DAC_EVCTRL_EMPTYEO0_Pos 2
#define DAC_EVCTRL_EMPTYEO0 (_U_(1) << DAC_EVCTRL_EMPTYEO0_Pos)
#define DAC_EVCTRL_EMPTYEO1_Pos 3
#define DAC_EVCTRL_EMPTYEO1 (_U_(1) << DAC_EVCTRL_EMPTYEO1_Pos)
#define DAC_EVCTRL_EMPTYEO_Pos 2
#define DAC_EVCTRL_EMPTYEO_Msk (_U_(0x3) << DAC_EVCTRL_EMPTYEO_Pos)
#define DAC_EVCTRL_EMPTYEO(value) (DAC_EVCTRL_EMPTYEO_Msk & ((value) << DAC_EVCTRL_EMPTYEO_Pos))
#define DAC_EVCTRL_INVEI0_Pos 4
#define DAC_EVCTRL_INVEI0 (_U_(1) << DAC_EVCTRL_INVEI0_Pos)
#define DAC_EVCTRL_INVEI1_Pos 5
#define DAC_EVCTRL_INVEI1 (_U_(1) << DAC_EVCTRL_INVEI1_Pos)
#define DAC_EVCTRL_INVEI_Pos 4
#define DAC_EVCTRL_INVEI_Msk (_U_(0x3) << DAC_EVCTRL_INVEI_Pos)
#define DAC_EVCTRL_INVEI(value) (DAC_EVCTRL_INVEI_Msk & ((value) << DAC_EVCTRL_INVEI_Pos))
#define DAC_EVCTRL_RESRDYEO0_Pos 6
#define DAC_EVCTRL_RESRDYEO0 (_U_(1) << DAC_EVCTRL_RESRDYEO0_Pos)
#define DAC_EVCTRL_RESRDYEO1_Pos 7
#define DAC_EVCTRL_RESRDYEO1 (_U_(1) << DAC_EVCTRL_RESRDYEO1_Pos)
#define DAC_EVCTRL_RESRDYEO_Pos 6
#define DAC_EVCTRL_RESRDYEO_Msk (_U_(0x3) << DAC_EVCTRL_RESRDYEO_Pos)
#define DAC_EVCTRL_RESRDYEO(value) (DAC_EVCTRL_RESRDYEO_Msk & ((value) << DAC_EVCTRL_RESRDYEO_Pos))
#define DAC_EVCTRL_MASK _U_(0xFF)



typedef union {
  struct {
    uint8_t UNDERRUN0:1;
    uint8_t UNDERRUN1:1;
    uint8_t EMPTY0:1;
    uint8_t EMPTY1:1;
    uint8_t RESRDY0:1;
    uint8_t RESRDY1:1;
    uint8_t OVERRUN0:1;
    uint8_t OVERRUN1:1;
  } bit;
  struct {
    uint8_t UNDERRUN:2;
    uint8_t EMPTY:2;
    uint8_t RESRDY:2;
    uint8_t OVERRUN:2;
  } vec;
  uint8_t reg;
} DAC_INTENCLR_Type;


#define DAC_INTENCLR_OFFSET 0x04
#define DAC_INTENCLR_RESETVALUE _U_(0x00)

#define DAC_INTENCLR_UNDERRUN0_Pos 0
#define DAC_INTENCLR_UNDERRUN0 (_U_(1) << DAC_INTENCLR_UNDERRUN0_Pos)
#define DAC_INTENCLR_UNDERRUN1_Pos 1
#define DAC_INTENCLR_UNDERRUN1 (_U_(1) << DAC_INTENCLR_UNDERRUN1_Pos)
#define DAC_INTENCLR_UNDERRUN_Pos 0
#define DAC_INTENCLR_UNDERRUN_Msk (_U_(0x3) << DAC_INTENCLR_UNDERRUN_Pos)
#define DAC_INTENCLR_UNDERRUN(value) (DAC_INTENCLR_UNDERRUN_Msk & ((value) << DAC_INTENCLR_UNDERRUN_Pos))
#define DAC_INTENCLR_EMPTY0_Pos 2
#define DAC_INTENCLR_EMPTY0 (_U_(1) << DAC_INTENCLR_EMPTY0_Pos)
#define DAC_INTENCLR_EMPTY1_Pos 3
#define DAC_INTENCLR_EMPTY1 (_U_(1) << DAC_INTENCLR_EMPTY1_Pos)
#define DAC_INTENCLR_EMPTY_Pos 2
#define DAC_INTENCLR_EMPTY_Msk (_U_(0x3) << DAC_INTENCLR_EMPTY_Pos)
#define DAC_INTENCLR_EMPTY(value) (DAC_INTENCLR_EMPTY_Msk & ((value) << DAC_INTENCLR_EMPTY_Pos))
#define DAC_INTENCLR_RESRDY0_Pos 4
#define DAC_INTENCLR_RESRDY0 (_U_(1) << DAC_INTENCLR_RESRDY0_Pos)
#define DAC_INTENCLR_RESRDY1_Pos 5
#define DAC_INTENCLR_RESRDY1 (_U_(1) << DAC_INTENCLR_RESRDY1_Pos)
#define DAC_INTENCLR_RESRDY_Pos 4
#define DAC_INTENCLR_RESRDY_Msk (_U_(0x3) << DAC_INTENCLR_RESRDY_Pos)
#define DAC_INTENCLR_RESRDY(value) (DAC_INTENCLR_RESRDY_Msk & ((value) << DAC_INTENCLR_RESRDY_Pos))
#define DAC_INTENCLR_OVERRUN0_Pos 6
#define DAC_INTENCLR_OVERRUN0 (_U_(1) << DAC_INTENCLR_OVERRUN0_Pos)
#define DAC_INTENCLR_OVERRUN1_Pos 7
#define DAC_INTENCLR_OVERRUN1 (_U_(1) << DAC_INTENCLR_OVERRUN1_Pos)
#define DAC_INTENCLR_OVERRUN_Pos 6
#define DAC_INTENCLR_OVERRUN_Msk (_U_(0x3) << DAC_INTENCLR_OVERRUN_Pos)
#define DAC_INTENCLR_OVERRUN(value) (DAC_INTENCLR_OVERRUN_Msk & ((value) << DAC_INTENCLR_OVERRUN_Pos))
#define DAC_INTENCLR_MASK _U_(0xFF)



typedef union {
  struct {
    uint8_t UNDERRUN0:1;
    uint8_t UNDERRUN1:1;
    uint8_t EMPTY0:1;
    uint8_t EMPTY1:1;
    uint8_t RESRDY0:1;
    uint8_t RESRDY1:1;
    uint8_t OVERRUN0:1;
    uint8_t OVERRUN1:1;
  } bit;
  struct {
    uint8_t UNDERRUN:2;
    uint8_t EMPTY:2;
    uint8_t RESRDY:2;
    uint8_t OVERRUN:2;
  } vec;
  uint8_t reg;
} DAC_INTENSET_Type;


#define DAC_INTENSET_OFFSET 0x05
#define DAC_INTENSET_RESETVALUE _U_(0x00)

#define DAC_INTENSET_UNDERRUN0_Pos 0
#define DAC_INTENSET_UNDERRUN0 (_U_(1) << DAC_INTENSET_UNDERRUN0_Pos)
#define DAC_INTENSET_UNDERRUN1_Pos 1
#define DAC_INTENSET_UNDERRUN1 (_U_(1) << DAC_INTENSET_UNDERRUN1_Pos)
#define DAC_INTENSET_UNDERRUN_Pos 0
#define DAC_INTENSET_UNDERRUN_Msk (_U_(0x3) << DAC_INTENSET_UNDERRUN_Pos)
#define DAC_INTENSET_UNDERRUN(value) (DAC_INTENSET_UNDERRUN_Msk & ((value) << DAC_INTENSET_UNDERRUN_Pos))
#define DAC_INTENSET_EMPTY0_Pos 2
#define DAC_INTENSET_EMPTY0 (_U_(1) << DAC_INTENSET_EMPTY0_Pos)
#define DAC_INTENSET_EMPTY1_Pos 3
#define DAC_INTENSET_EMPTY1 (_U_(1) << DAC_INTENSET_EMPTY1_Pos)
#define DAC_INTENSET_EMPTY_Pos 2
#define DAC_INTENSET_EMPTY_Msk (_U_(0x3) << DAC_INTENSET_EMPTY_Pos)
#define DAC_INTENSET_EMPTY(value) (DAC_INTENSET_EMPTY_Msk & ((value) << DAC_INTENSET_EMPTY_Pos))
#define DAC_INTENSET_RESRDY0_Pos 4
#define DAC_INTENSET_RESRDY0 (_U_(1) << DAC_INTENSET_RESRDY0_Pos)
#define DAC_INTENSET_RESRDY1_Pos 5
#define DAC_INTENSET_RESRDY1 (_U_(1) << DAC_INTENSET_RESRDY1_Pos)
#define DAC_INTENSET_RESRDY_Pos 4
#define DAC_INTENSET_RESRDY_Msk (_U_(0x3) << DAC_INTENSET_RESRDY_Pos)
#define DAC_INTENSET_RESRDY(value) (DAC_INTENSET_RESRDY_Msk & ((value) << DAC_INTENSET_RESRDY_Pos))
#define DAC_INTENSET_OVERRUN0_Pos 6
#define DAC_INTENSET_OVERRUN0 (_U_(1) << DAC_INTENSET_OVERRUN0_Pos)
#define DAC_INTENSET_OVERRUN1_Pos 7
#define DAC_INTENSET_OVERRUN1 (_U_(1) << DAC_INTENSET_OVERRUN1_Pos)
#define DAC_INTENSET_OVERRUN_Pos 6
#define DAC_INTENSET_OVERRUN_Msk (_U_(0x3) << DAC_INTENSET_OVERRUN_Pos)
#define DAC_INTENSET_OVERRUN(value) (DAC_INTENSET_OVERRUN_Msk & ((value) << DAC_INTENSET_OVERRUN_Pos))
#define DAC_INTENSET_MASK _U_(0xFF)



typedef union {
  struct {
    volatile const uint8_t UNDERRUN0:1;
    volatile const uint8_t UNDERRUN1:1;
    volatile const uint8_t EMPTY0:1;
    volatile const uint8_t EMPTY1:1;
    volatile const uint8_t RESRDY0:1;
    volatile const uint8_t RESRDY1:1;
    volatile const uint8_t OVERRUN0:1;
    volatile const uint8_t OVERRUN1:1;
  } bit;
  struct {
    volatile const uint8_t UNDERRUN:2;
    volatile const uint8_t EMPTY:2;
    volatile const uint8_t RESRDY:2;
    volatile const uint8_t OVERRUN:2;
  } vec;
  uint8_t reg;
} DAC_INTFLAG_Type;


#define DAC_INTFLAG_OFFSET 0x06
#define DAC_INTFLAG_RESETVALUE _U_(0x00)

#define DAC_INTFLAG_UNDERRUN0_Pos 0
#define DAC_INTFLAG_UNDERRUN0 (_U_(1) << DAC_INTFLAG_UNDERRUN0_Pos)
#define DAC_INTFLAG_UNDERRUN1_Pos 1
#define DAC_INTFLAG_UNDERRUN1 (_U_(1) << DAC_INTFLAG_UNDERRUN1_Pos)
#define DAC_INTFLAG_UNDERRUN_Pos 0
#define DAC_INTFLAG_UNDERRUN_Msk (_U_(0x3) << DAC_INTFLAG_UNDERRUN_Pos)
#define DAC_INTFLAG_UNDERRUN(value) (DAC_INTFLAG_UNDERRUN_Msk & ((value) << DAC_INTFLAG_UNDERRUN_Pos))
#define DAC_INTFLAG_EMPTY0_Pos 2
#define DAC_INTFLAG_EMPTY0 (_U_(1) << DAC_INTFLAG_EMPTY0_Pos)
#define DAC_INTFLAG_EMPTY1_Pos 3
#define DAC_INTFLAG_EMPTY1 (_U_(1) << DAC_INTFLAG_EMPTY1_Pos)
#define DAC_INTFLAG_EMPTY_Pos 2
#define DAC_INTFLAG_EMPTY_Msk (_U_(0x3) << DAC_INTFLAG_EMPTY_Pos)
#define DAC_INTFLAG_EMPTY(value) (DAC_INTFLAG_EMPTY_Msk & ((value) << DAC_INTFLAG_EMPTY_Pos))
#define DAC_INTFLAG_RESRDY0_Pos 4
#define DAC_INTFLAG_RESRDY0 (_U_(1) << DAC_INTFLAG_RESRDY0_Pos)
#define DAC_INTFLAG_RESRDY1_Pos 5
#define DAC_INTFLAG_RESRDY1 (_U_(1) << DAC_INTFLAG_RESRDY1_Pos)
#define DAC_INTFLAG_RESRDY_Pos 4
#define DAC_INTFLAG_RESRDY_Msk (_U_(0x3) << DAC_INTFLAG_RESRDY_Pos)
#define DAC_INTFLAG_RESRDY(value) (DAC_INTFLAG_RESRDY_Msk & ((value) << DAC_INTFLAG_RESRDY_Pos))
#define DAC_INTFLAG_OVERRUN0_Pos 6
#define DAC_INTFLAG_OVERRUN0 (_U_(1) << DAC_INTFLAG_OVERRUN0_Pos)
#define DAC_INTFLAG_OVERRUN1_Pos 7
#define DAC_INTFLAG_OVERRUN1 (_U_(1) << DAC_INTFLAG_OVERRUN1_Pos)
#define DAC_INTFLAG_OVERRUN_Pos 6
#define DAC_INTFLAG_OVERRUN_Msk (_U_(0x3) << DAC_INTFLAG_OVERRUN_Pos)
#define DAC_INTFLAG_OVERRUN(value) (DAC_INTFLAG_OVERRUN_Msk & ((value) << DAC_INTFLAG_OVERRUN_Pos))
#define DAC_INTFLAG_MASK _U_(0xFF)



typedef union {
  struct {
    uint8_t READY0:1;
    uint8_t READY1:1;
    uint8_t EOC0:1;
    uint8_t EOC1:1;
    uint8_t :4;
  } bit;
  struct {
    uint8_t READY:2;
    uint8_t EOC:2;
    uint8_t :4;
  } vec;
  uint8_t reg;
} DAC_STATUS_Type;


#define DAC_STATUS_OFFSET 0x07
#define DAC_STATUS_RESETVALUE _U_(0x00)

#define DAC_STATUS_READY0_Pos 0
#define DAC_STATUS_READY0 (_U_(1) << DAC_STATUS_READY0_Pos)
#define DAC_STATUS_READY1_Pos 1
#define DAC_STATUS_READY1 (_U_(1) << DAC_STATUS_READY1_Pos)
#define DAC_STATUS_READY_Pos 0
#define DAC_STATUS_READY_Msk (_U_(0x3) << DAC_STATUS_READY_Pos)
#define DAC_STATUS_READY(value) (DAC_STATUS_READY_Msk & ((value) << DAC_STATUS_READY_Pos))
#define DAC_STATUS_EOC0_Pos 2
#define DAC_STATUS_EOC0 (_U_(1) << DAC_STATUS_EOC0_Pos)
#define DAC_STATUS_EOC1_Pos 3
#define DAC_STATUS_EOC1 (_U_(1) << DAC_STATUS_EOC1_Pos)
#define DAC_STATUS_EOC_Pos 2
#define DAC_STATUS_EOC_Msk (_U_(0x3) << DAC_STATUS_EOC_Pos)
#define DAC_STATUS_EOC(value) (DAC_STATUS_EOC_Msk & ((value) << DAC_STATUS_EOC_Pos))
#define DAC_STATUS_MASK _U_(0x0F)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t DATA0:1;
    uint32_t DATA1:1;
    uint32_t DATABUF0:1;
    uint32_t DATABUF1:1;
    uint32_t :26;
  } bit;
  struct {
    uint32_t :2;
    uint32_t DATA:2;
    uint32_t DATABUF:2;
    uint32_t :26;
  } vec;
  uint32_t reg;
} DAC_SYNCBUSY_Type;


#define DAC_SYNCBUSY_OFFSET 0x08
#define DAC_SYNCBUSY_RESETVALUE _U_(0x00000000)

#define DAC_SYNCBUSY_SWRST_Pos 0
#define DAC_SYNCBUSY_SWRST (_U_(0x1) << DAC_SYNCBUSY_SWRST_Pos)
#define DAC_SYNCBUSY_ENABLE_Pos 1
#define DAC_SYNCBUSY_ENABLE (_U_(0x1) << DAC_SYNCBUSY_ENABLE_Pos)
#define DAC_SYNCBUSY_DATA0_Pos 2
#define DAC_SYNCBUSY_DATA0 (_U_(1) << DAC_SYNCBUSY_DATA0_Pos)
#define DAC_SYNCBUSY_DATA1_Pos 3
#define DAC_SYNCBUSY_DATA1 (_U_(1) << DAC_SYNCBUSY_DATA1_Pos)
#define DAC_SYNCBUSY_DATA_Pos 2
#define DAC_SYNCBUSY_DATA_Msk (_U_(0x3) << DAC_SYNCBUSY_DATA_Pos)
#define DAC_SYNCBUSY_DATA(value) (DAC_SYNCBUSY_DATA_Msk & ((value) << DAC_SYNCBUSY_DATA_Pos))
#define DAC_SYNCBUSY_DATABUF0_Pos 4
#define DAC_SYNCBUSY_DATABUF0 (_U_(1) << DAC_SYNCBUSY_DATABUF0_Pos)
#define DAC_SYNCBUSY_DATABUF1_Pos 5
#define DAC_SYNCBUSY_DATABUF1 (_U_(1) << DAC_SYNCBUSY_DATABUF1_Pos)
#define DAC_SYNCBUSY_DATABUF_Pos 4
#define DAC_SYNCBUSY_DATABUF_Msk (_U_(0x3) << DAC_SYNCBUSY_DATABUF_Pos)
#define DAC_SYNCBUSY_DATABUF(value) (DAC_SYNCBUSY_DATABUF_Msk & ((value) << DAC_SYNCBUSY_DATABUF_Pos))
#define DAC_SYNCBUSY_MASK _U_(0x0000003F)



typedef union {
  struct {
    uint16_t LEFTADJ:1;
    uint16_t ENABLE:1;
    uint16_t CCTRL:2;
    uint16_t :1;
    uint16_t FEXT:1;
    uint16_t RUNSTDBY:1;
    uint16_t DITHER:1;
    uint16_t REFRESH:4;
    uint16_t :1;
    uint16_t OSR:3;
  } bit;
  uint16_t reg;
} DAC_DACCTRL_Type;


#define DAC_DACCTRL_OFFSET 0x0C
#define DAC_DACCTRL_RESETVALUE _U_(0x0000)

#define DAC_DACCTRL_LEFTADJ_Pos 0
#define DAC_DACCTRL_LEFTADJ (_U_(0x1) << DAC_DACCTRL_LEFTADJ_Pos)
#define DAC_DACCTRL_ENABLE_Pos 1
#define DAC_DACCTRL_ENABLE (_U_(0x1) << DAC_DACCTRL_ENABLE_Pos)
#define DAC_DACCTRL_CCTRL_Pos 2
#define DAC_DACCTRL_CCTRL_Msk (_U_(0x3) << DAC_DACCTRL_CCTRL_Pos)
#define DAC_DACCTRL_CCTRL(value) (DAC_DACCTRL_CCTRL_Msk & ((value) << DAC_DACCTRL_CCTRL_Pos))
#define DAC_DACCTRL_CCTRL_CC100K_Val _U_(0x0)
#define DAC_DACCTRL_CCTRL_CC1M_Val _U_(0x1)
#define DAC_DACCTRL_CCTRL_CC12M_Val _U_(0x2)
#define DAC_DACCTRL_CCTRL_CC100K (DAC_DACCTRL_CCTRL_CC100K_Val << DAC_DACCTRL_CCTRL_Pos)
#define DAC_DACCTRL_CCTRL_CC1M (DAC_DACCTRL_CCTRL_CC1M_Val << DAC_DACCTRL_CCTRL_Pos)
#define DAC_DACCTRL_CCTRL_CC12M (DAC_DACCTRL_CCTRL_CC12M_Val << DAC_DACCTRL_CCTRL_Pos)
#define DAC_DACCTRL_FEXT_Pos 5
#define DAC_DACCTRL_FEXT (_U_(0x1) << DAC_DACCTRL_FEXT_Pos)
#define DAC_DACCTRL_RUNSTDBY_Pos 6
#define DAC_DACCTRL_RUNSTDBY (_U_(0x1) << DAC_DACCTRL_RUNSTDBY_Pos)
#define DAC_DACCTRL_DITHER_Pos 7
#define DAC_DACCTRL_DITHER (_U_(0x1) << DAC_DACCTRL_DITHER_Pos)
#define DAC_DACCTRL_REFRESH_Pos 8
#define DAC_DACCTRL_REFRESH_Msk (_U_(0xF) << DAC_DACCTRL_REFRESH_Pos)
#define DAC_DACCTRL_REFRESH(value) (DAC_DACCTRL_REFRESH_Msk & ((value) << DAC_DACCTRL_REFRESH_Pos))
#define DAC_DACCTRL_OSR_Pos 13
#define DAC_DACCTRL_OSR_Msk (_U_(0x7) << DAC_DACCTRL_OSR_Pos)
#define DAC_DACCTRL_OSR(value) (DAC_DACCTRL_OSR_Msk & ((value) << DAC_DACCTRL_OSR_Pos))
#define DAC_DACCTRL_MASK _U_(0xEFEF)



typedef union {
  struct {
    uint16_t DATA:16;
  } bit;
  uint16_t reg;
} DAC_DATA_Type;


#define DAC_DATA_OFFSET 0x10
#define DAC_DATA_RESETVALUE _U_(0x0000)

#define DAC_DATA_DATA_Pos 0
#define DAC_DATA_DATA_Msk (_U_(0xFFFF) << DAC_DATA_DATA_Pos)
#define DAC_DATA_DATA(value) (DAC_DATA_DATA_Msk & ((value) << DAC_DATA_DATA_Pos))
#define DAC_DATA_MASK _U_(0xFFFF)



typedef union {
  struct {
    uint16_t DATABUF:16;
  } bit;
  uint16_t reg;
} DAC_DATABUF_Type;


#define DAC_DATABUF_OFFSET 0x14
#define DAC_DATABUF_RESETVALUE _U_(0x0000)

#define DAC_DATABUF_DATABUF_Pos 0
#define DAC_DATABUF_DATABUF_Msk (_U_(0xFFFF) << DAC_DATABUF_DATABUF_Pos)
#define DAC_DATABUF_DATABUF(value) (DAC_DATABUF_DATABUF_Msk & ((value) << DAC_DATABUF_DATABUF_Pos))
#define DAC_DATABUF_MASK _U_(0xFFFF)



typedef union {
  struct {
    uint8_t DBGRUN:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} DAC_DBGCTRL_Type;


#define DAC_DBGCTRL_OFFSET 0x18
#define DAC_DBGCTRL_RESETVALUE _U_(0x00)

#define DAC_DBGCTRL_DBGRUN_Pos 0
#define DAC_DBGCTRL_DBGRUN (_U_(0x1) << DAC_DBGCTRL_DBGRUN_Pos)
#define DAC_DBGCTRL_MASK _U_(0x01)



typedef union {
  struct {
    uint16_t RESULT:16;
  } bit;
  uint16_t reg;
} DAC_RESULT_Type;


#define DAC_RESULT_OFFSET 0x1C
#define DAC_RESULT_RESETVALUE _U_(0x0000)

#define DAC_RESULT_RESULT_Pos 0
#define DAC_RESULT_RESULT_Msk (_U_(0xFFFF) << DAC_RESULT_RESULT_Pos)
#define DAC_RESULT_RESULT(value) (DAC_RESULT_RESULT_Msk & ((value) << DAC_RESULT_RESULT_Pos))
#define DAC_RESULT_MASK _U_(0xFFFF)



typedef struct {
  volatile DAC_CTRLA_Type CTRLA;
  volatile DAC_CTRLB_Type CTRLB;
  volatile DAC_EVCTRL_Type EVCTRL;
       RoReg8 Reserved1[0x1];
  volatile DAC_INTENCLR_Type INTENCLR;
  volatile DAC_INTENSET_Type INTENSET;
  volatile DAC_INTFLAG_Type INTFLAG;
  volatile const DAC_STATUS_Type STATUS;
  volatile const DAC_SYNCBUSY_Type SYNCBUSY;
  volatile DAC_DACCTRL_Type DACCTRL[2];
  volatile DAC_DATA_Type DATA[2];
  volatile DAC_DATABUF_Type DATABUF[2];
  volatile DAC_DBGCTRL_Type DBGCTRL;
       RoReg8 Reserved2[0x3];
  volatile const DAC_RESULT_Type RESULT[2];
} Dac;
# 587 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/dmac.h" 1
# 31 "asf4/samd51/include/component/dmac.h"
#define _SAMD51_DMAC_COMPONENT_ 







#define DMAC_U2503 
#define REV_DMAC 0x100



typedef union {
  struct {
    uint16_t SWRST:1;
    uint16_t DMAENABLE:1;
    uint16_t :6;
    uint16_t LVLEN0:1;
    uint16_t LVLEN1:1;
    uint16_t LVLEN2:1;
    uint16_t LVLEN3:1;
    uint16_t :4;
  } bit;
  struct {
    uint16_t :8;
    uint16_t LVLEN:4;
    uint16_t :4;
  } vec;
  uint16_t reg;
} DMAC_CTRL_Type;


#define DMAC_CTRL_OFFSET 0x00
#define DMAC_CTRL_RESETVALUE _U_(0x0000)

#define DMAC_CTRL_SWRST_Pos 0
#define DMAC_CTRL_SWRST (_U_(0x1) << DMAC_CTRL_SWRST_Pos)
#define DMAC_CTRL_DMAENABLE_Pos 1
#define DMAC_CTRL_DMAENABLE (_U_(0x1) << DMAC_CTRL_DMAENABLE_Pos)
#define DMAC_CTRL_LVLEN0_Pos 8
#define DMAC_CTRL_LVLEN0 (_U_(1) << DMAC_CTRL_LVLEN0_Pos)
#define DMAC_CTRL_LVLEN1_Pos 9
#define DMAC_CTRL_LVLEN1 (_U_(1) << DMAC_CTRL_LVLEN1_Pos)
#define DMAC_CTRL_LVLEN2_Pos 10
#define DMAC_CTRL_LVLEN2 (_U_(1) << DMAC_CTRL_LVLEN2_Pos)
#define DMAC_CTRL_LVLEN3_Pos 11
#define DMAC_CTRL_LVLEN3 (_U_(1) << DMAC_CTRL_LVLEN3_Pos)
#define DMAC_CTRL_LVLEN_Pos 8
#define DMAC_CTRL_LVLEN_Msk (_U_(0xF) << DMAC_CTRL_LVLEN_Pos)
#define DMAC_CTRL_LVLEN(value) (DMAC_CTRL_LVLEN_Msk & ((value) << DMAC_CTRL_LVLEN_Pos))
#define DMAC_CTRL_MASK _U_(0x0F03)



typedef union {
  struct {
    uint16_t CRCBEATSIZE:2;
    uint16_t CRCPOLY:2;
    uint16_t :4;
    uint16_t CRCSRC:6;
    uint16_t CRCMODE:2;
  } bit;
  uint16_t reg;
} DMAC_CRCCTRL_Type;


#define DMAC_CRCCTRL_OFFSET 0x02
#define DMAC_CRCCTRL_RESETVALUE _U_(0x0000)

#define DMAC_CRCCTRL_CRCBEATSIZE_Pos 0
#define DMAC_CRCCTRL_CRCBEATSIZE_Msk (_U_(0x3) << DMAC_CRCCTRL_CRCBEATSIZE_Pos)
#define DMAC_CRCCTRL_CRCBEATSIZE(value) (DMAC_CRCCTRL_CRCBEATSIZE_Msk & ((value) << DMAC_CRCCTRL_CRCBEATSIZE_Pos))
#define DMAC_CRCCTRL_CRCBEATSIZE_BYTE_Val _U_(0x0)
#define DMAC_CRCCTRL_CRCBEATSIZE_HWORD_Val _U_(0x1)
#define DMAC_CRCCTRL_CRCBEATSIZE_WORD_Val _U_(0x2)
#define DMAC_CRCCTRL_CRCBEATSIZE_BYTE (DMAC_CRCCTRL_CRCBEATSIZE_BYTE_Val << DMAC_CRCCTRL_CRCBEATSIZE_Pos)
#define DMAC_CRCCTRL_CRCBEATSIZE_HWORD (DMAC_CRCCTRL_CRCBEATSIZE_HWORD_Val << DMAC_CRCCTRL_CRCBEATSIZE_Pos)
#define DMAC_CRCCTRL_CRCBEATSIZE_WORD (DMAC_CRCCTRL_CRCBEATSIZE_WORD_Val << DMAC_CRCCTRL_CRCBEATSIZE_Pos)
#define DMAC_CRCCTRL_CRCPOLY_Pos 2
#define DMAC_CRCCTRL_CRCPOLY_Msk (_U_(0x3) << DMAC_CRCCTRL_CRCPOLY_Pos)
#define DMAC_CRCCTRL_CRCPOLY(value) (DMAC_CRCCTRL_CRCPOLY_Msk & ((value) << DMAC_CRCCTRL_CRCPOLY_Pos))
#define DMAC_CRCCTRL_CRCPOLY_CRC16_Val _U_(0x0)
#define DMAC_CRCCTRL_CRCPOLY_CRC32_Val _U_(0x1)
#define DMAC_CRCCTRL_CRCPOLY_CRC16 (DMAC_CRCCTRL_CRCPOLY_CRC16_Val << DMAC_CRCCTRL_CRCPOLY_Pos)
#define DMAC_CRCCTRL_CRCPOLY_CRC32 (DMAC_CRCCTRL_CRCPOLY_CRC32_Val << DMAC_CRCCTRL_CRCPOLY_Pos)
#define DMAC_CRCCTRL_CRCSRC_Pos 8
#define DMAC_CRCCTRL_CRCSRC_Msk (_U_(0x3F) << DMAC_CRCCTRL_CRCSRC_Pos)
#define DMAC_CRCCTRL_CRCSRC(value) (DMAC_CRCCTRL_CRCSRC_Msk & ((value) << DMAC_CRCCTRL_CRCSRC_Pos))
#define DMAC_CRCCTRL_CRCSRC_DISABLE_Val _U_(0x0)
#define DMAC_CRCCTRL_CRCSRC_IO_Val _U_(0x1)
#define DMAC_CRCCTRL_CRCSRC_DISABLE (DMAC_CRCCTRL_CRCSRC_DISABLE_Val << DMAC_CRCCTRL_CRCSRC_Pos)
#define DMAC_CRCCTRL_CRCSRC_IO (DMAC_CRCCTRL_CRCSRC_IO_Val << DMAC_CRCCTRL_CRCSRC_Pos)
#define DMAC_CRCCTRL_CRCMODE_Pos 14
#define DMAC_CRCCTRL_CRCMODE_Msk (_U_(0x3) << DMAC_CRCCTRL_CRCMODE_Pos)
#define DMAC_CRCCTRL_CRCMODE(value) (DMAC_CRCCTRL_CRCMODE_Msk & ((value) << DMAC_CRCCTRL_CRCMODE_Pos))
#define DMAC_CRCCTRL_CRCMODE_DEFAULT_Val _U_(0x0)
#define DMAC_CRCCTRL_CRCMODE_CRCMON_Val _U_(0x2)
#define DMAC_CRCCTRL_CRCMODE_CRCGEN_Val _U_(0x3)
#define DMAC_CRCCTRL_CRCMODE_DEFAULT (DMAC_CRCCTRL_CRCMODE_DEFAULT_Val << DMAC_CRCCTRL_CRCMODE_Pos)
#define DMAC_CRCCTRL_CRCMODE_CRCMON (DMAC_CRCCTRL_CRCMODE_CRCMON_Val << DMAC_CRCCTRL_CRCMODE_Pos)
#define DMAC_CRCCTRL_CRCMODE_CRCGEN (DMAC_CRCCTRL_CRCMODE_CRCGEN_Val << DMAC_CRCCTRL_CRCMODE_Pos)
#define DMAC_CRCCTRL_MASK _U_(0xFF0F)



typedef union {
  struct {
    uint32_t CRCDATAIN:32;
  } bit;
  uint32_t reg;
} DMAC_CRCDATAIN_Type;


#define DMAC_CRCDATAIN_OFFSET 0x04
#define DMAC_CRCDATAIN_RESETVALUE _U_(0x00000000)

#define DMAC_CRCDATAIN_CRCDATAIN_Pos 0
#define DMAC_CRCDATAIN_CRCDATAIN_Msk (_U_(0xFFFFFFFF) << DMAC_CRCDATAIN_CRCDATAIN_Pos)
#define DMAC_CRCDATAIN_CRCDATAIN(value) (DMAC_CRCDATAIN_CRCDATAIN_Msk & ((value) << DMAC_CRCDATAIN_CRCDATAIN_Pos))
#define DMAC_CRCDATAIN_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t CRCCHKSUM:32;
  } bit;
  uint32_t reg;
} DMAC_CRCCHKSUM_Type;


#define DMAC_CRCCHKSUM_OFFSET 0x08
#define DMAC_CRCCHKSUM_RESETVALUE _U_(0x00000000)

#define DMAC_CRCCHKSUM_CRCCHKSUM_Pos 0
#define DMAC_CRCCHKSUM_CRCCHKSUM_Msk (_U_(0xFFFFFFFF) << DMAC_CRCCHKSUM_CRCCHKSUM_Pos)
#define DMAC_CRCCHKSUM_CRCCHKSUM(value) (DMAC_CRCCHKSUM_CRCCHKSUM_Msk & ((value) << DMAC_CRCCHKSUM_CRCCHKSUM_Pos))
#define DMAC_CRCCHKSUM_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint8_t CRCBUSY:1;
    uint8_t CRCZERO:1;
    uint8_t CRCERR:1;
    uint8_t :5;
  } bit;
  uint8_t reg;
} DMAC_CRCSTATUS_Type;


#define DMAC_CRCSTATUS_OFFSET 0x0C
#define DMAC_CRCSTATUS_RESETVALUE _U_(0x00)

#define DMAC_CRCSTATUS_CRCBUSY_Pos 0
#define DMAC_CRCSTATUS_CRCBUSY (_U_(0x1) << DMAC_CRCSTATUS_CRCBUSY_Pos)
#define DMAC_CRCSTATUS_CRCZERO_Pos 1
#define DMAC_CRCSTATUS_CRCZERO (_U_(0x1) << DMAC_CRCSTATUS_CRCZERO_Pos)
#define DMAC_CRCSTATUS_CRCERR_Pos 2
#define DMAC_CRCSTATUS_CRCERR (_U_(0x1) << DMAC_CRCSTATUS_CRCERR_Pos)
#define DMAC_CRCSTATUS_MASK _U_(0x07)



typedef union {
  struct {
    uint8_t DBGRUN:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} DMAC_DBGCTRL_Type;


#define DMAC_DBGCTRL_OFFSET 0x0D
#define DMAC_DBGCTRL_RESETVALUE _U_(0x00)

#define DMAC_DBGCTRL_DBGRUN_Pos 0
#define DMAC_DBGCTRL_DBGRUN (_U_(0x1) << DMAC_DBGCTRL_DBGRUN_Pos)
#define DMAC_DBGCTRL_MASK _U_(0x01)



typedef union {
  struct {
    uint32_t SWTRIG0:1;
    uint32_t SWTRIG1:1;
    uint32_t SWTRIG2:1;
    uint32_t SWTRIG3:1;
    uint32_t SWTRIG4:1;
    uint32_t SWTRIG5:1;
    uint32_t SWTRIG6:1;
    uint32_t SWTRIG7:1;
    uint32_t SWTRIG8:1;
    uint32_t SWTRIG9:1;
    uint32_t SWTRIG10:1;
    uint32_t SWTRIG11:1;
    uint32_t SWTRIG12:1;
    uint32_t SWTRIG13:1;
    uint32_t SWTRIG14:1;
    uint32_t SWTRIG15:1;
    uint32_t SWTRIG16:1;
    uint32_t SWTRIG17:1;
    uint32_t SWTRIG18:1;
    uint32_t SWTRIG19:1;
    uint32_t SWTRIG20:1;
    uint32_t SWTRIG21:1;
    uint32_t SWTRIG22:1;
    uint32_t SWTRIG23:1;
    uint32_t SWTRIG24:1;
    uint32_t SWTRIG25:1;
    uint32_t SWTRIG26:1;
    uint32_t SWTRIG27:1;
    uint32_t SWTRIG28:1;
    uint32_t SWTRIG29:1;
    uint32_t SWTRIG30:1;
    uint32_t SWTRIG31:1;
  } bit;
  struct {
    uint32_t SWTRIG:32;
  } vec;
  uint32_t reg;
} DMAC_SWTRIGCTRL_Type;


#define DMAC_SWTRIGCTRL_OFFSET 0x10
#define DMAC_SWTRIGCTRL_RESETVALUE _U_(0x00000000)

#define DMAC_SWTRIGCTRL_SWTRIG0_Pos 0
#define DMAC_SWTRIGCTRL_SWTRIG0 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG0_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG1_Pos 1
#define DMAC_SWTRIGCTRL_SWTRIG1 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG1_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG2_Pos 2
#define DMAC_SWTRIGCTRL_SWTRIG2 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG2_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG3_Pos 3
#define DMAC_SWTRIGCTRL_SWTRIG3 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG3_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG4_Pos 4
#define DMAC_SWTRIGCTRL_SWTRIG4 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG4_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG5_Pos 5
#define DMAC_SWTRIGCTRL_SWTRIG5 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG5_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG6_Pos 6
#define DMAC_SWTRIGCTRL_SWTRIG6 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG6_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG7_Pos 7
#define DMAC_SWTRIGCTRL_SWTRIG7 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG7_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG8_Pos 8
#define DMAC_SWTRIGCTRL_SWTRIG8 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG8_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG9_Pos 9
#define DMAC_SWTRIGCTRL_SWTRIG9 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG9_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG10_Pos 10
#define DMAC_SWTRIGCTRL_SWTRIG10 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG10_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG11_Pos 11
#define DMAC_SWTRIGCTRL_SWTRIG11 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG11_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG12_Pos 12
#define DMAC_SWTRIGCTRL_SWTRIG12 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG12_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG13_Pos 13
#define DMAC_SWTRIGCTRL_SWTRIG13 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG13_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG14_Pos 14
#define DMAC_SWTRIGCTRL_SWTRIG14 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG14_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG15_Pos 15
#define DMAC_SWTRIGCTRL_SWTRIG15 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG15_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG16_Pos 16
#define DMAC_SWTRIGCTRL_SWTRIG16 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG16_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG17_Pos 17
#define DMAC_SWTRIGCTRL_SWTRIG17 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG17_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG18_Pos 18
#define DMAC_SWTRIGCTRL_SWTRIG18 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG18_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG19_Pos 19
#define DMAC_SWTRIGCTRL_SWTRIG19 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG19_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG20_Pos 20
#define DMAC_SWTRIGCTRL_SWTRIG20 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG20_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG21_Pos 21
#define DMAC_SWTRIGCTRL_SWTRIG21 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG21_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG22_Pos 22
#define DMAC_SWTRIGCTRL_SWTRIG22 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG22_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG23_Pos 23
#define DMAC_SWTRIGCTRL_SWTRIG23 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG23_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG24_Pos 24
#define DMAC_SWTRIGCTRL_SWTRIG24 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG24_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG25_Pos 25
#define DMAC_SWTRIGCTRL_SWTRIG25 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG25_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG26_Pos 26
#define DMAC_SWTRIGCTRL_SWTRIG26 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG26_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG27_Pos 27
#define DMAC_SWTRIGCTRL_SWTRIG27 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG27_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG28_Pos 28
#define DMAC_SWTRIGCTRL_SWTRIG28 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG28_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG29_Pos 29
#define DMAC_SWTRIGCTRL_SWTRIG29 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG29_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG30_Pos 30
#define DMAC_SWTRIGCTRL_SWTRIG30 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG30_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG31_Pos 31
#define DMAC_SWTRIGCTRL_SWTRIG31 (_U_(1) << DMAC_SWTRIGCTRL_SWTRIG31_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG_Pos 0
#define DMAC_SWTRIGCTRL_SWTRIG_Msk (_U_(0xFFFFFFFF) << DMAC_SWTRIGCTRL_SWTRIG_Pos)
#define DMAC_SWTRIGCTRL_SWTRIG(value) (DMAC_SWTRIGCTRL_SWTRIG_Msk & ((value) << DMAC_SWTRIGCTRL_SWTRIG_Pos))
#define DMAC_SWTRIGCTRL_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t LVLPRI0:5;
    uint32_t QOS0:2;
    uint32_t RRLVLEN0:1;
    uint32_t LVLPRI1:5;
    uint32_t QOS1:2;
    uint32_t RRLVLEN1:1;
    uint32_t LVLPRI2:5;
    uint32_t QOS2:2;
    uint32_t RRLVLEN2:1;
    uint32_t LVLPRI3:5;
    uint32_t QOS3:2;
    uint32_t RRLVLEN3:1;
  } bit;
  uint32_t reg;
} DMAC_PRICTRL0_Type;


#define DMAC_PRICTRL0_OFFSET 0x14
#define DMAC_PRICTRL0_RESETVALUE _U_(0x40404040)

#define DMAC_PRICTRL0_LVLPRI0_Pos 0
#define DMAC_PRICTRL0_LVLPRI0_Msk (_U_(0x1F) << DMAC_PRICTRL0_LVLPRI0_Pos)
#define DMAC_PRICTRL0_LVLPRI0(value) (DMAC_PRICTRL0_LVLPRI0_Msk & ((value) << DMAC_PRICTRL0_LVLPRI0_Pos))
#define DMAC_PRICTRL0_QOS0_Pos 5
#define DMAC_PRICTRL0_QOS0_Msk (_U_(0x3) << DMAC_PRICTRL0_QOS0_Pos)
#define DMAC_PRICTRL0_QOS0(value) (DMAC_PRICTRL0_QOS0_Msk & ((value) << DMAC_PRICTRL0_QOS0_Pos))
#define DMAC_PRICTRL0_QOS0_REGULAR_Val _U_(0x0)
#define DMAC_PRICTRL0_QOS0_SHORTAGE_Val _U_(0x1)
#define DMAC_PRICTRL0_QOS0_SENSITIVE_Val _U_(0x2)
#define DMAC_PRICTRL0_QOS0_CRITICAL_Val _U_(0x3)
#define DMAC_PRICTRL0_QOS0_REGULAR (DMAC_PRICTRL0_QOS0_REGULAR_Val << DMAC_PRICTRL0_QOS0_Pos)
#define DMAC_PRICTRL0_QOS0_SHORTAGE (DMAC_PRICTRL0_QOS0_SHORTAGE_Val << DMAC_PRICTRL0_QOS0_Pos)
#define DMAC_PRICTRL0_QOS0_SENSITIVE (DMAC_PRICTRL0_QOS0_SENSITIVE_Val << DMAC_PRICTRL0_QOS0_Pos)
#define DMAC_PRICTRL0_QOS0_CRITICAL (DMAC_PRICTRL0_QOS0_CRITICAL_Val << DMAC_PRICTRL0_QOS0_Pos)
#define DMAC_PRICTRL0_RRLVLEN0_Pos 7
#define DMAC_PRICTRL0_RRLVLEN0 (_U_(0x1) << DMAC_PRICTRL0_RRLVLEN0_Pos)
#define DMAC_PRICTRL0_LVLPRI1_Pos 8
#define DMAC_PRICTRL0_LVLPRI1_Msk (_U_(0x1F) << DMAC_PRICTRL0_LVLPRI1_Pos)
#define DMAC_PRICTRL0_LVLPRI1(value) (DMAC_PRICTRL0_LVLPRI1_Msk & ((value) << DMAC_PRICTRL0_LVLPRI1_Pos))
#define DMAC_PRICTRL0_QOS1_Pos 13
#define DMAC_PRICTRL0_QOS1_Msk (_U_(0x3) << DMAC_PRICTRL0_QOS1_Pos)
#define DMAC_PRICTRL0_QOS1(value) (DMAC_PRICTRL0_QOS1_Msk & ((value) << DMAC_PRICTRL0_QOS1_Pos))
#define DMAC_PRICTRL0_QOS1_REGULAR_Val _U_(0x0)
#define DMAC_PRICTRL0_QOS1_SHORTAGE_Val _U_(0x1)
#define DMAC_PRICTRL0_QOS1_SENSITIVE_Val _U_(0x2)
#define DMAC_PRICTRL0_QOS1_CRITICAL_Val _U_(0x3)
#define DMAC_PRICTRL0_QOS1_REGULAR (DMAC_PRICTRL0_QOS1_REGULAR_Val << DMAC_PRICTRL0_QOS1_Pos)
#define DMAC_PRICTRL0_QOS1_SHORTAGE (DMAC_PRICTRL0_QOS1_SHORTAGE_Val << DMAC_PRICTRL0_QOS1_Pos)
#define DMAC_PRICTRL0_QOS1_SENSITIVE (DMAC_PRICTRL0_QOS1_SENSITIVE_Val << DMAC_PRICTRL0_QOS1_Pos)
#define DMAC_PRICTRL0_QOS1_CRITICAL (DMAC_PRICTRL0_QOS1_CRITICAL_Val << DMAC_PRICTRL0_QOS1_Pos)
#define DMAC_PRICTRL0_RRLVLEN1_Pos 15
#define DMAC_PRICTRL0_RRLVLEN1 (_U_(0x1) << DMAC_PRICTRL0_RRLVLEN1_Pos)
#define DMAC_PRICTRL0_LVLPRI2_Pos 16
#define DMAC_PRICTRL0_LVLPRI2_Msk (_U_(0x1F) << DMAC_PRICTRL0_LVLPRI2_Pos)
#define DMAC_PRICTRL0_LVLPRI2(value) (DMAC_PRICTRL0_LVLPRI2_Msk & ((value) << DMAC_PRICTRL0_LVLPRI2_Pos))
#define DMAC_PRICTRL0_QOS2_Pos 21
#define DMAC_PRICTRL0_QOS2_Msk (_U_(0x3) << DMAC_PRICTRL0_QOS2_Pos)
#define DMAC_PRICTRL0_QOS2(value) (DMAC_PRICTRL0_QOS2_Msk & ((value) << DMAC_PRICTRL0_QOS2_Pos))
#define DMAC_PRICTRL0_QOS2_REGULAR_Val _U_(0x0)
#define DMAC_PRICTRL0_QOS2_SHORTAGE_Val _U_(0x1)
#define DMAC_PRICTRL0_QOS2_SENSITIVE_Val _U_(0x2)
#define DMAC_PRICTRL0_QOS2_CRITICAL_Val _U_(0x3)
#define DMAC_PRICTRL0_QOS2_REGULAR (DMAC_PRICTRL0_QOS2_REGULAR_Val << DMAC_PRICTRL0_QOS2_Pos)
#define DMAC_PRICTRL0_QOS2_SHORTAGE (DMAC_PRICTRL0_QOS2_SHORTAGE_Val << DMAC_PRICTRL0_QOS2_Pos)
#define DMAC_PRICTRL0_QOS2_SENSITIVE (DMAC_PRICTRL0_QOS2_SENSITIVE_Val << DMAC_PRICTRL0_QOS2_Pos)
#define DMAC_PRICTRL0_QOS2_CRITICAL (DMAC_PRICTRL0_QOS2_CRITICAL_Val << DMAC_PRICTRL0_QOS2_Pos)
#define DMAC_PRICTRL0_RRLVLEN2_Pos 23
#define DMAC_PRICTRL0_RRLVLEN2 (_U_(0x1) << DMAC_PRICTRL0_RRLVLEN2_Pos)
#define DMAC_PRICTRL0_LVLPRI3_Pos 24
#define DMAC_PRICTRL0_LVLPRI3_Msk (_U_(0x1F) << DMAC_PRICTRL0_LVLPRI3_Pos)
#define DMAC_PRICTRL0_LVLPRI3(value) (DMAC_PRICTRL0_LVLPRI3_Msk & ((value) << DMAC_PRICTRL0_LVLPRI3_Pos))
#define DMAC_PRICTRL0_QOS3_Pos 29
#define DMAC_PRICTRL0_QOS3_Msk (_U_(0x3) << DMAC_PRICTRL0_QOS3_Pos)
#define DMAC_PRICTRL0_QOS3(value) (DMAC_PRICTRL0_QOS3_Msk & ((value) << DMAC_PRICTRL0_QOS3_Pos))
#define DMAC_PRICTRL0_QOS3_REGULAR_Val _U_(0x0)
#define DMAC_PRICTRL0_QOS3_SHORTAGE_Val _U_(0x1)
#define DMAC_PRICTRL0_QOS3_SENSITIVE_Val _U_(0x2)
#define DMAC_PRICTRL0_QOS3_CRITICAL_Val _U_(0x3)
#define DMAC_PRICTRL0_QOS3_REGULAR (DMAC_PRICTRL0_QOS3_REGULAR_Val << DMAC_PRICTRL0_QOS3_Pos)
#define DMAC_PRICTRL0_QOS3_SHORTAGE (DMAC_PRICTRL0_QOS3_SHORTAGE_Val << DMAC_PRICTRL0_QOS3_Pos)
#define DMAC_PRICTRL0_QOS3_SENSITIVE (DMAC_PRICTRL0_QOS3_SENSITIVE_Val << DMAC_PRICTRL0_QOS3_Pos)
#define DMAC_PRICTRL0_QOS3_CRITICAL (DMAC_PRICTRL0_QOS3_CRITICAL_Val << DMAC_PRICTRL0_QOS3_Pos)
#define DMAC_PRICTRL0_RRLVLEN3_Pos 31
#define DMAC_PRICTRL0_RRLVLEN3 (_U_(0x1) << DMAC_PRICTRL0_RRLVLEN3_Pos)
#define DMAC_PRICTRL0_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint16_t ID:5;
    uint16_t :3;
    uint16_t TERR:1;
    uint16_t TCMPL:1;
    uint16_t SUSP:1;
    uint16_t :1;
    uint16_t CRCERR:1;
    uint16_t FERR:1;
    uint16_t BUSY:1;
    uint16_t PEND:1;
  } bit;
  uint16_t reg;
} DMAC_INTPEND_Type;


#define DMAC_INTPEND_OFFSET 0x20
#define DMAC_INTPEND_RESETVALUE _U_(0x0000)

#define DMAC_INTPEND_ID_Pos 0
#define DMAC_INTPEND_ID_Msk (_U_(0x1F) << DMAC_INTPEND_ID_Pos)
#define DMAC_INTPEND_ID(value) (DMAC_INTPEND_ID_Msk & ((value) << DMAC_INTPEND_ID_Pos))
#define DMAC_INTPEND_TERR_Pos 8
#define DMAC_INTPEND_TERR (_U_(0x1) << DMAC_INTPEND_TERR_Pos)
#define DMAC_INTPEND_TCMPL_Pos 9
#define DMAC_INTPEND_TCMPL (_U_(0x1) << DMAC_INTPEND_TCMPL_Pos)
#define DMAC_INTPEND_SUSP_Pos 10
#define DMAC_INTPEND_SUSP (_U_(0x1) << DMAC_INTPEND_SUSP_Pos)
#define DMAC_INTPEND_CRCERR_Pos 12
#define DMAC_INTPEND_CRCERR (_U_(0x1) << DMAC_INTPEND_CRCERR_Pos)
#define DMAC_INTPEND_FERR_Pos 13
#define DMAC_INTPEND_FERR (_U_(0x1) << DMAC_INTPEND_FERR_Pos)
#define DMAC_INTPEND_BUSY_Pos 14
#define DMAC_INTPEND_BUSY (_U_(0x1) << DMAC_INTPEND_BUSY_Pos)
#define DMAC_INTPEND_PEND_Pos 15
#define DMAC_INTPEND_PEND (_U_(0x1) << DMAC_INTPEND_PEND_Pos)
#define DMAC_INTPEND_MASK _U_(0xF71F)



typedef union {
  struct {
    uint32_t CHINT0:1;
    uint32_t CHINT1:1;
    uint32_t CHINT2:1;
    uint32_t CHINT3:1;
    uint32_t CHINT4:1;
    uint32_t CHINT5:1;
    uint32_t CHINT6:1;
    uint32_t CHINT7:1;
    uint32_t CHINT8:1;
    uint32_t CHINT9:1;
    uint32_t CHINT10:1;
    uint32_t CHINT11:1;
    uint32_t CHINT12:1;
    uint32_t CHINT13:1;
    uint32_t CHINT14:1;
    uint32_t CHINT15:1;
    uint32_t CHINT16:1;
    uint32_t CHINT17:1;
    uint32_t CHINT18:1;
    uint32_t CHINT19:1;
    uint32_t CHINT20:1;
    uint32_t CHINT21:1;
    uint32_t CHINT22:1;
    uint32_t CHINT23:1;
    uint32_t CHINT24:1;
    uint32_t CHINT25:1;
    uint32_t CHINT26:1;
    uint32_t CHINT27:1;
    uint32_t CHINT28:1;
    uint32_t CHINT29:1;
    uint32_t CHINT30:1;
    uint32_t CHINT31:1;
  } bit;
  struct {
    uint32_t CHINT:32;
  } vec;
  uint32_t reg;
} DMAC_INTSTATUS_Type;


#define DMAC_INTSTATUS_OFFSET 0x24
#define DMAC_INTSTATUS_RESETVALUE _U_(0x00000000)

#define DMAC_INTSTATUS_CHINT0_Pos 0
#define DMAC_INTSTATUS_CHINT0 (_U_(1) << DMAC_INTSTATUS_CHINT0_Pos)
#define DMAC_INTSTATUS_CHINT1_Pos 1
#define DMAC_INTSTATUS_CHINT1 (_U_(1) << DMAC_INTSTATUS_CHINT1_Pos)
#define DMAC_INTSTATUS_CHINT2_Pos 2
#define DMAC_INTSTATUS_CHINT2 (_U_(1) << DMAC_INTSTATUS_CHINT2_Pos)
#define DMAC_INTSTATUS_CHINT3_Pos 3
#define DMAC_INTSTATUS_CHINT3 (_U_(1) << DMAC_INTSTATUS_CHINT3_Pos)
#define DMAC_INTSTATUS_CHINT4_Pos 4
#define DMAC_INTSTATUS_CHINT4 (_U_(1) << DMAC_INTSTATUS_CHINT4_Pos)
#define DMAC_INTSTATUS_CHINT5_Pos 5
#define DMAC_INTSTATUS_CHINT5 (_U_(1) << DMAC_INTSTATUS_CHINT5_Pos)
#define DMAC_INTSTATUS_CHINT6_Pos 6
#define DMAC_INTSTATUS_CHINT6 (_U_(1) << DMAC_INTSTATUS_CHINT6_Pos)
#define DMAC_INTSTATUS_CHINT7_Pos 7
#define DMAC_INTSTATUS_CHINT7 (_U_(1) << DMAC_INTSTATUS_CHINT7_Pos)
#define DMAC_INTSTATUS_CHINT8_Pos 8
#define DMAC_INTSTATUS_CHINT8 (_U_(1) << DMAC_INTSTATUS_CHINT8_Pos)
#define DMAC_INTSTATUS_CHINT9_Pos 9
#define DMAC_INTSTATUS_CHINT9 (_U_(1) << DMAC_INTSTATUS_CHINT9_Pos)
#define DMAC_INTSTATUS_CHINT10_Pos 10
#define DMAC_INTSTATUS_CHINT10 (_U_(1) << DMAC_INTSTATUS_CHINT10_Pos)
#define DMAC_INTSTATUS_CHINT11_Pos 11
#define DMAC_INTSTATUS_CHINT11 (_U_(1) << DMAC_INTSTATUS_CHINT11_Pos)
#define DMAC_INTSTATUS_CHINT12_Pos 12
#define DMAC_INTSTATUS_CHINT12 (_U_(1) << DMAC_INTSTATUS_CHINT12_Pos)
#define DMAC_INTSTATUS_CHINT13_Pos 13
#define DMAC_INTSTATUS_CHINT13 (_U_(1) << DMAC_INTSTATUS_CHINT13_Pos)
#define DMAC_INTSTATUS_CHINT14_Pos 14
#define DMAC_INTSTATUS_CHINT14 (_U_(1) << DMAC_INTSTATUS_CHINT14_Pos)
#define DMAC_INTSTATUS_CHINT15_Pos 15
#define DMAC_INTSTATUS_CHINT15 (_U_(1) << DMAC_INTSTATUS_CHINT15_Pos)
#define DMAC_INTSTATUS_CHINT16_Pos 16
#define DMAC_INTSTATUS_CHINT16 (_U_(1) << DMAC_INTSTATUS_CHINT16_Pos)
#define DMAC_INTSTATUS_CHINT17_Pos 17
#define DMAC_INTSTATUS_CHINT17 (_U_(1) << DMAC_INTSTATUS_CHINT17_Pos)
#define DMAC_INTSTATUS_CHINT18_Pos 18
#define DMAC_INTSTATUS_CHINT18 (_U_(1) << DMAC_INTSTATUS_CHINT18_Pos)
#define DMAC_INTSTATUS_CHINT19_Pos 19
#define DMAC_INTSTATUS_CHINT19 (_U_(1) << DMAC_INTSTATUS_CHINT19_Pos)
#define DMAC_INTSTATUS_CHINT20_Pos 20
#define DMAC_INTSTATUS_CHINT20 (_U_(1) << DMAC_INTSTATUS_CHINT20_Pos)
#define DMAC_INTSTATUS_CHINT21_Pos 21
#define DMAC_INTSTATUS_CHINT21 (_U_(1) << DMAC_INTSTATUS_CHINT21_Pos)
#define DMAC_INTSTATUS_CHINT22_Pos 22
#define DMAC_INTSTATUS_CHINT22 (_U_(1) << DMAC_INTSTATUS_CHINT22_Pos)
#define DMAC_INTSTATUS_CHINT23_Pos 23
#define DMAC_INTSTATUS_CHINT23 (_U_(1) << DMAC_INTSTATUS_CHINT23_Pos)
#define DMAC_INTSTATUS_CHINT24_Pos 24
#define DMAC_INTSTATUS_CHINT24 (_U_(1) << DMAC_INTSTATUS_CHINT24_Pos)
#define DMAC_INTSTATUS_CHINT25_Pos 25
#define DMAC_INTSTATUS_CHINT25 (_U_(1) << DMAC_INTSTATUS_CHINT25_Pos)
#define DMAC_INTSTATUS_CHINT26_Pos 26
#define DMAC_INTSTATUS_CHINT26 (_U_(1) << DMAC_INTSTATUS_CHINT26_Pos)
#define DMAC_INTSTATUS_CHINT27_Pos 27
#define DMAC_INTSTATUS_CHINT27 (_U_(1) << DMAC_INTSTATUS_CHINT27_Pos)
#define DMAC_INTSTATUS_CHINT28_Pos 28
#define DMAC_INTSTATUS_CHINT28 (_U_(1) << DMAC_INTSTATUS_CHINT28_Pos)
#define DMAC_INTSTATUS_CHINT29_Pos 29
#define DMAC_INTSTATUS_CHINT29 (_U_(1) << DMAC_INTSTATUS_CHINT29_Pos)
#define DMAC_INTSTATUS_CHINT30_Pos 30
#define DMAC_INTSTATUS_CHINT30 (_U_(1) << DMAC_INTSTATUS_CHINT30_Pos)
#define DMAC_INTSTATUS_CHINT31_Pos 31
#define DMAC_INTSTATUS_CHINT31 (_U_(1) << DMAC_INTSTATUS_CHINT31_Pos)
#define DMAC_INTSTATUS_CHINT_Pos 0
#define DMAC_INTSTATUS_CHINT_Msk (_U_(0xFFFFFFFF) << DMAC_INTSTATUS_CHINT_Pos)
#define DMAC_INTSTATUS_CHINT(value) (DMAC_INTSTATUS_CHINT_Msk & ((value) << DMAC_INTSTATUS_CHINT_Pos))
#define DMAC_INTSTATUS_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t BUSYCH0:1;
    uint32_t BUSYCH1:1;
    uint32_t BUSYCH2:1;
    uint32_t BUSYCH3:1;
    uint32_t BUSYCH4:1;
    uint32_t BUSYCH5:1;
    uint32_t BUSYCH6:1;
    uint32_t BUSYCH7:1;
    uint32_t BUSYCH8:1;
    uint32_t BUSYCH9:1;
    uint32_t BUSYCH10:1;
    uint32_t BUSYCH11:1;
    uint32_t BUSYCH12:1;
    uint32_t BUSYCH13:1;
    uint32_t BUSYCH14:1;
    uint32_t BUSYCH15:1;
    uint32_t BUSYCH16:1;
    uint32_t BUSYCH17:1;
    uint32_t BUSYCH18:1;
    uint32_t BUSYCH19:1;
    uint32_t BUSYCH20:1;
    uint32_t BUSYCH21:1;
    uint32_t BUSYCH22:1;
    uint32_t BUSYCH23:1;
    uint32_t BUSYCH24:1;
    uint32_t BUSYCH25:1;
    uint32_t BUSYCH26:1;
    uint32_t BUSYCH27:1;
    uint32_t BUSYCH28:1;
    uint32_t BUSYCH29:1;
    uint32_t BUSYCH30:1;
    uint32_t BUSYCH31:1;
  } bit;
  struct {
    uint32_t BUSYCH:32;
  } vec;
  uint32_t reg;
} DMAC_BUSYCH_Type;


#define DMAC_BUSYCH_OFFSET 0x28
#define DMAC_BUSYCH_RESETVALUE _U_(0x00000000)

#define DMAC_BUSYCH_BUSYCH0_Pos 0
#define DMAC_BUSYCH_BUSYCH0 (_U_(1) << DMAC_BUSYCH_BUSYCH0_Pos)
#define DMAC_BUSYCH_BUSYCH1_Pos 1
#define DMAC_BUSYCH_BUSYCH1 (_U_(1) << DMAC_BUSYCH_BUSYCH1_Pos)
#define DMAC_BUSYCH_BUSYCH2_Pos 2
#define DMAC_BUSYCH_BUSYCH2 (_U_(1) << DMAC_BUSYCH_BUSYCH2_Pos)
#define DMAC_BUSYCH_BUSYCH3_Pos 3
#define DMAC_BUSYCH_BUSYCH3 (_U_(1) << DMAC_BUSYCH_BUSYCH3_Pos)
#define DMAC_BUSYCH_BUSYCH4_Pos 4
#define DMAC_BUSYCH_BUSYCH4 (_U_(1) << DMAC_BUSYCH_BUSYCH4_Pos)
#define DMAC_BUSYCH_BUSYCH5_Pos 5
#define DMAC_BUSYCH_BUSYCH5 (_U_(1) << DMAC_BUSYCH_BUSYCH5_Pos)
#define DMAC_BUSYCH_BUSYCH6_Pos 6
#define DMAC_BUSYCH_BUSYCH6 (_U_(1) << DMAC_BUSYCH_BUSYCH6_Pos)
#define DMAC_BUSYCH_BUSYCH7_Pos 7
#define DMAC_BUSYCH_BUSYCH7 (_U_(1) << DMAC_BUSYCH_BUSYCH7_Pos)
#define DMAC_BUSYCH_BUSYCH8_Pos 8
#define DMAC_BUSYCH_BUSYCH8 (_U_(1) << DMAC_BUSYCH_BUSYCH8_Pos)
#define DMAC_BUSYCH_BUSYCH9_Pos 9
#define DMAC_BUSYCH_BUSYCH9 (_U_(1) << DMAC_BUSYCH_BUSYCH9_Pos)
#define DMAC_BUSYCH_BUSYCH10_Pos 10
#define DMAC_BUSYCH_BUSYCH10 (_U_(1) << DMAC_BUSYCH_BUSYCH10_Pos)
#define DMAC_BUSYCH_BUSYCH11_Pos 11
#define DMAC_BUSYCH_BUSYCH11 (_U_(1) << DMAC_BUSYCH_BUSYCH11_Pos)
#define DMAC_BUSYCH_BUSYCH12_Pos 12
#define DMAC_BUSYCH_BUSYCH12 (_U_(1) << DMAC_BUSYCH_BUSYCH12_Pos)
#define DMAC_BUSYCH_BUSYCH13_Pos 13
#define DMAC_BUSYCH_BUSYCH13 (_U_(1) << DMAC_BUSYCH_BUSYCH13_Pos)
#define DMAC_BUSYCH_BUSYCH14_Pos 14
#define DMAC_BUSYCH_BUSYCH14 (_U_(1) << DMAC_BUSYCH_BUSYCH14_Pos)
#define DMAC_BUSYCH_BUSYCH15_Pos 15
#define DMAC_BUSYCH_BUSYCH15 (_U_(1) << DMAC_BUSYCH_BUSYCH15_Pos)
#define DMAC_BUSYCH_BUSYCH16_Pos 16
#define DMAC_BUSYCH_BUSYCH16 (_U_(1) << DMAC_BUSYCH_BUSYCH16_Pos)
#define DMAC_BUSYCH_BUSYCH17_Pos 17
#define DMAC_BUSYCH_BUSYCH17 (_U_(1) << DMAC_BUSYCH_BUSYCH17_Pos)
#define DMAC_BUSYCH_BUSYCH18_Pos 18
#define DMAC_BUSYCH_BUSYCH18 (_U_(1) << DMAC_BUSYCH_BUSYCH18_Pos)
#define DMAC_BUSYCH_BUSYCH19_Pos 19
#define DMAC_BUSYCH_BUSYCH19 (_U_(1) << DMAC_BUSYCH_BUSYCH19_Pos)
#define DMAC_BUSYCH_BUSYCH20_Pos 20
#define DMAC_BUSYCH_BUSYCH20 (_U_(1) << DMAC_BUSYCH_BUSYCH20_Pos)
#define DMAC_BUSYCH_BUSYCH21_Pos 21
#define DMAC_BUSYCH_BUSYCH21 (_U_(1) << DMAC_BUSYCH_BUSYCH21_Pos)
#define DMAC_BUSYCH_BUSYCH22_Pos 22
#define DMAC_BUSYCH_BUSYCH22 (_U_(1) << DMAC_BUSYCH_BUSYCH22_Pos)
#define DMAC_BUSYCH_BUSYCH23_Pos 23
#define DMAC_BUSYCH_BUSYCH23 (_U_(1) << DMAC_BUSYCH_BUSYCH23_Pos)
#define DMAC_BUSYCH_BUSYCH24_Pos 24
#define DMAC_BUSYCH_BUSYCH24 (_U_(1) << DMAC_BUSYCH_BUSYCH24_Pos)
#define DMAC_BUSYCH_BUSYCH25_Pos 25
#define DMAC_BUSYCH_BUSYCH25 (_U_(1) << DMAC_BUSYCH_BUSYCH25_Pos)
#define DMAC_BUSYCH_BUSYCH26_Pos 26
#define DMAC_BUSYCH_BUSYCH26 (_U_(1) << DMAC_BUSYCH_BUSYCH26_Pos)
#define DMAC_BUSYCH_BUSYCH27_Pos 27
#define DMAC_BUSYCH_BUSYCH27 (_U_(1) << DMAC_BUSYCH_BUSYCH27_Pos)
#define DMAC_BUSYCH_BUSYCH28_Pos 28
#define DMAC_BUSYCH_BUSYCH28 (_U_(1) << DMAC_BUSYCH_BUSYCH28_Pos)
#define DMAC_BUSYCH_BUSYCH29_Pos 29
#define DMAC_BUSYCH_BUSYCH29 (_U_(1) << DMAC_BUSYCH_BUSYCH29_Pos)
#define DMAC_BUSYCH_BUSYCH30_Pos 30
#define DMAC_BUSYCH_BUSYCH30 (_U_(1) << DMAC_BUSYCH_BUSYCH30_Pos)
#define DMAC_BUSYCH_BUSYCH31_Pos 31
#define DMAC_BUSYCH_BUSYCH31 (_U_(1) << DMAC_BUSYCH_BUSYCH31_Pos)
#define DMAC_BUSYCH_BUSYCH_Pos 0
#define DMAC_BUSYCH_BUSYCH_Msk (_U_(0xFFFFFFFF) << DMAC_BUSYCH_BUSYCH_Pos)
#define DMAC_BUSYCH_BUSYCH(value) (DMAC_BUSYCH_BUSYCH_Msk & ((value) << DMAC_BUSYCH_BUSYCH_Pos))
#define DMAC_BUSYCH_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t PENDCH0:1;
    uint32_t PENDCH1:1;
    uint32_t PENDCH2:1;
    uint32_t PENDCH3:1;
    uint32_t PENDCH4:1;
    uint32_t PENDCH5:1;
    uint32_t PENDCH6:1;
    uint32_t PENDCH7:1;
    uint32_t PENDCH8:1;
    uint32_t PENDCH9:1;
    uint32_t PENDCH10:1;
    uint32_t PENDCH11:1;
    uint32_t PENDCH12:1;
    uint32_t PENDCH13:1;
    uint32_t PENDCH14:1;
    uint32_t PENDCH15:1;
    uint32_t PENDCH16:1;
    uint32_t PENDCH17:1;
    uint32_t PENDCH18:1;
    uint32_t PENDCH19:1;
    uint32_t PENDCH20:1;
    uint32_t PENDCH21:1;
    uint32_t PENDCH22:1;
    uint32_t PENDCH23:1;
    uint32_t PENDCH24:1;
    uint32_t PENDCH25:1;
    uint32_t PENDCH26:1;
    uint32_t PENDCH27:1;
    uint32_t PENDCH28:1;
    uint32_t PENDCH29:1;
    uint32_t PENDCH30:1;
    uint32_t PENDCH31:1;
  } bit;
  struct {
    uint32_t PENDCH:32;
  } vec;
  uint32_t reg;
} DMAC_PENDCH_Type;


#define DMAC_PENDCH_OFFSET 0x2C
#define DMAC_PENDCH_RESETVALUE _U_(0x00000000)

#define DMAC_PENDCH_PENDCH0_Pos 0
#define DMAC_PENDCH_PENDCH0 (_U_(1) << DMAC_PENDCH_PENDCH0_Pos)
#define DMAC_PENDCH_PENDCH1_Pos 1
#define DMAC_PENDCH_PENDCH1 (_U_(1) << DMAC_PENDCH_PENDCH1_Pos)
#define DMAC_PENDCH_PENDCH2_Pos 2
#define DMAC_PENDCH_PENDCH2 (_U_(1) << DMAC_PENDCH_PENDCH2_Pos)
#define DMAC_PENDCH_PENDCH3_Pos 3
#define DMAC_PENDCH_PENDCH3 (_U_(1) << DMAC_PENDCH_PENDCH3_Pos)
#define DMAC_PENDCH_PENDCH4_Pos 4
#define DMAC_PENDCH_PENDCH4 (_U_(1) << DMAC_PENDCH_PENDCH4_Pos)
#define DMAC_PENDCH_PENDCH5_Pos 5
#define DMAC_PENDCH_PENDCH5 (_U_(1) << DMAC_PENDCH_PENDCH5_Pos)
#define DMAC_PENDCH_PENDCH6_Pos 6
#define DMAC_PENDCH_PENDCH6 (_U_(1) << DMAC_PENDCH_PENDCH6_Pos)
#define DMAC_PENDCH_PENDCH7_Pos 7
#define DMAC_PENDCH_PENDCH7 (_U_(1) << DMAC_PENDCH_PENDCH7_Pos)
#define DMAC_PENDCH_PENDCH8_Pos 8
#define DMAC_PENDCH_PENDCH8 (_U_(1) << DMAC_PENDCH_PENDCH8_Pos)
#define DMAC_PENDCH_PENDCH9_Pos 9
#define DMAC_PENDCH_PENDCH9 (_U_(1) << DMAC_PENDCH_PENDCH9_Pos)
#define DMAC_PENDCH_PENDCH10_Pos 10
#define DMAC_PENDCH_PENDCH10 (_U_(1) << DMAC_PENDCH_PENDCH10_Pos)
#define DMAC_PENDCH_PENDCH11_Pos 11
#define DMAC_PENDCH_PENDCH11 (_U_(1) << DMAC_PENDCH_PENDCH11_Pos)
#define DMAC_PENDCH_PENDCH12_Pos 12
#define DMAC_PENDCH_PENDCH12 (_U_(1) << DMAC_PENDCH_PENDCH12_Pos)
#define DMAC_PENDCH_PENDCH13_Pos 13
#define DMAC_PENDCH_PENDCH13 (_U_(1) << DMAC_PENDCH_PENDCH13_Pos)
#define DMAC_PENDCH_PENDCH14_Pos 14
#define DMAC_PENDCH_PENDCH14 (_U_(1) << DMAC_PENDCH_PENDCH14_Pos)
#define DMAC_PENDCH_PENDCH15_Pos 15
#define DMAC_PENDCH_PENDCH15 (_U_(1) << DMAC_PENDCH_PENDCH15_Pos)
#define DMAC_PENDCH_PENDCH16_Pos 16
#define DMAC_PENDCH_PENDCH16 (_U_(1) << DMAC_PENDCH_PENDCH16_Pos)
#define DMAC_PENDCH_PENDCH17_Pos 17
#define DMAC_PENDCH_PENDCH17 (_U_(1) << DMAC_PENDCH_PENDCH17_Pos)
#define DMAC_PENDCH_PENDCH18_Pos 18
#define DMAC_PENDCH_PENDCH18 (_U_(1) << DMAC_PENDCH_PENDCH18_Pos)
#define DMAC_PENDCH_PENDCH19_Pos 19
#define DMAC_PENDCH_PENDCH19 (_U_(1) << DMAC_PENDCH_PENDCH19_Pos)
#define DMAC_PENDCH_PENDCH20_Pos 20
#define DMAC_PENDCH_PENDCH20 (_U_(1) << DMAC_PENDCH_PENDCH20_Pos)
#define DMAC_PENDCH_PENDCH21_Pos 21
#define DMAC_PENDCH_PENDCH21 (_U_(1) << DMAC_PENDCH_PENDCH21_Pos)
#define DMAC_PENDCH_PENDCH22_Pos 22
#define DMAC_PENDCH_PENDCH22 (_U_(1) << DMAC_PENDCH_PENDCH22_Pos)
#define DMAC_PENDCH_PENDCH23_Pos 23
#define DMAC_PENDCH_PENDCH23 (_U_(1) << DMAC_PENDCH_PENDCH23_Pos)
#define DMAC_PENDCH_PENDCH24_Pos 24
#define DMAC_PENDCH_PENDCH24 (_U_(1) << DMAC_PENDCH_PENDCH24_Pos)
#define DMAC_PENDCH_PENDCH25_Pos 25
#define DMAC_PENDCH_PENDCH25 (_U_(1) << DMAC_PENDCH_PENDCH25_Pos)
#define DMAC_PENDCH_PENDCH26_Pos 26
#define DMAC_PENDCH_PENDCH26 (_U_(1) << DMAC_PENDCH_PENDCH26_Pos)
#define DMAC_PENDCH_PENDCH27_Pos 27
#define DMAC_PENDCH_PENDCH27 (_U_(1) << DMAC_PENDCH_PENDCH27_Pos)
#define DMAC_PENDCH_PENDCH28_Pos 28
#define DMAC_PENDCH_PENDCH28 (_U_(1) << DMAC_PENDCH_PENDCH28_Pos)
#define DMAC_PENDCH_PENDCH29_Pos 29
#define DMAC_PENDCH_PENDCH29 (_U_(1) << DMAC_PENDCH_PENDCH29_Pos)
#define DMAC_PENDCH_PENDCH30_Pos 30
#define DMAC_PENDCH_PENDCH30 (_U_(1) << DMAC_PENDCH_PENDCH30_Pos)
#define DMAC_PENDCH_PENDCH31_Pos 31
#define DMAC_PENDCH_PENDCH31 (_U_(1) << DMAC_PENDCH_PENDCH31_Pos)
#define DMAC_PENDCH_PENDCH_Pos 0
#define DMAC_PENDCH_PENDCH_Msk (_U_(0xFFFFFFFF) << DMAC_PENDCH_PENDCH_Pos)
#define DMAC_PENDCH_PENDCH(value) (DMAC_PENDCH_PENDCH_Msk & ((value) << DMAC_PENDCH_PENDCH_Pos))
#define DMAC_PENDCH_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t LVLEX0:1;
    uint32_t LVLEX1:1;
    uint32_t LVLEX2:1;
    uint32_t LVLEX3:1;
    uint32_t :4;
    uint32_t ID:5;
    uint32_t :2;
    uint32_t ABUSY:1;
    uint32_t BTCNT:16;
  } bit;
  struct {
    uint32_t LVLEX:4;
    uint32_t :28;
  } vec;
  uint32_t reg;
} DMAC_ACTIVE_Type;


#define DMAC_ACTIVE_OFFSET 0x30
#define DMAC_ACTIVE_RESETVALUE _U_(0x00000000)

#define DMAC_ACTIVE_LVLEX0_Pos 0
#define DMAC_ACTIVE_LVLEX0 (_U_(1) << DMAC_ACTIVE_LVLEX0_Pos)
#define DMAC_ACTIVE_LVLEX1_Pos 1
#define DMAC_ACTIVE_LVLEX1 (_U_(1) << DMAC_ACTIVE_LVLEX1_Pos)
#define DMAC_ACTIVE_LVLEX2_Pos 2
#define DMAC_ACTIVE_LVLEX2 (_U_(1) << DMAC_ACTIVE_LVLEX2_Pos)
#define DMAC_ACTIVE_LVLEX3_Pos 3
#define DMAC_ACTIVE_LVLEX3 (_U_(1) << DMAC_ACTIVE_LVLEX3_Pos)
#define DMAC_ACTIVE_LVLEX_Pos 0
#define DMAC_ACTIVE_LVLEX_Msk (_U_(0xF) << DMAC_ACTIVE_LVLEX_Pos)
#define DMAC_ACTIVE_LVLEX(value) (DMAC_ACTIVE_LVLEX_Msk & ((value) << DMAC_ACTIVE_LVLEX_Pos))
#define DMAC_ACTIVE_ID_Pos 8
#define DMAC_ACTIVE_ID_Msk (_U_(0x1F) << DMAC_ACTIVE_ID_Pos)
#define DMAC_ACTIVE_ID(value) (DMAC_ACTIVE_ID_Msk & ((value) << DMAC_ACTIVE_ID_Pos))
#define DMAC_ACTIVE_ABUSY_Pos 15
#define DMAC_ACTIVE_ABUSY (_U_(0x1) << DMAC_ACTIVE_ABUSY_Pos)
#define DMAC_ACTIVE_BTCNT_Pos 16
#define DMAC_ACTIVE_BTCNT_Msk (_U_(0xFFFF) << DMAC_ACTIVE_BTCNT_Pos)
#define DMAC_ACTIVE_BTCNT(value) (DMAC_ACTIVE_BTCNT_Msk & ((value) << DMAC_ACTIVE_BTCNT_Pos))
#define DMAC_ACTIVE_MASK _U_(0xFFFF9F0F)



typedef union {
  struct {
    uint32_t BASEADDR:32;
  } bit;
  uint32_t reg;
} DMAC_BASEADDR_Type;


#define DMAC_BASEADDR_OFFSET 0x34
#define DMAC_BASEADDR_RESETVALUE _U_(0x00000000)

#define DMAC_BASEADDR_BASEADDR_Pos 0
#define DMAC_BASEADDR_BASEADDR_Msk (_U_(0xFFFFFFFF) << DMAC_BASEADDR_BASEADDR_Pos)
#define DMAC_BASEADDR_BASEADDR(value) (DMAC_BASEADDR_BASEADDR_Msk & ((value) << DMAC_BASEADDR_BASEADDR_Pos))
#define DMAC_BASEADDR_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t WRBADDR:32;
  } bit;
  uint32_t reg;
} DMAC_WRBADDR_Type;


#define DMAC_WRBADDR_OFFSET 0x38
#define DMAC_WRBADDR_RESETVALUE _U_(0x00000000)

#define DMAC_WRBADDR_WRBADDR_Pos 0
#define DMAC_WRBADDR_WRBADDR_Msk (_U_(0xFFFFFFFF) << DMAC_WRBADDR_WRBADDR_Pos)
#define DMAC_WRBADDR_WRBADDR(value) (DMAC_WRBADDR_WRBADDR_Msk & ((value) << DMAC_WRBADDR_WRBADDR_Pos))
#define DMAC_WRBADDR_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t :4;
    uint32_t RUNSTDBY:1;
    uint32_t :1;
    uint32_t TRIGSRC:7;
    uint32_t :5;
    uint32_t TRIGACT:2;
    uint32_t :2;
    uint32_t BURSTLEN:4;
    uint32_t THRESHOLD:2;
    uint32_t :2;
  } bit;
  uint32_t reg;
} DMAC_CHCTRLA_Type;


#define DMAC_CHCTRLA_OFFSET 0x40
#define DMAC_CHCTRLA_RESETVALUE _U_(0x00000000)

#define DMAC_CHCTRLA_SWRST_Pos 0
#define DMAC_CHCTRLA_SWRST (_U_(0x1) << DMAC_CHCTRLA_SWRST_Pos)
#define DMAC_CHCTRLA_ENABLE_Pos 1
#define DMAC_CHCTRLA_ENABLE (_U_(0x1) << DMAC_CHCTRLA_ENABLE_Pos)
#define DMAC_CHCTRLA_RUNSTDBY_Pos 6
#define DMAC_CHCTRLA_RUNSTDBY (_U_(0x1) << DMAC_CHCTRLA_RUNSTDBY_Pos)
#define DMAC_CHCTRLA_TRIGSRC_Pos 8
#define DMAC_CHCTRLA_TRIGSRC_Msk (_U_(0x7F) << DMAC_CHCTRLA_TRIGSRC_Pos)
#define DMAC_CHCTRLA_TRIGSRC(value) (DMAC_CHCTRLA_TRIGSRC_Msk & ((value) << DMAC_CHCTRLA_TRIGSRC_Pos))
#define DMAC_CHCTRLA_TRIGSRC_DISABLE_Val _U_(0x0)
#define DMAC_CHCTRLA_TRIGSRC_DISABLE (DMAC_CHCTRLA_TRIGSRC_DISABLE_Val << DMAC_CHCTRLA_TRIGSRC_Pos)
#define DMAC_CHCTRLA_TRIGACT_Pos 20
#define DMAC_CHCTRLA_TRIGACT_Msk (_U_(0x3) << DMAC_CHCTRLA_TRIGACT_Pos)
#define DMAC_CHCTRLA_TRIGACT(value) (DMAC_CHCTRLA_TRIGACT_Msk & ((value) << DMAC_CHCTRLA_TRIGACT_Pos))
#define DMAC_CHCTRLA_TRIGACT_BLOCK_Val _U_(0x0)
#define DMAC_CHCTRLA_TRIGACT_BURST_Val _U_(0x2)
#define DMAC_CHCTRLA_TRIGACT_TRANSACTION_Val _U_(0x3)
#define DMAC_CHCTRLA_TRIGACT_BLOCK (DMAC_CHCTRLA_TRIGACT_BLOCK_Val << DMAC_CHCTRLA_TRIGACT_Pos)
#define DMAC_CHCTRLA_TRIGACT_BURST (DMAC_CHCTRLA_TRIGACT_BURST_Val << DMAC_CHCTRLA_TRIGACT_Pos)
#define DMAC_CHCTRLA_TRIGACT_TRANSACTION (DMAC_CHCTRLA_TRIGACT_TRANSACTION_Val << DMAC_CHCTRLA_TRIGACT_Pos)
#define DMAC_CHCTRLA_BURSTLEN_Pos 24
#define DMAC_CHCTRLA_BURSTLEN_Msk (_U_(0xF) << DMAC_CHCTRLA_BURSTLEN_Pos)
#define DMAC_CHCTRLA_BURSTLEN(value) (DMAC_CHCTRLA_BURSTLEN_Msk & ((value) << DMAC_CHCTRLA_BURSTLEN_Pos))
#define DMAC_CHCTRLA_BURSTLEN_SINGLE_Val _U_(0x0)
#define DMAC_CHCTRLA_BURSTLEN_2BEAT_Val _U_(0x1)
#define DMAC_CHCTRLA_BURSTLEN_3BEAT_Val _U_(0x2)
#define DMAC_CHCTRLA_BURSTLEN_4BEAT_Val _U_(0x3)
#define DMAC_CHCTRLA_BURSTLEN_5BEAT_Val _U_(0x4)
#define DMAC_CHCTRLA_BURSTLEN_6BEAT_Val _U_(0x5)
#define DMAC_CHCTRLA_BURSTLEN_7BEAT_Val _U_(0x6)
#define DMAC_CHCTRLA_BURSTLEN_8BEAT_Val _U_(0x7)
#define DMAC_CHCTRLA_BURSTLEN_9BEAT_Val _U_(0x8)
#define DMAC_CHCTRLA_BURSTLEN_10BEAT_Val _U_(0x9)
#define DMAC_CHCTRLA_BURSTLEN_11BEAT_Val _U_(0xA)
#define DMAC_CHCTRLA_BURSTLEN_12BEAT_Val _U_(0xB)
#define DMAC_CHCTRLA_BURSTLEN_13BEAT_Val _U_(0xC)
#define DMAC_CHCTRLA_BURSTLEN_14BEAT_Val _U_(0xD)
#define DMAC_CHCTRLA_BURSTLEN_15BEAT_Val _U_(0xE)
#define DMAC_CHCTRLA_BURSTLEN_16BEAT_Val _U_(0xF)
#define DMAC_CHCTRLA_BURSTLEN_SINGLE (DMAC_CHCTRLA_BURSTLEN_SINGLE_Val << DMAC_CHCTRLA_BURSTLEN_Pos)
#define DMAC_CHCTRLA_BURSTLEN_2BEAT (DMAC_CHCTRLA_BURSTLEN_2BEAT_Val << DMAC_CHCTRLA_BURSTLEN_Pos)
#define DMAC_CHCTRLA_BURSTLEN_3BEAT (DMAC_CHCTRLA_BURSTLEN_3BEAT_Val << DMAC_CHCTRLA_BURSTLEN_Pos)
#define DMAC_CHCTRLA_BURSTLEN_4BEAT (DMAC_CHCTRLA_BURSTLEN_4BEAT_Val << DMAC_CHCTRLA_BURSTLEN_Pos)
#define DMAC_CHCTRLA_BURSTLEN_5BEAT (DMAC_CHCTRLA_BURSTLEN_5BEAT_Val << DMAC_CHCTRLA_BURSTLEN_Pos)
#define DMAC_CHCTRLA_BURSTLEN_6BEAT (DMAC_CHCTRLA_BURSTLEN_6BEAT_Val << DMAC_CHCTRLA_BURSTLEN_Pos)
#define DMAC_CHCTRLA_BURSTLEN_7BEAT (DMAC_CHCTRLA_BURSTLEN_7BEAT_Val << DMAC_CHCTRLA_BURSTLEN_Pos)
#define DMAC_CHCTRLA_BURSTLEN_8BEAT (DMAC_CHCTRLA_BURSTLEN_8BEAT_Val << DMAC_CHCTRLA_BURSTLEN_Pos)
#define DMAC_CHCTRLA_BURSTLEN_9BEAT (DMAC_CHCTRLA_BURSTLEN_9BEAT_Val << DMAC_CHCTRLA_BURSTLEN_Pos)
#define DMAC_CHCTRLA_BURSTLEN_10BEAT (DMAC_CHCTRLA_BURSTLEN_10BEAT_Val << DMAC_CHCTRLA_BURSTLEN_Pos)
#define DMAC_CHCTRLA_BURSTLEN_11BEAT (DMAC_CHCTRLA_BURSTLEN_11BEAT_Val << DMAC_CHCTRLA_BURSTLEN_Pos)
#define DMAC_CHCTRLA_BURSTLEN_12BEAT (DMAC_CHCTRLA_BURSTLEN_12BEAT_Val << DMAC_CHCTRLA_BURSTLEN_Pos)
#define DMAC_CHCTRLA_BURSTLEN_13BEAT (DMAC_CHCTRLA_BURSTLEN_13BEAT_Val << DMAC_CHCTRLA_BURSTLEN_Pos)
#define DMAC_CHCTRLA_BURSTLEN_14BEAT (DMAC_CHCTRLA_BURSTLEN_14BEAT_Val << DMAC_CHCTRLA_BURSTLEN_Pos)
#define DMAC_CHCTRLA_BURSTLEN_15BEAT (DMAC_CHCTRLA_BURSTLEN_15BEAT_Val << DMAC_CHCTRLA_BURSTLEN_Pos)
#define DMAC_CHCTRLA_BURSTLEN_16BEAT (DMAC_CHCTRLA_BURSTLEN_16BEAT_Val << DMAC_CHCTRLA_BURSTLEN_Pos)
#define DMAC_CHCTRLA_THRESHOLD_Pos 28
#define DMAC_CHCTRLA_THRESHOLD_Msk (_U_(0x3) << DMAC_CHCTRLA_THRESHOLD_Pos)
#define DMAC_CHCTRLA_THRESHOLD(value) (DMAC_CHCTRLA_THRESHOLD_Msk & ((value) << DMAC_CHCTRLA_THRESHOLD_Pos))
#define DMAC_CHCTRLA_THRESHOLD_1BEAT_Val _U_(0x0)
#define DMAC_CHCTRLA_THRESHOLD_2BEATS_Val _U_(0x1)
#define DMAC_CHCTRLA_THRESHOLD_4BEATS_Val _U_(0x2)
#define DMAC_CHCTRLA_THRESHOLD_8BEATS_Val _U_(0x3)
#define DMAC_CHCTRLA_THRESHOLD_1BEAT (DMAC_CHCTRLA_THRESHOLD_1BEAT_Val << DMAC_CHCTRLA_THRESHOLD_Pos)
#define DMAC_CHCTRLA_THRESHOLD_2BEATS (DMAC_CHCTRLA_THRESHOLD_2BEATS_Val << DMAC_CHCTRLA_THRESHOLD_Pos)
#define DMAC_CHCTRLA_THRESHOLD_4BEATS (DMAC_CHCTRLA_THRESHOLD_4BEATS_Val << DMAC_CHCTRLA_THRESHOLD_Pos)
#define DMAC_CHCTRLA_THRESHOLD_8BEATS (DMAC_CHCTRLA_THRESHOLD_8BEATS_Val << DMAC_CHCTRLA_THRESHOLD_Pos)
#define DMAC_CHCTRLA_MASK _U_(0x3F307F43)



typedef union {
  struct {
    uint8_t CMD:2;
    uint8_t :6;
  } bit;
  uint8_t reg;
} DMAC_CHCTRLB_Type;


#define DMAC_CHCTRLB_OFFSET 0x44
#define DMAC_CHCTRLB_RESETVALUE _U_(0x00)

#define DMAC_CHCTRLB_CMD_Pos 0
#define DMAC_CHCTRLB_CMD_Msk (_U_(0x3) << DMAC_CHCTRLB_CMD_Pos)
#define DMAC_CHCTRLB_CMD(value) (DMAC_CHCTRLB_CMD_Msk & ((value) << DMAC_CHCTRLB_CMD_Pos))
#define DMAC_CHCTRLB_CMD_NOACT_Val _U_(0x0)
#define DMAC_CHCTRLB_CMD_SUSPEND_Val _U_(0x1)
#define DMAC_CHCTRLB_CMD_RESUME_Val _U_(0x2)
#define DMAC_CHCTRLB_CMD_NOACT (DMAC_CHCTRLB_CMD_NOACT_Val << DMAC_CHCTRLB_CMD_Pos)
#define DMAC_CHCTRLB_CMD_SUSPEND (DMAC_CHCTRLB_CMD_SUSPEND_Val << DMAC_CHCTRLB_CMD_Pos)
#define DMAC_CHCTRLB_CMD_RESUME (DMAC_CHCTRLB_CMD_RESUME_Val << DMAC_CHCTRLB_CMD_Pos)
#define DMAC_CHCTRLB_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t PRILVL:2;
    uint8_t :6;
  } bit;
  uint8_t reg;
} DMAC_CHPRILVL_Type;


#define DMAC_CHPRILVL_OFFSET 0x45
#define DMAC_CHPRILVL_RESETVALUE _U_(0x00)

#define DMAC_CHPRILVL_PRILVL_Pos 0
#define DMAC_CHPRILVL_PRILVL_Msk (_U_(0x3) << DMAC_CHPRILVL_PRILVL_Pos)
#define DMAC_CHPRILVL_PRILVL(value) (DMAC_CHPRILVL_PRILVL_Msk & ((value) << DMAC_CHPRILVL_PRILVL_Pos))
#define DMAC_CHPRILVL_PRILVL_LVL0_Val _U_(0x0)
#define DMAC_CHPRILVL_PRILVL_LVL1_Val _U_(0x1)
#define DMAC_CHPRILVL_PRILVL_LVL2_Val _U_(0x2)
#define DMAC_CHPRILVL_PRILVL_LVL3_Val _U_(0x3)
#define DMAC_CHPRILVL_PRILVL_LVL4_Val _U_(0x4)
#define DMAC_CHPRILVL_PRILVL_LVL5_Val _U_(0x5)
#define DMAC_CHPRILVL_PRILVL_LVL6_Val _U_(0x6)
#define DMAC_CHPRILVL_PRILVL_LVL7_Val _U_(0x7)
#define DMAC_CHPRILVL_PRILVL_LVL0 (DMAC_CHPRILVL_PRILVL_LVL0_Val << DMAC_CHPRILVL_PRILVL_Pos)
#define DMAC_CHPRILVL_PRILVL_LVL1 (DMAC_CHPRILVL_PRILVL_LVL1_Val << DMAC_CHPRILVL_PRILVL_Pos)
#define DMAC_CHPRILVL_PRILVL_LVL2 (DMAC_CHPRILVL_PRILVL_LVL2_Val << DMAC_CHPRILVL_PRILVL_Pos)
#define DMAC_CHPRILVL_PRILVL_LVL3 (DMAC_CHPRILVL_PRILVL_LVL3_Val << DMAC_CHPRILVL_PRILVL_Pos)
#define DMAC_CHPRILVL_PRILVL_LVL4 (DMAC_CHPRILVL_PRILVL_LVL4_Val << DMAC_CHPRILVL_PRILVL_Pos)
#define DMAC_CHPRILVL_PRILVL_LVL5 (DMAC_CHPRILVL_PRILVL_LVL5_Val << DMAC_CHPRILVL_PRILVL_Pos)
#define DMAC_CHPRILVL_PRILVL_LVL6 (DMAC_CHPRILVL_PRILVL_LVL6_Val << DMAC_CHPRILVL_PRILVL_Pos)
#define DMAC_CHPRILVL_PRILVL_LVL7 (DMAC_CHPRILVL_PRILVL_LVL7_Val << DMAC_CHPRILVL_PRILVL_Pos)
#define DMAC_CHPRILVL_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t EVACT:3;
    uint8_t :1;
    uint8_t EVOMODE:2;
    uint8_t EVIE:1;
    uint8_t EVOE:1;
  } bit;
  uint8_t reg;
} DMAC_CHEVCTRL_Type;


#define DMAC_CHEVCTRL_OFFSET 0x46
#define DMAC_CHEVCTRL_RESETVALUE _U_(0x00)

#define DMAC_CHEVCTRL_EVACT_Pos 0
#define DMAC_CHEVCTRL_EVACT_Msk (_U_(0x7) << DMAC_CHEVCTRL_EVACT_Pos)
#define DMAC_CHEVCTRL_EVACT(value) (DMAC_CHEVCTRL_EVACT_Msk & ((value) << DMAC_CHEVCTRL_EVACT_Pos))
#define DMAC_CHEVCTRL_EVACT_NOACT_Val _U_(0x0)
#define DMAC_CHEVCTRL_EVACT_TRIG_Val _U_(0x1)
#define DMAC_CHEVCTRL_EVACT_CTRIG_Val _U_(0x2)
#define DMAC_CHEVCTRL_EVACT_CBLOCK_Val _U_(0x3)
#define DMAC_CHEVCTRL_EVACT_SUSPEND_Val _U_(0x4)
#define DMAC_CHEVCTRL_EVACT_RESUME_Val _U_(0x5)
#define DMAC_CHEVCTRL_EVACT_SSKIP_Val _U_(0x6)
#define DMAC_CHEVCTRL_EVACT_INCPRI_Val _U_(0x7)
#define DMAC_CHEVCTRL_EVACT_NOACT (DMAC_CHEVCTRL_EVACT_NOACT_Val << DMAC_CHEVCTRL_EVACT_Pos)
#define DMAC_CHEVCTRL_EVACT_TRIG (DMAC_CHEVCTRL_EVACT_TRIG_Val << DMAC_CHEVCTRL_EVACT_Pos)
#define DMAC_CHEVCTRL_EVACT_CTRIG (DMAC_CHEVCTRL_EVACT_CTRIG_Val << DMAC_CHEVCTRL_EVACT_Pos)
#define DMAC_CHEVCTRL_EVACT_CBLOCK (DMAC_CHEVCTRL_EVACT_CBLOCK_Val << DMAC_CHEVCTRL_EVACT_Pos)
#define DMAC_CHEVCTRL_EVACT_SUSPEND (DMAC_CHEVCTRL_EVACT_SUSPEND_Val << DMAC_CHEVCTRL_EVACT_Pos)
#define DMAC_CHEVCTRL_EVACT_RESUME (DMAC_CHEVCTRL_EVACT_RESUME_Val << DMAC_CHEVCTRL_EVACT_Pos)
#define DMAC_CHEVCTRL_EVACT_SSKIP (DMAC_CHEVCTRL_EVACT_SSKIP_Val << DMAC_CHEVCTRL_EVACT_Pos)
#define DMAC_CHEVCTRL_EVACT_INCPRI (DMAC_CHEVCTRL_EVACT_INCPRI_Val << DMAC_CHEVCTRL_EVACT_Pos)
#define DMAC_CHEVCTRL_EVOMODE_Pos 4
#define DMAC_CHEVCTRL_EVOMODE_Msk (_U_(0x3) << DMAC_CHEVCTRL_EVOMODE_Pos)
#define DMAC_CHEVCTRL_EVOMODE(value) (DMAC_CHEVCTRL_EVOMODE_Msk & ((value) << DMAC_CHEVCTRL_EVOMODE_Pos))
#define DMAC_CHEVCTRL_EVOMODE_DEFAULT_Val _U_(0x0)
#define DMAC_CHEVCTRL_EVOMODE_TRIGACT_Val _U_(0x1)
#define DMAC_CHEVCTRL_EVOMODE_DEFAULT (DMAC_CHEVCTRL_EVOMODE_DEFAULT_Val << DMAC_CHEVCTRL_EVOMODE_Pos)
#define DMAC_CHEVCTRL_EVOMODE_TRIGACT (DMAC_CHEVCTRL_EVOMODE_TRIGACT_Val << DMAC_CHEVCTRL_EVOMODE_Pos)
#define DMAC_CHEVCTRL_EVIE_Pos 6
#define DMAC_CHEVCTRL_EVIE (_U_(0x1) << DMAC_CHEVCTRL_EVIE_Pos)
#define DMAC_CHEVCTRL_EVOE_Pos 7
#define DMAC_CHEVCTRL_EVOE (_U_(0x1) << DMAC_CHEVCTRL_EVOE_Pos)
#define DMAC_CHEVCTRL_MASK _U_(0xF7)



typedef union {
  struct {
    uint8_t TERR:1;
    uint8_t TCMPL:1;
    uint8_t SUSP:1;
    uint8_t :5;
  } bit;
  uint8_t reg;
} DMAC_CHINTENCLR_Type;


#define DMAC_CHINTENCLR_OFFSET 0x4C
#define DMAC_CHINTENCLR_RESETVALUE _U_(0x00)

#define DMAC_CHINTENCLR_TERR_Pos 0
#define DMAC_CHINTENCLR_TERR (_U_(0x1) << DMAC_CHINTENCLR_TERR_Pos)
#define DMAC_CHINTENCLR_TCMPL_Pos 1
#define DMAC_CHINTENCLR_TCMPL (_U_(0x1) << DMAC_CHINTENCLR_TCMPL_Pos)
#define DMAC_CHINTENCLR_SUSP_Pos 2
#define DMAC_CHINTENCLR_SUSP (_U_(0x1) << DMAC_CHINTENCLR_SUSP_Pos)
#define DMAC_CHINTENCLR_MASK _U_(0x07)



typedef union {
  struct {
    uint8_t TERR:1;
    uint8_t TCMPL:1;
    uint8_t SUSP:1;
    uint8_t :5;
  } bit;
  uint8_t reg;
} DMAC_CHINTENSET_Type;


#define DMAC_CHINTENSET_OFFSET 0x4D
#define DMAC_CHINTENSET_RESETVALUE _U_(0x00)

#define DMAC_CHINTENSET_TERR_Pos 0
#define DMAC_CHINTENSET_TERR (_U_(0x1) << DMAC_CHINTENSET_TERR_Pos)
#define DMAC_CHINTENSET_TCMPL_Pos 1
#define DMAC_CHINTENSET_TCMPL (_U_(0x1) << DMAC_CHINTENSET_TCMPL_Pos)
#define DMAC_CHINTENSET_SUSP_Pos 2
#define DMAC_CHINTENSET_SUSP (_U_(0x1) << DMAC_CHINTENSET_SUSP_Pos)
#define DMAC_CHINTENSET_MASK _U_(0x07)



typedef union {
  struct {
    volatile const uint8_t TERR:1;
    volatile const uint8_t TCMPL:1;
    volatile const uint8_t SUSP:1;
    volatile const uint8_t :5;
  } bit;
  uint8_t reg;
} DMAC_CHINTFLAG_Type;


#define DMAC_CHINTFLAG_OFFSET 0x4E
#define DMAC_CHINTFLAG_RESETVALUE _U_(0x00)

#define DMAC_CHINTFLAG_TERR_Pos 0
#define DMAC_CHINTFLAG_TERR (_U_(0x1) << DMAC_CHINTFLAG_TERR_Pos)
#define DMAC_CHINTFLAG_TCMPL_Pos 1
#define DMAC_CHINTFLAG_TCMPL (_U_(0x1) << DMAC_CHINTFLAG_TCMPL_Pos)
#define DMAC_CHINTFLAG_SUSP_Pos 2
#define DMAC_CHINTFLAG_SUSP (_U_(0x1) << DMAC_CHINTFLAG_SUSP_Pos)
#define DMAC_CHINTFLAG_MASK _U_(0x07)



typedef union {
  struct {
    uint8_t PEND:1;
    uint8_t BUSY:1;
    uint8_t FERR:1;
    uint8_t CRCERR:1;
    uint8_t :4;
  } bit;
  uint8_t reg;
} DMAC_CHSTATUS_Type;


#define DMAC_CHSTATUS_OFFSET 0x4F
#define DMAC_CHSTATUS_RESETVALUE _U_(0x00)

#define DMAC_CHSTATUS_PEND_Pos 0
#define DMAC_CHSTATUS_PEND (_U_(0x1) << DMAC_CHSTATUS_PEND_Pos)
#define DMAC_CHSTATUS_BUSY_Pos 1
#define DMAC_CHSTATUS_BUSY (_U_(0x1) << DMAC_CHSTATUS_BUSY_Pos)
#define DMAC_CHSTATUS_FERR_Pos 2
#define DMAC_CHSTATUS_FERR (_U_(0x1) << DMAC_CHSTATUS_FERR_Pos)
#define DMAC_CHSTATUS_CRCERR_Pos 3
#define DMAC_CHSTATUS_CRCERR (_U_(0x1) << DMAC_CHSTATUS_CRCERR_Pos)
#define DMAC_CHSTATUS_MASK _U_(0x0F)



typedef union {
  struct {
    uint16_t VALID:1;
    uint16_t EVOSEL:2;
    uint16_t BLOCKACT:2;
    uint16_t :3;
    uint16_t BEATSIZE:2;
    uint16_t SRCINC:1;
    uint16_t DSTINC:1;
    uint16_t STEPSEL:1;
    uint16_t STEPSIZE:3;
  } bit;
  uint16_t reg;
} DMAC_BTCTRL_Type;


#define DMAC_BTCTRL_OFFSET 0x00
#define DMAC_BTCTRL_RESETVALUE _U_(0x0000)

#define DMAC_BTCTRL_VALID_Pos 0
#define DMAC_BTCTRL_VALID (_U_(0x1) << DMAC_BTCTRL_VALID_Pos)
#define DMAC_BTCTRL_EVOSEL_Pos 1
#define DMAC_BTCTRL_EVOSEL_Msk (_U_(0x3) << DMAC_BTCTRL_EVOSEL_Pos)
#define DMAC_BTCTRL_EVOSEL(value) (DMAC_BTCTRL_EVOSEL_Msk & ((value) << DMAC_BTCTRL_EVOSEL_Pos))
#define DMAC_BTCTRL_EVOSEL_DISABLE_Val _U_(0x0)
#define DMAC_BTCTRL_EVOSEL_BLOCK_Val _U_(0x1)
#define DMAC_BTCTRL_EVOSEL_BURST_Val _U_(0x3)
#define DMAC_BTCTRL_EVOSEL_DISABLE (DMAC_BTCTRL_EVOSEL_DISABLE_Val << DMAC_BTCTRL_EVOSEL_Pos)
#define DMAC_BTCTRL_EVOSEL_BLOCK (DMAC_BTCTRL_EVOSEL_BLOCK_Val << DMAC_BTCTRL_EVOSEL_Pos)
#define DMAC_BTCTRL_EVOSEL_BURST (DMAC_BTCTRL_EVOSEL_BURST_Val << DMAC_BTCTRL_EVOSEL_Pos)
#define DMAC_BTCTRL_BLOCKACT_Pos 3
#define DMAC_BTCTRL_BLOCKACT_Msk (_U_(0x3) << DMAC_BTCTRL_BLOCKACT_Pos)
#define DMAC_BTCTRL_BLOCKACT(value) (DMAC_BTCTRL_BLOCKACT_Msk & ((value) << DMAC_BTCTRL_BLOCKACT_Pos))
#define DMAC_BTCTRL_BLOCKACT_NOACT_Val _U_(0x0)
#define DMAC_BTCTRL_BLOCKACT_INT_Val _U_(0x1)
#define DMAC_BTCTRL_BLOCKACT_SUSPEND_Val _U_(0x2)
#define DMAC_BTCTRL_BLOCKACT_BOTH_Val _U_(0x3)
#define DMAC_BTCTRL_BLOCKACT_NOACT (DMAC_BTCTRL_BLOCKACT_NOACT_Val << DMAC_BTCTRL_BLOCKACT_Pos)
#define DMAC_BTCTRL_BLOCKACT_INT (DMAC_BTCTRL_BLOCKACT_INT_Val << DMAC_BTCTRL_BLOCKACT_Pos)
#define DMAC_BTCTRL_BLOCKACT_SUSPEND (DMAC_BTCTRL_BLOCKACT_SUSPEND_Val << DMAC_BTCTRL_BLOCKACT_Pos)
#define DMAC_BTCTRL_BLOCKACT_BOTH (DMAC_BTCTRL_BLOCKACT_BOTH_Val << DMAC_BTCTRL_BLOCKACT_Pos)
#define DMAC_BTCTRL_BEATSIZE_Pos 8
#define DMAC_BTCTRL_BEATSIZE_Msk (_U_(0x3) << DMAC_BTCTRL_BEATSIZE_Pos)
#define DMAC_BTCTRL_BEATSIZE(value) (DMAC_BTCTRL_BEATSIZE_Msk & ((value) << DMAC_BTCTRL_BEATSIZE_Pos))
#define DMAC_BTCTRL_BEATSIZE_BYTE_Val _U_(0x0)
#define DMAC_BTCTRL_BEATSIZE_HWORD_Val _U_(0x1)
#define DMAC_BTCTRL_BEATSIZE_WORD_Val _U_(0x2)
#define DMAC_BTCTRL_BEATSIZE_BYTE (DMAC_BTCTRL_BEATSIZE_BYTE_Val << DMAC_BTCTRL_BEATSIZE_Pos)
#define DMAC_BTCTRL_BEATSIZE_HWORD (DMAC_BTCTRL_BEATSIZE_HWORD_Val << DMAC_BTCTRL_BEATSIZE_Pos)
#define DMAC_BTCTRL_BEATSIZE_WORD (DMAC_BTCTRL_BEATSIZE_WORD_Val << DMAC_BTCTRL_BEATSIZE_Pos)
#define DMAC_BTCTRL_SRCINC_Pos 10
#define DMAC_BTCTRL_SRCINC (_U_(0x1) << DMAC_BTCTRL_SRCINC_Pos)
#define DMAC_BTCTRL_DSTINC_Pos 11
#define DMAC_BTCTRL_DSTINC (_U_(0x1) << DMAC_BTCTRL_DSTINC_Pos)
#define DMAC_BTCTRL_STEPSEL_Pos 12
#define DMAC_BTCTRL_STEPSEL (_U_(0x1) << DMAC_BTCTRL_STEPSEL_Pos)
#define DMAC_BTCTRL_STEPSEL_DST_Val _U_(0x0)
#define DMAC_BTCTRL_STEPSEL_SRC_Val _U_(0x1)
#define DMAC_BTCTRL_STEPSEL_DST (DMAC_BTCTRL_STEPSEL_DST_Val << DMAC_BTCTRL_STEPSEL_Pos)
#define DMAC_BTCTRL_STEPSEL_SRC (DMAC_BTCTRL_STEPSEL_SRC_Val << DMAC_BTCTRL_STEPSEL_Pos)
#define DMAC_BTCTRL_STEPSIZE_Pos 13
#define DMAC_BTCTRL_STEPSIZE_Msk (_U_(0x7) << DMAC_BTCTRL_STEPSIZE_Pos)
#define DMAC_BTCTRL_STEPSIZE(value) (DMAC_BTCTRL_STEPSIZE_Msk & ((value) << DMAC_BTCTRL_STEPSIZE_Pos))
#define DMAC_BTCTRL_STEPSIZE_X1_Val _U_(0x0)
#define DMAC_BTCTRL_STEPSIZE_X2_Val _U_(0x1)
#define DMAC_BTCTRL_STEPSIZE_X4_Val _U_(0x2)
#define DMAC_BTCTRL_STEPSIZE_X8_Val _U_(0x3)
#define DMAC_BTCTRL_STEPSIZE_X16_Val _U_(0x4)
#define DMAC_BTCTRL_STEPSIZE_X32_Val _U_(0x5)
#define DMAC_BTCTRL_STEPSIZE_X64_Val _U_(0x6)
#define DMAC_BTCTRL_STEPSIZE_X128_Val _U_(0x7)
#define DMAC_BTCTRL_STEPSIZE_X1 (DMAC_BTCTRL_STEPSIZE_X1_Val << DMAC_BTCTRL_STEPSIZE_Pos)
#define DMAC_BTCTRL_STEPSIZE_X2 (DMAC_BTCTRL_STEPSIZE_X2_Val << DMAC_BTCTRL_STEPSIZE_Pos)
#define DMAC_BTCTRL_STEPSIZE_X4 (DMAC_BTCTRL_STEPSIZE_X4_Val << DMAC_BTCTRL_STEPSIZE_Pos)
#define DMAC_BTCTRL_STEPSIZE_X8 (DMAC_BTCTRL_STEPSIZE_X8_Val << DMAC_BTCTRL_STEPSIZE_Pos)
#define DMAC_BTCTRL_STEPSIZE_X16 (DMAC_BTCTRL_STEPSIZE_X16_Val << DMAC_BTCTRL_STEPSIZE_Pos)
#define DMAC_BTCTRL_STEPSIZE_X32 (DMAC_BTCTRL_STEPSIZE_X32_Val << DMAC_BTCTRL_STEPSIZE_Pos)
#define DMAC_BTCTRL_STEPSIZE_X64 (DMAC_BTCTRL_STEPSIZE_X64_Val << DMAC_BTCTRL_STEPSIZE_Pos)
#define DMAC_BTCTRL_STEPSIZE_X128 (DMAC_BTCTRL_STEPSIZE_X128_Val << DMAC_BTCTRL_STEPSIZE_Pos)
#define DMAC_BTCTRL_MASK _U_(0xFF1F)



typedef union {
  struct {
    uint16_t BTCNT:16;
  } bit;
  uint16_t reg;
} DMAC_BTCNT_Type;


#define DMAC_BTCNT_OFFSET 0x02
#define DMAC_BTCNT_RESETVALUE _U_(0x0000)

#define DMAC_BTCNT_BTCNT_Pos 0
#define DMAC_BTCNT_BTCNT_Msk (_U_(0xFFFF) << DMAC_BTCNT_BTCNT_Pos)
#define DMAC_BTCNT_BTCNT(value) (DMAC_BTCNT_BTCNT_Msk & ((value) << DMAC_BTCNT_BTCNT_Pos))
#define DMAC_BTCNT_MASK _U_(0xFFFF)



typedef union {
  struct {
    uint32_t SRCADDR:32;
  } bit;
  uint32_t reg;
} DMAC_SRCADDR_Type;


#define DMAC_SRCADDR_OFFSET 0x04
#define DMAC_SRCADDR_RESETVALUE _U_(0x00000000)

#define DMAC_SRCADDR_SRCADDR_Pos 0
#define DMAC_SRCADDR_SRCADDR_Msk (_U_(0xFFFFFFFF) << DMAC_SRCADDR_SRCADDR_Pos)
#define DMAC_SRCADDR_SRCADDR(value) (DMAC_SRCADDR_SRCADDR_Msk & ((value) << DMAC_SRCADDR_SRCADDR_Pos))
#define DMAC_SRCADDR_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t CHKINIT:32;
  } CRC;
  struct {
    uint32_t DSTADDR:32;
  } bit;
  uint32_t reg;
} DMAC_DSTADDR_Type;


#define DMAC_DSTADDR_OFFSET 0x08


#define DMAC_DSTADDR_CRC_CHKINIT_Pos 0
#define DMAC_DSTADDR_CRC_CHKINIT_Msk (_U_(0xFFFFFFFF) << DMAC_DSTADDR_CRC_CHKINIT_Pos)
#define DMAC_DSTADDR_CRC_CHKINIT(value) (DMAC_DSTADDR_CRC_CHKINIT_Msk & ((value) << DMAC_DSTADDR_CRC_CHKINIT_Pos))
#define DMAC_DSTADDR_CRC_MASK _U_(0xFFFFFFFF)

#define DMAC_DSTADDR_DSTADDR_Pos 0
#define DMAC_DSTADDR_DSTADDR_Msk (_U_(0xFFFFFFFF) << DMAC_DSTADDR_DSTADDR_Pos)
#define DMAC_DSTADDR_DSTADDR(value) (DMAC_DSTADDR_DSTADDR_Msk & ((value) << DMAC_DSTADDR_DSTADDR_Pos))
#define DMAC_DSTADDR_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t DESCADDR:32;
  } bit;
  uint32_t reg;
} DMAC_DESCADDR_Type;


#define DMAC_DESCADDR_OFFSET 0x0C

#define DMAC_DESCADDR_DESCADDR_Pos 0
#define DMAC_DESCADDR_DESCADDR_Msk (_U_(0xFFFFFFFF) << DMAC_DESCADDR_DESCADDR_Pos)
#define DMAC_DESCADDR_DESCADDR(value) (DMAC_DESCADDR_DESCADDR_Msk & ((value) << DMAC_DESCADDR_DESCADDR_Pos))
#define DMAC_DESCADDR_MASK _U_(0xFFFFFFFF)



typedef struct {
  volatile DMAC_CHCTRLA_Type CHCTRLA;
  volatile DMAC_CHCTRLB_Type CHCTRLB;
  volatile DMAC_CHPRILVL_Type CHPRILVL;
  volatile DMAC_CHEVCTRL_Type CHEVCTRL;
       RoReg8 Reserved1[0x5];
  volatile DMAC_CHINTENCLR_Type CHINTENCLR;
  volatile DMAC_CHINTENSET_Type CHINTENSET;
  volatile DMAC_CHINTFLAG_Type CHINTFLAG;
  volatile DMAC_CHSTATUS_Type CHSTATUS;
} DmacChannel;




typedef struct {
  volatile DMAC_CTRL_Type CTRL;
  volatile DMAC_CRCCTRL_Type CRCCTRL;
  volatile DMAC_CRCDATAIN_Type CRCDATAIN;
  volatile DMAC_CRCCHKSUM_Type CRCCHKSUM;
  volatile DMAC_CRCSTATUS_Type CRCSTATUS;
  volatile DMAC_DBGCTRL_Type DBGCTRL;
       RoReg8 Reserved1[0x2];
  volatile DMAC_SWTRIGCTRL_Type SWTRIGCTRL;
  volatile DMAC_PRICTRL0_Type PRICTRL0;
       RoReg8 Reserved2[0x8];
  volatile DMAC_INTPEND_Type INTPEND;
       RoReg8 Reserved3[0x2];
  volatile const DMAC_INTSTATUS_Type INTSTATUS;
  volatile const DMAC_BUSYCH_Type BUSYCH;
  volatile const DMAC_PENDCH_Type PENDCH;
  volatile const DMAC_ACTIVE_Type ACTIVE;
  volatile DMAC_BASEADDR_Type BASEADDR;
  volatile DMAC_WRBADDR_Type WRBADDR;
       RoReg8 Reserved4[0x4];
       DmacChannel Channel[32];
} Dmac;




typedef struct {
  volatile DMAC_BTCTRL_Type BTCTRL;
  volatile DMAC_BTCNT_Type BTCNT;
  volatile DMAC_SRCADDR_Type SRCADDR;
  volatile DMAC_DSTADDR_Type DSTADDR;
  volatile DMAC_DESCADDR_Type DESCADDR;
} DmacDescriptor

  __attribute__ ((aligned (8)))

;



#define SECTION_DMAC_DESCRIPTOR __attribute__ ((section(".hsram")))
# 588 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/dsu.h" 1
# 31 "asf4/samd51/include/component/dsu.h"
#define _SAMD51_DSU_COMPONENT_ 







#define DSU_U2410 
#define REV_DSU 0x100



typedef union {
  struct {
    uint8_t SWRST:1;
    uint8_t :1;
    uint8_t CRC:1;
    uint8_t MBIST:1;
    uint8_t CE:1;
    uint8_t :1;
    uint8_t ARR:1;
    uint8_t SMSA:1;
  } bit;
  uint8_t reg;
} DSU_CTRL_Type;


#define DSU_CTRL_OFFSET 0x0000
#define DSU_CTRL_RESETVALUE _U_(0x00)

#define DSU_CTRL_SWRST_Pos 0
#define DSU_CTRL_SWRST (_U_(0x1) << DSU_CTRL_SWRST_Pos)
#define DSU_CTRL_CRC_Pos 2
#define DSU_CTRL_CRC (_U_(0x1) << DSU_CTRL_CRC_Pos)
#define DSU_CTRL_MBIST_Pos 3
#define DSU_CTRL_MBIST (_U_(0x1) << DSU_CTRL_MBIST_Pos)
#define DSU_CTRL_CE_Pos 4
#define DSU_CTRL_CE (_U_(0x1) << DSU_CTRL_CE_Pos)
#define DSU_CTRL_ARR_Pos 6
#define DSU_CTRL_ARR (_U_(0x1) << DSU_CTRL_ARR_Pos)
#define DSU_CTRL_SMSA_Pos 7
#define DSU_CTRL_SMSA (_U_(0x1) << DSU_CTRL_SMSA_Pos)
#define DSU_CTRL_MASK _U_(0xDD)



typedef union {
  struct {
    uint8_t DONE:1;
    uint8_t CRSTEXT:1;
    uint8_t BERR:1;
    uint8_t FAIL:1;
    uint8_t PERR:1;
    uint8_t :3;
  } bit;
  uint8_t reg;
} DSU_STATUSA_Type;


#define DSU_STATUSA_OFFSET 0x0001
#define DSU_STATUSA_RESETVALUE _U_(0x00)

#define DSU_STATUSA_DONE_Pos 0
#define DSU_STATUSA_DONE (_U_(0x1) << DSU_STATUSA_DONE_Pos)
#define DSU_STATUSA_CRSTEXT_Pos 1
#define DSU_STATUSA_CRSTEXT (_U_(0x1) << DSU_STATUSA_CRSTEXT_Pos)
#define DSU_STATUSA_BERR_Pos 2
#define DSU_STATUSA_BERR (_U_(0x1) << DSU_STATUSA_BERR_Pos)
#define DSU_STATUSA_FAIL_Pos 3
#define DSU_STATUSA_FAIL (_U_(0x1) << DSU_STATUSA_FAIL_Pos)
#define DSU_STATUSA_PERR_Pos 4
#define DSU_STATUSA_PERR (_U_(0x1) << DSU_STATUSA_PERR_Pos)
#define DSU_STATUSA_MASK _U_(0x1F)



typedef union {
  struct {
    uint8_t PROT:1;
    uint8_t DBGPRES:1;
    uint8_t DCCD0:1;
    uint8_t DCCD1:1;
    uint8_t HPE:1;
    uint8_t CELCK:1;
    uint8_t TDCCD0:1;
    uint8_t TDCCD1:1;
  } bit;
  struct {
    uint8_t :2;
    uint8_t DCCD:2;
    uint8_t :2;
    uint8_t TDCCD:2;
  } vec;
  uint8_t reg;
} DSU_STATUSB_Type;


#define DSU_STATUSB_OFFSET 0x0002
#define DSU_STATUSB_RESETVALUE _U_(0x00)

#define DSU_STATUSB_PROT_Pos 0
#define DSU_STATUSB_PROT (_U_(0x1) << DSU_STATUSB_PROT_Pos)
#define DSU_STATUSB_DBGPRES_Pos 1
#define DSU_STATUSB_DBGPRES (_U_(0x1) << DSU_STATUSB_DBGPRES_Pos)
#define DSU_STATUSB_DCCD0_Pos 2
#define DSU_STATUSB_DCCD0 (_U_(1) << DSU_STATUSB_DCCD0_Pos)
#define DSU_STATUSB_DCCD1_Pos 3
#define DSU_STATUSB_DCCD1 (_U_(1) << DSU_STATUSB_DCCD1_Pos)
#define DSU_STATUSB_DCCD_Pos 2
#define DSU_STATUSB_DCCD_Msk (_U_(0x3) << DSU_STATUSB_DCCD_Pos)
#define DSU_STATUSB_DCCD(value) (DSU_STATUSB_DCCD_Msk & ((value) << DSU_STATUSB_DCCD_Pos))
#define DSU_STATUSB_HPE_Pos 4
#define DSU_STATUSB_HPE (_U_(0x1) << DSU_STATUSB_HPE_Pos)
#define DSU_STATUSB_CELCK_Pos 5
#define DSU_STATUSB_CELCK (_U_(0x1) << DSU_STATUSB_CELCK_Pos)
#define DSU_STATUSB_TDCCD0_Pos 6
#define DSU_STATUSB_TDCCD0 (_U_(1) << DSU_STATUSB_TDCCD0_Pos)
#define DSU_STATUSB_TDCCD1_Pos 7
#define DSU_STATUSB_TDCCD1 (_U_(1) << DSU_STATUSB_TDCCD1_Pos)
#define DSU_STATUSB_TDCCD_Pos 6
#define DSU_STATUSB_TDCCD_Msk (_U_(0x3) << DSU_STATUSB_TDCCD_Pos)
#define DSU_STATUSB_TDCCD(value) (DSU_STATUSB_TDCCD_Msk & ((value) << DSU_STATUSB_TDCCD_Pos))
#define DSU_STATUSB_MASK _U_(0xFF)



typedef union {
  struct {
    uint32_t AMOD:2;
    uint32_t ADDR:30;
  } bit;
  uint32_t reg;
} DSU_ADDR_Type;


#define DSU_ADDR_OFFSET 0x0004
#define DSU_ADDR_RESETVALUE _U_(0x00000000)

#define DSU_ADDR_AMOD_Pos 0
#define DSU_ADDR_AMOD_Msk (_U_(0x3) << DSU_ADDR_AMOD_Pos)
#define DSU_ADDR_AMOD(value) (DSU_ADDR_AMOD_Msk & ((value) << DSU_ADDR_AMOD_Pos))
#define DSU_ADDR_ADDR_Pos 2
#define DSU_ADDR_ADDR_Msk (_U_(0x3FFFFFFF) << DSU_ADDR_ADDR_Pos)
#define DSU_ADDR_ADDR(value) (DSU_ADDR_ADDR_Msk & ((value) << DSU_ADDR_ADDR_Pos))
#define DSU_ADDR_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t :2;
    uint32_t LENGTH:30;
  } bit;
  uint32_t reg;
} DSU_LENGTH_Type;


#define DSU_LENGTH_OFFSET 0x0008
#define DSU_LENGTH_RESETVALUE _U_(0x00000000)

#define DSU_LENGTH_LENGTH_Pos 2
#define DSU_LENGTH_LENGTH_Msk (_U_(0x3FFFFFFF) << DSU_LENGTH_LENGTH_Pos)
#define DSU_LENGTH_LENGTH(value) (DSU_LENGTH_LENGTH_Msk & ((value) << DSU_LENGTH_LENGTH_Pos))
#define DSU_LENGTH_MASK _U_(0xFFFFFFFC)



typedef union {
  struct {
    uint32_t DATA:32;
  } bit;
  uint32_t reg;
} DSU_DATA_Type;


#define DSU_DATA_OFFSET 0x000C
#define DSU_DATA_RESETVALUE _U_(0x00000000)

#define DSU_DATA_DATA_Pos 0
#define DSU_DATA_DATA_Msk (_U_(0xFFFFFFFF) << DSU_DATA_DATA_Pos)
#define DSU_DATA_DATA(value) (DSU_DATA_DATA_Msk & ((value) << DSU_DATA_DATA_Pos))
#define DSU_DATA_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t DATA:32;
  } bit;
  uint32_t reg;
} DSU_DCC_Type;


#define DSU_DCC_OFFSET 0x0010
#define DSU_DCC_RESETVALUE _U_(0x00000000)

#define DSU_DCC_DATA_Pos 0
#define DSU_DCC_DATA_Msk (_U_(0xFFFFFFFF) << DSU_DCC_DATA_Pos)
#define DSU_DCC_DATA(value) (DSU_DCC_DATA_Msk & ((value) << DSU_DCC_DATA_Pos))
#define DSU_DCC_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t DEVSEL:8;
    uint32_t REVISION:4;
    uint32_t DIE:4;
    uint32_t SERIES:6;
    uint32_t :1;
    uint32_t FAMILY:5;
    uint32_t PROCESSOR:4;
  } bit;
  uint32_t reg;
} DSU_DID_Type;


#define DSU_DID_OFFSET 0x0018

#define DSU_DID_DEVSEL_Pos 0
#define DSU_DID_DEVSEL_Msk (_U_(0xFF) << DSU_DID_DEVSEL_Pos)
#define DSU_DID_DEVSEL(value) (DSU_DID_DEVSEL_Msk & ((value) << DSU_DID_DEVSEL_Pos))
#define DSU_DID_REVISION_Pos 8
#define DSU_DID_REVISION_Msk (_U_(0xF) << DSU_DID_REVISION_Pos)
#define DSU_DID_REVISION(value) (DSU_DID_REVISION_Msk & ((value) << DSU_DID_REVISION_Pos))
#define DSU_DID_DIE_Pos 12
#define DSU_DID_DIE_Msk (_U_(0xF) << DSU_DID_DIE_Pos)
#define DSU_DID_DIE(value) (DSU_DID_DIE_Msk & ((value) << DSU_DID_DIE_Pos))
#define DSU_DID_SERIES_Pos 16
#define DSU_DID_SERIES_Msk (_U_(0x3F) << DSU_DID_SERIES_Pos)
#define DSU_DID_SERIES(value) (DSU_DID_SERIES_Msk & ((value) << DSU_DID_SERIES_Pos))
#define DSU_DID_SERIES_0_Val _U_(0x0)
#define DSU_DID_SERIES_1_Val _U_(0x1)
#define DSU_DID_SERIES_0 (DSU_DID_SERIES_0_Val << DSU_DID_SERIES_Pos)
#define DSU_DID_SERIES_1 (DSU_DID_SERIES_1_Val << DSU_DID_SERIES_Pos)
#define DSU_DID_FAMILY_Pos 23
#define DSU_DID_FAMILY_Msk (_U_(0x1F) << DSU_DID_FAMILY_Pos)
#define DSU_DID_FAMILY(value) (DSU_DID_FAMILY_Msk & ((value) << DSU_DID_FAMILY_Pos))
#define DSU_DID_FAMILY_0_Val _U_(0x0)
#define DSU_DID_FAMILY_1_Val _U_(0x1)
#define DSU_DID_FAMILY_0 (DSU_DID_FAMILY_0_Val << DSU_DID_FAMILY_Pos)
#define DSU_DID_FAMILY_1 (DSU_DID_FAMILY_1_Val << DSU_DID_FAMILY_Pos)
#define DSU_DID_PROCESSOR_Pos 28
#define DSU_DID_PROCESSOR_Msk (_U_(0xF) << DSU_DID_PROCESSOR_Pos)
#define DSU_DID_PROCESSOR(value) (DSU_DID_PROCESSOR_Msk & ((value) << DSU_DID_PROCESSOR_Pos))
#define DSU_DID_PROCESSOR_CM0P_Val _U_(0x1)
#define DSU_DID_PROCESSOR_CM23_Val _U_(0x2)
#define DSU_DID_PROCESSOR_CM3_Val _U_(0x3)
#define DSU_DID_PROCESSOR_CM4_Val _U_(0x5)
#define DSU_DID_PROCESSOR_CM4F_Val _U_(0x6)
#define DSU_DID_PROCESSOR_CM33_Val _U_(0x7)
#define DSU_DID_PROCESSOR_CM0P (DSU_DID_PROCESSOR_CM0P_Val << DSU_DID_PROCESSOR_Pos)
#define DSU_DID_PROCESSOR_CM23 (DSU_DID_PROCESSOR_CM23_Val << DSU_DID_PROCESSOR_Pos)
#define DSU_DID_PROCESSOR_CM3 (DSU_DID_PROCESSOR_CM3_Val << DSU_DID_PROCESSOR_Pos)
#define DSU_DID_PROCESSOR_CM4 (DSU_DID_PROCESSOR_CM4_Val << DSU_DID_PROCESSOR_Pos)
#define DSU_DID_PROCESSOR_CM4F (DSU_DID_PROCESSOR_CM4F_Val << DSU_DID_PROCESSOR_Pos)
#define DSU_DID_PROCESSOR_CM33 (DSU_DID_PROCESSOR_CM33_Val << DSU_DID_PROCESSOR_Pos)
#define DSU_DID_MASK _U_(0xFFBFFFFF)



typedef union {
  struct {
    uint32_t LQOS:2;
    uint32_t DCCDMALEVEL:2;
    uint32_t ETBRAMEN:1;
    uint32_t :27;
  } bit;
  uint32_t reg;
} DSU_CFG_Type;


#define DSU_CFG_OFFSET 0x001C
#define DSU_CFG_RESETVALUE _U_(0x00000002)

#define DSU_CFG_LQOS_Pos 0
#define DSU_CFG_LQOS_Msk (_U_(0x3) << DSU_CFG_LQOS_Pos)
#define DSU_CFG_LQOS(value) (DSU_CFG_LQOS_Msk & ((value) << DSU_CFG_LQOS_Pos))
#define DSU_CFG_DCCDMALEVEL_Pos 2
#define DSU_CFG_DCCDMALEVEL_Msk (_U_(0x3) << DSU_CFG_DCCDMALEVEL_Pos)
#define DSU_CFG_DCCDMALEVEL(value) (DSU_CFG_DCCDMALEVEL_Msk & ((value) << DSU_CFG_DCCDMALEVEL_Pos))
#define DSU_CFG_DCCDMALEVEL_EMPTY_Val _U_(0x0)
#define DSU_CFG_DCCDMALEVEL_FULL_Val _U_(0x1)
#define DSU_CFG_DCCDMALEVEL_EMPTY (DSU_CFG_DCCDMALEVEL_EMPTY_Val << DSU_CFG_DCCDMALEVEL_Pos)
#define DSU_CFG_DCCDMALEVEL_FULL (DSU_CFG_DCCDMALEVEL_FULL_Val << DSU_CFG_DCCDMALEVEL_Pos)
#define DSU_CFG_ETBRAMEN_Pos 4
#define DSU_CFG_ETBRAMEN (_U_(0x1) << DSU_CFG_ETBRAMEN_Pos)
#define DSU_CFG_MASK _U_(0x0000001F)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t :30;
  } bit;
  uint32_t reg;
} DSU_MBCTRL_Type;


#define DSU_MBCTRL_OFFSET 0x0040
#define DSU_MBCTRL_RESETVALUE _U_(0x00000000)

#define DSU_MBCTRL_SWRST_Pos 0
#define DSU_MBCTRL_SWRST (_U_(0x1) << DSU_MBCTRL_SWRST_Pos)
#define DSU_MBCTRL_ENABLE_Pos 1
#define DSU_MBCTRL_ENABLE (_U_(0x1) << DSU_MBCTRL_ENABLE_Pos)
#define DSU_MBCTRL_MASK _U_(0x00000003)



typedef union {
  struct {
    uint32_t ALGO:5;
    uint32_t :1;
    uint32_t DEFRDMARGIN:1;
    uint32_t DBG:1;
    uint32_t :24;
  } bit;
  uint32_t reg;
} DSU_MBCONFIG_Type;


#define DSU_MBCONFIG_OFFSET 0x0044
#define DSU_MBCONFIG_RESETVALUE _U_(0x00000000)

#define DSU_MBCONFIG_ALGO_Pos 0
#define DSU_MBCONFIG_ALGO_Msk (_U_(0x1F) << DSU_MBCONFIG_ALGO_Pos)
#define DSU_MBCONFIG_ALGO(value) (DSU_MBCONFIG_ALGO_Msk & ((value) << DSU_MBCONFIG_ALGO_Pos))
#define DSU_MBCONFIG_ALGO_MEMCLEAR_Val _U_(0x0)
#define DSU_MBCONFIG_ALGO_VERIFY_Val _U_(0x1)
#define DSU_MBCONFIG_ALGO_CLEARVER_Val _U_(0x2)
#define DSU_MBCONFIG_ALGO_ADDR_DEC_Val _U_(0x3)
#define DSU_MBCONFIG_ALGO_MARCH_LR_Val _U_(0x4)
#define DSU_MBCONFIG_ALGO_MARCH_SR_Val _U_(0x5)
#define DSU_MBCONFIG_ALGO_MARCH_SS_Val _U_(0x6)
#define DSU_MBCONFIG_ALGO_CRC_UP_Val _U_(0x8)
#define DSU_MBCONFIG_ALGO_CRC_DOWN_Val _U_(0x9)
#define DSU_MBCONFIG_ALGO_MEMCLEAR (DSU_MBCONFIG_ALGO_MEMCLEAR_Val << DSU_MBCONFIG_ALGO_Pos)
#define DSU_MBCONFIG_ALGO_VERIFY (DSU_MBCONFIG_ALGO_VERIFY_Val << DSU_MBCONFIG_ALGO_Pos)
#define DSU_MBCONFIG_ALGO_CLEARVER (DSU_MBCONFIG_ALGO_CLEARVER_Val << DSU_MBCONFIG_ALGO_Pos)
#define DSU_MBCONFIG_ALGO_ADDR_DEC (DSU_MBCONFIG_ALGO_ADDR_DEC_Val << DSU_MBCONFIG_ALGO_Pos)
#define DSU_MBCONFIG_ALGO_MARCH_LR (DSU_MBCONFIG_ALGO_MARCH_LR_Val << DSU_MBCONFIG_ALGO_Pos)
#define DSU_MBCONFIG_ALGO_MARCH_SR (DSU_MBCONFIG_ALGO_MARCH_SR_Val << DSU_MBCONFIG_ALGO_Pos)
#define DSU_MBCONFIG_ALGO_MARCH_SS (DSU_MBCONFIG_ALGO_MARCH_SS_Val << DSU_MBCONFIG_ALGO_Pos)
#define DSU_MBCONFIG_ALGO_CRC_UP (DSU_MBCONFIG_ALGO_CRC_UP_Val << DSU_MBCONFIG_ALGO_Pos)
#define DSU_MBCONFIG_ALGO_CRC_DOWN (DSU_MBCONFIG_ALGO_CRC_DOWN_Val << DSU_MBCONFIG_ALGO_Pos)
#define DSU_MBCONFIG_DEFRDMARGIN_Pos 6
#define DSU_MBCONFIG_DEFRDMARGIN (_U_(0x1) << DSU_MBCONFIG_DEFRDMARGIN_Pos)
#define DSU_MBCONFIG_DBG_Pos 7
#define DSU_MBCONFIG_DBG (_U_(0x1) << DSU_MBCONFIG_DBG_Pos)
#define DSU_MBCONFIG_MASK _U_(0x000000DF)



typedef union {
  struct {
    uint32_t DATA:32;
  } bit;
  uint32_t reg;
} DSU_MBWORD_Type;


#define DSU_MBWORD_OFFSET 0x0048
#define DSU_MBWORD_RESETVALUE _U_(0x00000000)

#define DSU_MBWORD_DATA_Pos 0
#define DSU_MBWORD_DATA_Msk (_U_(0xFFFFFFFF) << DSU_MBWORD_DATA_Pos)
#define DSU_MBWORD_DATA(value) (DSU_MBWORD_DATA_Msk & ((value) << DSU_MBWORD_DATA_Pos))
#define DSU_MBWORD_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t ALLDONE:1;
    uint32_t FAILED:1;
    uint32_t ERRINFO:1;
    uint32_t CONFIGURED:1;
    uint32_t :28;
  } bit;
  uint32_t reg;
} DSU_MBGSTAT_Type;


#define DSU_MBGSTAT_OFFSET 0x004C
#define DSU_MBGSTAT_RESETVALUE _U_(0x00000000)

#define DSU_MBGSTAT_ALLDONE_Pos 0
#define DSU_MBGSTAT_ALLDONE (_U_(0x1) << DSU_MBGSTAT_ALLDONE_Pos)
#define DSU_MBGSTAT_FAILED_Pos 1
#define DSU_MBGSTAT_FAILED (_U_(0x1) << DSU_MBGSTAT_FAILED_Pos)
#define DSU_MBGSTAT_ERRINFO_Pos 2
#define DSU_MBGSTAT_ERRINFO (_U_(0x1) << DSU_MBGSTAT_ERRINFO_Pos)
#define DSU_MBGSTAT_CONFIGURED_Pos 3
#define DSU_MBGSTAT_CONFIGURED (_U_(0x1) << DSU_MBGSTAT_CONFIGURED_Pos)
#define DSU_MBGSTAT_MASK _U_(0x0000000F)



typedef union {
  struct {
    uint32_t DATA:32;
  } bit;
  uint32_t reg;
} DSU_MBDFAIL_Type;


#define DSU_MBDFAIL_OFFSET 0x0050
#define DSU_MBDFAIL_RESETVALUE _U_(0x00000000)

#define DSU_MBDFAIL_DATA_Pos 0
#define DSU_MBDFAIL_DATA_Msk (_U_(0xFFFFFFFF) << DSU_MBDFAIL_DATA_Pos)
#define DSU_MBDFAIL_DATA(value) (DSU_MBDFAIL_DATA_Msk & ((value) << DSU_MBDFAIL_DATA_Pos))
#define DSU_MBDFAIL_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t DATA:32;
  } bit;
  uint32_t reg;
} DSU_MBDEXP_Type;


#define DSU_MBDEXP_OFFSET 0x0054
#define DSU_MBDEXP_RESETVALUE _U_(0x00000000)

#define DSU_MBDEXP_DATA_Pos 0
#define DSU_MBDEXP_DATA_Msk (_U_(0xFFFFFFFF) << DSU_MBDEXP_DATA_Pos)
#define DSU_MBDEXP_DATA(value) (DSU_MBDEXP_DATA_Msk & ((value) << DSU_MBDEXP_DATA_Pos))
#define DSU_MBDEXP_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t ADDR:14;
    uint32_t :18;
  } bit;
  uint32_t reg;
} DSU_MBAFAIL_Type;


#define DSU_MBAFAIL_OFFSET 0x0058
#define DSU_MBAFAIL_RESETVALUE _U_(0x00000000)

#define DSU_MBAFAIL_ADDR_Pos 0
#define DSU_MBAFAIL_ADDR_Msk (_U_(0x3FFF) << DSU_MBAFAIL_ADDR_Pos)
#define DSU_MBAFAIL_ADDR(value) (DSU_MBAFAIL_ADDR_Msk & ((value) << DSU_MBAFAIL_ADDR_Pos))
#define DSU_MBAFAIL_MASK _U_(0x00003FFF)



typedef union {
  struct {
    uint32_t SUBSTEP:5;
    uint32_t STEP:5;
    uint32_t PORT:1;
    uint32_t :21;
  } bit;
  uint32_t reg;
} DSU_MBCONTEXT_Type;


#define DSU_MBCONTEXT_OFFSET 0x005C
#define DSU_MBCONTEXT_RESETVALUE _U_(0x00000000)

#define DSU_MBCONTEXT_SUBSTEP_Pos 0
#define DSU_MBCONTEXT_SUBSTEP_Msk (_U_(0x1F) << DSU_MBCONTEXT_SUBSTEP_Pos)
#define DSU_MBCONTEXT_SUBSTEP(value) (DSU_MBCONTEXT_SUBSTEP_Msk & ((value) << DSU_MBCONTEXT_SUBSTEP_Pos))
#define DSU_MBCONTEXT_SUBSTEP_R0_1_Val _U_(0x1)
#define DSU_MBCONTEXT_SUBSTEP_R1_1_Val _U_(0x3)
#define DSU_MBCONTEXT_SUBSTEP_R0_2_Val _U_(0x5)
#define DSU_MBCONTEXT_SUBSTEP_R1_2_Val _U_(0x7)
#define DSU_MBCONTEXT_SUBSTEP_R0_3_Val _U_(0x9)
#define DSU_MBCONTEXT_SUBSTEP_R1_3_Val _U_(0xB)
#define DSU_MBCONTEXT_SUBSTEP_R0_1 (DSU_MBCONTEXT_SUBSTEP_R0_1_Val << DSU_MBCONTEXT_SUBSTEP_Pos)
#define DSU_MBCONTEXT_SUBSTEP_R1_1 (DSU_MBCONTEXT_SUBSTEP_R1_1_Val << DSU_MBCONTEXT_SUBSTEP_Pos)
#define DSU_MBCONTEXT_SUBSTEP_R0_2 (DSU_MBCONTEXT_SUBSTEP_R0_2_Val << DSU_MBCONTEXT_SUBSTEP_Pos)
#define DSU_MBCONTEXT_SUBSTEP_R1_2 (DSU_MBCONTEXT_SUBSTEP_R1_2_Val << DSU_MBCONTEXT_SUBSTEP_Pos)
#define DSU_MBCONTEXT_SUBSTEP_R0_3 (DSU_MBCONTEXT_SUBSTEP_R0_3_Val << DSU_MBCONTEXT_SUBSTEP_Pos)
#define DSU_MBCONTEXT_SUBSTEP_R1_3 (DSU_MBCONTEXT_SUBSTEP_R1_3_Val << DSU_MBCONTEXT_SUBSTEP_Pos)
#define DSU_MBCONTEXT_STEP_Pos 5
#define DSU_MBCONTEXT_STEP_Msk (_U_(0x1F) << DSU_MBCONTEXT_STEP_Pos)
#define DSU_MBCONTEXT_STEP(value) (DSU_MBCONTEXT_STEP_Msk & ((value) << DSU_MBCONTEXT_STEP_Pos))
#define DSU_MBCONTEXT_STEP_DOWN_R0W1_Val _U_(0x2)
#define DSU_MBCONTEXT_STEP_UP_R1W0R0W1_Val _U_(0x3)
#define DSU_MBCONTEXT_STEP_UP_R1W0_Val _U_(0x4)
#define DSU_MBCONTEXT_STEP_UP_R0W1R1W0_Val _U_(0x5)
#define DSU_MBCONTEXT_STEP_UP_R0_Val _U_(0x6)
#define DSU_MBCONTEXT_STEP_UP_R0R0W0R0W1_Val _U_(0x7)
#define DSU_MBCONTEXT_STEP_UP_R1R1W1R1W0_Val _U_(0x8)
#define DSU_MBCONTEXT_STEP_DOWN_R0R0W0R0W1_Val _U_(0x9)
#define DSU_MBCONTEXT_STEP_DOWN_R1R1W1R1W0_Val _U_(0xA)
#define DSU_MBCONTEXT_STEP_UP_R0R0_Val _U_(0xC)
#define DSU_MBCONTEXT_STEP_DOWN_R1W0R0W1_Val _U_(0xE)
#define DSU_MBCONTEXT_STEP_DOWN_R1R1_Val _U_(0xF)
#define DSU_MBCONTEXT_STEP_DOWN_R0W1 (DSU_MBCONTEXT_STEP_DOWN_R0W1_Val << DSU_MBCONTEXT_STEP_Pos)
#define DSU_MBCONTEXT_STEP_UP_R1W0R0W1 (DSU_MBCONTEXT_STEP_UP_R1W0R0W1_Val << DSU_MBCONTEXT_STEP_Pos)
#define DSU_MBCONTEXT_STEP_UP_R1W0 (DSU_MBCONTEXT_STEP_UP_R1W0_Val << DSU_MBCONTEXT_STEP_Pos)
#define DSU_MBCONTEXT_STEP_UP_R0W1R1W0 (DSU_MBCONTEXT_STEP_UP_R0W1R1W0_Val << DSU_MBCONTEXT_STEP_Pos)
#define DSU_MBCONTEXT_STEP_UP_R0 (DSU_MBCONTEXT_STEP_UP_R0_Val << DSU_MBCONTEXT_STEP_Pos)
#define DSU_MBCONTEXT_STEP_UP_R0R0W0R0W1 (DSU_MBCONTEXT_STEP_UP_R0R0W0R0W1_Val << DSU_MBCONTEXT_STEP_Pos)
#define DSU_MBCONTEXT_STEP_UP_R1R1W1R1W0 (DSU_MBCONTEXT_STEP_UP_R1R1W1R1W0_Val << DSU_MBCONTEXT_STEP_Pos)
#define DSU_MBCONTEXT_STEP_DOWN_R0R0W0R0W1 (DSU_MBCONTEXT_STEP_DOWN_R0R0W0R0W1_Val << DSU_MBCONTEXT_STEP_Pos)
#define DSU_MBCONTEXT_STEP_DOWN_R1R1W1R1W0 (DSU_MBCONTEXT_STEP_DOWN_R1R1W1R1W0_Val << DSU_MBCONTEXT_STEP_Pos)
#define DSU_MBCONTEXT_STEP_UP_R0R0 (DSU_MBCONTEXT_STEP_UP_R0R0_Val << DSU_MBCONTEXT_STEP_Pos)
#define DSU_MBCONTEXT_STEP_DOWN_R1W0R0W1 (DSU_MBCONTEXT_STEP_DOWN_R1W0R0W1_Val << DSU_MBCONTEXT_STEP_Pos)
#define DSU_MBCONTEXT_STEP_DOWN_R1R1 (DSU_MBCONTEXT_STEP_DOWN_R1R1_Val << DSU_MBCONTEXT_STEP_Pos)
#define DSU_MBCONTEXT_PORT_Pos 10
#define DSU_MBCONTEXT_PORT (_U_(0x1) << DSU_MBCONTEXT_PORT_Pos)
#define DSU_MBCONTEXT_MASK _U_(0x000007FF)



typedef union {
  struct {
    uint32_t ENABLE0:1;
    uint32_t ENABLE1:1;
    uint32_t ENABLE2:1;
    uint32_t ENABLE3:1;
    uint32_t ENABLE4:1;
    uint32_t ENABLE5:1;
    uint32_t ENABLE6:1;
    uint32_t ENABLE7:1;
    uint32_t ENABLE8:1;
    uint32_t ENABLE9:1;
    uint32_t ENABLE10:1;
    uint32_t ENABLE11:1;
    uint32_t ENABLE12:1;
    uint32_t ENABLE13:1;
    uint32_t ENABLE14:1;
    uint32_t ENABLE15:1;
    uint32_t ENABLE16:1;
    uint32_t ENABLE17:1;
    uint32_t ENABLE18:1;
    uint32_t ENABLE19:1;
    uint32_t ENABLE20:1;
    uint32_t ENABLE21:1;
    uint32_t ENABLE22:1;
    uint32_t ENABLE23:1;
    uint32_t ENABLE24:1;
    uint32_t ENABLE25:1;
    uint32_t ENABLE26:1;
    uint32_t ENABLE27:1;
    uint32_t ENABLE28:1;
    uint32_t :3;
  } bit;
  struct {
    uint32_t ENABLE:29;
    uint32_t :3;
  } vec;
  uint32_t reg;
} DSU_MBENABLE0_Type;


#define DSU_MBENABLE0_OFFSET 0x0060
#define DSU_MBENABLE0_RESETVALUE _U_(0x00000000)

#define DSU_MBENABLE0_ENABLE0_Pos 0
#define DSU_MBENABLE0_ENABLE0 (_U_(1) << DSU_MBENABLE0_ENABLE0_Pos)
#define DSU_MBENABLE0_ENABLE1_Pos 1
#define DSU_MBENABLE0_ENABLE1 (_U_(1) << DSU_MBENABLE0_ENABLE1_Pos)
#define DSU_MBENABLE0_ENABLE2_Pos 2
#define DSU_MBENABLE0_ENABLE2 (_U_(1) << DSU_MBENABLE0_ENABLE2_Pos)
#define DSU_MBENABLE0_ENABLE3_Pos 3
#define DSU_MBENABLE0_ENABLE3 (_U_(1) << DSU_MBENABLE0_ENABLE3_Pos)
#define DSU_MBENABLE0_ENABLE4_Pos 4
#define DSU_MBENABLE0_ENABLE4 (_U_(1) << DSU_MBENABLE0_ENABLE4_Pos)
#define DSU_MBENABLE0_ENABLE5_Pos 5
#define DSU_MBENABLE0_ENABLE5 (_U_(1) << DSU_MBENABLE0_ENABLE5_Pos)
#define DSU_MBENABLE0_ENABLE6_Pos 6
#define DSU_MBENABLE0_ENABLE6 (_U_(1) << DSU_MBENABLE0_ENABLE6_Pos)
#define DSU_MBENABLE0_ENABLE7_Pos 7
#define DSU_MBENABLE0_ENABLE7 (_U_(1) << DSU_MBENABLE0_ENABLE7_Pos)
#define DSU_MBENABLE0_ENABLE8_Pos 8
#define DSU_MBENABLE0_ENABLE8 (_U_(1) << DSU_MBENABLE0_ENABLE8_Pos)
#define DSU_MBENABLE0_ENABLE9_Pos 9
#define DSU_MBENABLE0_ENABLE9 (_U_(1) << DSU_MBENABLE0_ENABLE9_Pos)
#define DSU_MBENABLE0_ENABLE10_Pos 10
#define DSU_MBENABLE0_ENABLE10 (_U_(1) << DSU_MBENABLE0_ENABLE10_Pos)
#define DSU_MBENABLE0_ENABLE11_Pos 11
#define DSU_MBENABLE0_ENABLE11 (_U_(1) << DSU_MBENABLE0_ENABLE11_Pos)
#define DSU_MBENABLE0_ENABLE12_Pos 12
#define DSU_MBENABLE0_ENABLE12 (_U_(1) << DSU_MBENABLE0_ENABLE12_Pos)
#define DSU_MBENABLE0_ENABLE13_Pos 13
#define DSU_MBENABLE0_ENABLE13 (_U_(1) << DSU_MBENABLE0_ENABLE13_Pos)
#define DSU_MBENABLE0_ENABLE14_Pos 14
#define DSU_MBENABLE0_ENABLE14 (_U_(1) << DSU_MBENABLE0_ENABLE14_Pos)
#define DSU_MBENABLE0_ENABLE15_Pos 15
#define DSU_MBENABLE0_ENABLE15 (_U_(1) << DSU_MBENABLE0_ENABLE15_Pos)
#define DSU_MBENABLE0_ENABLE16_Pos 16
#define DSU_MBENABLE0_ENABLE16 (_U_(1) << DSU_MBENABLE0_ENABLE16_Pos)
#define DSU_MBENABLE0_ENABLE17_Pos 17
#define DSU_MBENABLE0_ENABLE17 (_U_(1) << DSU_MBENABLE0_ENABLE17_Pos)
#define DSU_MBENABLE0_ENABLE18_Pos 18
#define DSU_MBENABLE0_ENABLE18 (_U_(1) << DSU_MBENABLE0_ENABLE18_Pos)
#define DSU_MBENABLE0_ENABLE19_Pos 19
#define DSU_MBENABLE0_ENABLE19 (_U_(1) << DSU_MBENABLE0_ENABLE19_Pos)
#define DSU_MBENABLE0_ENABLE20_Pos 20
#define DSU_MBENABLE0_ENABLE20 (_U_(1) << DSU_MBENABLE0_ENABLE20_Pos)
#define DSU_MBENABLE0_ENABLE21_Pos 21
#define DSU_MBENABLE0_ENABLE21 (_U_(1) << DSU_MBENABLE0_ENABLE21_Pos)
#define DSU_MBENABLE0_ENABLE22_Pos 22
#define DSU_MBENABLE0_ENABLE22 (_U_(1) << DSU_MBENABLE0_ENABLE22_Pos)
#define DSU_MBENABLE0_ENABLE23_Pos 23
#define DSU_MBENABLE0_ENABLE23 (_U_(1) << DSU_MBENABLE0_ENABLE23_Pos)
#define DSU_MBENABLE0_ENABLE24_Pos 24
#define DSU_MBENABLE0_ENABLE24 (_U_(1) << DSU_MBENABLE0_ENABLE24_Pos)
#define DSU_MBENABLE0_ENABLE25_Pos 25
#define DSU_MBENABLE0_ENABLE25 (_U_(1) << DSU_MBENABLE0_ENABLE25_Pos)
#define DSU_MBENABLE0_ENABLE26_Pos 26
#define DSU_MBENABLE0_ENABLE26 (_U_(1) << DSU_MBENABLE0_ENABLE26_Pos)
#define DSU_MBENABLE0_ENABLE27_Pos 27
#define DSU_MBENABLE0_ENABLE27 (_U_(1) << DSU_MBENABLE0_ENABLE27_Pos)
#define DSU_MBENABLE0_ENABLE28_Pos 28
#define DSU_MBENABLE0_ENABLE28 (_U_(1) << DSU_MBENABLE0_ENABLE28_Pos)
#define DSU_MBENABLE0_ENABLE_Pos 0
#define DSU_MBENABLE0_ENABLE_Msk (_U_(0x1FFFFFFF) << DSU_MBENABLE0_ENABLE_Pos)
#define DSU_MBENABLE0_ENABLE(value) (DSU_MBENABLE0_ENABLE_Msk & ((value) << DSU_MBENABLE0_ENABLE_Pos))
#define DSU_MBENABLE0_MASK _U_(0x1FFFFFFF)



typedef union {
  struct {
    uint32_t BUSY0:1;
    uint32_t BUSY1:1;
    uint32_t BUSY2:1;
    uint32_t BUSY3:1;
    uint32_t BUSY4:1;
    uint32_t BUSY5:1;
    uint32_t BUSY6:1;
    uint32_t BUSY7:1;
    uint32_t BUSY8:1;
    uint32_t BUSY9:1;
    uint32_t BUSY10:1;
    uint32_t BUSY11:1;
    uint32_t BUSY12:1;
    uint32_t BUSY13:1;
    uint32_t BUSY14:1;
    uint32_t BUSY15:1;
    uint32_t BUSY16:1;
    uint32_t BUSY17:1;
    uint32_t BUSY18:1;
    uint32_t BUSY19:1;
    uint32_t BUSY20:1;
    uint32_t BUSY21:1;
    uint32_t BUSY22:1;
    uint32_t BUSY23:1;
    uint32_t BUSY24:1;
    uint32_t BUSY25:1;
    uint32_t BUSY26:1;
    uint32_t BUSY27:1;
    uint32_t BUSY28:1;
    uint32_t :3;
  } bit;
  struct {
    uint32_t BUSY:29;
    uint32_t :3;
  } vec;
  uint32_t reg;
} DSU_MBBUSY0_Type;


#define DSU_MBBUSY0_OFFSET 0x0068
#define DSU_MBBUSY0_RESETVALUE _U_(0x00000000)

#define DSU_MBBUSY0_BUSY0_Pos 0
#define DSU_MBBUSY0_BUSY0 (_U_(1) << DSU_MBBUSY0_BUSY0_Pos)
#define DSU_MBBUSY0_BUSY1_Pos 1
#define DSU_MBBUSY0_BUSY1 (_U_(1) << DSU_MBBUSY0_BUSY1_Pos)
#define DSU_MBBUSY0_BUSY2_Pos 2
#define DSU_MBBUSY0_BUSY2 (_U_(1) << DSU_MBBUSY0_BUSY2_Pos)
#define DSU_MBBUSY0_BUSY3_Pos 3
#define DSU_MBBUSY0_BUSY3 (_U_(1) << DSU_MBBUSY0_BUSY3_Pos)
#define DSU_MBBUSY0_BUSY4_Pos 4
#define DSU_MBBUSY0_BUSY4 (_U_(1) << DSU_MBBUSY0_BUSY4_Pos)
#define DSU_MBBUSY0_BUSY5_Pos 5
#define DSU_MBBUSY0_BUSY5 (_U_(1) << DSU_MBBUSY0_BUSY5_Pos)
#define DSU_MBBUSY0_BUSY6_Pos 6
#define DSU_MBBUSY0_BUSY6 (_U_(1) << DSU_MBBUSY0_BUSY6_Pos)
#define DSU_MBBUSY0_BUSY7_Pos 7
#define DSU_MBBUSY0_BUSY7 (_U_(1) << DSU_MBBUSY0_BUSY7_Pos)
#define DSU_MBBUSY0_BUSY8_Pos 8
#define DSU_MBBUSY0_BUSY8 (_U_(1) << DSU_MBBUSY0_BUSY8_Pos)
#define DSU_MBBUSY0_BUSY9_Pos 9
#define DSU_MBBUSY0_BUSY9 (_U_(1) << DSU_MBBUSY0_BUSY9_Pos)
#define DSU_MBBUSY0_BUSY10_Pos 10
#define DSU_MBBUSY0_BUSY10 (_U_(1) << DSU_MBBUSY0_BUSY10_Pos)
#define DSU_MBBUSY0_BUSY11_Pos 11
#define DSU_MBBUSY0_BUSY11 (_U_(1) << DSU_MBBUSY0_BUSY11_Pos)
#define DSU_MBBUSY0_BUSY12_Pos 12
#define DSU_MBBUSY0_BUSY12 (_U_(1) << DSU_MBBUSY0_BUSY12_Pos)
#define DSU_MBBUSY0_BUSY13_Pos 13
#define DSU_MBBUSY0_BUSY13 (_U_(1) << DSU_MBBUSY0_BUSY13_Pos)
#define DSU_MBBUSY0_BUSY14_Pos 14
#define DSU_MBBUSY0_BUSY14 (_U_(1) << DSU_MBBUSY0_BUSY14_Pos)
#define DSU_MBBUSY0_BUSY15_Pos 15
#define DSU_MBBUSY0_BUSY15 (_U_(1) << DSU_MBBUSY0_BUSY15_Pos)
#define DSU_MBBUSY0_BUSY16_Pos 16
#define DSU_MBBUSY0_BUSY16 (_U_(1) << DSU_MBBUSY0_BUSY16_Pos)
#define DSU_MBBUSY0_BUSY17_Pos 17
#define DSU_MBBUSY0_BUSY17 (_U_(1) << DSU_MBBUSY0_BUSY17_Pos)
#define DSU_MBBUSY0_BUSY18_Pos 18
#define DSU_MBBUSY0_BUSY18 (_U_(1) << DSU_MBBUSY0_BUSY18_Pos)
#define DSU_MBBUSY0_BUSY19_Pos 19
#define DSU_MBBUSY0_BUSY19 (_U_(1) << DSU_MBBUSY0_BUSY19_Pos)
#define DSU_MBBUSY0_BUSY20_Pos 20
#define DSU_MBBUSY0_BUSY20 (_U_(1) << DSU_MBBUSY0_BUSY20_Pos)
#define DSU_MBBUSY0_BUSY21_Pos 21
#define DSU_MBBUSY0_BUSY21 (_U_(1) << DSU_MBBUSY0_BUSY21_Pos)
#define DSU_MBBUSY0_BUSY22_Pos 22
#define DSU_MBBUSY0_BUSY22 (_U_(1) << DSU_MBBUSY0_BUSY22_Pos)
#define DSU_MBBUSY0_BUSY23_Pos 23
#define DSU_MBBUSY0_BUSY23 (_U_(1) << DSU_MBBUSY0_BUSY23_Pos)
#define DSU_MBBUSY0_BUSY24_Pos 24
#define DSU_MBBUSY0_BUSY24 (_U_(1) << DSU_MBBUSY0_BUSY24_Pos)
#define DSU_MBBUSY0_BUSY25_Pos 25
#define DSU_MBBUSY0_BUSY25 (_U_(1) << DSU_MBBUSY0_BUSY25_Pos)
#define DSU_MBBUSY0_BUSY26_Pos 26
#define DSU_MBBUSY0_BUSY26 (_U_(1) << DSU_MBBUSY0_BUSY26_Pos)
#define DSU_MBBUSY0_BUSY27_Pos 27
#define DSU_MBBUSY0_BUSY27 (_U_(1) << DSU_MBBUSY0_BUSY27_Pos)
#define DSU_MBBUSY0_BUSY28_Pos 28
#define DSU_MBBUSY0_BUSY28 (_U_(1) << DSU_MBBUSY0_BUSY28_Pos)
#define DSU_MBBUSY0_BUSY_Pos 0
#define DSU_MBBUSY0_BUSY_Msk (_U_(0x1FFFFFFF) << DSU_MBBUSY0_BUSY_Pos)
#define DSU_MBBUSY0_BUSY(value) (DSU_MBBUSY0_BUSY_Msk & ((value) << DSU_MBBUSY0_BUSY_Pos))
#define DSU_MBBUSY0_MASK _U_(0x1FFFFFFF)



typedef union {
  struct {
    uint32_t STATUS0:1;
    uint32_t STATUS1:1;
    uint32_t STATUS2:1;
    uint32_t STATUS3:1;
    uint32_t STATUS4:1;
    uint32_t STATUS5:1;
    uint32_t STATUS6:1;
    uint32_t STATUS7:1;
    uint32_t STATUS8:1;
    uint32_t STATUS9:1;
    uint32_t STATUS10:1;
    uint32_t STATUS11:1;
    uint32_t STATUS12:1;
    uint32_t STATUS13:1;
    uint32_t STATUS14:1;
    uint32_t STATUS15:1;
    uint32_t STATUS16:1;
    uint32_t STATUS17:1;
    uint32_t STATUS18:1;
    uint32_t STATUS19:1;
    uint32_t STATUS20:1;
    uint32_t STATUS21:1;
    uint32_t STATUS22:1;
    uint32_t STATUS23:1;
    uint32_t STATUS24:1;
    uint32_t STATUS25:1;
    uint32_t STATUS26:1;
    uint32_t STATUS27:1;
    uint32_t STATUS28:1;
    uint32_t :3;
  } bit;
  struct {
    uint32_t STATUS:29;
    uint32_t :3;
  } vec;
  uint32_t reg;
} DSU_MBSTATUS0_Type;


#define DSU_MBSTATUS0_OFFSET 0x0070
#define DSU_MBSTATUS0_RESETVALUE _U_(0x00000000)

#define DSU_MBSTATUS0_STATUS0_Pos 0
#define DSU_MBSTATUS0_STATUS0 (_U_(1) << DSU_MBSTATUS0_STATUS0_Pos)
#define DSU_MBSTATUS0_STATUS1_Pos 1
#define DSU_MBSTATUS0_STATUS1 (_U_(1) << DSU_MBSTATUS0_STATUS1_Pos)
#define DSU_MBSTATUS0_STATUS2_Pos 2
#define DSU_MBSTATUS0_STATUS2 (_U_(1) << DSU_MBSTATUS0_STATUS2_Pos)
#define DSU_MBSTATUS0_STATUS3_Pos 3
#define DSU_MBSTATUS0_STATUS3 (_U_(1) << DSU_MBSTATUS0_STATUS3_Pos)
#define DSU_MBSTATUS0_STATUS4_Pos 4
#define DSU_MBSTATUS0_STATUS4 (_U_(1) << DSU_MBSTATUS0_STATUS4_Pos)
#define DSU_MBSTATUS0_STATUS5_Pos 5
#define DSU_MBSTATUS0_STATUS5 (_U_(1) << DSU_MBSTATUS0_STATUS5_Pos)
#define DSU_MBSTATUS0_STATUS6_Pos 6
#define DSU_MBSTATUS0_STATUS6 (_U_(1) << DSU_MBSTATUS0_STATUS6_Pos)
#define DSU_MBSTATUS0_STATUS7_Pos 7
#define DSU_MBSTATUS0_STATUS7 (_U_(1) << DSU_MBSTATUS0_STATUS7_Pos)
#define DSU_MBSTATUS0_STATUS8_Pos 8
#define DSU_MBSTATUS0_STATUS8 (_U_(1) << DSU_MBSTATUS0_STATUS8_Pos)
#define DSU_MBSTATUS0_STATUS9_Pos 9
#define DSU_MBSTATUS0_STATUS9 (_U_(1) << DSU_MBSTATUS0_STATUS9_Pos)
#define DSU_MBSTATUS0_STATUS10_Pos 10
#define DSU_MBSTATUS0_STATUS10 (_U_(1) << DSU_MBSTATUS0_STATUS10_Pos)
#define DSU_MBSTATUS0_STATUS11_Pos 11
#define DSU_MBSTATUS0_STATUS11 (_U_(1) << DSU_MBSTATUS0_STATUS11_Pos)
#define DSU_MBSTATUS0_STATUS12_Pos 12
#define DSU_MBSTATUS0_STATUS12 (_U_(1) << DSU_MBSTATUS0_STATUS12_Pos)
#define DSU_MBSTATUS0_STATUS13_Pos 13
#define DSU_MBSTATUS0_STATUS13 (_U_(1) << DSU_MBSTATUS0_STATUS13_Pos)
#define DSU_MBSTATUS0_STATUS14_Pos 14
#define DSU_MBSTATUS0_STATUS14 (_U_(1) << DSU_MBSTATUS0_STATUS14_Pos)
#define DSU_MBSTATUS0_STATUS15_Pos 15
#define DSU_MBSTATUS0_STATUS15 (_U_(1) << DSU_MBSTATUS0_STATUS15_Pos)
#define DSU_MBSTATUS0_STATUS16_Pos 16
#define DSU_MBSTATUS0_STATUS16 (_U_(1) << DSU_MBSTATUS0_STATUS16_Pos)
#define DSU_MBSTATUS0_STATUS17_Pos 17
#define DSU_MBSTATUS0_STATUS17 (_U_(1) << DSU_MBSTATUS0_STATUS17_Pos)
#define DSU_MBSTATUS0_STATUS18_Pos 18
#define DSU_MBSTATUS0_STATUS18 (_U_(1) << DSU_MBSTATUS0_STATUS18_Pos)
#define DSU_MBSTATUS0_STATUS19_Pos 19
#define DSU_MBSTATUS0_STATUS19 (_U_(1) << DSU_MBSTATUS0_STATUS19_Pos)
#define DSU_MBSTATUS0_STATUS20_Pos 20
#define DSU_MBSTATUS0_STATUS20 (_U_(1) << DSU_MBSTATUS0_STATUS20_Pos)
#define DSU_MBSTATUS0_STATUS21_Pos 21
#define DSU_MBSTATUS0_STATUS21 (_U_(1) << DSU_MBSTATUS0_STATUS21_Pos)
#define DSU_MBSTATUS0_STATUS22_Pos 22
#define DSU_MBSTATUS0_STATUS22 (_U_(1) << DSU_MBSTATUS0_STATUS22_Pos)
#define DSU_MBSTATUS0_STATUS23_Pos 23
#define DSU_MBSTATUS0_STATUS23 (_U_(1) << DSU_MBSTATUS0_STATUS23_Pos)
#define DSU_MBSTATUS0_STATUS24_Pos 24
#define DSU_MBSTATUS0_STATUS24 (_U_(1) << DSU_MBSTATUS0_STATUS24_Pos)
#define DSU_MBSTATUS0_STATUS25_Pos 25
#define DSU_MBSTATUS0_STATUS25 (_U_(1) << DSU_MBSTATUS0_STATUS25_Pos)
#define DSU_MBSTATUS0_STATUS26_Pos 26
#define DSU_MBSTATUS0_STATUS26 (_U_(1) << DSU_MBSTATUS0_STATUS26_Pos)
#define DSU_MBSTATUS0_STATUS27_Pos 27
#define DSU_MBSTATUS0_STATUS27 (_U_(1) << DSU_MBSTATUS0_STATUS27_Pos)
#define DSU_MBSTATUS0_STATUS28_Pos 28
#define DSU_MBSTATUS0_STATUS28 (_U_(1) << DSU_MBSTATUS0_STATUS28_Pos)
#define DSU_MBSTATUS0_STATUS_Pos 0
#define DSU_MBSTATUS0_STATUS_Msk (_U_(0x1FFFFFFF) << DSU_MBSTATUS0_STATUS_Pos)
#define DSU_MBSTATUS0_STATUS(value) (DSU_MBSTATUS0_STATUS_Msk & ((value) << DSU_MBSTATUS0_STATUS_Pos))
#define DSU_MBSTATUS0_MASK _U_(0x1FFFFFFF)



typedef union {
  struct {
    uint32_t DCFG:32;
  } bit;
  uint32_t reg;
} DSU_DCFG_Type;


#define DSU_DCFG_OFFSET 0x00F0
#define DSU_DCFG_RESETVALUE _U_(0x00000000)

#define DSU_DCFG_DCFG_Pos 0
#define DSU_DCFG_DCFG_Msk (_U_(0xFFFFFFFF) << DSU_DCFG_DCFG_Pos)
#define DSU_DCFG_DCFG(value) (DSU_DCFG_DCFG_Msk & ((value) << DSU_DCFG_DCFG_Pos))
#define DSU_DCFG_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t EPRES:1;
    uint32_t FMT:1;
    uint32_t :10;
    uint32_t ADDOFF:20;
  } bit;
  uint32_t reg;
} DSU_ENTRY0_Type;


#define DSU_ENTRY0_OFFSET 0x1000
#define DSU_ENTRY0_RESETVALUE _U_(0x9F0FC002)

#define DSU_ENTRY0_EPRES_Pos 0
#define DSU_ENTRY0_EPRES (_U_(0x1) << DSU_ENTRY0_EPRES_Pos)
#define DSU_ENTRY0_FMT_Pos 1
#define DSU_ENTRY0_FMT (_U_(0x1) << DSU_ENTRY0_FMT_Pos)
#define DSU_ENTRY0_ADDOFF_Pos 12
#define DSU_ENTRY0_ADDOFF_Msk (_U_(0xFFFFF) << DSU_ENTRY0_ADDOFF_Pos)
#define DSU_ENTRY0_ADDOFF(value) (DSU_ENTRY0_ADDOFF_Msk & ((value) << DSU_ENTRY0_ADDOFF_Pos))
#define DSU_ENTRY0_MASK _U_(0xFFFFF003)



typedef union {
  uint32_t reg;
} DSU_ENTRY1_Type;


#define DSU_ENTRY1_OFFSET 0x1004
#define DSU_ENTRY1_RESETVALUE _U_(0x00000000)
#define DSU_ENTRY1_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t END:32;
  } bit;
  uint32_t reg;
} DSU_END_Type;


#define DSU_END_OFFSET 0x1008
#define DSU_END_RESETVALUE _U_(0x00000000)

#define DSU_END_END_Pos 0
#define DSU_END_END_Msk (_U_(0xFFFFFFFF) << DSU_END_END_Pos)
#define DSU_END_END(value) (DSU_END_END_Msk & ((value) << DSU_END_END_Pos))
#define DSU_END_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t SMEMP:1;
    uint32_t :31;
  } bit;
  uint32_t reg;
} DSU_MEMTYPE_Type;


#define DSU_MEMTYPE_OFFSET 0x1FCC
#define DSU_MEMTYPE_RESETVALUE _U_(0x00000000)

#define DSU_MEMTYPE_SMEMP_Pos 0
#define DSU_MEMTYPE_SMEMP (_U_(0x1) << DSU_MEMTYPE_SMEMP_Pos)
#define DSU_MEMTYPE_MASK _U_(0x00000001)



typedef union {
  struct {
    uint32_t JEPCC:4;
    uint32_t FKBC:4;
    uint32_t :24;
  } bit;
  uint32_t reg;
} DSU_PID4_Type;


#define DSU_PID4_OFFSET 0x1FD0
#define DSU_PID4_RESETVALUE _U_(0x00000000)

#define DSU_PID4_JEPCC_Pos 0
#define DSU_PID4_JEPCC_Msk (_U_(0xF) << DSU_PID4_JEPCC_Pos)
#define DSU_PID4_JEPCC(value) (DSU_PID4_JEPCC_Msk & ((value) << DSU_PID4_JEPCC_Pos))
#define DSU_PID4_FKBC_Pos 4
#define DSU_PID4_FKBC_Msk (_U_(0xF) << DSU_PID4_FKBC_Pos)
#define DSU_PID4_FKBC(value) (DSU_PID4_FKBC_Msk & ((value) << DSU_PID4_FKBC_Pos))
#define DSU_PID4_MASK _U_(0x000000FF)



typedef union {
  uint32_t reg;
} DSU_PID5_Type;


#define DSU_PID5_OFFSET 0x1FD4
#define DSU_PID5_RESETVALUE _U_(0x00000000)
#define DSU_PID5_MASK _U_(0x00000000)



typedef union {
  uint32_t reg;
} DSU_PID6_Type;


#define DSU_PID6_OFFSET 0x1FD8
#define DSU_PID6_RESETVALUE _U_(0x00000000)
#define DSU_PID6_MASK _U_(0x00000000)



typedef union {
  uint32_t reg;
} DSU_PID7_Type;


#define DSU_PID7_OFFSET 0x1FDC
#define DSU_PID7_RESETVALUE _U_(0x00000000)
#define DSU_PID7_MASK _U_(0x00000000)



typedef union {
  struct {
    uint32_t PARTNBL:8;
    uint32_t :24;
  } bit;
  uint32_t reg;
} DSU_PID0_Type;


#define DSU_PID0_OFFSET 0x1FE0
#define DSU_PID0_RESETVALUE _U_(0x000000D0)

#define DSU_PID0_PARTNBL_Pos 0
#define DSU_PID0_PARTNBL_Msk (_U_(0xFF) << DSU_PID0_PARTNBL_Pos)
#define DSU_PID0_PARTNBL(value) (DSU_PID0_PARTNBL_Msk & ((value) << DSU_PID0_PARTNBL_Pos))
#define DSU_PID0_MASK _U_(0x000000FF)



typedef union {
  struct {
    uint32_t PARTNBH:4;
    uint32_t JEPIDCL:4;
    uint32_t :24;
  } bit;
  uint32_t reg;
} DSU_PID1_Type;


#define DSU_PID1_OFFSET 0x1FE4
#define DSU_PID1_RESETVALUE _U_(0x000000FC)

#define DSU_PID1_PARTNBH_Pos 0
#define DSU_PID1_PARTNBH_Msk (_U_(0xF) << DSU_PID1_PARTNBH_Pos)
#define DSU_PID1_PARTNBH(value) (DSU_PID1_PARTNBH_Msk & ((value) << DSU_PID1_PARTNBH_Pos))
#define DSU_PID1_JEPIDCL_Pos 4
#define DSU_PID1_JEPIDCL_Msk (_U_(0xF) << DSU_PID1_JEPIDCL_Pos)
#define DSU_PID1_JEPIDCL(value) (DSU_PID1_JEPIDCL_Msk & ((value) << DSU_PID1_JEPIDCL_Pos))
#define DSU_PID1_MASK _U_(0x000000FF)



typedef union {
  struct {
    uint32_t JEPIDCH:3;
    uint32_t JEPU:1;
    uint32_t REVISION:4;
    uint32_t :24;
  } bit;
  uint32_t reg;
} DSU_PID2_Type;


#define DSU_PID2_OFFSET 0x1FE8
#define DSU_PID2_RESETVALUE _U_(0x00000009)

#define DSU_PID2_JEPIDCH_Pos 0
#define DSU_PID2_JEPIDCH_Msk (_U_(0x7) << DSU_PID2_JEPIDCH_Pos)
#define DSU_PID2_JEPIDCH(value) (DSU_PID2_JEPIDCH_Msk & ((value) << DSU_PID2_JEPIDCH_Pos))
#define DSU_PID2_JEPU_Pos 3
#define DSU_PID2_JEPU (_U_(0x1) << DSU_PID2_JEPU_Pos)
#define DSU_PID2_REVISION_Pos 4
#define DSU_PID2_REVISION_Msk (_U_(0xF) << DSU_PID2_REVISION_Pos)
#define DSU_PID2_REVISION(value) (DSU_PID2_REVISION_Msk & ((value) << DSU_PID2_REVISION_Pos))
#define DSU_PID2_MASK _U_(0x000000FF)



typedef union {
  struct {
    uint32_t CUSMOD:4;
    uint32_t REVAND:4;
    uint32_t :24;
  } bit;
  uint32_t reg;
} DSU_PID3_Type;


#define DSU_PID3_OFFSET 0x1FEC
#define DSU_PID3_RESETVALUE _U_(0x00000000)

#define DSU_PID3_CUSMOD_Pos 0
#define DSU_PID3_CUSMOD_Msk (_U_(0xF) << DSU_PID3_CUSMOD_Pos)
#define DSU_PID3_CUSMOD(value) (DSU_PID3_CUSMOD_Msk & ((value) << DSU_PID3_CUSMOD_Pos))
#define DSU_PID3_REVAND_Pos 4
#define DSU_PID3_REVAND_Msk (_U_(0xF) << DSU_PID3_REVAND_Pos)
#define DSU_PID3_REVAND(value) (DSU_PID3_REVAND_Msk & ((value) << DSU_PID3_REVAND_Pos))
#define DSU_PID3_MASK _U_(0x000000FF)



typedef union {
  struct {
    uint32_t PREAMBLEB0:8;
    uint32_t :24;
  } bit;
  uint32_t reg;
} DSU_CID0_Type;


#define DSU_CID0_OFFSET 0x1FF0
#define DSU_CID0_RESETVALUE _U_(0x0000000D)

#define DSU_CID0_PREAMBLEB0_Pos 0
#define DSU_CID0_PREAMBLEB0_Msk (_U_(0xFF) << DSU_CID0_PREAMBLEB0_Pos)
#define DSU_CID0_PREAMBLEB0(value) (DSU_CID0_PREAMBLEB0_Msk & ((value) << DSU_CID0_PREAMBLEB0_Pos))
#define DSU_CID0_MASK _U_(0x000000FF)



typedef union {
  struct {
    uint32_t PREAMBLE:4;
    uint32_t CCLASS:4;
    uint32_t :24;
  } bit;
  uint32_t reg;
} DSU_CID1_Type;


#define DSU_CID1_OFFSET 0x1FF4
#define DSU_CID1_RESETVALUE _U_(0x00000010)

#define DSU_CID1_PREAMBLE_Pos 0
#define DSU_CID1_PREAMBLE_Msk (_U_(0xF) << DSU_CID1_PREAMBLE_Pos)
#define DSU_CID1_PREAMBLE(value) (DSU_CID1_PREAMBLE_Msk & ((value) << DSU_CID1_PREAMBLE_Pos))
#define DSU_CID1_CCLASS_Pos 4
#define DSU_CID1_CCLASS_Msk (_U_(0xF) << DSU_CID1_CCLASS_Pos)
#define DSU_CID1_CCLASS(value) (DSU_CID1_CCLASS_Msk & ((value) << DSU_CID1_CCLASS_Pos))
#define DSU_CID1_MASK _U_(0x000000FF)



typedef union {
  struct {
    uint32_t PREAMBLEB2:8;
    uint32_t :24;
  } bit;
  uint32_t reg;
} DSU_CID2_Type;


#define DSU_CID2_OFFSET 0x1FF8
#define DSU_CID2_RESETVALUE _U_(0x00000005)

#define DSU_CID2_PREAMBLEB2_Pos 0
#define DSU_CID2_PREAMBLEB2_Msk (_U_(0xFF) << DSU_CID2_PREAMBLEB2_Pos)
#define DSU_CID2_PREAMBLEB2(value) (DSU_CID2_PREAMBLEB2_Msk & ((value) << DSU_CID2_PREAMBLEB2_Pos))
#define DSU_CID2_MASK _U_(0x000000FF)



typedef union {
  struct {
    uint32_t PREAMBLEB3:8;
    uint32_t :24;
  } bit;
  uint32_t reg;
} DSU_CID3_Type;


#define DSU_CID3_OFFSET 0x1FFC
#define DSU_CID3_RESETVALUE _U_(0x000000B1)

#define DSU_CID3_PREAMBLEB3_Pos 0
#define DSU_CID3_PREAMBLEB3_Msk (_U_(0xFF) << DSU_CID3_PREAMBLEB3_Pos)
#define DSU_CID3_PREAMBLEB3(value) (DSU_CID3_PREAMBLEB3_Msk & ((value) << DSU_CID3_PREAMBLEB3_Pos))
#define DSU_CID3_MASK _U_(0x000000FF)



typedef struct {
  volatile DSU_CTRL_Type CTRL;
  volatile DSU_STATUSA_Type STATUSA;
  volatile const DSU_STATUSB_Type STATUSB;
       RoReg8 Reserved1[0x1];
  volatile DSU_ADDR_Type ADDR;
  volatile DSU_LENGTH_Type LENGTH;
  volatile DSU_DATA_Type DATA;
  volatile DSU_DCC_Type DCC[2];
  volatile const DSU_DID_Type DID;
  volatile DSU_CFG_Type CFG;
       RoReg8 Reserved2[0x20];
  volatile DSU_MBCTRL_Type MBCTRL;
  volatile DSU_MBCONFIG_Type MBCONFIG;
  volatile DSU_MBWORD_Type MBWORD;
  volatile DSU_MBGSTAT_Type MBGSTAT;
  volatile const DSU_MBDFAIL_Type MBDFAIL;
  volatile const DSU_MBDEXP_Type MBDEXP;
  volatile const DSU_MBAFAIL_Type MBAFAIL;
  volatile const DSU_MBCONTEXT_Type MBCONTEXT;
  volatile DSU_MBENABLE0_Type MBENABLE0;
       RoReg8 Reserved3[0x4];
  volatile const DSU_MBBUSY0_Type MBBUSY0;
       RoReg8 Reserved4[0x4];
  volatile DSU_MBSTATUS0_Type MBSTATUS0;
       RoReg8 Reserved5[0x7C];
  volatile DSU_DCFG_Type DCFG[2];
       RoReg8 Reserved6[0xF08];
  volatile const DSU_ENTRY0_Type ENTRY0;
  volatile const DSU_ENTRY1_Type ENTRY1;
  volatile const DSU_END_Type END;
       RoReg8 Reserved7[0xFC0];
  volatile const DSU_MEMTYPE_Type MEMTYPE;
  volatile const DSU_PID4_Type PID4;
  volatile const DSU_PID5_Type PID5;
  volatile const DSU_PID6_Type PID6;
  volatile const DSU_PID7_Type PID7;
  volatile const DSU_PID0_Type PID0;
  volatile const DSU_PID1_Type PID1;
  volatile const DSU_PID2_Type PID2;
  volatile const DSU_PID3_Type PID3;
  volatile const DSU_CID0_Type CID0;
  volatile const DSU_CID1_Type CID1;
  volatile const DSU_CID2_Type CID2;
  volatile const DSU_CID3_Type CID3;
} Dsu;
# 589 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/eic.h" 1
# 31 "asf4/samd51/include/component/eic.h"
#define _SAMD51_EIC_COMPONENT_ 







#define EIC_U2254 
#define REV_EIC 0x300



typedef union {
  struct {
    uint8_t SWRST:1;
    uint8_t ENABLE:1;
    uint8_t :2;
    uint8_t CKSEL:1;
    uint8_t :3;
  } bit;
  uint8_t reg;
} EIC_CTRLA_Type;


#define EIC_CTRLA_OFFSET 0x00
#define EIC_CTRLA_RESETVALUE _U_(0x00)

#define EIC_CTRLA_SWRST_Pos 0
#define EIC_CTRLA_SWRST (_U_(0x1) << EIC_CTRLA_SWRST_Pos)
#define EIC_CTRLA_ENABLE_Pos 1
#define EIC_CTRLA_ENABLE (_U_(0x1) << EIC_CTRLA_ENABLE_Pos)
#define EIC_CTRLA_CKSEL_Pos 4
#define EIC_CTRLA_CKSEL (_U_(0x1) << EIC_CTRLA_CKSEL_Pos)
#define EIC_CTRLA_MASK _U_(0x13)



typedef union {
  struct {
    uint8_t NMISENSE:3;
    uint8_t NMIFILTEN:1;
    uint8_t NMIASYNCH:1;
    uint8_t :3;
  } bit;
  uint8_t reg;
} EIC_NMICTRL_Type;


#define EIC_NMICTRL_OFFSET 0x01
#define EIC_NMICTRL_RESETVALUE _U_(0x00)

#define EIC_NMICTRL_NMISENSE_Pos 0
#define EIC_NMICTRL_NMISENSE_Msk (_U_(0x7) << EIC_NMICTRL_NMISENSE_Pos)
#define EIC_NMICTRL_NMISENSE(value) (EIC_NMICTRL_NMISENSE_Msk & ((value) << EIC_NMICTRL_NMISENSE_Pos))
#define EIC_NMICTRL_NMISENSE_NONE_Val _U_(0x0)
#define EIC_NMICTRL_NMISENSE_RISE_Val _U_(0x1)
#define EIC_NMICTRL_NMISENSE_FALL_Val _U_(0x2)
#define EIC_NMICTRL_NMISENSE_BOTH_Val _U_(0x3)
#define EIC_NMICTRL_NMISENSE_HIGH_Val _U_(0x4)
#define EIC_NMICTRL_NMISENSE_LOW_Val _U_(0x5)
#define EIC_NMICTRL_NMISENSE_NONE (EIC_NMICTRL_NMISENSE_NONE_Val << EIC_NMICTRL_NMISENSE_Pos)
#define EIC_NMICTRL_NMISENSE_RISE (EIC_NMICTRL_NMISENSE_RISE_Val << EIC_NMICTRL_NMISENSE_Pos)
#define EIC_NMICTRL_NMISENSE_FALL (EIC_NMICTRL_NMISENSE_FALL_Val << EIC_NMICTRL_NMISENSE_Pos)
#define EIC_NMICTRL_NMISENSE_BOTH (EIC_NMICTRL_NMISENSE_BOTH_Val << EIC_NMICTRL_NMISENSE_Pos)
#define EIC_NMICTRL_NMISENSE_HIGH (EIC_NMICTRL_NMISENSE_HIGH_Val << EIC_NMICTRL_NMISENSE_Pos)
#define EIC_NMICTRL_NMISENSE_LOW (EIC_NMICTRL_NMISENSE_LOW_Val << EIC_NMICTRL_NMISENSE_Pos)
#define EIC_NMICTRL_NMIFILTEN_Pos 3
#define EIC_NMICTRL_NMIFILTEN (_U_(0x1) << EIC_NMICTRL_NMIFILTEN_Pos)
#define EIC_NMICTRL_NMIASYNCH_Pos 4
#define EIC_NMICTRL_NMIASYNCH (_U_(0x1) << EIC_NMICTRL_NMIASYNCH_Pos)
#define EIC_NMICTRL_MASK _U_(0x1F)



typedef union {
  struct {
    uint16_t NMI:1;
    uint16_t :15;
  } bit;
  uint16_t reg;
} EIC_NMIFLAG_Type;


#define EIC_NMIFLAG_OFFSET 0x02
#define EIC_NMIFLAG_RESETVALUE _U_(0x0000)

#define EIC_NMIFLAG_NMI_Pos 0
#define EIC_NMIFLAG_NMI (_U_(0x1) << EIC_NMIFLAG_NMI_Pos)
#define EIC_NMIFLAG_MASK _U_(0x0001)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t :30;
  } bit;
  uint32_t reg;
} EIC_SYNCBUSY_Type;


#define EIC_SYNCBUSY_OFFSET 0x04
#define EIC_SYNCBUSY_RESETVALUE _U_(0x00000000)

#define EIC_SYNCBUSY_SWRST_Pos 0
#define EIC_SYNCBUSY_SWRST (_U_(0x1) << EIC_SYNCBUSY_SWRST_Pos)
#define EIC_SYNCBUSY_ENABLE_Pos 1
#define EIC_SYNCBUSY_ENABLE (_U_(0x1) << EIC_SYNCBUSY_ENABLE_Pos)
#define EIC_SYNCBUSY_MASK _U_(0x00000003)



typedef union {
  struct {
    uint32_t EXTINTEO:16;
    uint32_t :16;
  } bit;
  uint32_t reg;
} EIC_EVCTRL_Type;


#define EIC_EVCTRL_OFFSET 0x08
#define EIC_EVCTRL_RESETVALUE _U_(0x00000000)

#define EIC_EVCTRL_EXTINTEO_Pos 0
#define EIC_EVCTRL_EXTINTEO_Msk (_U_(0xFFFF) << EIC_EVCTRL_EXTINTEO_Pos)
#define EIC_EVCTRL_EXTINTEO(value) (EIC_EVCTRL_EXTINTEO_Msk & ((value) << EIC_EVCTRL_EXTINTEO_Pos))
#define EIC_EVCTRL_MASK _U_(0x0000FFFF)



typedef union {
  struct {
    uint32_t EXTINT:16;
    uint32_t :16;
  } bit;
  uint32_t reg;
} EIC_INTENCLR_Type;


#define EIC_INTENCLR_OFFSET 0x0C
#define EIC_INTENCLR_RESETVALUE _U_(0x00000000)

#define EIC_INTENCLR_EXTINT_Pos 0
#define EIC_INTENCLR_EXTINT_Msk (_U_(0xFFFF) << EIC_INTENCLR_EXTINT_Pos)
#define EIC_INTENCLR_EXTINT(value) (EIC_INTENCLR_EXTINT_Msk & ((value) << EIC_INTENCLR_EXTINT_Pos))
#define EIC_INTENCLR_MASK _U_(0x0000FFFF)



typedef union {
  struct {
    uint32_t EXTINT:16;
    uint32_t :16;
  } bit;
  uint32_t reg;
} EIC_INTENSET_Type;


#define EIC_INTENSET_OFFSET 0x10
#define EIC_INTENSET_RESETVALUE _U_(0x00000000)

#define EIC_INTENSET_EXTINT_Pos 0
#define EIC_INTENSET_EXTINT_Msk (_U_(0xFFFF) << EIC_INTENSET_EXTINT_Pos)
#define EIC_INTENSET_EXTINT(value) (EIC_INTENSET_EXTINT_Msk & ((value) << EIC_INTENSET_EXTINT_Pos))
#define EIC_INTENSET_MASK _U_(0x0000FFFF)



typedef union {
  struct {
    volatile const uint32_t EXTINT:16;
    volatile const uint32_t :16;
  } bit;
  uint32_t reg;
} EIC_INTFLAG_Type;


#define EIC_INTFLAG_OFFSET 0x14
#define EIC_INTFLAG_RESETVALUE _U_(0x00000000)

#define EIC_INTFLAG_EXTINT_Pos 0
#define EIC_INTFLAG_EXTINT_Msk (_U_(0xFFFF) << EIC_INTFLAG_EXTINT_Pos)
#define EIC_INTFLAG_EXTINT(value) (EIC_INTFLAG_EXTINT_Msk & ((value) << EIC_INTFLAG_EXTINT_Pos))
#define EIC_INTFLAG_MASK _U_(0x0000FFFF)



typedef union {
  struct {
    uint32_t ASYNCH:16;
    uint32_t :16;
  } bit;
  uint32_t reg;
} EIC_ASYNCH_Type;


#define EIC_ASYNCH_OFFSET 0x18
#define EIC_ASYNCH_RESETVALUE _U_(0x00000000)

#define EIC_ASYNCH_ASYNCH_Pos 0
#define EIC_ASYNCH_ASYNCH_Msk (_U_(0xFFFF) << EIC_ASYNCH_ASYNCH_Pos)
#define EIC_ASYNCH_ASYNCH(value) (EIC_ASYNCH_ASYNCH_Msk & ((value) << EIC_ASYNCH_ASYNCH_Pos))
#define EIC_ASYNCH_MASK _U_(0x0000FFFF)



typedef union {
  struct {
    uint32_t SENSE0:3;
    uint32_t FILTEN0:1;
    uint32_t SENSE1:3;
    uint32_t FILTEN1:1;
    uint32_t SENSE2:3;
    uint32_t FILTEN2:1;
    uint32_t SENSE3:3;
    uint32_t FILTEN3:1;
    uint32_t SENSE4:3;
    uint32_t FILTEN4:1;
    uint32_t SENSE5:3;
    uint32_t FILTEN5:1;
    uint32_t SENSE6:3;
    uint32_t FILTEN6:1;
    uint32_t SENSE7:3;
    uint32_t FILTEN7:1;
  } bit;
  uint32_t reg;
} EIC_CONFIG_Type;


#define EIC_CONFIG_OFFSET 0x1C
#define EIC_CONFIG_RESETVALUE _U_(0x00000000)

#define EIC_CONFIG_SENSE0_Pos 0
#define EIC_CONFIG_SENSE0_Msk (_U_(0x7) << EIC_CONFIG_SENSE0_Pos)
#define EIC_CONFIG_SENSE0(value) (EIC_CONFIG_SENSE0_Msk & ((value) << EIC_CONFIG_SENSE0_Pos))
#define EIC_CONFIG_SENSE0_NONE_Val _U_(0x0)
#define EIC_CONFIG_SENSE0_RISE_Val _U_(0x1)
#define EIC_CONFIG_SENSE0_FALL_Val _U_(0x2)
#define EIC_CONFIG_SENSE0_BOTH_Val _U_(0x3)
#define EIC_CONFIG_SENSE0_HIGH_Val _U_(0x4)
#define EIC_CONFIG_SENSE0_LOW_Val _U_(0x5)
#define EIC_CONFIG_SENSE0_NONE (EIC_CONFIG_SENSE0_NONE_Val << EIC_CONFIG_SENSE0_Pos)
#define EIC_CONFIG_SENSE0_RISE (EIC_CONFIG_SENSE0_RISE_Val << EIC_CONFIG_SENSE0_Pos)
#define EIC_CONFIG_SENSE0_FALL (EIC_CONFIG_SENSE0_FALL_Val << EIC_CONFIG_SENSE0_Pos)
#define EIC_CONFIG_SENSE0_BOTH (EIC_CONFIG_SENSE0_BOTH_Val << EIC_CONFIG_SENSE0_Pos)
#define EIC_CONFIG_SENSE0_HIGH (EIC_CONFIG_SENSE0_HIGH_Val << EIC_CONFIG_SENSE0_Pos)
#define EIC_CONFIG_SENSE0_LOW (EIC_CONFIG_SENSE0_LOW_Val << EIC_CONFIG_SENSE0_Pos)
#define EIC_CONFIG_FILTEN0_Pos 3
#define EIC_CONFIG_FILTEN0 (_U_(0x1) << EIC_CONFIG_FILTEN0_Pos)
#define EIC_CONFIG_SENSE1_Pos 4
#define EIC_CONFIG_SENSE1_Msk (_U_(0x7) << EIC_CONFIG_SENSE1_Pos)
#define EIC_CONFIG_SENSE1(value) (EIC_CONFIG_SENSE1_Msk & ((value) << EIC_CONFIG_SENSE1_Pos))
#define EIC_CONFIG_SENSE1_NONE_Val _U_(0x0)
#define EIC_CONFIG_SENSE1_RISE_Val _U_(0x1)
#define EIC_CONFIG_SENSE1_FALL_Val _U_(0x2)
#define EIC_CONFIG_SENSE1_BOTH_Val _U_(0x3)
#define EIC_CONFIG_SENSE1_HIGH_Val _U_(0x4)
#define EIC_CONFIG_SENSE1_LOW_Val _U_(0x5)
#define EIC_CONFIG_SENSE1_NONE (EIC_CONFIG_SENSE1_NONE_Val << EIC_CONFIG_SENSE1_Pos)
#define EIC_CONFIG_SENSE1_RISE (EIC_CONFIG_SENSE1_RISE_Val << EIC_CONFIG_SENSE1_Pos)
#define EIC_CONFIG_SENSE1_FALL (EIC_CONFIG_SENSE1_FALL_Val << EIC_CONFIG_SENSE1_Pos)
#define EIC_CONFIG_SENSE1_BOTH (EIC_CONFIG_SENSE1_BOTH_Val << EIC_CONFIG_SENSE1_Pos)
#define EIC_CONFIG_SENSE1_HIGH (EIC_CONFIG_SENSE1_HIGH_Val << EIC_CONFIG_SENSE1_Pos)
#define EIC_CONFIG_SENSE1_LOW (EIC_CONFIG_SENSE1_LOW_Val << EIC_CONFIG_SENSE1_Pos)
#define EIC_CONFIG_FILTEN1_Pos 7
#define EIC_CONFIG_FILTEN1 (_U_(0x1) << EIC_CONFIG_FILTEN1_Pos)
#define EIC_CONFIG_SENSE2_Pos 8
#define EIC_CONFIG_SENSE2_Msk (_U_(0x7) << EIC_CONFIG_SENSE2_Pos)
#define EIC_CONFIG_SENSE2(value) (EIC_CONFIG_SENSE2_Msk & ((value) << EIC_CONFIG_SENSE2_Pos))
#define EIC_CONFIG_SENSE2_NONE_Val _U_(0x0)
#define EIC_CONFIG_SENSE2_RISE_Val _U_(0x1)
#define EIC_CONFIG_SENSE2_FALL_Val _U_(0x2)
#define EIC_CONFIG_SENSE2_BOTH_Val _U_(0x3)
#define EIC_CONFIG_SENSE2_HIGH_Val _U_(0x4)
#define EIC_CONFIG_SENSE2_LOW_Val _U_(0x5)
#define EIC_CONFIG_SENSE2_NONE (EIC_CONFIG_SENSE2_NONE_Val << EIC_CONFIG_SENSE2_Pos)
#define EIC_CONFIG_SENSE2_RISE (EIC_CONFIG_SENSE2_RISE_Val << EIC_CONFIG_SENSE2_Pos)
#define EIC_CONFIG_SENSE2_FALL (EIC_CONFIG_SENSE2_FALL_Val << EIC_CONFIG_SENSE2_Pos)
#define EIC_CONFIG_SENSE2_BOTH (EIC_CONFIG_SENSE2_BOTH_Val << EIC_CONFIG_SENSE2_Pos)
#define EIC_CONFIG_SENSE2_HIGH (EIC_CONFIG_SENSE2_HIGH_Val << EIC_CONFIG_SENSE2_Pos)
#define EIC_CONFIG_SENSE2_LOW (EIC_CONFIG_SENSE2_LOW_Val << EIC_CONFIG_SENSE2_Pos)
#define EIC_CONFIG_FILTEN2_Pos 11
#define EIC_CONFIG_FILTEN2 (_U_(0x1) << EIC_CONFIG_FILTEN2_Pos)
#define EIC_CONFIG_SENSE3_Pos 12
#define EIC_CONFIG_SENSE3_Msk (_U_(0x7) << EIC_CONFIG_SENSE3_Pos)
#define EIC_CONFIG_SENSE3(value) (EIC_CONFIG_SENSE3_Msk & ((value) << EIC_CONFIG_SENSE3_Pos))
#define EIC_CONFIG_SENSE3_NONE_Val _U_(0x0)
#define EIC_CONFIG_SENSE3_RISE_Val _U_(0x1)
#define EIC_CONFIG_SENSE3_FALL_Val _U_(0x2)
#define EIC_CONFIG_SENSE3_BOTH_Val _U_(0x3)
#define EIC_CONFIG_SENSE3_HIGH_Val _U_(0x4)
#define EIC_CONFIG_SENSE3_LOW_Val _U_(0x5)
#define EIC_CONFIG_SENSE3_NONE (EIC_CONFIG_SENSE3_NONE_Val << EIC_CONFIG_SENSE3_Pos)
#define EIC_CONFIG_SENSE3_RISE (EIC_CONFIG_SENSE3_RISE_Val << EIC_CONFIG_SENSE3_Pos)
#define EIC_CONFIG_SENSE3_FALL (EIC_CONFIG_SENSE3_FALL_Val << EIC_CONFIG_SENSE3_Pos)
#define EIC_CONFIG_SENSE3_BOTH (EIC_CONFIG_SENSE3_BOTH_Val << EIC_CONFIG_SENSE3_Pos)
#define EIC_CONFIG_SENSE3_HIGH (EIC_CONFIG_SENSE3_HIGH_Val << EIC_CONFIG_SENSE3_Pos)
#define EIC_CONFIG_SENSE3_LOW (EIC_CONFIG_SENSE3_LOW_Val << EIC_CONFIG_SENSE3_Pos)
#define EIC_CONFIG_FILTEN3_Pos 15
#define EIC_CONFIG_FILTEN3 (_U_(0x1) << EIC_CONFIG_FILTEN3_Pos)
#define EIC_CONFIG_SENSE4_Pos 16
#define EIC_CONFIG_SENSE4_Msk (_U_(0x7) << EIC_CONFIG_SENSE4_Pos)
#define EIC_CONFIG_SENSE4(value) (EIC_CONFIG_SENSE4_Msk & ((value) << EIC_CONFIG_SENSE4_Pos))
#define EIC_CONFIG_SENSE4_NONE_Val _U_(0x0)
#define EIC_CONFIG_SENSE4_RISE_Val _U_(0x1)
#define EIC_CONFIG_SENSE4_FALL_Val _U_(0x2)
#define EIC_CONFIG_SENSE4_BOTH_Val _U_(0x3)
#define EIC_CONFIG_SENSE4_HIGH_Val _U_(0x4)
#define EIC_CONFIG_SENSE4_LOW_Val _U_(0x5)
#define EIC_CONFIG_SENSE4_NONE (EIC_CONFIG_SENSE4_NONE_Val << EIC_CONFIG_SENSE4_Pos)
#define EIC_CONFIG_SENSE4_RISE (EIC_CONFIG_SENSE4_RISE_Val << EIC_CONFIG_SENSE4_Pos)
#define EIC_CONFIG_SENSE4_FALL (EIC_CONFIG_SENSE4_FALL_Val << EIC_CONFIG_SENSE4_Pos)
#define EIC_CONFIG_SENSE4_BOTH (EIC_CONFIG_SENSE4_BOTH_Val << EIC_CONFIG_SENSE4_Pos)
#define EIC_CONFIG_SENSE4_HIGH (EIC_CONFIG_SENSE4_HIGH_Val << EIC_CONFIG_SENSE4_Pos)
#define EIC_CONFIG_SENSE4_LOW (EIC_CONFIG_SENSE4_LOW_Val << EIC_CONFIG_SENSE4_Pos)
#define EIC_CONFIG_FILTEN4_Pos 19
#define EIC_CONFIG_FILTEN4 (_U_(0x1) << EIC_CONFIG_FILTEN4_Pos)
#define EIC_CONFIG_SENSE5_Pos 20
#define EIC_CONFIG_SENSE5_Msk (_U_(0x7) << EIC_CONFIG_SENSE5_Pos)
#define EIC_CONFIG_SENSE5(value) (EIC_CONFIG_SENSE5_Msk & ((value) << EIC_CONFIG_SENSE5_Pos))
#define EIC_CONFIG_SENSE5_NONE_Val _U_(0x0)
#define EIC_CONFIG_SENSE5_RISE_Val _U_(0x1)
#define EIC_CONFIG_SENSE5_FALL_Val _U_(0x2)
#define EIC_CONFIG_SENSE5_BOTH_Val _U_(0x3)
#define EIC_CONFIG_SENSE5_HIGH_Val _U_(0x4)
#define EIC_CONFIG_SENSE5_LOW_Val _U_(0x5)
#define EIC_CONFIG_SENSE5_NONE (EIC_CONFIG_SENSE5_NONE_Val << EIC_CONFIG_SENSE5_Pos)
#define EIC_CONFIG_SENSE5_RISE (EIC_CONFIG_SENSE5_RISE_Val << EIC_CONFIG_SENSE5_Pos)
#define EIC_CONFIG_SENSE5_FALL (EIC_CONFIG_SENSE5_FALL_Val << EIC_CONFIG_SENSE5_Pos)
#define EIC_CONFIG_SENSE5_BOTH (EIC_CONFIG_SENSE5_BOTH_Val << EIC_CONFIG_SENSE5_Pos)
#define EIC_CONFIG_SENSE5_HIGH (EIC_CONFIG_SENSE5_HIGH_Val << EIC_CONFIG_SENSE5_Pos)
#define EIC_CONFIG_SENSE5_LOW (EIC_CONFIG_SENSE5_LOW_Val << EIC_CONFIG_SENSE5_Pos)
#define EIC_CONFIG_FILTEN5_Pos 23
#define EIC_CONFIG_FILTEN5 (_U_(0x1) << EIC_CONFIG_FILTEN5_Pos)
#define EIC_CONFIG_SENSE6_Pos 24
#define EIC_CONFIG_SENSE6_Msk (_U_(0x7) << EIC_CONFIG_SENSE6_Pos)
#define EIC_CONFIG_SENSE6(value) (EIC_CONFIG_SENSE6_Msk & ((value) << EIC_CONFIG_SENSE6_Pos))
#define EIC_CONFIG_SENSE6_NONE_Val _U_(0x0)
#define EIC_CONFIG_SENSE6_RISE_Val _U_(0x1)
#define EIC_CONFIG_SENSE6_FALL_Val _U_(0x2)
#define EIC_CONFIG_SENSE6_BOTH_Val _U_(0x3)
#define EIC_CONFIG_SENSE6_HIGH_Val _U_(0x4)
#define EIC_CONFIG_SENSE6_LOW_Val _U_(0x5)
#define EIC_CONFIG_SENSE6_NONE (EIC_CONFIG_SENSE6_NONE_Val << EIC_CONFIG_SENSE6_Pos)
#define EIC_CONFIG_SENSE6_RISE (EIC_CONFIG_SENSE6_RISE_Val << EIC_CONFIG_SENSE6_Pos)
#define EIC_CONFIG_SENSE6_FALL (EIC_CONFIG_SENSE6_FALL_Val << EIC_CONFIG_SENSE6_Pos)
#define EIC_CONFIG_SENSE6_BOTH (EIC_CONFIG_SENSE6_BOTH_Val << EIC_CONFIG_SENSE6_Pos)
#define EIC_CONFIG_SENSE6_HIGH (EIC_CONFIG_SENSE6_HIGH_Val << EIC_CONFIG_SENSE6_Pos)
#define EIC_CONFIG_SENSE6_LOW (EIC_CONFIG_SENSE6_LOW_Val << EIC_CONFIG_SENSE6_Pos)
#define EIC_CONFIG_FILTEN6_Pos 27
#define EIC_CONFIG_FILTEN6 (_U_(0x1) << EIC_CONFIG_FILTEN6_Pos)
#define EIC_CONFIG_SENSE7_Pos 28
#define EIC_CONFIG_SENSE7_Msk (_U_(0x7) << EIC_CONFIG_SENSE7_Pos)
#define EIC_CONFIG_SENSE7(value) (EIC_CONFIG_SENSE7_Msk & ((value) << EIC_CONFIG_SENSE7_Pos))
#define EIC_CONFIG_SENSE7_NONE_Val _U_(0x0)
#define EIC_CONFIG_SENSE7_RISE_Val _U_(0x1)
#define EIC_CONFIG_SENSE7_FALL_Val _U_(0x2)
#define EIC_CONFIG_SENSE7_BOTH_Val _U_(0x3)
#define EIC_CONFIG_SENSE7_HIGH_Val _U_(0x4)
#define EIC_CONFIG_SENSE7_LOW_Val _U_(0x5)
#define EIC_CONFIG_SENSE7_NONE (EIC_CONFIG_SENSE7_NONE_Val << EIC_CONFIG_SENSE7_Pos)
#define EIC_CONFIG_SENSE7_RISE (EIC_CONFIG_SENSE7_RISE_Val << EIC_CONFIG_SENSE7_Pos)
#define EIC_CONFIG_SENSE7_FALL (EIC_CONFIG_SENSE7_FALL_Val << EIC_CONFIG_SENSE7_Pos)
#define EIC_CONFIG_SENSE7_BOTH (EIC_CONFIG_SENSE7_BOTH_Val << EIC_CONFIG_SENSE7_Pos)
#define EIC_CONFIG_SENSE7_HIGH (EIC_CONFIG_SENSE7_HIGH_Val << EIC_CONFIG_SENSE7_Pos)
#define EIC_CONFIG_SENSE7_LOW (EIC_CONFIG_SENSE7_LOW_Val << EIC_CONFIG_SENSE7_Pos)
#define EIC_CONFIG_FILTEN7_Pos 31
#define EIC_CONFIG_FILTEN7 (_U_(0x1) << EIC_CONFIG_FILTEN7_Pos)
#define EIC_CONFIG_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t DEBOUNCEN:16;
    uint32_t :16;
  } bit;
  uint32_t reg;
} EIC_DEBOUNCEN_Type;


#define EIC_DEBOUNCEN_OFFSET 0x30
#define EIC_DEBOUNCEN_RESETVALUE _U_(0x00000000)

#define EIC_DEBOUNCEN_DEBOUNCEN_Pos 0
#define EIC_DEBOUNCEN_DEBOUNCEN_Msk (_U_(0xFFFF) << EIC_DEBOUNCEN_DEBOUNCEN_Pos)
#define EIC_DEBOUNCEN_DEBOUNCEN(value) (EIC_DEBOUNCEN_DEBOUNCEN_Msk & ((value) << EIC_DEBOUNCEN_DEBOUNCEN_Pos))
#define EIC_DEBOUNCEN_MASK _U_(0x0000FFFF)



typedef union {
  struct {
    uint32_t PRESCALER0:3;
    uint32_t STATES0:1;
    uint32_t PRESCALER1:3;
    uint32_t STATES1:1;
    uint32_t :8;
    uint32_t TICKON:1;
    uint32_t :15;
  } bit;
  uint32_t reg;
} EIC_DPRESCALER_Type;


#define EIC_DPRESCALER_OFFSET 0x34
#define EIC_DPRESCALER_RESETVALUE _U_(0x00000000)

#define EIC_DPRESCALER_PRESCALER0_Pos 0
#define EIC_DPRESCALER_PRESCALER0_Msk (_U_(0x7) << EIC_DPRESCALER_PRESCALER0_Pos)
#define EIC_DPRESCALER_PRESCALER0(value) (EIC_DPRESCALER_PRESCALER0_Msk & ((value) << EIC_DPRESCALER_PRESCALER0_Pos))
#define EIC_DPRESCALER_STATES0_Pos 3
#define EIC_DPRESCALER_STATES0 (_U_(0x1) << EIC_DPRESCALER_STATES0_Pos)
#define EIC_DPRESCALER_PRESCALER1_Pos 4
#define EIC_DPRESCALER_PRESCALER1_Msk (_U_(0x7) << EIC_DPRESCALER_PRESCALER1_Pos)
#define EIC_DPRESCALER_PRESCALER1(value) (EIC_DPRESCALER_PRESCALER1_Msk & ((value) << EIC_DPRESCALER_PRESCALER1_Pos))
#define EIC_DPRESCALER_STATES1_Pos 7
#define EIC_DPRESCALER_STATES1 (_U_(0x1) << EIC_DPRESCALER_STATES1_Pos)
#define EIC_DPRESCALER_TICKON_Pos 16
#define EIC_DPRESCALER_TICKON (_U_(0x1) << EIC_DPRESCALER_TICKON_Pos)
#define EIC_DPRESCALER_MASK _U_(0x000100FF)



typedef union {
  struct {
    uint32_t PINSTATE:16;
    uint32_t :16;
  } bit;
  uint32_t reg;
} EIC_PINSTATE_Type;


#define EIC_PINSTATE_OFFSET 0x38
#define EIC_PINSTATE_RESETVALUE _U_(0x00000000)

#define EIC_PINSTATE_PINSTATE_Pos 0
#define EIC_PINSTATE_PINSTATE_Msk (_U_(0xFFFF) << EIC_PINSTATE_PINSTATE_Pos)
#define EIC_PINSTATE_PINSTATE(value) (EIC_PINSTATE_PINSTATE_Msk & ((value) << EIC_PINSTATE_PINSTATE_Pos))
#define EIC_PINSTATE_MASK _U_(0x0000FFFF)



typedef struct {
  volatile EIC_CTRLA_Type CTRLA;
  volatile EIC_NMICTRL_Type NMICTRL;
  volatile EIC_NMIFLAG_Type NMIFLAG;
  volatile const EIC_SYNCBUSY_Type SYNCBUSY;
  volatile EIC_EVCTRL_Type EVCTRL;
  volatile EIC_INTENCLR_Type INTENCLR;
  volatile EIC_INTENSET_Type INTENSET;
  volatile EIC_INTFLAG_Type INTFLAG;
  volatile EIC_ASYNCH_Type ASYNCH;
  volatile EIC_CONFIG_Type CONFIG[2];
       RoReg8 Reserved1[0xC];
  volatile EIC_DEBOUNCEN_Type DEBOUNCEN;
  volatile EIC_DPRESCALER_Type DPRESCALER;
  volatile const EIC_PINSTATE_Type PINSTATE;
} Eic;
# 590 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/evsys.h" 1
# 31 "asf4/samd51/include/component/evsys.h"
#define _SAMD51_EVSYS_COMPONENT_ 







#define EVSYS_U2504 
#define REV_EVSYS 0x100



typedef union {
  struct {
    uint8_t SWRST:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} EVSYS_CTRLA_Type;


#define EVSYS_CTRLA_OFFSET 0x000
#define EVSYS_CTRLA_RESETVALUE _U_(0x00)

#define EVSYS_CTRLA_SWRST_Pos 0
#define EVSYS_CTRLA_SWRST (_U_(0x1) << EVSYS_CTRLA_SWRST_Pos)
#define EVSYS_CTRLA_MASK _U_(0x01)



typedef union {
  struct {
    uint32_t CHANNEL0:1;
    uint32_t CHANNEL1:1;
    uint32_t CHANNEL2:1;
    uint32_t CHANNEL3:1;
    uint32_t CHANNEL4:1;
    uint32_t CHANNEL5:1;
    uint32_t CHANNEL6:1;
    uint32_t CHANNEL7:1;
    uint32_t CHANNEL8:1;
    uint32_t CHANNEL9:1;
    uint32_t CHANNEL10:1;
    uint32_t CHANNEL11:1;
    uint32_t CHANNEL12:1;
    uint32_t CHANNEL13:1;
    uint32_t CHANNEL14:1;
    uint32_t CHANNEL15:1;
    uint32_t CHANNEL16:1;
    uint32_t CHANNEL17:1;
    uint32_t CHANNEL18:1;
    uint32_t CHANNEL19:1;
    uint32_t CHANNEL20:1;
    uint32_t CHANNEL21:1;
    uint32_t CHANNEL22:1;
    uint32_t CHANNEL23:1;
    uint32_t CHANNEL24:1;
    uint32_t CHANNEL25:1;
    uint32_t CHANNEL26:1;
    uint32_t CHANNEL27:1;
    uint32_t CHANNEL28:1;
    uint32_t CHANNEL29:1;
    uint32_t CHANNEL30:1;
    uint32_t CHANNEL31:1;
  } bit;
  struct {
    uint32_t CHANNEL:32;
  } vec;
  uint32_t reg;
} EVSYS_SWEVT_Type;


#define EVSYS_SWEVT_OFFSET 0x004
#define EVSYS_SWEVT_RESETVALUE _U_(0x00000000)

#define EVSYS_SWEVT_CHANNEL0_Pos 0
#define EVSYS_SWEVT_CHANNEL0 (_U_(1) << EVSYS_SWEVT_CHANNEL0_Pos)
#define EVSYS_SWEVT_CHANNEL1_Pos 1
#define EVSYS_SWEVT_CHANNEL1 (_U_(1) << EVSYS_SWEVT_CHANNEL1_Pos)
#define EVSYS_SWEVT_CHANNEL2_Pos 2
#define EVSYS_SWEVT_CHANNEL2 (_U_(1) << EVSYS_SWEVT_CHANNEL2_Pos)
#define EVSYS_SWEVT_CHANNEL3_Pos 3
#define EVSYS_SWEVT_CHANNEL3 (_U_(1) << EVSYS_SWEVT_CHANNEL3_Pos)
#define EVSYS_SWEVT_CHANNEL4_Pos 4
#define EVSYS_SWEVT_CHANNEL4 (_U_(1) << EVSYS_SWEVT_CHANNEL4_Pos)
#define EVSYS_SWEVT_CHANNEL5_Pos 5
#define EVSYS_SWEVT_CHANNEL5 (_U_(1) << EVSYS_SWEVT_CHANNEL5_Pos)
#define EVSYS_SWEVT_CHANNEL6_Pos 6
#define EVSYS_SWEVT_CHANNEL6 (_U_(1) << EVSYS_SWEVT_CHANNEL6_Pos)
#define EVSYS_SWEVT_CHANNEL7_Pos 7
#define EVSYS_SWEVT_CHANNEL7 (_U_(1) << EVSYS_SWEVT_CHANNEL7_Pos)
#define EVSYS_SWEVT_CHANNEL8_Pos 8
#define EVSYS_SWEVT_CHANNEL8 (_U_(1) << EVSYS_SWEVT_CHANNEL8_Pos)
#define EVSYS_SWEVT_CHANNEL9_Pos 9
#define EVSYS_SWEVT_CHANNEL9 (_U_(1) << EVSYS_SWEVT_CHANNEL9_Pos)
#define EVSYS_SWEVT_CHANNEL10_Pos 10
#define EVSYS_SWEVT_CHANNEL10 (_U_(1) << EVSYS_SWEVT_CHANNEL10_Pos)
#define EVSYS_SWEVT_CHANNEL11_Pos 11
#define EVSYS_SWEVT_CHANNEL11 (_U_(1) << EVSYS_SWEVT_CHANNEL11_Pos)
#define EVSYS_SWEVT_CHANNEL12_Pos 12
#define EVSYS_SWEVT_CHANNEL12 (_U_(1) << EVSYS_SWEVT_CHANNEL12_Pos)
#define EVSYS_SWEVT_CHANNEL13_Pos 13
#define EVSYS_SWEVT_CHANNEL13 (_U_(1) << EVSYS_SWEVT_CHANNEL13_Pos)
#define EVSYS_SWEVT_CHANNEL14_Pos 14
#define EVSYS_SWEVT_CHANNEL14 (_U_(1) << EVSYS_SWEVT_CHANNEL14_Pos)
#define EVSYS_SWEVT_CHANNEL15_Pos 15
#define EVSYS_SWEVT_CHANNEL15 (_U_(1) << EVSYS_SWEVT_CHANNEL15_Pos)
#define EVSYS_SWEVT_CHANNEL16_Pos 16
#define EVSYS_SWEVT_CHANNEL16 (_U_(1) << EVSYS_SWEVT_CHANNEL16_Pos)
#define EVSYS_SWEVT_CHANNEL17_Pos 17
#define EVSYS_SWEVT_CHANNEL17 (_U_(1) << EVSYS_SWEVT_CHANNEL17_Pos)
#define EVSYS_SWEVT_CHANNEL18_Pos 18
#define EVSYS_SWEVT_CHANNEL18 (_U_(1) << EVSYS_SWEVT_CHANNEL18_Pos)
#define EVSYS_SWEVT_CHANNEL19_Pos 19
#define EVSYS_SWEVT_CHANNEL19 (_U_(1) << EVSYS_SWEVT_CHANNEL19_Pos)
#define EVSYS_SWEVT_CHANNEL20_Pos 20
#define EVSYS_SWEVT_CHANNEL20 (_U_(1) << EVSYS_SWEVT_CHANNEL20_Pos)
#define EVSYS_SWEVT_CHANNEL21_Pos 21
#define EVSYS_SWEVT_CHANNEL21 (_U_(1) << EVSYS_SWEVT_CHANNEL21_Pos)
#define EVSYS_SWEVT_CHANNEL22_Pos 22
#define EVSYS_SWEVT_CHANNEL22 (_U_(1) << EVSYS_SWEVT_CHANNEL22_Pos)
#define EVSYS_SWEVT_CHANNEL23_Pos 23
#define EVSYS_SWEVT_CHANNEL23 (_U_(1) << EVSYS_SWEVT_CHANNEL23_Pos)
#define EVSYS_SWEVT_CHANNEL24_Pos 24
#define EVSYS_SWEVT_CHANNEL24 (_U_(1) << EVSYS_SWEVT_CHANNEL24_Pos)
#define EVSYS_SWEVT_CHANNEL25_Pos 25
#define EVSYS_SWEVT_CHANNEL25 (_U_(1) << EVSYS_SWEVT_CHANNEL25_Pos)
#define EVSYS_SWEVT_CHANNEL26_Pos 26
#define EVSYS_SWEVT_CHANNEL26 (_U_(1) << EVSYS_SWEVT_CHANNEL26_Pos)
#define EVSYS_SWEVT_CHANNEL27_Pos 27
#define EVSYS_SWEVT_CHANNEL27 (_U_(1) << EVSYS_SWEVT_CHANNEL27_Pos)
#define EVSYS_SWEVT_CHANNEL28_Pos 28
#define EVSYS_SWEVT_CHANNEL28 (_U_(1) << EVSYS_SWEVT_CHANNEL28_Pos)
#define EVSYS_SWEVT_CHANNEL29_Pos 29
#define EVSYS_SWEVT_CHANNEL29 (_U_(1) << EVSYS_SWEVT_CHANNEL29_Pos)
#define EVSYS_SWEVT_CHANNEL30_Pos 30
#define EVSYS_SWEVT_CHANNEL30 (_U_(1) << EVSYS_SWEVT_CHANNEL30_Pos)
#define EVSYS_SWEVT_CHANNEL31_Pos 31
#define EVSYS_SWEVT_CHANNEL31 (_U_(1) << EVSYS_SWEVT_CHANNEL31_Pos)
#define EVSYS_SWEVT_CHANNEL_Pos 0
#define EVSYS_SWEVT_CHANNEL_Msk (_U_(0xFFFFFFFF) << EVSYS_SWEVT_CHANNEL_Pos)
#define EVSYS_SWEVT_CHANNEL(value) (EVSYS_SWEVT_CHANNEL_Msk & ((value) << EVSYS_SWEVT_CHANNEL_Pos))
#define EVSYS_SWEVT_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint8_t PRI:4;
    uint8_t :3;
    uint8_t RREN:1;
  } bit;
  uint8_t reg;
} EVSYS_PRICTRL_Type;


#define EVSYS_PRICTRL_OFFSET 0x008
#define EVSYS_PRICTRL_RESETVALUE _U_(0x00)

#define EVSYS_PRICTRL_PRI_Pos 0
#define EVSYS_PRICTRL_PRI_Msk (_U_(0xF) << EVSYS_PRICTRL_PRI_Pos)
#define EVSYS_PRICTRL_PRI(value) (EVSYS_PRICTRL_PRI_Msk & ((value) << EVSYS_PRICTRL_PRI_Pos))
#define EVSYS_PRICTRL_RREN_Pos 7
#define EVSYS_PRICTRL_RREN (_U_(0x1) << EVSYS_PRICTRL_RREN_Pos)
#define EVSYS_PRICTRL_MASK _U_(0x8F)



typedef union {
  struct {
    uint16_t ID:4;
    uint16_t :4;
    uint16_t OVR:1;
    uint16_t EVD:1;
    uint16_t :4;
    uint16_t READY:1;
    uint16_t BUSY:1;
  } bit;
  uint16_t reg;
} EVSYS_INTPEND_Type;


#define EVSYS_INTPEND_OFFSET 0x010
#define EVSYS_INTPEND_RESETVALUE _U_(0x4000)

#define EVSYS_INTPEND_ID_Pos 0
#define EVSYS_INTPEND_ID_Msk (_U_(0xF) << EVSYS_INTPEND_ID_Pos)
#define EVSYS_INTPEND_ID(value) (EVSYS_INTPEND_ID_Msk & ((value) << EVSYS_INTPEND_ID_Pos))
#define EVSYS_INTPEND_OVR_Pos 8
#define EVSYS_INTPEND_OVR (_U_(0x1) << EVSYS_INTPEND_OVR_Pos)
#define EVSYS_INTPEND_EVD_Pos 9
#define EVSYS_INTPEND_EVD (_U_(0x1) << EVSYS_INTPEND_EVD_Pos)
#define EVSYS_INTPEND_READY_Pos 14
#define EVSYS_INTPEND_READY (_U_(0x1) << EVSYS_INTPEND_READY_Pos)
#define EVSYS_INTPEND_BUSY_Pos 15
#define EVSYS_INTPEND_BUSY (_U_(0x1) << EVSYS_INTPEND_BUSY_Pos)
#define EVSYS_INTPEND_MASK _U_(0xC30F)



typedef union {
  struct {
    uint32_t CHINT0:1;
    uint32_t CHINT1:1;
    uint32_t CHINT2:1;
    uint32_t CHINT3:1;
    uint32_t CHINT4:1;
    uint32_t CHINT5:1;
    uint32_t CHINT6:1;
    uint32_t CHINT7:1;
    uint32_t CHINT8:1;
    uint32_t CHINT9:1;
    uint32_t CHINT10:1;
    uint32_t CHINT11:1;
    uint32_t :20;
  } bit;
  struct {
    uint32_t CHINT:12;
    uint32_t :20;
  } vec;
  uint32_t reg;
} EVSYS_INTSTATUS_Type;


#define EVSYS_INTSTATUS_OFFSET 0x014
#define EVSYS_INTSTATUS_RESETVALUE _U_(0x00000000)

#define EVSYS_INTSTATUS_CHINT0_Pos 0
#define EVSYS_INTSTATUS_CHINT0 (_U_(1) << EVSYS_INTSTATUS_CHINT0_Pos)
#define EVSYS_INTSTATUS_CHINT1_Pos 1
#define EVSYS_INTSTATUS_CHINT1 (_U_(1) << EVSYS_INTSTATUS_CHINT1_Pos)
#define EVSYS_INTSTATUS_CHINT2_Pos 2
#define EVSYS_INTSTATUS_CHINT2 (_U_(1) << EVSYS_INTSTATUS_CHINT2_Pos)
#define EVSYS_INTSTATUS_CHINT3_Pos 3
#define EVSYS_INTSTATUS_CHINT3 (_U_(1) << EVSYS_INTSTATUS_CHINT3_Pos)
#define EVSYS_INTSTATUS_CHINT4_Pos 4
#define EVSYS_INTSTATUS_CHINT4 (_U_(1) << EVSYS_INTSTATUS_CHINT4_Pos)
#define EVSYS_INTSTATUS_CHINT5_Pos 5
#define EVSYS_INTSTATUS_CHINT5 (_U_(1) << EVSYS_INTSTATUS_CHINT5_Pos)
#define EVSYS_INTSTATUS_CHINT6_Pos 6
#define EVSYS_INTSTATUS_CHINT6 (_U_(1) << EVSYS_INTSTATUS_CHINT6_Pos)
#define EVSYS_INTSTATUS_CHINT7_Pos 7
#define EVSYS_INTSTATUS_CHINT7 (_U_(1) << EVSYS_INTSTATUS_CHINT7_Pos)
#define EVSYS_INTSTATUS_CHINT8_Pos 8
#define EVSYS_INTSTATUS_CHINT8 (_U_(1) << EVSYS_INTSTATUS_CHINT8_Pos)
#define EVSYS_INTSTATUS_CHINT9_Pos 9
#define EVSYS_INTSTATUS_CHINT9 (_U_(1) << EVSYS_INTSTATUS_CHINT9_Pos)
#define EVSYS_INTSTATUS_CHINT10_Pos 10
#define EVSYS_INTSTATUS_CHINT10 (_U_(1) << EVSYS_INTSTATUS_CHINT10_Pos)
#define EVSYS_INTSTATUS_CHINT11_Pos 11
#define EVSYS_INTSTATUS_CHINT11 (_U_(1) << EVSYS_INTSTATUS_CHINT11_Pos)
#define EVSYS_INTSTATUS_CHINT_Pos 0
#define EVSYS_INTSTATUS_CHINT_Msk (_U_(0xFFF) << EVSYS_INTSTATUS_CHINT_Pos)
#define EVSYS_INTSTATUS_CHINT(value) (EVSYS_INTSTATUS_CHINT_Msk & ((value) << EVSYS_INTSTATUS_CHINT_Pos))
#define EVSYS_INTSTATUS_MASK _U_(0x00000FFF)



typedef union {
  struct {
    uint32_t BUSYCH0:1;
    uint32_t BUSYCH1:1;
    uint32_t BUSYCH2:1;
    uint32_t BUSYCH3:1;
    uint32_t BUSYCH4:1;
    uint32_t BUSYCH5:1;
    uint32_t BUSYCH6:1;
    uint32_t BUSYCH7:1;
    uint32_t BUSYCH8:1;
    uint32_t BUSYCH9:1;
    uint32_t BUSYCH10:1;
    uint32_t BUSYCH11:1;
    uint32_t :20;
  } bit;
  struct {
    uint32_t BUSYCH:12;
    uint32_t :20;
  } vec;
  uint32_t reg;
} EVSYS_BUSYCH_Type;


#define EVSYS_BUSYCH_OFFSET 0x018
#define EVSYS_BUSYCH_RESETVALUE _U_(0x00000000)

#define EVSYS_BUSYCH_BUSYCH0_Pos 0
#define EVSYS_BUSYCH_BUSYCH0 (_U_(1) << EVSYS_BUSYCH_BUSYCH0_Pos)
#define EVSYS_BUSYCH_BUSYCH1_Pos 1
#define EVSYS_BUSYCH_BUSYCH1 (_U_(1) << EVSYS_BUSYCH_BUSYCH1_Pos)
#define EVSYS_BUSYCH_BUSYCH2_Pos 2
#define EVSYS_BUSYCH_BUSYCH2 (_U_(1) << EVSYS_BUSYCH_BUSYCH2_Pos)
#define EVSYS_BUSYCH_BUSYCH3_Pos 3
#define EVSYS_BUSYCH_BUSYCH3 (_U_(1) << EVSYS_BUSYCH_BUSYCH3_Pos)
#define EVSYS_BUSYCH_BUSYCH4_Pos 4
#define EVSYS_BUSYCH_BUSYCH4 (_U_(1) << EVSYS_BUSYCH_BUSYCH4_Pos)
#define EVSYS_BUSYCH_BUSYCH5_Pos 5
#define EVSYS_BUSYCH_BUSYCH5 (_U_(1) << EVSYS_BUSYCH_BUSYCH5_Pos)
#define EVSYS_BUSYCH_BUSYCH6_Pos 6
#define EVSYS_BUSYCH_BUSYCH6 (_U_(1) << EVSYS_BUSYCH_BUSYCH6_Pos)
#define EVSYS_BUSYCH_BUSYCH7_Pos 7
#define EVSYS_BUSYCH_BUSYCH7 (_U_(1) << EVSYS_BUSYCH_BUSYCH7_Pos)
#define EVSYS_BUSYCH_BUSYCH8_Pos 8
#define EVSYS_BUSYCH_BUSYCH8 (_U_(1) << EVSYS_BUSYCH_BUSYCH8_Pos)
#define EVSYS_BUSYCH_BUSYCH9_Pos 9
#define EVSYS_BUSYCH_BUSYCH9 (_U_(1) << EVSYS_BUSYCH_BUSYCH9_Pos)
#define EVSYS_BUSYCH_BUSYCH10_Pos 10
#define EVSYS_BUSYCH_BUSYCH10 (_U_(1) << EVSYS_BUSYCH_BUSYCH10_Pos)
#define EVSYS_BUSYCH_BUSYCH11_Pos 11
#define EVSYS_BUSYCH_BUSYCH11 (_U_(1) << EVSYS_BUSYCH_BUSYCH11_Pos)
#define EVSYS_BUSYCH_BUSYCH_Pos 0
#define EVSYS_BUSYCH_BUSYCH_Msk (_U_(0xFFF) << EVSYS_BUSYCH_BUSYCH_Pos)
#define EVSYS_BUSYCH_BUSYCH(value) (EVSYS_BUSYCH_BUSYCH_Msk & ((value) << EVSYS_BUSYCH_BUSYCH_Pos))
#define EVSYS_BUSYCH_MASK _U_(0x00000FFF)



typedef union {
  struct {
    uint32_t READYUSR0:1;
    uint32_t READYUSR1:1;
    uint32_t READYUSR2:1;
    uint32_t READYUSR3:1;
    uint32_t READYUSR4:1;
    uint32_t READYUSR5:1;
    uint32_t READYUSR6:1;
    uint32_t READYUSR7:1;
    uint32_t READYUSR8:1;
    uint32_t READYUSR9:1;
    uint32_t READYUSR10:1;
    uint32_t READYUSR11:1;
    uint32_t :20;
  } bit;
  struct {
    uint32_t READYUSR:12;
    uint32_t :20;
  } vec;
  uint32_t reg;
} EVSYS_READYUSR_Type;


#define EVSYS_READYUSR_OFFSET 0x01C
#define EVSYS_READYUSR_RESETVALUE _U_(0xFFFFFFFF)

#define EVSYS_READYUSR_READYUSR0_Pos 0
#define EVSYS_READYUSR_READYUSR0 (_U_(1) << EVSYS_READYUSR_READYUSR0_Pos)
#define EVSYS_READYUSR_READYUSR1_Pos 1
#define EVSYS_READYUSR_READYUSR1 (_U_(1) << EVSYS_READYUSR_READYUSR1_Pos)
#define EVSYS_READYUSR_READYUSR2_Pos 2
#define EVSYS_READYUSR_READYUSR2 (_U_(1) << EVSYS_READYUSR_READYUSR2_Pos)
#define EVSYS_READYUSR_READYUSR3_Pos 3
#define EVSYS_READYUSR_READYUSR3 (_U_(1) << EVSYS_READYUSR_READYUSR3_Pos)
#define EVSYS_READYUSR_READYUSR4_Pos 4
#define EVSYS_READYUSR_READYUSR4 (_U_(1) << EVSYS_READYUSR_READYUSR4_Pos)
#define EVSYS_READYUSR_READYUSR5_Pos 5
#define EVSYS_READYUSR_READYUSR5 (_U_(1) << EVSYS_READYUSR_READYUSR5_Pos)
#define EVSYS_READYUSR_READYUSR6_Pos 6
#define EVSYS_READYUSR_READYUSR6 (_U_(1) << EVSYS_READYUSR_READYUSR6_Pos)
#define EVSYS_READYUSR_READYUSR7_Pos 7
#define EVSYS_READYUSR_READYUSR7 (_U_(1) << EVSYS_READYUSR_READYUSR7_Pos)
#define EVSYS_READYUSR_READYUSR8_Pos 8
#define EVSYS_READYUSR_READYUSR8 (_U_(1) << EVSYS_READYUSR_READYUSR8_Pos)
#define EVSYS_READYUSR_READYUSR9_Pos 9
#define EVSYS_READYUSR_READYUSR9 (_U_(1) << EVSYS_READYUSR_READYUSR9_Pos)
#define EVSYS_READYUSR_READYUSR10_Pos 10
#define EVSYS_READYUSR_READYUSR10 (_U_(1) << EVSYS_READYUSR_READYUSR10_Pos)
#define EVSYS_READYUSR_READYUSR11_Pos 11
#define EVSYS_READYUSR_READYUSR11 (_U_(1) << EVSYS_READYUSR_READYUSR11_Pos)
#define EVSYS_READYUSR_READYUSR_Pos 0
#define EVSYS_READYUSR_READYUSR_Msk (_U_(0xFFF) << EVSYS_READYUSR_READYUSR_Pos)
#define EVSYS_READYUSR_READYUSR(value) (EVSYS_READYUSR_READYUSR_Msk & ((value) << EVSYS_READYUSR_READYUSR_Pos))
#define EVSYS_READYUSR_MASK _U_(0x00000FFF)



typedef union {
  struct {
    uint32_t EVGEN:7;
    uint32_t :1;
    uint32_t PATH:2;
    uint32_t EDGSEL:2;
    uint32_t :2;
    uint32_t RUNSTDBY:1;
    uint32_t ONDEMAND:1;
    uint32_t :16;
  } bit;
  uint32_t reg;
} EVSYS_CHANNEL_Type;


#define EVSYS_CHANNEL_OFFSET 0x020
#define EVSYS_CHANNEL_RESETVALUE _U_(0x00008000)

#define EVSYS_CHANNEL_EVGEN_Pos 0
#define EVSYS_CHANNEL_EVGEN_Msk (_U_(0x7F) << EVSYS_CHANNEL_EVGEN_Pos)
#define EVSYS_CHANNEL_EVGEN(value) (EVSYS_CHANNEL_EVGEN_Msk & ((value) << EVSYS_CHANNEL_EVGEN_Pos))
#define EVSYS_CHANNEL_PATH_Pos 8
#define EVSYS_CHANNEL_PATH_Msk (_U_(0x3) << EVSYS_CHANNEL_PATH_Pos)
#define EVSYS_CHANNEL_PATH(value) (EVSYS_CHANNEL_PATH_Msk & ((value) << EVSYS_CHANNEL_PATH_Pos))
#define EVSYS_CHANNEL_PATH_SYNCHRONOUS_Val _U_(0x0)
#define EVSYS_CHANNEL_PATH_RESYNCHRONIZED_Val _U_(0x1)
#define EVSYS_CHANNEL_PATH_ASYNCHRONOUS_Val _U_(0x2)
#define EVSYS_CHANNEL_PATH_SYNCHRONOUS (EVSYS_CHANNEL_PATH_SYNCHRONOUS_Val << EVSYS_CHANNEL_PATH_Pos)
#define EVSYS_CHANNEL_PATH_RESYNCHRONIZED (EVSYS_CHANNEL_PATH_RESYNCHRONIZED_Val << EVSYS_CHANNEL_PATH_Pos)
#define EVSYS_CHANNEL_PATH_ASYNCHRONOUS (EVSYS_CHANNEL_PATH_ASYNCHRONOUS_Val << EVSYS_CHANNEL_PATH_Pos)
#define EVSYS_CHANNEL_EDGSEL_Pos 10
#define EVSYS_CHANNEL_EDGSEL_Msk (_U_(0x3) << EVSYS_CHANNEL_EDGSEL_Pos)
#define EVSYS_CHANNEL_EDGSEL(value) (EVSYS_CHANNEL_EDGSEL_Msk & ((value) << EVSYS_CHANNEL_EDGSEL_Pos))
#define EVSYS_CHANNEL_EDGSEL_NO_EVT_OUTPUT_Val _U_(0x0)
#define EVSYS_CHANNEL_EDGSEL_RISING_EDGE_Val _U_(0x1)
#define EVSYS_CHANNEL_EDGSEL_FALLING_EDGE_Val _U_(0x2)
#define EVSYS_CHANNEL_EDGSEL_BOTH_EDGES_Val _U_(0x3)
#define EVSYS_CHANNEL_EDGSEL_NO_EVT_OUTPUT (EVSYS_CHANNEL_EDGSEL_NO_EVT_OUTPUT_Val << EVSYS_CHANNEL_EDGSEL_Pos)
#define EVSYS_CHANNEL_EDGSEL_RISING_EDGE (EVSYS_CHANNEL_EDGSEL_RISING_EDGE_Val << EVSYS_CHANNEL_EDGSEL_Pos)
#define EVSYS_CHANNEL_EDGSEL_FALLING_EDGE (EVSYS_CHANNEL_EDGSEL_FALLING_EDGE_Val << EVSYS_CHANNEL_EDGSEL_Pos)
#define EVSYS_CHANNEL_EDGSEL_BOTH_EDGES (EVSYS_CHANNEL_EDGSEL_BOTH_EDGES_Val << EVSYS_CHANNEL_EDGSEL_Pos)
#define EVSYS_CHANNEL_RUNSTDBY_Pos 14
#define EVSYS_CHANNEL_RUNSTDBY (_U_(0x1) << EVSYS_CHANNEL_RUNSTDBY_Pos)
#define EVSYS_CHANNEL_ONDEMAND_Pos 15
#define EVSYS_CHANNEL_ONDEMAND (_U_(0x1) << EVSYS_CHANNEL_ONDEMAND_Pos)
#define EVSYS_CHANNEL_MASK _U_(0x0000CF7F)



typedef union {
  struct {
    uint8_t OVR:1;
    uint8_t EVD:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} EVSYS_CHINTENCLR_Type;


#define EVSYS_CHINTENCLR_OFFSET 0x024
#define EVSYS_CHINTENCLR_RESETVALUE _U_(0x00)

#define EVSYS_CHINTENCLR_OVR_Pos 0
#define EVSYS_CHINTENCLR_OVR (_U_(0x1) << EVSYS_CHINTENCLR_OVR_Pos)
#define EVSYS_CHINTENCLR_EVD_Pos 1
#define EVSYS_CHINTENCLR_EVD (_U_(0x1) << EVSYS_CHINTENCLR_EVD_Pos)
#define EVSYS_CHINTENCLR_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t OVR:1;
    uint8_t EVD:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} EVSYS_CHINTENSET_Type;


#define EVSYS_CHINTENSET_OFFSET 0x025
#define EVSYS_CHINTENSET_RESETVALUE _U_(0x00)

#define EVSYS_CHINTENSET_OVR_Pos 0
#define EVSYS_CHINTENSET_OVR (_U_(0x1) << EVSYS_CHINTENSET_OVR_Pos)
#define EVSYS_CHINTENSET_EVD_Pos 1
#define EVSYS_CHINTENSET_EVD (_U_(0x1) << EVSYS_CHINTENSET_EVD_Pos)
#define EVSYS_CHINTENSET_MASK _U_(0x03)



typedef union {
  struct {
    volatile const uint8_t OVR:1;
    volatile const uint8_t EVD:1;
    volatile const uint8_t :6;
  } bit;
  uint8_t reg;
} EVSYS_CHINTFLAG_Type;


#define EVSYS_CHINTFLAG_OFFSET 0x026
#define EVSYS_CHINTFLAG_RESETVALUE _U_(0x00)

#define EVSYS_CHINTFLAG_OVR_Pos 0
#define EVSYS_CHINTFLAG_OVR (_U_(0x1) << EVSYS_CHINTFLAG_OVR_Pos)
#define EVSYS_CHINTFLAG_EVD_Pos 1
#define EVSYS_CHINTFLAG_EVD (_U_(0x1) << EVSYS_CHINTFLAG_EVD_Pos)
#define EVSYS_CHINTFLAG_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t RDYUSR:1;
    uint8_t BUSYCH:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} EVSYS_CHSTATUS_Type;


#define EVSYS_CHSTATUS_OFFSET 0x027
#define EVSYS_CHSTATUS_RESETVALUE _U_(0x01)

#define EVSYS_CHSTATUS_RDYUSR_Pos 0
#define EVSYS_CHSTATUS_RDYUSR (_U_(0x1) << EVSYS_CHSTATUS_RDYUSR_Pos)
#define EVSYS_CHSTATUS_BUSYCH_Pos 1
#define EVSYS_CHSTATUS_BUSYCH (_U_(0x1) << EVSYS_CHSTATUS_BUSYCH_Pos)
#define EVSYS_CHSTATUS_MASK _U_(0x03)



typedef union {
  struct {
    uint32_t CHANNEL:6;
    uint32_t :26;
  } bit;
  uint32_t reg;
} EVSYS_USER_Type;


#define EVSYS_USER_OFFSET 0x120
#define EVSYS_USER_RESETVALUE _U_(0x00000000)

#define EVSYS_USER_CHANNEL_Pos 0
#define EVSYS_USER_CHANNEL_Msk (_U_(0x3F) << EVSYS_USER_CHANNEL_Pos)
#define EVSYS_USER_CHANNEL(value) (EVSYS_USER_CHANNEL_Msk & ((value) << EVSYS_USER_CHANNEL_Pos))
#define EVSYS_USER_MASK _U_(0x0000003F)



typedef struct {
  volatile EVSYS_CHANNEL_Type CHANNEL;
  volatile EVSYS_CHINTENCLR_Type CHINTENCLR;
  volatile EVSYS_CHINTENSET_Type CHINTENSET;
  volatile EVSYS_CHINTFLAG_Type CHINTFLAG;
  volatile const EVSYS_CHSTATUS_Type CHSTATUS;
} EvsysChannel;




typedef struct {
  volatile EVSYS_CTRLA_Type CTRLA;
       RoReg8 Reserved1[0x3];
  volatile EVSYS_SWEVT_Type SWEVT;
  volatile EVSYS_PRICTRL_Type PRICTRL;
       RoReg8 Reserved2[0x7];
  volatile EVSYS_INTPEND_Type INTPEND;
       RoReg8 Reserved3[0x2];
  volatile const EVSYS_INTSTATUS_Type INTSTATUS;
  volatile const EVSYS_BUSYCH_Type BUSYCH;
  volatile const EVSYS_READYUSR_Type READYUSR;
       EvsysChannel Channel[32];
  volatile EVSYS_USER_Type USER[67];
} Evsys;
# 591 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/freqm.h" 1
# 31 "asf4/samd51/include/component/freqm.h"
#define _SAMD51_FREQM_COMPONENT_ 







#define FREQM_U2257 
#define REV_FREQM 0x110



typedef union {
  struct {
    uint8_t SWRST:1;
    uint8_t ENABLE:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} FREQM_CTRLA_Type;


#define FREQM_CTRLA_OFFSET 0x00
#define FREQM_CTRLA_RESETVALUE _U_(0x00)

#define FREQM_CTRLA_SWRST_Pos 0
#define FREQM_CTRLA_SWRST (_U_(0x1) << FREQM_CTRLA_SWRST_Pos)
#define FREQM_CTRLA_ENABLE_Pos 1
#define FREQM_CTRLA_ENABLE (_U_(0x1) << FREQM_CTRLA_ENABLE_Pos)
#define FREQM_CTRLA_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t START:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} FREQM_CTRLB_Type;


#define FREQM_CTRLB_OFFSET 0x01
#define FREQM_CTRLB_RESETVALUE _U_(0x00)

#define FREQM_CTRLB_START_Pos 0
#define FREQM_CTRLB_START (_U_(0x1) << FREQM_CTRLB_START_Pos)
#define FREQM_CTRLB_MASK _U_(0x01)



typedef union {
  struct {
    uint16_t REFNUM:8;
    uint16_t :8;
  } bit;
  uint16_t reg;
} FREQM_CFGA_Type;


#define FREQM_CFGA_OFFSET 0x02
#define FREQM_CFGA_RESETVALUE _U_(0x0000)

#define FREQM_CFGA_REFNUM_Pos 0
#define FREQM_CFGA_REFNUM_Msk (_U_(0xFF) << FREQM_CFGA_REFNUM_Pos)
#define FREQM_CFGA_REFNUM(value) (FREQM_CFGA_REFNUM_Msk & ((value) << FREQM_CFGA_REFNUM_Pos))
#define FREQM_CFGA_MASK _U_(0x00FF)



typedef union {
  struct {
    uint8_t DONE:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} FREQM_INTENCLR_Type;


#define FREQM_INTENCLR_OFFSET 0x08
#define FREQM_INTENCLR_RESETVALUE _U_(0x00)

#define FREQM_INTENCLR_DONE_Pos 0
#define FREQM_INTENCLR_DONE (_U_(0x1) << FREQM_INTENCLR_DONE_Pos)
#define FREQM_INTENCLR_MASK _U_(0x01)



typedef union {
  struct {
    uint8_t DONE:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} FREQM_INTENSET_Type;


#define FREQM_INTENSET_OFFSET 0x09
#define FREQM_INTENSET_RESETVALUE _U_(0x00)

#define FREQM_INTENSET_DONE_Pos 0
#define FREQM_INTENSET_DONE (_U_(0x1) << FREQM_INTENSET_DONE_Pos)
#define FREQM_INTENSET_MASK _U_(0x01)



typedef union {
  struct {
    volatile const uint8_t DONE:1;
    volatile const uint8_t :7;
  } bit;
  uint8_t reg;
} FREQM_INTFLAG_Type;


#define FREQM_INTFLAG_OFFSET 0x0A
#define FREQM_INTFLAG_RESETVALUE _U_(0x00)

#define FREQM_INTFLAG_DONE_Pos 0
#define FREQM_INTFLAG_DONE (_U_(0x1) << FREQM_INTFLAG_DONE_Pos)
#define FREQM_INTFLAG_MASK _U_(0x01)



typedef union {
  struct {
    uint8_t BUSY:1;
    uint8_t OVF:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} FREQM_STATUS_Type;


#define FREQM_STATUS_OFFSET 0x0B
#define FREQM_STATUS_RESETVALUE _U_(0x00)

#define FREQM_STATUS_BUSY_Pos 0
#define FREQM_STATUS_BUSY (_U_(0x1) << FREQM_STATUS_BUSY_Pos)
#define FREQM_STATUS_OVF_Pos 1
#define FREQM_STATUS_OVF (_U_(0x1) << FREQM_STATUS_OVF_Pos)
#define FREQM_STATUS_MASK _U_(0x03)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t :30;
  } bit;
  uint32_t reg;
} FREQM_SYNCBUSY_Type;


#define FREQM_SYNCBUSY_OFFSET 0x0C
#define FREQM_SYNCBUSY_RESETVALUE _U_(0x00000000)

#define FREQM_SYNCBUSY_SWRST_Pos 0
#define FREQM_SYNCBUSY_SWRST (_U_(0x1) << FREQM_SYNCBUSY_SWRST_Pos)
#define FREQM_SYNCBUSY_ENABLE_Pos 1
#define FREQM_SYNCBUSY_ENABLE (_U_(0x1) << FREQM_SYNCBUSY_ENABLE_Pos)
#define FREQM_SYNCBUSY_MASK _U_(0x00000003)



typedef union {
  struct {
    uint32_t VALUE:24;
    uint32_t :8;
  } bit;
  uint32_t reg;
} FREQM_VALUE_Type;


#define FREQM_VALUE_OFFSET 0x10
#define FREQM_VALUE_RESETVALUE _U_(0x00000000)

#define FREQM_VALUE_VALUE_Pos 0
#define FREQM_VALUE_VALUE_Msk (_U_(0xFFFFFF) << FREQM_VALUE_VALUE_Pos)
#define FREQM_VALUE_VALUE(value) (FREQM_VALUE_VALUE_Msk & ((value) << FREQM_VALUE_VALUE_Pos))
#define FREQM_VALUE_MASK _U_(0x00FFFFFF)



typedef struct {
  volatile FREQM_CTRLA_Type CTRLA;
  volatile FREQM_CTRLB_Type CTRLB;
  volatile FREQM_CFGA_Type CFGA;
       RoReg8 Reserved1[0x4];
  volatile FREQM_INTENCLR_Type INTENCLR;
  volatile FREQM_INTENSET_Type INTENSET;
  volatile FREQM_INTFLAG_Type INTFLAG;
  volatile FREQM_STATUS_Type STATUS;
  volatile const FREQM_SYNCBUSY_Type SYNCBUSY;
  volatile const FREQM_VALUE_Type VALUE;
} Freqm;
# 592 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/gclk.h" 1
# 31 "asf4/samd51/include/component/gclk.h"
#define _SAMD51_GCLK_COMPONENT_ 







#define GCLK_U2122 
#define REV_GCLK 0x120



typedef union {
  struct {
    uint8_t SWRST:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} GCLK_CTRLA_Type;


#define GCLK_CTRLA_OFFSET 0x00
#define GCLK_CTRLA_RESETVALUE _U_(0x00)

#define GCLK_CTRLA_SWRST_Pos 0
#define GCLK_CTRLA_SWRST (_U_(0x1) << GCLK_CTRLA_SWRST_Pos)
#define GCLK_CTRLA_MASK _U_(0x01)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t :1;
    uint32_t GENCTRL0:1;
    uint32_t GENCTRL1:1;
    uint32_t GENCTRL2:1;
    uint32_t GENCTRL3:1;
    uint32_t GENCTRL4:1;
    uint32_t GENCTRL5:1;
    uint32_t GENCTRL6:1;
    uint32_t GENCTRL7:1;
    uint32_t GENCTRL8:1;
    uint32_t GENCTRL9:1;
    uint32_t GENCTRL10:1;
    uint32_t GENCTRL11:1;
    uint32_t :18;
  } bit;
  struct {
    uint32_t :2;
    uint32_t GENCTRL:12;
    uint32_t :18;
  } vec;
  uint32_t reg;
} GCLK_SYNCBUSY_Type;


#define GCLK_SYNCBUSY_OFFSET 0x04
#define GCLK_SYNCBUSY_RESETVALUE _U_(0x00000000)

#define GCLK_SYNCBUSY_SWRST_Pos 0
#define GCLK_SYNCBUSY_SWRST (_U_(0x1) << GCLK_SYNCBUSY_SWRST_Pos)
#define GCLK_SYNCBUSY_GENCTRL0_Pos 2
#define GCLK_SYNCBUSY_GENCTRL0 (_U_(1) << GCLK_SYNCBUSY_GENCTRL0_Pos)
#define GCLK_SYNCBUSY_GENCTRL1_Pos 3
#define GCLK_SYNCBUSY_GENCTRL1 (_U_(1) << GCLK_SYNCBUSY_GENCTRL1_Pos)
#define GCLK_SYNCBUSY_GENCTRL2_Pos 4
#define GCLK_SYNCBUSY_GENCTRL2 (_U_(1) << GCLK_SYNCBUSY_GENCTRL2_Pos)
#define GCLK_SYNCBUSY_GENCTRL3_Pos 5
#define GCLK_SYNCBUSY_GENCTRL3 (_U_(1) << GCLK_SYNCBUSY_GENCTRL3_Pos)
#define GCLK_SYNCBUSY_GENCTRL4_Pos 6
#define GCLK_SYNCBUSY_GENCTRL4 (_U_(1) << GCLK_SYNCBUSY_GENCTRL4_Pos)
#define GCLK_SYNCBUSY_GENCTRL5_Pos 7
#define GCLK_SYNCBUSY_GENCTRL5 (_U_(1) << GCLK_SYNCBUSY_GENCTRL5_Pos)
#define GCLK_SYNCBUSY_GENCTRL6_Pos 8
#define GCLK_SYNCBUSY_GENCTRL6 (_U_(1) << GCLK_SYNCBUSY_GENCTRL6_Pos)
#define GCLK_SYNCBUSY_GENCTRL7_Pos 9
#define GCLK_SYNCBUSY_GENCTRL7 (_U_(1) << GCLK_SYNCBUSY_GENCTRL7_Pos)
#define GCLK_SYNCBUSY_GENCTRL8_Pos 10
#define GCLK_SYNCBUSY_GENCTRL8 (_U_(1) << GCLK_SYNCBUSY_GENCTRL8_Pos)
#define GCLK_SYNCBUSY_GENCTRL9_Pos 11
#define GCLK_SYNCBUSY_GENCTRL9 (_U_(1) << GCLK_SYNCBUSY_GENCTRL9_Pos)
#define GCLK_SYNCBUSY_GENCTRL10_Pos 12
#define GCLK_SYNCBUSY_GENCTRL10 (_U_(1) << GCLK_SYNCBUSY_GENCTRL10_Pos)
#define GCLK_SYNCBUSY_GENCTRL11_Pos 13
#define GCLK_SYNCBUSY_GENCTRL11 (_U_(1) << GCLK_SYNCBUSY_GENCTRL11_Pos)
#define GCLK_SYNCBUSY_GENCTRL_Pos 2
#define GCLK_SYNCBUSY_GENCTRL_Msk (_U_(0xFFF) << GCLK_SYNCBUSY_GENCTRL_Pos)
#define GCLK_SYNCBUSY_GENCTRL(value) (GCLK_SYNCBUSY_GENCTRL_Msk & ((value) << GCLK_SYNCBUSY_GENCTRL_Pos))
#define GCLK_SYNCBUSY_GENCTRL_GCLK0_Val _U_(0x1)
#define GCLK_SYNCBUSY_GENCTRL_GCLK1_Val _U_(0x2)
#define GCLK_SYNCBUSY_GENCTRL_GCLK2_Val _U_(0x4)
#define GCLK_SYNCBUSY_GENCTRL_GCLK3_Val _U_(0x8)
#define GCLK_SYNCBUSY_GENCTRL_GCLK4_Val _U_(0x10)
#define GCLK_SYNCBUSY_GENCTRL_GCLK5_Val _U_(0x20)
#define GCLK_SYNCBUSY_GENCTRL_GCLK6_Val _U_(0x40)
#define GCLK_SYNCBUSY_GENCTRL_GCLK7_Val _U_(0x80)
#define GCLK_SYNCBUSY_GENCTRL_GCLK8_Val _U_(0x100)
#define GCLK_SYNCBUSY_GENCTRL_GCLK9_Val _U_(0x200)
#define GCLK_SYNCBUSY_GENCTRL_GCLK10_Val _U_(0x400)
#define GCLK_SYNCBUSY_GENCTRL_GCLK11_Val _U_(0x800)
#define GCLK_SYNCBUSY_GENCTRL_GCLK0 (GCLK_SYNCBUSY_GENCTRL_GCLK0_Val << GCLK_SYNCBUSY_GENCTRL_Pos)
#define GCLK_SYNCBUSY_GENCTRL_GCLK1 (GCLK_SYNCBUSY_GENCTRL_GCLK1_Val << GCLK_SYNCBUSY_GENCTRL_Pos)
#define GCLK_SYNCBUSY_GENCTRL_GCLK2 (GCLK_SYNCBUSY_GENCTRL_GCLK2_Val << GCLK_SYNCBUSY_GENCTRL_Pos)
#define GCLK_SYNCBUSY_GENCTRL_GCLK3 (GCLK_SYNCBUSY_GENCTRL_GCLK3_Val << GCLK_SYNCBUSY_GENCTRL_Pos)
#define GCLK_SYNCBUSY_GENCTRL_GCLK4 (GCLK_SYNCBUSY_GENCTRL_GCLK4_Val << GCLK_SYNCBUSY_GENCTRL_Pos)
#define GCLK_SYNCBUSY_GENCTRL_GCLK5 (GCLK_SYNCBUSY_GENCTRL_GCLK5_Val << GCLK_SYNCBUSY_GENCTRL_Pos)
#define GCLK_SYNCBUSY_GENCTRL_GCLK6 (GCLK_SYNCBUSY_GENCTRL_GCLK6_Val << GCLK_SYNCBUSY_GENCTRL_Pos)
#define GCLK_SYNCBUSY_GENCTRL_GCLK7 (GCLK_SYNCBUSY_GENCTRL_GCLK7_Val << GCLK_SYNCBUSY_GENCTRL_Pos)
#define GCLK_SYNCBUSY_GENCTRL_GCLK8 (GCLK_SYNCBUSY_GENCTRL_GCLK8_Val << GCLK_SYNCBUSY_GENCTRL_Pos)
#define GCLK_SYNCBUSY_GENCTRL_GCLK9 (GCLK_SYNCBUSY_GENCTRL_GCLK9_Val << GCLK_SYNCBUSY_GENCTRL_Pos)
#define GCLK_SYNCBUSY_GENCTRL_GCLK10 (GCLK_SYNCBUSY_GENCTRL_GCLK10_Val << GCLK_SYNCBUSY_GENCTRL_Pos)
#define GCLK_SYNCBUSY_GENCTRL_GCLK11 (GCLK_SYNCBUSY_GENCTRL_GCLK11_Val << GCLK_SYNCBUSY_GENCTRL_Pos)
#define GCLK_SYNCBUSY_MASK _U_(0x00003FFD)



typedef union {
  struct {
    uint32_t SRC:4;
    uint32_t :4;
    uint32_t GENEN:1;
    uint32_t IDC:1;
    uint32_t OOV:1;
    uint32_t OE:1;
    uint32_t DIVSEL:1;
    uint32_t RUNSTDBY:1;
    uint32_t :2;
    uint32_t DIV:16;
  } bit;
  uint32_t reg;
} GCLK_GENCTRL_Type;


#define GCLK_GENCTRL_OFFSET 0x20
#define GCLK_GENCTRL_RESETVALUE _U_(0x00000000)

#define GCLK_GENCTRL_SRC_Pos 0
#define GCLK_GENCTRL_SRC_Msk (_U_(0xF) << GCLK_GENCTRL_SRC_Pos)
#define GCLK_GENCTRL_SRC(value) (GCLK_GENCTRL_SRC_Msk & ((value) << GCLK_GENCTRL_SRC_Pos))
#define GCLK_GENCTRL_SRC_XOSC0_Val _U_(0x0)
#define GCLK_GENCTRL_SRC_XOSC1_Val _U_(0x1)
#define GCLK_GENCTRL_SRC_GCLKIN_Val _U_(0x2)
#define GCLK_GENCTRL_SRC_GCLKGEN1_Val _U_(0x3)
#define GCLK_GENCTRL_SRC_OSCULP32K_Val _U_(0x4)
#define GCLK_GENCTRL_SRC_XOSC32K_Val _U_(0x5)
#define GCLK_GENCTRL_SRC_DFLL_Val _U_(0x6)
#define GCLK_GENCTRL_SRC_DPLL0_Val _U_(0x7)
#define GCLK_GENCTRL_SRC_DPLL1_Val _U_(0x8)
#define GCLK_GENCTRL_SRC_XOSC0 (GCLK_GENCTRL_SRC_XOSC0_Val << GCLK_GENCTRL_SRC_Pos)
#define GCLK_GENCTRL_SRC_XOSC1 (GCLK_GENCTRL_SRC_XOSC1_Val << GCLK_GENCTRL_SRC_Pos)
#define GCLK_GENCTRL_SRC_GCLKIN (GCLK_GENCTRL_SRC_GCLKIN_Val << GCLK_GENCTRL_SRC_Pos)
#define GCLK_GENCTRL_SRC_GCLKGEN1 (GCLK_GENCTRL_SRC_GCLKGEN1_Val << GCLK_GENCTRL_SRC_Pos)
#define GCLK_GENCTRL_SRC_OSCULP32K (GCLK_GENCTRL_SRC_OSCULP32K_Val << GCLK_GENCTRL_SRC_Pos)
#define GCLK_GENCTRL_SRC_XOSC32K (GCLK_GENCTRL_SRC_XOSC32K_Val << GCLK_GENCTRL_SRC_Pos)
#define GCLK_GENCTRL_SRC_DFLL (GCLK_GENCTRL_SRC_DFLL_Val << GCLK_GENCTRL_SRC_Pos)
#define GCLK_GENCTRL_SRC_DPLL0 (GCLK_GENCTRL_SRC_DPLL0_Val << GCLK_GENCTRL_SRC_Pos)
#define GCLK_GENCTRL_SRC_DPLL1 (GCLK_GENCTRL_SRC_DPLL1_Val << GCLK_GENCTRL_SRC_Pos)
#define GCLK_GENCTRL_GENEN_Pos 8
#define GCLK_GENCTRL_GENEN (_U_(0x1) << GCLK_GENCTRL_GENEN_Pos)
#define GCLK_GENCTRL_IDC_Pos 9
#define GCLK_GENCTRL_IDC (_U_(0x1) << GCLK_GENCTRL_IDC_Pos)
#define GCLK_GENCTRL_OOV_Pos 10
#define GCLK_GENCTRL_OOV (_U_(0x1) << GCLK_GENCTRL_OOV_Pos)
#define GCLK_GENCTRL_OE_Pos 11
#define GCLK_GENCTRL_OE (_U_(0x1) << GCLK_GENCTRL_OE_Pos)
#define GCLK_GENCTRL_DIVSEL_Pos 12
#define GCLK_GENCTRL_DIVSEL (_U_(0x1) << GCLK_GENCTRL_DIVSEL_Pos)
#define GCLK_GENCTRL_RUNSTDBY_Pos 13
#define GCLK_GENCTRL_RUNSTDBY (_U_(0x1) << GCLK_GENCTRL_RUNSTDBY_Pos)
#define GCLK_GENCTRL_DIV_Pos 16
#define GCLK_GENCTRL_DIV_Msk (_U_(0xFFFF) << GCLK_GENCTRL_DIV_Pos)
#define GCLK_GENCTRL_DIV(value) (GCLK_GENCTRL_DIV_Msk & ((value) << GCLK_GENCTRL_DIV_Pos))
#define GCLK_GENCTRL_MASK _U_(0xFFFF3F0F)



typedef union {
  struct {
    uint32_t GEN:4;
    uint32_t :2;
    uint32_t CHEN:1;
    uint32_t WRTLOCK:1;
    uint32_t :24;
  } bit;
  uint32_t reg;
} GCLK_PCHCTRL_Type;


#define GCLK_PCHCTRL_OFFSET 0x80
#define GCLK_PCHCTRL_RESETVALUE _U_(0x00000000)

#define GCLK_PCHCTRL_GEN_Pos 0
#define GCLK_PCHCTRL_GEN_Msk (_U_(0xF) << GCLK_PCHCTRL_GEN_Pos)
#define GCLK_PCHCTRL_GEN(value) (GCLK_PCHCTRL_GEN_Msk & ((value) << GCLK_PCHCTRL_GEN_Pos))
#define GCLK_PCHCTRL_GEN_GCLK0_Val _U_(0x0)
#define GCLK_PCHCTRL_GEN_GCLK1_Val _U_(0x1)
#define GCLK_PCHCTRL_GEN_GCLK2_Val _U_(0x2)
#define GCLK_PCHCTRL_GEN_GCLK3_Val _U_(0x3)
#define GCLK_PCHCTRL_GEN_GCLK4_Val _U_(0x4)
#define GCLK_PCHCTRL_GEN_GCLK5_Val _U_(0x5)
#define GCLK_PCHCTRL_GEN_GCLK6_Val _U_(0x6)
#define GCLK_PCHCTRL_GEN_GCLK7_Val _U_(0x7)
#define GCLK_PCHCTRL_GEN_GCLK8_Val _U_(0x8)
#define GCLK_PCHCTRL_GEN_GCLK9_Val _U_(0x9)
#define GCLK_PCHCTRL_GEN_GCLK10_Val _U_(0xA)
#define GCLK_PCHCTRL_GEN_GCLK11_Val _U_(0xB)
#define GCLK_PCHCTRL_GEN_GCLK0 (GCLK_PCHCTRL_GEN_GCLK0_Val << GCLK_PCHCTRL_GEN_Pos)
#define GCLK_PCHCTRL_GEN_GCLK1 (GCLK_PCHCTRL_GEN_GCLK1_Val << GCLK_PCHCTRL_GEN_Pos)
#define GCLK_PCHCTRL_GEN_GCLK2 (GCLK_PCHCTRL_GEN_GCLK2_Val << GCLK_PCHCTRL_GEN_Pos)
#define GCLK_PCHCTRL_GEN_GCLK3 (GCLK_PCHCTRL_GEN_GCLK3_Val << GCLK_PCHCTRL_GEN_Pos)
#define GCLK_PCHCTRL_GEN_GCLK4 (GCLK_PCHCTRL_GEN_GCLK4_Val << GCLK_PCHCTRL_GEN_Pos)
#define GCLK_PCHCTRL_GEN_GCLK5 (GCLK_PCHCTRL_GEN_GCLK5_Val << GCLK_PCHCTRL_GEN_Pos)
#define GCLK_PCHCTRL_GEN_GCLK6 (GCLK_PCHCTRL_GEN_GCLK6_Val << GCLK_PCHCTRL_GEN_Pos)
#define GCLK_PCHCTRL_GEN_GCLK7 (GCLK_PCHCTRL_GEN_GCLK7_Val << GCLK_PCHCTRL_GEN_Pos)
#define GCLK_PCHCTRL_GEN_GCLK8 (GCLK_PCHCTRL_GEN_GCLK8_Val << GCLK_PCHCTRL_GEN_Pos)
#define GCLK_PCHCTRL_GEN_GCLK9 (GCLK_PCHCTRL_GEN_GCLK9_Val << GCLK_PCHCTRL_GEN_Pos)
#define GCLK_PCHCTRL_GEN_GCLK10 (GCLK_PCHCTRL_GEN_GCLK10_Val << GCLK_PCHCTRL_GEN_Pos)
#define GCLK_PCHCTRL_GEN_GCLK11 (GCLK_PCHCTRL_GEN_GCLK11_Val << GCLK_PCHCTRL_GEN_Pos)
#define GCLK_PCHCTRL_CHEN_Pos 6
#define GCLK_PCHCTRL_CHEN (_U_(0x1) << GCLK_PCHCTRL_CHEN_Pos)
#define GCLK_PCHCTRL_WRTLOCK_Pos 7
#define GCLK_PCHCTRL_WRTLOCK (_U_(0x1) << GCLK_PCHCTRL_WRTLOCK_Pos)
#define GCLK_PCHCTRL_MASK _U_(0x000000CF)



typedef struct {
  volatile GCLK_CTRLA_Type CTRLA;
       RoReg8 Reserved1[0x3];
  volatile const GCLK_SYNCBUSY_Type SYNCBUSY;
       RoReg8 Reserved2[0x18];
  volatile GCLK_GENCTRL_Type GENCTRL[12];
       RoReg8 Reserved3[0x30];
  volatile GCLK_PCHCTRL_Type PCHCTRL[48];
} Gclk;
# 593 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/hmatrixb.h" 1
# 31 "asf4/samd51/include/component/hmatrixb.h"
#define _SAMD51_HMATRIXB_COMPONENT_ 







#define HMATRIXB_I7638 
#define REV_HMATRIXB 0x214



typedef union {
  uint32_t reg;
} HMATRIXB_PRAS_Type;


#define HMATRIXB_PRAS_OFFSET 0x080
#define HMATRIXB_PRAS_RESETVALUE _U_(0x00000000)

#define HMATRIXB_PRAS_MASK _U_(0x00000000)



typedef union {
  uint32_t reg;
} HMATRIXB_PRBS_Type;


#define HMATRIXB_PRBS_OFFSET 0x084
#define HMATRIXB_PRBS_RESETVALUE _U_(0x00000000)

#define HMATRIXB_PRBS_MASK _U_(0x00000000)



typedef struct {
  volatile HMATRIXB_PRAS_Type PRAS;
  volatile HMATRIXB_PRBS_Type PRBS;
} HmatrixbPrs;




typedef struct {
       RoReg8 Reserved1[0x80];
       HmatrixbPrs Prs[16];
} Hmatrixb;
# 594 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/icm.h" 1
# 31 "asf4/samd51/include/component/icm.h"
#define _SAMD51_ICM_COMPONENT_ 







#define ICM_U2010 
#define REV_ICM 0x120



typedef union {
  struct {
    uint32_t WBDIS:1;
    uint32_t EOMDIS:1;
    uint32_t SLBDIS:1;
    uint32_t :1;
    uint32_t BBC:4;
    uint32_t ASCD:1;
    uint32_t DUALBUFF:1;
    uint32_t :2;
    uint32_t UIHASH:1;
    uint32_t UALGO:3;
    uint32_t HAPROT:6;
    uint32_t :2;
    uint32_t DAPROT:6;
    uint32_t :2;
  } bit;
  uint32_t reg;
} ICM_CFG_Type;


#define ICM_CFG_OFFSET 0x00
#define ICM_CFG_RESETVALUE _U_(0x00000000)

#define ICM_CFG_WBDIS_Pos 0
#define ICM_CFG_WBDIS (_U_(0x1) << ICM_CFG_WBDIS_Pos)
#define ICM_CFG_EOMDIS_Pos 1
#define ICM_CFG_EOMDIS (_U_(0x1) << ICM_CFG_EOMDIS_Pos)
#define ICM_CFG_SLBDIS_Pos 2
#define ICM_CFG_SLBDIS (_U_(0x1) << ICM_CFG_SLBDIS_Pos)
#define ICM_CFG_BBC_Pos 4
#define ICM_CFG_BBC_Msk (_U_(0xF) << ICM_CFG_BBC_Pos)
#define ICM_CFG_BBC(value) (ICM_CFG_BBC_Msk & ((value) << ICM_CFG_BBC_Pos))
#define ICM_CFG_ASCD_Pos 8
#define ICM_CFG_ASCD (_U_(0x1) << ICM_CFG_ASCD_Pos)
#define ICM_CFG_DUALBUFF_Pos 9
#define ICM_CFG_DUALBUFF (_U_(0x1) << ICM_CFG_DUALBUFF_Pos)
#define ICM_CFG_UIHASH_Pos 12
#define ICM_CFG_UIHASH (_U_(0x1) << ICM_CFG_UIHASH_Pos)
#define ICM_CFG_UALGO_Pos 13
#define ICM_CFG_UALGO_Msk (_U_(0x7) << ICM_CFG_UALGO_Pos)
#define ICM_CFG_UALGO(value) (ICM_CFG_UALGO_Msk & ((value) << ICM_CFG_UALGO_Pos))
#define ICM_CFG_UALGO_SHA1_Val _U_(0x0)
#define ICM_CFG_UALGO_SHA256_Val _U_(0x1)
#define ICM_CFG_UALGO_SHA224_Val _U_(0x4)
#define ICM_CFG_UALGO_SHA1 (ICM_CFG_UALGO_SHA1_Val << ICM_CFG_UALGO_Pos)
#define ICM_CFG_UALGO_SHA256 (ICM_CFG_UALGO_SHA256_Val << ICM_CFG_UALGO_Pos)
#define ICM_CFG_UALGO_SHA224 (ICM_CFG_UALGO_SHA224_Val << ICM_CFG_UALGO_Pos)
#define ICM_CFG_HAPROT_Pos 16
#define ICM_CFG_HAPROT_Msk (_U_(0x3F) << ICM_CFG_HAPROT_Pos)
#define ICM_CFG_HAPROT(value) (ICM_CFG_HAPROT_Msk & ((value) << ICM_CFG_HAPROT_Pos))
#define ICM_CFG_DAPROT_Pos 24
#define ICM_CFG_DAPROT_Msk (_U_(0x3F) << ICM_CFG_DAPROT_Pos)
#define ICM_CFG_DAPROT(value) (ICM_CFG_DAPROT_Msk & ((value) << ICM_CFG_DAPROT_Pos))
#define ICM_CFG_MASK _U_(0x3F3FF3F7)



typedef union {
  struct {
    uint32_t ENABLE:1;
    uint32_t DISABLE:1;
    uint32_t SWRST:1;
    uint32_t :1;
    uint32_t REHASH:4;
    uint32_t RMDIS:4;
    uint32_t RMEN:4;
    uint32_t :16;
  } bit;
  uint32_t reg;
} ICM_CTRL_Type;


#define ICM_CTRL_OFFSET 0x04

#define ICM_CTRL_ENABLE_Pos 0
#define ICM_CTRL_ENABLE (_U_(0x1) << ICM_CTRL_ENABLE_Pos)
#define ICM_CTRL_DISABLE_Pos 1
#define ICM_CTRL_DISABLE (_U_(0x1) << ICM_CTRL_DISABLE_Pos)
#define ICM_CTRL_SWRST_Pos 2
#define ICM_CTRL_SWRST (_U_(0x1) << ICM_CTRL_SWRST_Pos)
#define ICM_CTRL_REHASH_Pos 4
#define ICM_CTRL_REHASH_Msk (_U_(0xF) << ICM_CTRL_REHASH_Pos)
#define ICM_CTRL_REHASH(value) (ICM_CTRL_REHASH_Msk & ((value) << ICM_CTRL_REHASH_Pos))
#define ICM_CTRL_RMDIS_Pos 8
#define ICM_CTRL_RMDIS_Msk (_U_(0xF) << ICM_CTRL_RMDIS_Pos)
#define ICM_CTRL_RMDIS(value) (ICM_CTRL_RMDIS_Msk & ((value) << ICM_CTRL_RMDIS_Pos))
#define ICM_CTRL_RMEN_Pos 12
#define ICM_CTRL_RMEN_Msk (_U_(0xF) << ICM_CTRL_RMEN_Pos)
#define ICM_CTRL_RMEN(value) (ICM_CTRL_RMEN_Msk & ((value) << ICM_CTRL_RMEN_Pos))
#define ICM_CTRL_MASK _U_(0x0000FFF7)



typedef union {
  struct {
    uint32_t ENABLE:1;
    uint32_t :7;
    uint32_t RAWRMDIS:4;
    uint32_t RMDIS:4;
    uint32_t :16;
  } bit;
  uint32_t reg;
} ICM_SR_Type;


#define ICM_SR_OFFSET 0x08
#define ICM_SR_RESETVALUE _U_(0x00000000)

#define ICM_SR_ENABLE_Pos 0
#define ICM_SR_ENABLE (_U_(0x1) << ICM_SR_ENABLE_Pos)
#define ICM_SR_RAWRMDIS_Pos 8
#define ICM_SR_RAWRMDIS_Msk (_U_(0xF) << ICM_SR_RAWRMDIS_Pos)
#define ICM_SR_RAWRMDIS(value) (ICM_SR_RAWRMDIS_Msk & ((value) << ICM_SR_RAWRMDIS_Pos))
#define ICM_SR_RMDIS_Pos 12
#define ICM_SR_RMDIS_Msk (_U_(0xF) << ICM_SR_RMDIS_Pos)
#define ICM_SR_RMDIS(value) (ICM_SR_RMDIS_Msk & ((value) << ICM_SR_RMDIS_Pos))
#define ICM_SR_MASK _U_(0x0000FF01)



typedef union {
  struct {
    uint32_t RHC:4;
    uint32_t RDM:4;
    uint32_t RBE:4;
    uint32_t RWC:4;
    uint32_t REC:4;
    uint32_t RSU:4;
    uint32_t URAD:1;
    uint32_t :7;
  } bit;
  uint32_t reg;
} ICM_IER_Type;


#define ICM_IER_OFFSET 0x10

#define ICM_IER_RHC_Pos 0
#define ICM_IER_RHC_Msk (_U_(0xF) << ICM_IER_RHC_Pos)
#define ICM_IER_RHC(value) (ICM_IER_RHC_Msk & ((value) << ICM_IER_RHC_Pos))
#define ICM_IER_RDM_Pos 4
#define ICM_IER_RDM_Msk (_U_(0xF) << ICM_IER_RDM_Pos)
#define ICM_IER_RDM(value) (ICM_IER_RDM_Msk & ((value) << ICM_IER_RDM_Pos))
#define ICM_IER_RBE_Pos 8
#define ICM_IER_RBE_Msk (_U_(0xF) << ICM_IER_RBE_Pos)
#define ICM_IER_RBE(value) (ICM_IER_RBE_Msk & ((value) << ICM_IER_RBE_Pos))
#define ICM_IER_RWC_Pos 12
#define ICM_IER_RWC_Msk (_U_(0xF) << ICM_IER_RWC_Pos)
#define ICM_IER_RWC(value) (ICM_IER_RWC_Msk & ((value) << ICM_IER_RWC_Pos))
#define ICM_IER_REC_Pos 16
#define ICM_IER_REC_Msk (_U_(0xF) << ICM_IER_REC_Pos)
#define ICM_IER_REC(value) (ICM_IER_REC_Msk & ((value) << ICM_IER_REC_Pos))
#define ICM_IER_RSU_Pos 20
#define ICM_IER_RSU_Msk (_U_(0xF) << ICM_IER_RSU_Pos)
#define ICM_IER_RSU(value) (ICM_IER_RSU_Msk & ((value) << ICM_IER_RSU_Pos))
#define ICM_IER_URAD_Pos 24
#define ICM_IER_URAD (_U_(0x1) << ICM_IER_URAD_Pos)
#define ICM_IER_MASK _U_(0x01FFFFFF)



typedef union {
  struct {
    uint32_t RHC:4;
    uint32_t RDM:4;
    uint32_t RBE:4;
    uint32_t RWC:4;
    uint32_t REC:4;
    uint32_t RSU:4;
    uint32_t URAD:1;
    uint32_t :7;
  } bit;
  uint32_t reg;
} ICM_IDR_Type;


#define ICM_IDR_OFFSET 0x14
#define ICM_IDR_RESETVALUE _U_(0x00000000)

#define ICM_IDR_RHC_Pos 0
#define ICM_IDR_RHC_Msk (_U_(0xF) << ICM_IDR_RHC_Pos)
#define ICM_IDR_RHC(value) (ICM_IDR_RHC_Msk & ((value) << ICM_IDR_RHC_Pos))
#define ICM_IDR_RDM_Pos 4
#define ICM_IDR_RDM_Msk (_U_(0xF) << ICM_IDR_RDM_Pos)
#define ICM_IDR_RDM(value) (ICM_IDR_RDM_Msk & ((value) << ICM_IDR_RDM_Pos))
#define ICM_IDR_RBE_Pos 8
#define ICM_IDR_RBE_Msk (_U_(0xF) << ICM_IDR_RBE_Pos)
#define ICM_IDR_RBE(value) (ICM_IDR_RBE_Msk & ((value) << ICM_IDR_RBE_Pos))
#define ICM_IDR_RWC_Pos 12
#define ICM_IDR_RWC_Msk (_U_(0xF) << ICM_IDR_RWC_Pos)
#define ICM_IDR_RWC(value) (ICM_IDR_RWC_Msk & ((value) << ICM_IDR_RWC_Pos))
#define ICM_IDR_REC_Pos 16
#define ICM_IDR_REC_Msk (_U_(0xF) << ICM_IDR_REC_Pos)
#define ICM_IDR_REC(value) (ICM_IDR_REC_Msk & ((value) << ICM_IDR_REC_Pos))
#define ICM_IDR_RSU_Pos 20
#define ICM_IDR_RSU_Msk (_U_(0xF) << ICM_IDR_RSU_Pos)
#define ICM_IDR_RSU(value) (ICM_IDR_RSU_Msk & ((value) << ICM_IDR_RSU_Pos))
#define ICM_IDR_URAD_Pos 24
#define ICM_IDR_URAD (_U_(0x1) << ICM_IDR_URAD_Pos)
#define ICM_IDR_MASK _U_(0x01FFFFFF)



typedef union {
  struct {
    uint32_t RHC:4;
    uint32_t RDM:4;
    uint32_t RBE:4;
    uint32_t RWC:4;
    uint32_t REC:4;
    uint32_t RSU:4;
    uint32_t URAD:1;
    uint32_t :7;
  } bit;
  uint32_t reg;
} ICM_IMR_Type;


#define ICM_IMR_OFFSET 0x18
#define ICM_IMR_RESETVALUE _U_(0x00000000)

#define ICM_IMR_RHC_Pos 0
#define ICM_IMR_RHC_Msk (_U_(0xF) << ICM_IMR_RHC_Pos)
#define ICM_IMR_RHC(value) (ICM_IMR_RHC_Msk & ((value) << ICM_IMR_RHC_Pos))
#define ICM_IMR_RDM_Pos 4
#define ICM_IMR_RDM_Msk (_U_(0xF) << ICM_IMR_RDM_Pos)
#define ICM_IMR_RDM(value) (ICM_IMR_RDM_Msk & ((value) << ICM_IMR_RDM_Pos))
#define ICM_IMR_RBE_Pos 8
#define ICM_IMR_RBE_Msk (_U_(0xF) << ICM_IMR_RBE_Pos)
#define ICM_IMR_RBE(value) (ICM_IMR_RBE_Msk & ((value) << ICM_IMR_RBE_Pos))
#define ICM_IMR_RWC_Pos 12
#define ICM_IMR_RWC_Msk (_U_(0xF) << ICM_IMR_RWC_Pos)
#define ICM_IMR_RWC(value) (ICM_IMR_RWC_Msk & ((value) << ICM_IMR_RWC_Pos))
#define ICM_IMR_REC_Pos 16
#define ICM_IMR_REC_Msk (_U_(0xF) << ICM_IMR_REC_Pos)
#define ICM_IMR_REC(value) (ICM_IMR_REC_Msk & ((value) << ICM_IMR_REC_Pos))
#define ICM_IMR_RSU_Pos 20
#define ICM_IMR_RSU_Msk (_U_(0xF) << ICM_IMR_RSU_Pos)
#define ICM_IMR_RSU(value) (ICM_IMR_RSU_Msk & ((value) << ICM_IMR_RSU_Pos))
#define ICM_IMR_URAD_Pos 24
#define ICM_IMR_URAD (_U_(0x1) << ICM_IMR_URAD_Pos)
#define ICM_IMR_MASK _U_(0x01FFFFFF)



typedef union {
  struct {
    uint32_t RHC:4;
    uint32_t RDM:4;
    uint32_t RBE:4;
    uint32_t RWC:4;
    uint32_t REC:4;
    uint32_t RSU:4;
    uint32_t URAD:1;
    uint32_t :7;
  } bit;
  uint32_t reg;
} ICM_ISR_Type;


#define ICM_ISR_OFFSET 0x1C
#define ICM_ISR_RESETVALUE _U_(0x00000000)

#define ICM_ISR_RHC_Pos 0
#define ICM_ISR_RHC_Msk (_U_(0xF) << ICM_ISR_RHC_Pos)
#define ICM_ISR_RHC(value) (ICM_ISR_RHC_Msk & ((value) << ICM_ISR_RHC_Pos))
#define ICM_ISR_RDM_Pos 4
#define ICM_ISR_RDM_Msk (_U_(0xF) << ICM_ISR_RDM_Pos)
#define ICM_ISR_RDM(value) (ICM_ISR_RDM_Msk & ((value) << ICM_ISR_RDM_Pos))
#define ICM_ISR_RBE_Pos 8
#define ICM_ISR_RBE_Msk (_U_(0xF) << ICM_ISR_RBE_Pos)
#define ICM_ISR_RBE(value) (ICM_ISR_RBE_Msk & ((value) << ICM_ISR_RBE_Pos))
#define ICM_ISR_RWC_Pos 12
#define ICM_ISR_RWC_Msk (_U_(0xF) << ICM_ISR_RWC_Pos)
#define ICM_ISR_RWC(value) (ICM_ISR_RWC_Msk & ((value) << ICM_ISR_RWC_Pos))
#define ICM_ISR_REC_Pos 16
#define ICM_ISR_REC_Msk (_U_(0xF) << ICM_ISR_REC_Pos)
#define ICM_ISR_REC(value) (ICM_ISR_REC_Msk & ((value) << ICM_ISR_REC_Pos))
#define ICM_ISR_RSU_Pos 20
#define ICM_ISR_RSU_Msk (_U_(0xF) << ICM_ISR_RSU_Pos)
#define ICM_ISR_RSU(value) (ICM_ISR_RSU_Msk & ((value) << ICM_ISR_RSU_Pos))
#define ICM_ISR_URAD_Pos 24
#define ICM_ISR_URAD (_U_(0x1) << ICM_ISR_URAD_Pos)
#define ICM_ISR_MASK _U_(0x01FFFFFF)



typedef union {
  struct {
    uint32_t URAT:3;
    uint32_t :29;
  } bit;
  uint32_t reg;
} ICM_UASR_Type;


#define ICM_UASR_OFFSET 0x20
#define ICM_UASR_RESETVALUE _U_(0x00000000)

#define ICM_UASR_URAT_Pos 0
#define ICM_UASR_URAT_Msk (_U_(0x7) << ICM_UASR_URAT_Pos)
#define ICM_UASR_URAT(value) (ICM_UASR_URAT_Msk & ((value) << ICM_UASR_URAT_Pos))
#define ICM_UASR_URAT_UNSPEC_STRUCT_MEMBER_Val _U_(0x0)
#define ICM_UASR_URAT_CFG_MODIFIED_Val _U_(0x1)
#define ICM_UASR_URAT_DSCR_MODIFIED_Val _U_(0x2)
#define ICM_UASR_URAT_HASH_MODIFIED_Val _U_(0x3)
#define ICM_UASR_URAT_READ_ACCESS_Val _U_(0x4)
#define ICM_UASR_URAT_UNSPEC_STRUCT_MEMBER (ICM_UASR_URAT_UNSPEC_STRUCT_MEMBER_Val << ICM_UASR_URAT_Pos)
#define ICM_UASR_URAT_CFG_MODIFIED (ICM_UASR_URAT_CFG_MODIFIED_Val << ICM_UASR_URAT_Pos)
#define ICM_UASR_URAT_DSCR_MODIFIED (ICM_UASR_URAT_DSCR_MODIFIED_Val << ICM_UASR_URAT_Pos)
#define ICM_UASR_URAT_HASH_MODIFIED (ICM_UASR_URAT_HASH_MODIFIED_Val << ICM_UASR_URAT_Pos)
#define ICM_UASR_URAT_READ_ACCESS (ICM_UASR_URAT_READ_ACCESS_Val << ICM_UASR_URAT_Pos)
#define ICM_UASR_MASK _U_(0x00000007)



typedef union {
  struct {
    uint32_t :6;
    uint32_t DASA:26;
  } bit;
  uint32_t reg;
} ICM_DSCR_Type;


#define ICM_DSCR_OFFSET 0x30
#define ICM_DSCR_RESETVALUE _U_(0x00000000)

#define ICM_DSCR_DASA_Pos 6
#define ICM_DSCR_DASA_Msk (_U_(0x3FFFFFF) << ICM_DSCR_DASA_Pos)
#define ICM_DSCR_DASA(value) (ICM_DSCR_DASA_Msk & ((value) << ICM_DSCR_DASA_Pos))
#define ICM_DSCR_MASK _U_(0xFFFFFFC0)



typedef union {
  struct {
    uint32_t :7;
    uint32_t HASA:25;
  } bit;
  uint32_t reg;
} ICM_HASH_Type;


#define ICM_HASH_OFFSET 0x34
#define ICM_HASH_RESETVALUE _U_(0x00000000)

#define ICM_HASH_HASA_Pos 7
#define ICM_HASH_HASA_Msk (_U_(0x1FFFFFF) << ICM_HASH_HASA_Pos)
#define ICM_HASH_HASA(value) (ICM_HASH_HASA_Msk & ((value) << ICM_HASH_HASA_Pos))
#define ICM_HASH_MASK _U_(0xFFFFFF80)



typedef union {
  struct {
    uint32_t VAL:32;
  } bit;
  uint32_t reg;
} ICM_UIHVAL_Type;


#define ICM_UIHVAL_OFFSET 0x38
#define ICM_UIHVAL_RESETVALUE _U_(0x00000000)

#define ICM_UIHVAL_VAL_Pos 0
#define ICM_UIHVAL_VAL_Msk (_U_(0xFFFFFFFF) << ICM_UIHVAL_VAL_Pos)
#define ICM_UIHVAL_VAL(value) (ICM_UIHVAL_VAL_Msk & ((value) << ICM_UIHVAL_VAL_Pos))
#define ICM_UIHVAL_MASK _U_(0xFFFFFFFF)



typedef union {
  uint32_t reg;
} ICM_RADDR_Type;


#define ICM_RADDR_OFFSET 0x00
#define ICM_RADDR_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t CDWBN:1;
    uint32_t WRAP:1;
    uint32_t EOM:1;
    uint32_t :1;
    uint32_t RHIEN:1;
    uint32_t DMIEN:1;
    uint32_t BEIEN:1;
    uint32_t WCIEN:1;
    uint32_t ECIEN:1;
    uint32_t SUIEN:1;
    uint32_t PROCDLY:1;
    uint32_t :1;
    uint32_t ALGO:3;
    uint32_t :9;
    uint32_t MRPROT:6;
    uint32_t :2;
  } bit;
  uint32_t reg;
} ICM_RCFG_Type;


#define ICM_RCFG_OFFSET 0x04
#define ICM_RCFG_RESETVALUE _U_(0x00000000)

#define ICM_RCFG_CDWBN_Pos 0
#define ICM_RCFG_CDWBN (_U_(0x1) << ICM_RCFG_CDWBN_Pos)
#define ICM_RCFG_CDWBN_WRBA_Val _U_(0x0)
#define ICM_RCFG_CDWBN_COMP_Val _U_(0x1)
#define ICM_RCFG_CDWBN_WRBA (ICM_RCFG_CDWBN_WRBA_Val << ICM_RCFG_CDWBN_Pos)
#define ICM_RCFG_CDWBN_COMP (ICM_RCFG_CDWBN_COMP_Val << ICM_RCFG_CDWBN_Pos)
#define ICM_RCFG_WRAP_Pos 1
#define ICM_RCFG_WRAP (_U_(0x1) << ICM_RCFG_WRAP_Pos)
#define ICM_RCFG_WRAP_NO_Val _U_(0x0)
#define ICM_RCFG_WRAP_YES_Val _U_(0x1)
#define ICM_RCFG_WRAP_NO (ICM_RCFG_WRAP_NO_Val << ICM_RCFG_WRAP_Pos)
#define ICM_RCFG_WRAP_YES (ICM_RCFG_WRAP_YES_Val << ICM_RCFG_WRAP_Pos)
#define ICM_RCFG_EOM_Pos 2
#define ICM_RCFG_EOM (_U_(0x1) << ICM_RCFG_EOM_Pos)
#define ICM_RCFG_EOM_NO_Val _U_(0x0)
#define ICM_RCFG_EOM_YES_Val _U_(0x1)
#define ICM_RCFG_EOM_NO (ICM_RCFG_EOM_NO_Val << ICM_RCFG_EOM_Pos)
#define ICM_RCFG_EOM_YES (ICM_RCFG_EOM_YES_Val << ICM_RCFG_EOM_Pos)
#define ICM_RCFG_RHIEN_Pos 4
#define ICM_RCFG_RHIEN (_U_(0x1) << ICM_RCFG_RHIEN_Pos)
#define ICM_RCFG_RHIEN_EN_Val _U_(0x0)
#define ICM_RCFG_RHIEN_DIS_Val _U_(0x1)
#define ICM_RCFG_RHIEN_EN (ICM_RCFG_RHIEN_EN_Val << ICM_RCFG_RHIEN_Pos)
#define ICM_RCFG_RHIEN_DIS (ICM_RCFG_RHIEN_DIS_Val << ICM_RCFG_RHIEN_Pos)
#define ICM_RCFG_DMIEN_Pos 5
#define ICM_RCFG_DMIEN (_U_(0x1) << ICM_RCFG_DMIEN_Pos)
#define ICM_RCFG_DMIEN_EN_Val _U_(0x0)
#define ICM_RCFG_DMIEN_DIS_Val _U_(0x1)
#define ICM_RCFG_DMIEN_EN (ICM_RCFG_DMIEN_EN_Val << ICM_RCFG_DMIEN_Pos)
#define ICM_RCFG_DMIEN_DIS (ICM_RCFG_DMIEN_DIS_Val << ICM_RCFG_DMIEN_Pos)
#define ICM_RCFG_BEIEN_Pos 6
#define ICM_RCFG_BEIEN (_U_(0x1) << ICM_RCFG_BEIEN_Pos)
#define ICM_RCFG_BEIEN_EN_Val _U_(0x0)
#define ICM_RCFG_BEIEN_DIS_Val _U_(0x1)
#define ICM_RCFG_BEIEN_EN (ICM_RCFG_BEIEN_EN_Val << ICM_RCFG_BEIEN_Pos)
#define ICM_RCFG_BEIEN_DIS (ICM_RCFG_BEIEN_DIS_Val << ICM_RCFG_BEIEN_Pos)
#define ICM_RCFG_WCIEN_Pos 7
#define ICM_RCFG_WCIEN (_U_(0x1) << ICM_RCFG_WCIEN_Pos)
#define ICM_RCFG_WCIEN_EN_Val _U_(0x0)
#define ICM_RCFG_WCIEN_DIS_Val _U_(0x1)
#define ICM_RCFG_WCIEN_EN (ICM_RCFG_WCIEN_EN_Val << ICM_RCFG_WCIEN_Pos)
#define ICM_RCFG_WCIEN_DIS (ICM_RCFG_WCIEN_DIS_Val << ICM_RCFG_WCIEN_Pos)
#define ICM_RCFG_ECIEN_Pos 8
#define ICM_RCFG_ECIEN (_U_(0x1) << ICM_RCFG_ECIEN_Pos)
#define ICM_RCFG_ECIEN_EN_Val _U_(0x0)
#define ICM_RCFG_ECIEN_DIS_Val _U_(0x1)
#define ICM_RCFG_ECIEN_EN (ICM_RCFG_ECIEN_EN_Val << ICM_RCFG_ECIEN_Pos)
#define ICM_RCFG_ECIEN_DIS (ICM_RCFG_ECIEN_DIS_Val << ICM_RCFG_ECIEN_Pos)
#define ICM_RCFG_SUIEN_Pos 9
#define ICM_RCFG_SUIEN (_U_(0x1) << ICM_RCFG_SUIEN_Pos)
#define ICM_RCFG_SUIEN_EN_Val _U_(0x0)
#define ICM_RCFG_SUIEN_DIS_Val _U_(0x1)
#define ICM_RCFG_SUIEN_EN (ICM_RCFG_SUIEN_EN_Val << ICM_RCFG_SUIEN_Pos)
#define ICM_RCFG_SUIEN_DIS (ICM_RCFG_SUIEN_DIS_Val << ICM_RCFG_SUIEN_Pos)
#define ICM_RCFG_PROCDLY_Pos 10
#define ICM_RCFG_PROCDLY (_U_(0x1) << ICM_RCFG_PROCDLY_Pos)
#define ICM_RCFG_PROCDLY_SHORT_Val _U_(0x0)
#define ICM_RCFG_PROCDLY_LONG_Val _U_(0x1)
#define ICM_RCFG_PROCDLY_SHORT (ICM_RCFG_PROCDLY_SHORT_Val << ICM_RCFG_PROCDLY_Pos)
#define ICM_RCFG_PROCDLY_LONG (ICM_RCFG_PROCDLY_LONG_Val << ICM_RCFG_PROCDLY_Pos)
#define ICM_RCFG_ALGO_Pos 12
#define ICM_RCFG_ALGO_Msk (_U_(0x7) << ICM_RCFG_ALGO_Pos)
#define ICM_RCFG_ALGO(value) (ICM_RCFG_ALGO_Msk & ((value) << ICM_RCFG_ALGO_Pos))
#define ICM_RCFG_MRPROT_Pos 24
#define ICM_RCFG_MRPROT_Msk (_U_(0x3F) << ICM_RCFG_MRPROT_Pos)
#define ICM_RCFG_MRPROT(value) (ICM_RCFG_MRPROT_Msk & ((value) << ICM_RCFG_MRPROT_Pos))
#define ICM_RCFG_MASK _U_(0x3F0077F7)



typedef union {
  struct {
    uint32_t TRSIZE:16;
    uint32_t :16;
  } bit;
  uint32_t reg;
} ICM_RCTRL_Type;


#define ICM_RCTRL_OFFSET 0x08

#define ICM_RCTRL_TRSIZE_Pos 0
#define ICM_RCTRL_TRSIZE_Msk (_U_(0xFFFF) << ICM_RCTRL_TRSIZE_Pos)
#define ICM_RCTRL_TRSIZE(value) (ICM_RCTRL_TRSIZE_Msk & ((value) << ICM_RCTRL_TRSIZE_Pos))
#define ICM_RCTRL_MASK _U_(0x0000FFFF)



typedef union {
  uint32_t reg;
} ICM_RNEXT_Type;


#define ICM_RNEXT_OFFSET 0x0C
#define ICM_RNEXT_MASK _U_(0xFFFFFFFF)



typedef struct {
  volatile ICM_CFG_Type CFG;
  volatile ICM_CTRL_Type CTRL;
  volatile const ICM_SR_Type SR;
       RoReg8 Reserved1[0x4];
  volatile ICM_IER_Type IER;
  volatile ICM_IDR_Type IDR;
  volatile const ICM_IMR_Type IMR;
  volatile const ICM_ISR_Type ISR;
  volatile const ICM_UASR_Type UASR;
       RoReg8 Reserved2[0xC];
  volatile ICM_DSCR_Type DSCR;
  volatile ICM_HASH_Type HASH;
  volatile ICM_UIHVAL_Type UIHVAL[8];
} Icm;




typedef struct {
  volatile ICM_RADDR_Type RADDR;
  volatile ICM_RCFG_Type RCFG;
  volatile ICM_RCTRL_Type RCTRL;
  volatile ICM_RNEXT_Type RNEXT;
} IcmDescriptor;


#define SECTION_ICM_DESCRIPTOR 
# 595 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/i2s.h" 1
# 31 "asf4/samd51/include/component/i2s.h"
#define _SAMD51_I2S_COMPONENT_ 







#define I2S_U2224 
#define REV_I2S 0x200



typedef union {
  struct {
    uint8_t SWRST:1;
    uint8_t ENABLE:1;
    uint8_t CKEN0:1;
    uint8_t CKEN1:1;
    uint8_t TXEN:1;
    uint8_t RXEN:1;
    uint8_t :2;
  } bit;
  struct {
    uint8_t :2;
    uint8_t CKEN:2;
    uint8_t :4;
  } vec;
  uint8_t reg;
} I2S_CTRLA_Type;


#define I2S_CTRLA_OFFSET 0x00
#define I2S_CTRLA_RESETVALUE _U_(0x00)

#define I2S_CTRLA_SWRST_Pos 0
#define I2S_CTRLA_SWRST (_U_(0x1) << I2S_CTRLA_SWRST_Pos)
#define I2S_CTRLA_ENABLE_Pos 1
#define I2S_CTRLA_ENABLE (_U_(0x1) << I2S_CTRLA_ENABLE_Pos)
#define I2S_CTRLA_CKEN0_Pos 2
#define I2S_CTRLA_CKEN0 (_U_(1) << I2S_CTRLA_CKEN0_Pos)
#define I2S_CTRLA_CKEN1_Pos 3
#define I2S_CTRLA_CKEN1 (_U_(1) << I2S_CTRLA_CKEN1_Pos)
#define I2S_CTRLA_CKEN_Pos 2
#define I2S_CTRLA_CKEN_Msk (_U_(0x3) << I2S_CTRLA_CKEN_Pos)
#define I2S_CTRLA_CKEN(value) (I2S_CTRLA_CKEN_Msk & ((value) << I2S_CTRLA_CKEN_Pos))
#define I2S_CTRLA_TXEN_Pos 4
#define I2S_CTRLA_TXEN (_U_(0x1) << I2S_CTRLA_TXEN_Pos)
#define I2S_CTRLA_RXEN_Pos 5
#define I2S_CTRLA_RXEN (_U_(0x1) << I2S_CTRLA_RXEN_Pos)
#define I2S_CTRLA_MASK _U_(0x3F)



typedef union {
  struct {
    uint32_t SLOTSIZE:2;
    uint32_t NBSLOTS:3;
    uint32_t FSWIDTH:2;
    uint32_t BITDELAY:1;
    uint32_t FSSEL:1;
    uint32_t FSINV:1;
    uint32_t FSOUTINV:1;
    uint32_t SCKSEL:1;
    uint32_t SCKOUTINV:1;
    uint32_t MCKSEL:1;
    uint32_t MCKEN:1;
    uint32_t MCKOUTINV:1;
    uint32_t MCKDIV:6;
    uint32_t :2;
    uint32_t MCKOUTDIV:6;
    uint32_t :2;
  } bit;
  uint32_t reg;
} I2S_CLKCTRL_Type;


#define I2S_CLKCTRL_OFFSET 0x04
#define I2S_CLKCTRL_RESETVALUE _U_(0x00000000)

#define I2S_CLKCTRL_SLOTSIZE_Pos 0
#define I2S_CLKCTRL_SLOTSIZE_Msk (_U_(0x3) << I2S_CLKCTRL_SLOTSIZE_Pos)
#define I2S_CLKCTRL_SLOTSIZE(value) (I2S_CLKCTRL_SLOTSIZE_Msk & ((value) << I2S_CLKCTRL_SLOTSIZE_Pos))
#define I2S_CLKCTRL_SLOTSIZE_8_Val _U_(0x0)
#define I2S_CLKCTRL_SLOTSIZE_16_Val _U_(0x1)
#define I2S_CLKCTRL_SLOTSIZE_24_Val _U_(0x2)
#define I2S_CLKCTRL_SLOTSIZE_32_Val _U_(0x3)
#define I2S_CLKCTRL_SLOTSIZE_8 (I2S_CLKCTRL_SLOTSIZE_8_Val << I2S_CLKCTRL_SLOTSIZE_Pos)
#define I2S_CLKCTRL_SLOTSIZE_16 (I2S_CLKCTRL_SLOTSIZE_16_Val << I2S_CLKCTRL_SLOTSIZE_Pos)
#define I2S_CLKCTRL_SLOTSIZE_24 (I2S_CLKCTRL_SLOTSIZE_24_Val << I2S_CLKCTRL_SLOTSIZE_Pos)
#define I2S_CLKCTRL_SLOTSIZE_32 (I2S_CLKCTRL_SLOTSIZE_32_Val << I2S_CLKCTRL_SLOTSIZE_Pos)
#define I2S_CLKCTRL_NBSLOTS_Pos 2
#define I2S_CLKCTRL_NBSLOTS_Msk (_U_(0x7) << I2S_CLKCTRL_NBSLOTS_Pos)
#define I2S_CLKCTRL_NBSLOTS(value) (I2S_CLKCTRL_NBSLOTS_Msk & ((value) << I2S_CLKCTRL_NBSLOTS_Pos))
#define I2S_CLKCTRL_FSWIDTH_Pos 5
#define I2S_CLKCTRL_FSWIDTH_Msk (_U_(0x3) << I2S_CLKCTRL_FSWIDTH_Pos)
#define I2S_CLKCTRL_FSWIDTH(value) (I2S_CLKCTRL_FSWIDTH_Msk & ((value) << I2S_CLKCTRL_FSWIDTH_Pos))
#define I2S_CLKCTRL_FSWIDTH_SLOT_Val _U_(0x0)
#define I2S_CLKCTRL_FSWIDTH_HALF_Val _U_(0x1)
#define I2S_CLKCTRL_FSWIDTH_BIT_Val _U_(0x2)
#define I2S_CLKCTRL_FSWIDTH_BURST_Val _U_(0x3)
#define I2S_CLKCTRL_FSWIDTH_SLOT (I2S_CLKCTRL_FSWIDTH_SLOT_Val << I2S_CLKCTRL_FSWIDTH_Pos)
#define I2S_CLKCTRL_FSWIDTH_HALF (I2S_CLKCTRL_FSWIDTH_HALF_Val << I2S_CLKCTRL_FSWIDTH_Pos)
#define I2S_CLKCTRL_FSWIDTH_BIT (I2S_CLKCTRL_FSWIDTH_BIT_Val << I2S_CLKCTRL_FSWIDTH_Pos)
#define I2S_CLKCTRL_FSWIDTH_BURST (I2S_CLKCTRL_FSWIDTH_BURST_Val << I2S_CLKCTRL_FSWIDTH_Pos)
#define I2S_CLKCTRL_BITDELAY_Pos 7
#define I2S_CLKCTRL_BITDELAY (_U_(0x1) << I2S_CLKCTRL_BITDELAY_Pos)
#define I2S_CLKCTRL_BITDELAY_LJ_Val _U_(0x0)
#define I2S_CLKCTRL_BITDELAY_I2S_Val _U_(0x1)
#define I2S_CLKCTRL_BITDELAY_LJ (I2S_CLKCTRL_BITDELAY_LJ_Val << I2S_CLKCTRL_BITDELAY_Pos)
#define I2S_CLKCTRL_BITDELAY_I2S (I2S_CLKCTRL_BITDELAY_I2S_Val << I2S_CLKCTRL_BITDELAY_Pos)
#define I2S_CLKCTRL_FSSEL_Pos 8
#define I2S_CLKCTRL_FSSEL (_U_(0x1) << I2S_CLKCTRL_FSSEL_Pos)
#define I2S_CLKCTRL_FSSEL_SCKDIV_Val _U_(0x0)
#define I2S_CLKCTRL_FSSEL_FSPIN_Val _U_(0x1)
#define I2S_CLKCTRL_FSSEL_SCKDIV (I2S_CLKCTRL_FSSEL_SCKDIV_Val << I2S_CLKCTRL_FSSEL_Pos)
#define I2S_CLKCTRL_FSSEL_FSPIN (I2S_CLKCTRL_FSSEL_FSPIN_Val << I2S_CLKCTRL_FSSEL_Pos)
#define I2S_CLKCTRL_FSINV_Pos 9
#define I2S_CLKCTRL_FSINV (_U_(0x1) << I2S_CLKCTRL_FSINV_Pos)
#define I2S_CLKCTRL_FSOUTINV_Pos 10
#define I2S_CLKCTRL_FSOUTINV (_U_(0x1) << I2S_CLKCTRL_FSOUTINV_Pos)
#define I2S_CLKCTRL_SCKSEL_Pos 11
#define I2S_CLKCTRL_SCKSEL (_U_(0x1) << I2S_CLKCTRL_SCKSEL_Pos)
#define I2S_CLKCTRL_SCKSEL_MCKDIV_Val _U_(0x0)
#define I2S_CLKCTRL_SCKSEL_SCKPIN_Val _U_(0x1)
#define I2S_CLKCTRL_SCKSEL_MCKDIV (I2S_CLKCTRL_SCKSEL_MCKDIV_Val << I2S_CLKCTRL_SCKSEL_Pos)
#define I2S_CLKCTRL_SCKSEL_SCKPIN (I2S_CLKCTRL_SCKSEL_SCKPIN_Val << I2S_CLKCTRL_SCKSEL_Pos)
#define I2S_CLKCTRL_SCKOUTINV_Pos 12
#define I2S_CLKCTRL_SCKOUTINV (_U_(0x1) << I2S_CLKCTRL_SCKOUTINV_Pos)
#define I2S_CLKCTRL_MCKSEL_Pos 13
#define I2S_CLKCTRL_MCKSEL (_U_(0x1) << I2S_CLKCTRL_MCKSEL_Pos)
#define I2S_CLKCTRL_MCKSEL_GCLK_Val _U_(0x0)
#define I2S_CLKCTRL_MCKSEL_MCKPIN_Val _U_(0x1)
#define I2S_CLKCTRL_MCKSEL_GCLK (I2S_CLKCTRL_MCKSEL_GCLK_Val << I2S_CLKCTRL_MCKSEL_Pos)
#define I2S_CLKCTRL_MCKSEL_MCKPIN (I2S_CLKCTRL_MCKSEL_MCKPIN_Val << I2S_CLKCTRL_MCKSEL_Pos)
#define I2S_CLKCTRL_MCKEN_Pos 14
#define I2S_CLKCTRL_MCKEN (_U_(0x1) << I2S_CLKCTRL_MCKEN_Pos)
#define I2S_CLKCTRL_MCKOUTINV_Pos 15
#define I2S_CLKCTRL_MCKOUTINV (_U_(0x1) << I2S_CLKCTRL_MCKOUTINV_Pos)
#define I2S_CLKCTRL_MCKDIV_Pos 16
#define I2S_CLKCTRL_MCKDIV_Msk (_U_(0x3F) << I2S_CLKCTRL_MCKDIV_Pos)
#define I2S_CLKCTRL_MCKDIV(value) (I2S_CLKCTRL_MCKDIV_Msk & ((value) << I2S_CLKCTRL_MCKDIV_Pos))
#define I2S_CLKCTRL_MCKOUTDIV_Pos 24
#define I2S_CLKCTRL_MCKOUTDIV_Msk (_U_(0x3F) << I2S_CLKCTRL_MCKOUTDIV_Pos)
#define I2S_CLKCTRL_MCKOUTDIV(value) (I2S_CLKCTRL_MCKOUTDIV_Msk & ((value) << I2S_CLKCTRL_MCKOUTDIV_Pos))
#define I2S_CLKCTRL_MASK _U_(0x3F3FFFFF)



typedef union {
  struct {
    uint16_t RXRDY0:1;
    uint16_t RXRDY1:1;
    uint16_t :2;
    uint16_t RXOR0:1;
    uint16_t RXOR1:1;
    uint16_t :2;
    uint16_t TXRDY0:1;
    uint16_t TXRDY1:1;
    uint16_t :2;
    uint16_t TXUR0:1;
    uint16_t TXUR1:1;
    uint16_t :2;
  } bit;
  struct {
    uint16_t RXRDY:2;
    uint16_t :2;
    uint16_t RXOR:2;
    uint16_t :2;
    uint16_t TXRDY:2;
    uint16_t :2;
    uint16_t TXUR:2;
    uint16_t :2;
  } vec;
  uint16_t reg;
} I2S_INTENCLR_Type;


#define I2S_INTENCLR_OFFSET 0x0C
#define I2S_INTENCLR_RESETVALUE _U_(0x0000)

#define I2S_INTENCLR_RXRDY0_Pos 0
#define I2S_INTENCLR_RXRDY0 (_U_(1) << I2S_INTENCLR_RXRDY0_Pos)
#define I2S_INTENCLR_RXRDY1_Pos 1
#define I2S_INTENCLR_RXRDY1 (_U_(1) << I2S_INTENCLR_RXRDY1_Pos)
#define I2S_INTENCLR_RXRDY_Pos 0
#define I2S_INTENCLR_RXRDY_Msk (_U_(0x3) << I2S_INTENCLR_RXRDY_Pos)
#define I2S_INTENCLR_RXRDY(value) (I2S_INTENCLR_RXRDY_Msk & ((value) << I2S_INTENCLR_RXRDY_Pos))
#define I2S_INTENCLR_RXOR0_Pos 4
#define I2S_INTENCLR_RXOR0 (_U_(1) << I2S_INTENCLR_RXOR0_Pos)
#define I2S_INTENCLR_RXOR1_Pos 5
#define I2S_INTENCLR_RXOR1 (_U_(1) << I2S_INTENCLR_RXOR1_Pos)
#define I2S_INTENCLR_RXOR_Pos 4
#define I2S_INTENCLR_RXOR_Msk (_U_(0x3) << I2S_INTENCLR_RXOR_Pos)
#define I2S_INTENCLR_RXOR(value) (I2S_INTENCLR_RXOR_Msk & ((value) << I2S_INTENCLR_RXOR_Pos))
#define I2S_INTENCLR_TXRDY0_Pos 8
#define I2S_INTENCLR_TXRDY0 (_U_(1) << I2S_INTENCLR_TXRDY0_Pos)
#define I2S_INTENCLR_TXRDY1_Pos 9
#define I2S_INTENCLR_TXRDY1 (_U_(1) << I2S_INTENCLR_TXRDY1_Pos)
#define I2S_INTENCLR_TXRDY_Pos 8
#define I2S_INTENCLR_TXRDY_Msk (_U_(0x3) << I2S_INTENCLR_TXRDY_Pos)
#define I2S_INTENCLR_TXRDY(value) (I2S_INTENCLR_TXRDY_Msk & ((value) << I2S_INTENCLR_TXRDY_Pos))
#define I2S_INTENCLR_TXUR0_Pos 12
#define I2S_INTENCLR_TXUR0 (_U_(1) << I2S_INTENCLR_TXUR0_Pos)
#define I2S_INTENCLR_TXUR1_Pos 13
#define I2S_INTENCLR_TXUR1 (_U_(1) << I2S_INTENCLR_TXUR1_Pos)
#define I2S_INTENCLR_TXUR_Pos 12
#define I2S_INTENCLR_TXUR_Msk (_U_(0x3) << I2S_INTENCLR_TXUR_Pos)
#define I2S_INTENCLR_TXUR(value) (I2S_INTENCLR_TXUR_Msk & ((value) << I2S_INTENCLR_TXUR_Pos))
#define I2S_INTENCLR_MASK _U_(0x3333)



typedef union {
  struct {
    uint16_t RXRDY0:1;
    uint16_t RXRDY1:1;
    uint16_t :2;
    uint16_t RXOR0:1;
    uint16_t RXOR1:1;
    uint16_t :2;
    uint16_t TXRDY0:1;
    uint16_t TXRDY1:1;
    uint16_t :2;
    uint16_t TXUR0:1;
    uint16_t TXUR1:1;
    uint16_t :2;
  } bit;
  struct {
    uint16_t RXRDY:2;
    uint16_t :2;
    uint16_t RXOR:2;
    uint16_t :2;
    uint16_t TXRDY:2;
    uint16_t :2;
    uint16_t TXUR:2;
    uint16_t :2;
  } vec;
  uint16_t reg;
} I2S_INTENSET_Type;


#define I2S_INTENSET_OFFSET 0x10
#define I2S_INTENSET_RESETVALUE _U_(0x0000)

#define I2S_INTENSET_RXRDY0_Pos 0
#define I2S_INTENSET_RXRDY0 (_U_(1) << I2S_INTENSET_RXRDY0_Pos)
#define I2S_INTENSET_RXRDY1_Pos 1
#define I2S_INTENSET_RXRDY1 (_U_(1) << I2S_INTENSET_RXRDY1_Pos)
#define I2S_INTENSET_RXRDY_Pos 0
#define I2S_INTENSET_RXRDY_Msk (_U_(0x3) << I2S_INTENSET_RXRDY_Pos)
#define I2S_INTENSET_RXRDY(value) (I2S_INTENSET_RXRDY_Msk & ((value) << I2S_INTENSET_RXRDY_Pos))
#define I2S_INTENSET_RXOR0_Pos 4
#define I2S_INTENSET_RXOR0 (_U_(1) << I2S_INTENSET_RXOR0_Pos)
#define I2S_INTENSET_RXOR1_Pos 5
#define I2S_INTENSET_RXOR1 (_U_(1) << I2S_INTENSET_RXOR1_Pos)
#define I2S_INTENSET_RXOR_Pos 4
#define I2S_INTENSET_RXOR_Msk (_U_(0x3) << I2S_INTENSET_RXOR_Pos)
#define I2S_INTENSET_RXOR(value) (I2S_INTENSET_RXOR_Msk & ((value) << I2S_INTENSET_RXOR_Pos))
#define I2S_INTENSET_TXRDY0_Pos 8
#define I2S_INTENSET_TXRDY0 (_U_(1) << I2S_INTENSET_TXRDY0_Pos)
#define I2S_INTENSET_TXRDY1_Pos 9
#define I2S_INTENSET_TXRDY1 (_U_(1) << I2S_INTENSET_TXRDY1_Pos)
#define I2S_INTENSET_TXRDY_Pos 8
#define I2S_INTENSET_TXRDY_Msk (_U_(0x3) << I2S_INTENSET_TXRDY_Pos)
#define I2S_INTENSET_TXRDY(value) (I2S_INTENSET_TXRDY_Msk & ((value) << I2S_INTENSET_TXRDY_Pos))
#define I2S_INTENSET_TXUR0_Pos 12
#define I2S_INTENSET_TXUR0 (_U_(1) << I2S_INTENSET_TXUR0_Pos)
#define I2S_INTENSET_TXUR1_Pos 13
#define I2S_INTENSET_TXUR1 (_U_(1) << I2S_INTENSET_TXUR1_Pos)
#define I2S_INTENSET_TXUR_Pos 12
#define I2S_INTENSET_TXUR_Msk (_U_(0x3) << I2S_INTENSET_TXUR_Pos)
#define I2S_INTENSET_TXUR(value) (I2S_INTENSET_TXUR_Msk & ((value) << I2S_INTENSET_TXUR_Pos))
#define I2S_INTENSET_MASK _U_(0x3333)



typedef union {
  struct {
    volatile const uint16_t RXRDY0:1;
    volatile const uint16_t RXRDY1:1;
    volatile const uint16_t :2;
    volatile const uint16_t RXOR0:1;
    volatile const uint16_t RXOR1:1;
    volatile const uint16_t :2;
    volatile const uint16_t TXRDY0:1;
    volatile const uint16_t TXRDY1:1;
    volatile const uint16_t :2;
    volatile const uint16_t TXUR0:1;
    volatile const uint16_t TXUR1:1;
    volatile const uint16_t :2;
  } bit;
  struct {
    volatile const uint16_t RXRDY:2;
    volatile const uint16_t :2;
    volatile const uint16_t RXOR:2;
    volatile const uint16_t :2;
    volatile const uint16_t TXRDY:2;
    volatile const uint16_t :2;
    volatile const uint16_t TXUR:2;
    volatile const uint16_t :2;
  } vec;
  uint16_t reg;
} I2S_INTFLAG_Type;


#define I2S_INTFLAG_OFFSET 0x14
#define I2S_INTFLAG_RESETVALUE _U_(0x0000)

#define I2S_INTFLAG_RXRDY0_Pos 0
#define I2S_INTFLAG_RXRDY0 (_U_(1) << I2S_INTFLAG_RXRDY0_Pos)
#define I2S_INTFLAG_RXRDY1_Pos 1
#define I2S_INTFLAG_RXRDY1 (_U_(1) << I2S_INTFLAG_RXRDY1_Pos)
#define I2S_INTFLAG_RXRDY_Pos 0
#define I2S_INTFLAG_RXRDY_Msk (_U_(0x3) << I2S_INTFLAG_RXRDY_Pos)
#define I2S_INTFLAG_RXRDY(value) (I2S_INTFLAG_RXRDY_Msk & ((value) << I2S_INTFLAG_RXRDY_Pos))
#define I2S_INTFLAG_RXOR0_Pos 4
#define I2S_INTFLAG_RXOR0 (_U_(1) << I2S_INTFLAG_RXOR0_Pos)
#define I2S_INTFLAG_RXOR1_Pos 5
#define I2S_INTFLAG_RXOR1 (_U_(1) << I2S_INTFLAG_RXOR1_Pos)
#define I2S_INTFLAG_RXOR_Pos 4
#define I2S_INTFLAG_RXOR_Msk (_U_(0x3) << I2S_INTFLAG_RXOR_Pos)
#define I2S_INTFLAG_RXOR(value) (I2S_INTFLAG_RXOR_Msk & ((value) << I2S_INTFLAG_RXOR_Pos))
#define I2S_INTFLAG_TXRDY0_Pos 8
#define I2S_INTFLAG_TXRDY0 (_U_(1) << I2S_INTFLAG_TXRDY0_Pos)
#define I2S_INTFLAG_TXRDY1_Pos 9
#define I2S_INTFLAG_TXRDY1 (_U_(1) << I2S_INTFLAG_TXRDY1_Pos)
#define I2S_INTFLAG_TXRDY_Pos 8
#define I2S_INTFLAG_TXRDY_Msk (_U_(0x3) << I2S_INTFLAG_TXRDY_Pos)
#define I2S_INTFLAG_TXRDY(value) (I2S_INTFLAG_TXRDY_Msk & ((value) << I2S_INTFLAG_TXRDY_Pos))
#define I2S_INTFLAG_TXUR0_Pos 12
#define I2S_INTFLAG_TXUR0 (_U_(1) << I2S_INTFLAG_TXUR0_Pos)
#define I2S_INTFLAG_TXUR1_Pos 13
#define I2S_INTFLAG_TXUR1 (_U_(1) << I2S_INTFLAG_TXUR1_Pos)
#define I2S_INTFLAG_TXUR_Pos 12
#define I2S_INTFLAG_TXUR_Msk (_U_(0x3) << I2S_INTFLAG_TXUR_Pos)
#define I2S_INTFLAG_TXUR(value) (I2S_INTFLAG_TXUR_Msk & ((value) << I2S_INTFLAG_TXUR_Pos))
#define I2S_INTFLAG_MASK _U_(0x3333)



typedef union {
  struct {
    uint16_t SWRST:1;
    uint16_t ENABLE:1;
    uint16_t CKEN0:1;
    uint16_t CKEN1:1;
    uint16_t TXEN:1;
    uint16_t RXEN:1;
    uint16_t :2;
    uint16_t TXDATA:1;
    uint16_t RXDATA:1;
    uint16_t :6;
  } bit;
  struct {
    uint16_t :2;
    uint16_t CKEN:2;
    uint16_t :12;
  } vec;
  uint16_t reg;
} I2S_SYNCBUSY_Type;


#define I2S_SYNCBUSY_OFFSET 0x18
#define I2S_SYNCBUSY_RESETVALUE _U_(0x0000)

#define I2S_SYNCBUSY_SWRST_Pos 0
#define I2S_SYNCBUSY_SWRST (_U_(0x1) << I2S_SYNCBUSY_SWRST_Pos)
#define I2S_SYNCBUSY_ENABLE_Pos 1
#define I2S_SYNCBUSY_ENABLE (_U_(0x1) << I2S_SYNCBUSY_ENABLE_Pos)
#define I2S_SYNCBUSY_CKEN0_Pos 2
#define I2S_SYNCBUSY_CKEN0 (_U_(1) << I2S_SYNCBUSY_CKEN0_Pos)
#define I2S_SYNCBUSY_CKEN1_Pos 3
#define I2S_SYNCBUSY_CKEN1 (_U_(1) << I2S_SYNCBUSY_CKEN1_Pos)
#define I2S_SYNCBUSY_CKEN_Pos 2
#define I2S_SYNCBUSY_CKEN_Msk (_U_(0x3) << I2S_SYNCBUSY_CKEN_Pos)
#define I2S_SYNCBUSY_CKEN(value) (I2S_SYNCBUSY_CKEN_Msk & ((value) << I2S_SYNCBUSY_CKEN_Pos))
#define I2S_SYNCBUSY_TXEN_Pos 4
#define I2S_SYNCBUSY_TXEN (_U_(0x1) << I2S_SYNCBUSY_TXEN_Pos)
#define I2S_SYNCBUSY_RXEN_Pos 5
#define I2S_SYNCBUSY_RXEN (_U_(0x1) << I2S_SYNCBUSY_RXEN_Pos)
#define I2S_SYNCBUSY_TXDATA_Pos 8
#define I2S_SYNCBUSY_TXDATA (_U_(0x1) << I2S_SYNCBUSY_TXDATA_Pos)
#define I2S_SYNCBUSY_RXDATA_Pos 9
#define I2S_SYNCBUSY_RXDATA (_U_(0x1) << I2S_SYNCBUSY_RXDATA_Pos)
#define I2S_SYNCBUSY_MASK _U_(0x033F)



typedef union {
  struct {
    uint32_t :2;
    uint32_t TXDEFAULT:2;
    uint32_t TXSAME:1;
    uint32_t :2;
    uint32_t SLOTADJ:1;
    uint32_t DATASIZE:3;
    uint32_t :1;
    uint32_t WORDADJ:1;
    uint32_t EXTEND:2;
    uint32_t BITREV:1;
    uint32_t SLOTDIS0:1;
    uint32_t SLOTDIS1:1;
    uint32_t SLOTDIS2:1;
    uint32_t SLOTDIS3:1;
    uint32_t SLOTDIS4:1;
    uint32_t SLOTDIS5:1;
    uint32_t SLOTDIS6:1;
    uint32_t SLOTDIS7:1;
    uint32_t MONO:1;
    uint32_t DMA:1;
    uint32_t :6;
  } bit;
  struct {
    uint32_t :16;
    uint32_t SLOTDIS:8;
    uint32_t :8;
  } vec;
  uint32_t reg;
} I2S_TXCTRL_Type;


#define I2S_TXCTRL_OFFSET 0x20
#define I2S_TXCTRL_RESETVALUE _U_(0x00000000)

#define I2S_TXCTRL_TXDEFAULT_Pos 2
#define I2S_TXCTRL_TXDEFAULT_Msk (_U_(0x3) << I2S_TXCTRL_TXDEFAULT_Pos)
#define I2S_TXCTRL_TXDEFAULT(value) (I2S_TXCTRL_TXDEFAULT_Msk & ((value) << I2S_TXCTRL_TXDEFAULT_Pos))
#define I2S_TXCTRL_TXDEFAULT_ZERO_Val _U_(0x0)
#define I2S_TXCTRL_TXDEFAULT_ONE_Val _U_(0x1)
#define I2S_TXCTRL_TXDEFAULT_HIZ_Val _U_(0x3)
#define I2S_TXCTRL_TXDEFAULT_ZERO (I2S_TXCTRL_TXDEFAULT_ZERO_Val << I2S_TXCTRL_TXDEFAULT_Pos)
#define I2S_TXCTRL_TXDEFAULT_ONE (I2S_TXCTRL_TXDEFAULT_ONE_Val << I2S_TXCTRL_TXDEFAULT_Pos)
#define I2S_TXCTRL_TXDEFAULT_HIZ (I2S_TXCTRL_TXDEFAULT_HIZ_Val << I2S_TXCTRL_TXDEFAULT_Pos)
#define I2S_TXCTRL_TXSAME_Pos 4
#define I2S_TXCTRL_TXSAME (_U_(0x1) << I2S_TXCTRL_TXSAME_Pos)
#define I2S_TXCTRL_TXSAME_ZERO_Val _U_(0x0)
#define I2S_TXCTRL_TXSAME_SAME_Val _U_(0x1)
#define I2S_TXCTRL_TXSAME_ZERO (I2S_TXCTRL_TXSAME_ZERO_Val << I2S_TXCTRL_TXSAME_Pos)
#define I2S_TXCTRL_TXSAME_SAME (I2S_TXCTRL_TXSAME_SAME_Val << I2S_TXCTRL_TXSAME_Pos)
#define I2S_TXCTRL_SLOTADJ_Pos 7
#define I2S_TXCTRL_SLOTADJ (_U_(0x1) << I2S_TXCTRL_SLOTADJ_Pos)
#define I2S_TXCTRL_SLOTADJ_RIGHT_Val _U_(0x0)
#define I2S_TXCTRL_SLOTADJ_LEFT_Val _U_(0x1)
#define I2S_TXCTRL_SLOTADJ_RIGHT (I2S_TXCTRL_SLOTADJ_RIGHT_Val << I2S_TXCTRL_SLOTADJ_Pos)
#define I2S_TXCTRL_SLOTADJ_LEFT (I2S_TXCTRL_SLOTADJ_LEFT_Val << I2S_TXCTRL_SLOTADJ_Pos)
#define I2S_TXCTRL_DATASIZE_Pos 8
#define I2S_TXCTRL_DATASIZE_Msk (_U_(0x7) << I2S_TXCTRL_DATASIZE_Pos)
#define I2S_TXCTRL_DATASIZE(value) (I2S_TXCTRL_DATASIZE_Msk & ((value) << I2S_TXCTRL_DATASIZE_Pos))
#define I2S_TXCTRL_DATASIZE_32_Val _U_(0x0)
#define I2S_TXCTRL_DATASIZE_24_Val _U_(0x1)
#define I2S_TXCTRL_DATASIZE_20_Val _U_(0x2)
#define I2S_TXCTRL_DATASIZE_18_Val _U_(0x3)
#define I2S_TXCTRL_DATASIZE_16_Val _U_(0x4)
#define I2S_TXCTRL_DATASIZE_16C_Val _U_(0x5)
#define I2S_TXCTRL_DATASIZE_8_Val _U_(0x6)
#define I2S_TXCTRL_DATASIZE_8C_Val _U_(0x7)
#define I2S_TXCTRL_DATASIZE_32 (I2S_TXCTRL_DATASIZE_32_Val << I2S_TXCTRL_DATASIZE_Pos)
#define I2S_TXCTRL_DATASIZE_24 (I2S_TXCTRL_DATASIZE_24_Val << I2S_TXCTRL_DATASIZE_Pos)
#define I2S_TXCTRL_DATASIZE_20 (I2S_TXCTRL_DATASIZE_20_Val << I2S_TXCTRL_DATASIZE_Pos)
#define I2S_TXCTRL_DATASIZE_18 (I2S_TXCTRL_DATASIZE_18_Val << I2S_TXCTRL_DATASIZE_Pos)
#define I2S_TXCTRL_DATASIZE_16 (I2S_TXCTRL_DATASIZE_16_Val << I2S_TXCTRL_DATASIZE_Pos)
#define I2S_TXCTRL_DATASIZE_16C (I2S_TXCTRL_DATASIZE_16C_Val << I2S_TXCTRL_DATASIZE_Pos)
#define I2S_TXCTRL_DATASIZE_8 (I2S_TXCTRL_DATASIZE_8_Val << I2S_TXCTRL_DATASIZE_Pos)
#define I2S_TXCTRL_DATASIZE_8C (I2S_TXCTRL_DATASIZE_8C_Val << I2S_TXCTRL_DATASIZE_Pos)
#define I2S_TXCTRL_WORDADJ_Pos 12
#define I2S_TXCTRL_WORDADJ (_U_(0x1) << I2S_TXCTRL_WORDADJ_Pos)
#define I2S_TXCTRL_WORDADJ_RIGHT_Val _U_(0x0)
#define I2S_TXCTRL_WORDADJ_LEFT_Val _U_(0x1)
#define I2S_TXCTRL_WORDADJ_RIGHT (I2S_TXCTRL_WORDADJ_RIGHT_Val << I2S_TXCTRL_WORDADJ_Pos)
#define I2S_TXCTRL_WORDADJ_LEFT (I2S_TXCTRL_WORDADJ_LEFT_Val << I2S_TXCTRL_WORDADJ_Pos)
#define I2S_TXCTRL_EXTEND_Pos 13
#define I2S_TXCTRL_EXTEND_Msk (_U_(0x3) << I2S_TXCTRL_EXTEND_Pos)
#define I2S_TXCTRL_EXTEND(value) (I2S_TXCTRL_EXTEND_Msk & ((value) << I2S_TXCTRL_EXTEND_Pos))
#define I2S_TXCTRL_EXTEND_ZERO_Val _U_(0x0)
#define I2S_TXCTRL_EXTEND_ONE_Val _U_(0x1)
#define I2S_TXCTRL_EXTEND_MSBIT_Val _U_(0x2)
#define I2S_TXCTRL_EXTEND_LSBIT_Val _U_(0x3)
#define I2S_TXCTRL_EXTEND_ZERO (I2S_TXCTRL_EXTEND_ZERO_Val << I2S_TXCTRL_EXTEND_Pos)
#define I2S_TXCTRL_EXTEND_ONE (I2S_TXCTRL_EXTEND_ONE_Val << I2S_TXCTRL_EXTEND_Pos)
#define I2S_TXCTRL_EXTEND_MSBIT (I2S_TXCTRL_EXTEND_MSBIT_Val << I2S_TXCTRL_EXTEND_Pos)
#define I2S_TXCTRL_EXTEND_LSBIT (I2S_TXCTRL_EXTEND_LSBIT_Val << I2S_TXCTRL_EXTEND_Pos)
#define I2S_TXCTRL_BITREV_Pos 15
#define I2S_TXCTRL_BITREV (_U_(0x1) << I2S_TXCTRL_BITREV_Pos)
#define I2S_TXCTRL_BITREV_MSBIT_Val _U_(0x0)
#define I2S_TXCTRL_BITREV_LSBIT_Val _U_(0x1)
#define I2S_TXCTRL_BITREV_MSBIT (I2S_TXCTRL_BITREV_MSBIT_Val << I2S_TXCTRL_BITREV_Pos)
#define I2S_TXCTRL_BITREV_LSBIT (I2S_TXCTRL_BITREV_LSBIT_Val << I2S_TXCTRL_BITREV_Pos)
#define I2S_TXCTRL_SLOTDIS0_Pos 16
#define I2S_TXCTRL_SLOTDIS0 (_U_(1) << I2S_TXCTRL_SLOTDIS0_Pos)
#define I2S_TXCTRL_SLOTDIS1_Pos 17
#define I2S_TXCTRL_SLOTDIS1 (_U_(1) << I2S_TXCTRL_SLOTDIS1_Pos)
#define I2S_TXCTRL_SLOTDIS2_Pos 18
#define I2S_TXCTRL_SLOTDIS2 (_U_(1) << I2S_TXCTRL_SLOTDIS2_Pos)
#define I2S_TXCTRL_SLOTDIS3_Pos 19
#define I2S_TXCTRL_SLOTDIS3 (_U_(1) << I2S_TXCTRL_SLOTDIS3_Pos)
#define I2S_TXCTRL_SLOTDIS4_Pos 20
#define I2S_TXCTRL_SLOTDIS4 (_U_(1) << I2S_TXCTRL_SLOTDIS4_Pos)
#define I2S_TXCTRL_SLOTDIS5_Pos 21
#define I2S_TXCTRL_SLOTDIS5 (_U_(1) << I2S_TXCTRL_SLOTDIS5_Pos)
#define I2S_TXCTRL_SLOTDIS6_Pos 22
#define I2S_TXCTRL_SLOTDIS6 (_U_(1) << I2S_TXCTRL_SLOTDIS6_Pos)
#define I2S_TXCTRL_SLOTDIS7_Pos 23
#define I2S_TXCTRL_SLOTDIS7 (_U_(1) << I2S_TXCTRL_SLOTDIS7_Pos)
#define I2S_TXCTRL_SLOTDIS_Pos 16
#define I2S_TXCTRL_SLOTDIS_Msk (_U_(0xFF) << I2S_TXCTRL_SLOTDIS_Pos)
#define I2S_TXCTRL_SLOTDIS(value) (I2S_TXCTRL_SLOTDIS_Msk & ((value) << I2S_TXCTRL_SLOTDIS_Pos))
#define I2S_TXCTRL_MONO_Pos 24
#define I2S_TXCTRL_MONO (_U_(0x1) << I2S_TXCTRL_MONO_Pos)
#define I2S_TXCTRL_MONO_STEREO_Val _U_(0x0)
#define I2S_TXCTRL_MONO_MONO_Val _U_(0x1)
#define I2S_TXCTRL_MONO_STEREO (I2S_TXCTRL_MONO_STEREO_Val << I2S_TXCTRL_MONO_Pos)
#define I2S_TXCTRL_MONO_MONO (I2S_TXCTRL_MONO_MONO_Val << I2S_TXCTRL_MONO_Pos)
#define I2S_TXCTRL_DMA_Pos 25
#define I2S_TXCTRL_DMA (_U_(0x1) << I2S_TXCTRL_DMA_Pos)
#define I2S_TXCTRL_DMA_SINGLE_Val _U_(0x0)
#define I2S_TXCTRL_DMA_MULTIPLE_Val _U_(0x1)
#define I2S_TXCTRL_DMA_SINGLE (I2S_TXCTRL_DMA_SINGLE_Val << I2S_TXCTRL_DMA_Pos)
#define I2S_TXCTRL_DMA_MULTIPLE (I2S_TXCTRL_DMA_MULTIPLE_Val << I2S_TXCTRL_DMA_Pos)
#define I2S_TXCTRL_MASK _U_(0x03FFF79C)



typedef union {
  struct {
    uint32_t SERMODE:2;
    uint32_t :3;
    uint32_t CLKSEL:1;
    uint32_t :1;
    uint32_t SLOTADJ:1;
    uint32_t DATASIZE:3;
    uint32_t :1;
    uint32_t WORDADJ:1;
    uint32_t EXTEND:2;
    uint32_t BITREV:1;
    uint32_t SLOTDIS0:1;
    uint32_t SLOTDIS1:1;
    uint32_t SLOTDIS2:1;
    uint32_t SLOTDIS3:1;
    uint32_t SLOTDIS4:1;
    uint32_t SLOTDIS5:1;
    uint32_t SLOTDIS6:1;
    uint32_t SLOTDIS7:1;
    uint32_t MONO:1;
    uint32_t DMA:1;
    uint32_t RXLOOP:1;
    uint32_t :5;
  } bit;
  struct {
    uint32_t :16;
    uint32_t SLOTDIS:8;
    uint32_t :8;
  } vec;
  uint32_t reg;
} I2S_RXCTRL_Type;


#define I2S_RXCTRL_OFFSET 0x24
#define I2S_RXCTRL_RESETVALUE _U_(0x00000000)

#define I2S_RXCTRL_SERMODE_Pos 0
#define I2S_RXCTRL_SERMODE_Msk (_U_(0x3) << I2S_RXCTRL_SERMODE_Pos)
#define I2S_RXCTRL_SERMODE(value) (I2S_RXCTRL_SERMODE_Msk & ((value) << I2S_RXCTRL_SERMODE_Pos))
#define I2S_RXCTRL_SERMODE_RX_Val _U_(0x0)
#define I2S_RXCTRL_SERMODE_PDM2_Val _U_(0x2)
#define I2S_RXCTRL_SERMODE_RX (I2S_RXCTRL_SERMODE_RX_Val << I2S_RXCTRL_SERMODE_Pos)
#define I2S_RXCTRL_SERMODE_PDM2 (I2S_RXCTRL_SERMODE_PDM2_Val << I2S_RXCTRL_SERMODE_Pos)
#define I2S_RXCTRL_CLKSEL_Pos 5
#define I2S_RXCTRL_CLKSEL (_U_(0x1) << I2S_RXCTRL_CLKSEL_Pos)
#define I2S_RXCTRL_CLKSEL_CLK0_Val _U_(0x0)
#define I2S_RXCTRL_CLKSEL_CLK1_Val _U_(0x1)
#define I2S_RXCTRL_CLKSEL_CLK0 (I2S_RXCTRL_CLKSEL_CLK0_Val << I2S_RXCTRL_CLKSEL_Pos)
#define I2S_RXCTRL_CLKSEL_CLK1 (I2S_RXCTRL_CLKSEL_CLK1_Val << I2S_RXCTRL_CLKSEL_Pos)
#define I2S_RXCTRL_SLOTADJ_Pos 7
#define I2S_RXCTRL_SLOTADJ (_U_(0x1) << I2S_RXCTRL_SLOTADJ_Pos)
#define I2S_RXCTRL_SLOTADJ_RIGHT_Val _U_(0x0)
#define I2S_RXCTRL_SLOTADJ_LEFT_Val _U_(0x1)
#define I2S_RXCTRL_SLOTADJ_RIGHT (I2S_RXCTRL_SLOTADJ_RIGHT_Val << I2S_RXCTRL_SLOTADJ_Pos)
#define I2S_RXCTRL_SLOTADJ_LEFT (I2S_RXCTRL_SLOTADJ_LEFT_Val << I2S_RXCTRL_SLOTADJ_Pos)
#define I2S_RXCTRL_DATASIZE_Pos 8
#define I2S_RXCTRL_DATASIZE_Msk (_U_(0x7) << I2S_RXCTRL_DATASIZE_Pos)
#define I2S_RXCTRL_DATASIZE(value) (I2S_RXCTRL_DATASIZE_Msk & ((value) << I2S_RXCTRL_DATASIZE_Pos))
#define I2S_RXCTRL_DATASIZE_32_Val _U_(0x0)
#define I2S_RXCTRL_DATASIZE_24_Val _U_(0x1)
#define I2S_RXCTRL_DATASIZE_20_Val _U_(0x2)
#define I2S_RXCTRL_DATASIZE_18_Val _U_(0x3)
#define I2S_RXCTRL_DATASIZE_16_Val _U_(0x4)
#define I2S_RXCTRL_DATASIZE_16C_Val _U_(0x5)
#define I2S_RXCTRL_DATASIZE_8_Val _U_(0x6)
#define I2S_RXCTRL_DATASIZE_8C_Val _U_(0x7)
#define I2S_RXCTRL_DATASIZE_32 (I2S_RXCTRL_DATASIZE_32_Val << I2S_RXCTRL_DATASIZE_Pos)
#define I2S_RXCTRL_DATASIZE_24 (I2S_RXCTRL_DATASIZE_24_Val << I2S_RXCTRL_DATASIZE_Pos)
#define I2S_RXCTRL_DATASIZE_20 (I2S_RXCTRL_DATASIZE_20_Val << I2S_RXCTRL_DATASIZE_Pos)
#define I2S_RXCTRL_DATASIZE_18 (I2S_RXCTRL_DATASIZE_18_Val << I2S_RXCTRL_DATASIZE_Pos)
#define I2S_RXCTRL_DATASIZE_16 (I2S_RXCTRL_DATASIZE_16_Val << I2S_RXCTRL_DATASIZE_Pos)
#define I2S_RXCTRL_DATASIZE_16C (I2S_RXCTRL_DATASIZE_16C_Val << I2S_RXCTRL_DATASIZE_Pos)
#define I2S_RXCTRL_DATASIZE_8 (I2S_RXCTRL_DATASIZE_8_Val << I2S_RXCTRL_DATASIZE_Pos)
#define I2S_RXCTRL_DATASIZE_8C (I2S_RXCTRL_DATASIZE_8C_Val << I2S_RXCTRL_DATASIZE_Pos)
#define I2S_RXCTRL_WORDADJ_Pos 12
#define I2S_RXCTRL_WORDADJ (_U_(0x1) << I2S_RXCTRL_WORDADJ_Pos)
#define I2S_RXCTRL_WORDADJ_RIGHT_Val _U_(0x0)
#define I2S_RXCTRL_WORDADJ_LEFT_Val _U_(0x1)
#define I2S_RXCTRL_WORDADJ_RIGHT (I2S_RXCTRL_WORDADJ_RIGHT_Val << I2S_RXCTRL_WORDADJ_Pos)
#define I2S_RXCTRL_WORDADJ_LEFT (I2S_RXCTRL_WORDADJ_LEFT_Val << I2S_RXCTRL_WORDADJ_Pos)
#define I2S_RXCTRL_EXTEND_Pos 13
#define I2S_RXCTRL_EXTEND_Msk (_U_(0x3) << I2S_RXCTRL_EXTEND_Pos)
#define I2S_RXCTRL_EXTEND(value) (I2S_RXCTRL_EXTEND_Msk & ((value) << I2S_RXCTRL_EXTEND_Pos))
#define I2S_RXCTRL_EXTEND_ZERO_Val _U_(0x0)
#define I2S_RXCTRL_EXTEND_ONE_Val _U_(0x1)
#define I2S_RXCTRL_EXTEND_MSBIT_Val _U_(0x2)
#define I2S_RXCTRL_EXTEND_LSBIT_Val _U_(0x3)
#define I2S_RXCTRL_EXTEND_ZERO (I2S_RXCTRL_EXTEND_ZERO_Val << I2S_RXCTRL_EXTEND_Pos)
#define I2S_RXCTRL_EXTEND_ONE (I2S_RXCTRL_EXTEND_ONE_Val << I2S_RXCTRL_EXTEND_Pos)
#define I2S_RXCTRL_EXTEND_MSBIT (I2S_RXCTRL_EXTEND_MSBIT_Val << I2S_RXCTRL_EXTEND_Pos)
#define I2S_RXCTRL_EXTEND_LSBIT (I2S_RXCTRL_EXTEND_LSBIT_Val << I2S_RXCTRL_EXTEND_Pos)
#define I2S_RXCTRL_BITREV_Pos 15
#define I2S_RXCTRL_BITREV (_U_(0x1) << I2S_RXCTRL_BITREV_Pos)
#define I2S_RXCTRL_BITREV_MSBIT_Val _U_(0x0)
#define I2S_RXCTRL_BITREV_LSBIT_Val _U_(0x1)
#define I2S_RXCTRL_BITREV_MSBIT (I2S_RXCTRL_BITREV_MSBIT_Val << I2S_RXCTRL_BITREV_Pos)
#define I2S_RXCTRL_BITREV_LSBIT (I2S_RXCTRL_BITREV_LSBIT_Val << I2S_RXCTRL_BITREV_Pos)
#define I2S_RXCTRL_SLOTDIS0_Pos 16
#define I2S_RXCTRL_SLOTDIS0 (_U_(1) << I2S_RXCTRL_SLOTDIS0_Pos)
#define I2S_RXCTRL_SLOTDIS1_Pos 17
#define I2S_RXCTRL_SLOTDIS1 (_U_(1) << I2S_RXCTRL_SLOTDIS1_Pos)
#define I2S_RXCTRL_SLOTDIS2_Pos 18
#define I2S_RXCTRL_SLOTDIS2 (_U_(1) << I2S_RXCTRL_SLOTDIS2_Pos)
#define I2S_RXCTRL_SLOTDIS3_Pos 19
#define I2S_RXCTRL_SLOTDIS3 (_U_(1) << I2S_RXCTRL_SLOTDIS3_Pos)
#define I2S_RXCTRL_SLOTDIS4_Pos 20
#define I2S_RXCTRL_SLOTDIS4 (_U_(1) << I2S_RXCTRL_SLOTDIS4_Pos)
#define I2S_RXCTRL_SLOTDIS5_Pos 21
#define I2S_RXCTRL_SLOTDIS5 (_U_(1) << I2S_RXCTRL_SLOTDIS5_Pos)
#define I2S_RXCTRL_SLOTDIS6_Pos 22
#define I2S_RXCTRL_SLOTDIS6 (_U_(1) << I2S_RXCTRL_SLOTDIS6_Pos)
#define I2S_RXCTRL_SLOTDIS7_Pos 23
#define I2S_RXCTRL_SLOTDIS7 (_U_(1) << I2S_RXCTRL_SLOTDIS7_Pos)
#define I2S_RXCTRL_SLOTDIS_Pos 16
#define I2S_RXCTRL_SLOTDIS_Msk (_U_(0xFF) << I2S_RXCTRL_SLOTDIS_Pos)
#define I2S_RXCTRL_SLOTDIS(value) (I2S_RXCTRL_SLOTDIS_Msk & ((value) << I2S_RXCTRL_SLOTDIS_Pos))
#define I2S_RXCTRL_MONO_Pos 24
#define I2S_RXCTRL_MONO (_U_(0x1) << I2S_RXCTRL_MONO_Pos)
#define I2S_RXCTRL_MONO_STEREO_Val _U_(0x0)
#define I2S_RXCTRL_MONO_MONO_Val _U_(0x1)
#define I2S_RXCTRL_MONO_STEREO (I2S_RXCTRL_MONO_STEREO_Val << I2S_RXCTRL_MONO_Pos)
#define I2S_RXCTRL_MONO_MONO (I2S_RXCTRL_MONO_MONO_Val << I2S_RXCTRL_MONO_Pos)
#define I2S_RXCTRL_DMA_Pos 25
#define I2S_RXCTRL_DMA (_U_(0x1) << I2S_RXCTRL_DMA_Pos)
#define I2S_RXCTRL_DMA_SINGLE_Val _U_(0x0)
#define I2S_RXCTRL_DMA_MULTIPLE_Val _U_(0x1)
#define I2S_RXCTRL_DMA_SINGLE (I2S_RXCTRL_DMA_SINGLE_Val << I2S_RXCTRL_DMA_Pos)
#define I2S_RXCTRL_DMA_MULTIPLE (I2S_RXCTRL_DMA_MULTIPLE_Val << I2S_RXCTRL_DMA_Pos)
#define I2S_RXCTRL_RXLOOP_Pos 26
#define I2S_RXCTRL_RXLOOP (_U_(0x1) << I2S_RXCTRL_RXLOOP_Pos)
#define I2S_RXCTRL_MASK _U_(0x07FFF7A3)



typedef union {
  struct {
    uint32_t DATA:32;
  } bit;
  uint32_t reg;
} I2S_TXDATA_Type;


#define I2S_TXDATA_OFFSET 0x30
#define I2S_TXDATA_RESETVALUE _U_(0x00000000)

#define I2S_TXDATA_DATA_Pos 0
#define I2S_TXDATA_DATA_Msk (_U_(0xFFFFFFFF) << I2S_TXDATA_DATA_Pos)
#define I2S_TXDATA_DATA(value) (I2S_TXDATA_DATA_Msk & ((value) << I2S_TXDATA_DATA_Pos))
#define I2S_TXDATA_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t DATA:32;
  } bit;
  uint32_t reg;
} I2S_RXDATA_Type;


#define I2S_RXDATA_OFFSET 0x34
#define I2S_RXDATA_RESETVALUE _U_(0x00000000)

#define I2S_RXDATA_DATA_Pos 0
#define I2S_RXDATA_DATA_Msk (_U_(0xFFFFFFFF) << I2S_RXDATA_DATA_Pos)
#define I2S_RXDATA_DATA(value) (I2S_RXDATA_DATA_Msk & ((value) << I2S_RXDATA_DATA_Pos))
#define I2S_RXDATA_MASK _U_(0xFFFFFFFF)



typedef struct {
  volatile I2S_CTRLA_Type CTRLA;
       RoReg8 Reserved1[0x3];
  volatile I2S_CLKCTRL_Type CLKCTRL[2];
  volatile I2S_INTENCLR_Type INTENCLR;
       RoReg8 Reserved2[0x2];
  volatile I2S_INTENSET_Type INTENSET;
       RoReg8 Reserved3[0x2];
  volatile I2S_INTFLAG_Type INTFLAG;
       RoReg8 Reserved4[0x2];
  volatile const I2S_SYNCBUSY_Type SYNCBUSY;
       RoReg8 Reserved5[0x6];
  volatile I2S_TXCTRL_Type TXCTRL;
  volatile I2S_RXCTRL_Type RXCTRL;
       RoReg8 Reserved6[0x8];
  volatile I2S_TXDATA_Type TXDATA;
  volatile const I2S_RXDATA_Type RXDATA;
} I2s;
# 596 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/mclk.h" 1
# 31 "asf4/samd51/include/component/mclk.h"
#define _SAMD51_MCLK_COMPONENT_ 







#define MCLK_U2408 
#define REV_MCLK 0x100



typedef union {
  struct {
    uint8_t CKRDY:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} MCLK_INTENCLR_Type;


#define MCLK_INTENCLR_OFFSET 0x01
#define MCLK_INTENCLR_RESETVALUE _U_(0x00)

#define MCLK_INTENCLR_CKRDY_Pos 0
#define MCLK_INTENCLR_CKRDY (_U_(0x1) << MCLK_INTENCLR_CKRDY_Pos)
#define MCLK_INTENCLR_MASK _U_(0x01)



typedef union {
  struct {
    uint8_t CKRDY:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} MCLK_INTENSET_Type;


#define MCLK_INTENSET_OFFSET 0x02
#define MCLK_INTENSET_RESETVALUE _U_(0x00)

#define MCLK_INTENSET_CKRDY_Pos 0
#define MCLK_INTENSET_CKRDY (_U_(0x1) << MCLK_INTENSET_CKRDY_Pos)
#define MCLK_INTENSET_MASK _U_(0x01)



typedef union {
  struct {
    volatile const uint8_t CKRDY:1;
    volatile const uint8_t :7;
  } bit;
  uint8_t reg;
} MCLK_INTFLAG_Type;


#define MCLK_INTFLAG_OFFSET 0x03
#define MCLK_INTFLAG_RESETVALUE _U_(0x01)

#define MCLK_INTFLAG_CKRDY_Pos 0
#define MCLK_INTFLAG_CKRDY (_U_(0x1) << MCLK_INTFLAG_CKRDY_Pos)
#define MCLK_INTFLAG_MASK _U_(0x01)



typedef union {
  struct {
    uint8_t DIV:8;
  } bit;
  uint8_t reg;
} MCLK_HSDIV_Type;


#define MCLK_HSDIV_OFFSET 0x04
#define MCLK_HSDIV_RESETVALUE _U_(0x01)

#define MCLK_HSDIV_DIV_Pos 0
#define MCLK_HSDIV_DIV_Msk (_U_(0xFF) << MCLK_HSDIV_DIV_Pos)
#define MCLK_HSDIV_DIV(value) (MCLK_HSDIV_DIV_Msk & ((value) << MCLK_HSDIV_DIV_Pos))
#define MCLK_HSDIV_DIV_DIV1_Val _U_(0x1)
#define MCLK_HSDIV_DIV_DIV1 (MCLK_HSDIV_DIV_DIV1_Val << MCLK_HSDIV_DIV_Pos)
#define MCLK_HSDIV_MASK _U_(0xFF)



typedef union {
  struct {
    uint8_t DIV:8;
  } bit;
  uint8_t reg;
} MCLK_CPUDIV_Type;


#define MCLK_CPUDIV_OFFSET 0x05
#define MCLK_CPUDIV_RESETVALUE _U_(0x01)

#define MCLK_CPUDIV_DIV_Pos 0
#define MCLK_CPUDIV_DIV_Msk (_U_(0xFF) << MCLK_CPUDIV_DIV_Pos)
#define MCLK_CPUDIV_DIV(value) (MCLK_CPUDIV_DIV_Msk & ((value) << MCLK_CPUDIV_DIV_Pos))
#define MCLK_CPUDIV_DIV_DIV1_Val _U_(0x1)
#define MCLK_CPUDIV_DIV_DIV2_Val _U_(0x2)
#define MCLK_CPUDIV_DIV_DIV4_Val _U_(0x4)
#define MCLK_CPUDIV_DIV_DIV8_Val _U_(0x8)
#define MCLK_CPUDIV_DIV_DIV16_Val _U_(0x10)
#define MCLK_CPUDIV_DIV_DIV32_Val _U_(0x20)
#define MCLK_CPUDIV_DIV_DIV64_Val _U_(0x40)
#define MCLK_CPUDIV_DIV_DIV128_Val _U_(0x80)
#define MCLK_CPUDIV_DIV_DIV1 (MCLK_CPUDIV_DIV_DIV1_Val << MCLK_CPUDIV_DIV_Pos)
#define MCLK_CPUDIV_DIV_DIV2 (MCLK_CPUDIV_DIV_DIV2_Val << MCLK_CPUDIV_DIV_Pos)
#define MCLK_CPUDIV_DIV_DIV4 (MCLK_CPUDIV_DIV_DIV4_Val << MCLK_CPUDIV_DIV_Pos)
#define MCLK_CPUDIV_DIV_DIV8 (MCLK_CPUDIV_DIV_DIV8_Val << MCLK_CPUDIV_DIV_Pos)
#define MCLK_CPUDIV_DIV_DIV16 (MCLK_CPUDIV_DIV_DIV16_Val << MCLK_CPUDIV_DIV_Pos)
#define MCLK_CPUDIV_DIV_DIV32 (MCLK_CPUDIV_DIV_DIV32_Val << MCLK_CPUDIV_DIV_Pos)
#define MCLK_CPUDIV_DIV_DIV64 (MCLK_CPUDIV_DIV_DIV64_Val << MCLK_CPUDIV_DIV_Pos)
#define MCLK_CPUDIV_DIV_DIV128 (MCLK_CPUDIV_DIV_DIV128_Val << MCLK_CPUDIV_DIV_Pos)
#define MCLK_CPUDIV_MASK _U_(0xFF)



typedef union {
  struct {
    uint32_t HPB0_:1;
    uint32_t HPB1_:1;
    uint32_t HPB2_:1;
    uint32_t HPB3_:1;
    uint32_t DSU_:1;
    uint32_t HMATRIX_:1;
    uint32_t NVMCTRL_:1;
    uint32_t HSRAM_:1;
    uint32_t CMCC_:1;
    uint32_t DMAC_:1;
    uint32_t USB_:1;
    uint32_t BKUPRAM_:1;
    uint32_t PAC_:1;
    uint32_t QSPI_:1;
    uint32_t :1;
    uint32_t SDHC0_:1;
    uint32_t SDHC1_:1;
    uint32_t :2;
    uint32_t ICM_:1;
    uint32_t PUKCC_:1;
    uint32_t QSPI_2X_:1;
    uint32_t NVMCTRL_SMEEPROM_:1;
    uint32_t NVMCTRL_CACHE_:1;
    uint32_t :8;
  } bit;
  uint32_t reg;
} MCLK_AHBMASK_Type;


#define MCLK_AHBMASK_OFFSET 0x10
#define MCLK_AHBMASK_RESETVALUE _U_(0x00FFFFFF)

#define MCLK_AHBMASK_HPB0_Pos 0
#define MCLK_AHBMASK_HPB0 (_U_(0x1) << MCLK_AHBMASK_HPB0_Pos)
#define MCLK_AHBMASK_HPB1_Pos 1
#define MCLK_AHBMASK_HPB1 (_U_(0x1) << MCLK_AHBMASK_HPB1_Pos)
#define MCLK_AHBMASK_HPB2_Pos 2
#define MCLK_AHBMASK_HPB2 (_U_(0x1) << MCLK_AHBMASK_HPB2_Pos)
#define MCLK_AHBMASK_HPB3_Pos 3
#define MCLK_AHBMASK_HPB3 (_U_(0x1) << MCLK_AHBMASK_HPB3_Pos)
#define MCLK_AHBMASK_DSU_Pos 4
#define MCLK_AHBMASK_DSU (_U_(0x1) << MCLK_AHBMASK_DSU_Pos)
#define MCLK_AHBMASK_HMATRIX_Pos 5
#define MCLK_AHBMASK_HMATRIX (_U_(0x1) << MCLK_AHBMASK_HMATRIX_Pos)
#define MCLK_AHBMASK_NVMCTRL_Pos 6
#define MCLK_AHBMASK_NVMCTRL (_U_(0x1) << MCLK_AHBMASK_NVMCTRL_Pos)
#define MCLK_AHBMASK_HSRAM_Pos 7
#define MCLK_AHBMASK_HSRAM (_U_(0x1) << MCLK_AHBMASK_HSRAM_Pos)
#define MCLK_AHBMASK_CMCC_Pos 8
#define MCLK_AHBMASK_CMCC (_U_(0x1) << MCLK_AHBMASK_CMCC_Pos)
#define MCLK_AHBMASK_DMAC_Pos 9
#define MCLK_AHBMASK_DMAC (_U_(0x1) << MCLK_AHBMASK_DMAC_Pos)
#define MCLK_AHBMASK_USB_Pos 10
#define MCLK_AHBMASK_USB (_U_(0x1) << MCLK_AHBMASK_USB_Pos)
#define MCLK_AHBMASK_BKUPRAM_Pos 11
#define MCLK_AHBMASK_BKUPRAM (_U_(0x1) << MCLK_AHBMASK_BKUPRAM_Pos)
#define MCLK_AHBMASK_PAC_Pos 12
#define MCLK_AHBMASK_PAC (_U_(0x1) << MCLK_AHBMASK_PAC_Pos)
#define MCLK_AHBMASK_QSPI_Pos 13
#define MCLK_AHBMASK_QSPI (_U_(0x1) << MCLK_AHBMASK_QSPI_Pos)
#define MCLK_AHBMASK_SDHC0_Pos 15
#define MCLK_AHBMASK_SDHC0 (_U_(0x1) << MCLK_AHBMASK_SDHC0_Pos)
#define MCLK_AHBMASK_SDHC1_Pos 16
#define MCLK_AHBMASK_SDHC1 (_U_(0x1) << MCLK_AHBMASK_SDHC1_Pos)
#define MCLK_AHBMASK_ICM_Pos 19
#define MCLK_AHBMASK_ICM (_U_(0x1) << MCLK_AHBMASK_ICM_Pos)
#define MCLK_AHBMASK_PUKCC_Pos 20
#define MCLK_AHBMASK_PUKCC (_U_(0x1) << MCLK_AHBMASK_PUKCC_Pos)
#define MCLK_AHBMASK_QSPI_2X_Pos 21
#define MCLK_AHBMASK_QSPI_2X (_U_(0x1) << MCLK_AHBMASK_QSPI_2X_Pos)
#define MCLK_AHBMASK_NVMCTRL_SMEEPROM_Pos 22
#define MCLK_AHBMASK_NVMCTRL_SMEEPROM (_U_(0x1) << MCLK_AHBMASK_NVMCTRL_SMEEPROM_Pos)
#define MCLK_AHBMASK_NVMCTRL_CACHE_Pos 23
#define MCLK_AHBMASK_NVMCTRL_CACHE (_U_(0x1) << MCLK_AHBMASK_NVMCTRL_CACHE_Pos)
#define MCLK_AHBMASK_MASK _U_(0x00F9BFFF)



typedef union {
  struct {
    uint32_t PAC_:1;
    uint32_t PM_:1;
    uint32_t MCLK_:1;
    uint32_t RSTC_:1;
    uint32_t OSCCTRL_:1;
    uint32_t OSC32KCTRL_:1;
    uint32_t SUPC_:1;
    uint32_t GCLK_:1;
    uint32_t WDT_:1;
    uint32_t RTC_:1;
    uint32_t EIC_:1;
    uint32_t FREQM_:1;
    uint32_t SERCOM0_:1;
    uint32_t SERCOM1_:1;
    uint32_t TC0_:1;
    uint32_t TC1_:1;
    uint32_t :16;
  } bit;
  uint32_t reg;
} MCLK_APBAMASK_Type;


#define MCLK_APBAMASK_OFFSET 0x14
#define MCLK_APBAMASK_RESETVALUE _U_(0x000007FF)

#define MCLK_APBAMASK_PAC_Pos 0
#define MCLK_APBAMASK_PAC (_U_(0x1) << MCLK_APBAMASK_PAC_Pos)
#define MCLK_APBAMASK_PM_Pos 1
#define MCLK_APBAMASK_PM (_U_(0x1) << MCLK_APBAMASK_PM_Pos)
#define MCLK_APBAMASK_MCLK_Pos 2
#define MCLK_APBAMASK_MCLK (_U_(0x1) << MCLK_APBAMASK_MCLK_Pos)
#define MCLK_APBAMASK_RSTC_Pos 3
#define MCLK_APBAMASK_RSTC (_U_(0x1) << MCLK_APBAMASK_RSTC_Pos)
#define MCLK_APBAMASK_OSCCTRL_Pos 4
#define MCLK_APBAMASK_OSCCTRL (_U_(0x1) << MCLK_APBAMASK_OSCCTRL_Pos)
#define MCLK_APBAMASK_OSC32KCTRL_Pos 5
#define MCLK_APBAMASK_OSC32KCTRL (_U_(0x1) << MCLK_APBAMASK_OSC32KCTRL_Pos)
#define MCLK_APBAMASK_SUPC_Pos 6
#define MCLK_APBAMASK_SUPC (_U_(0x1) << MCLK_APBAMASK_SUPC_Pos)
#define MCLK_APBAMASK_GCLK_Pos 7
#define MCLK_APBAMASK_GCLK (_U_(0x1) << MCLK_APBAMASK_GCLK_Pos)
#define MCLK_APBAMASK_WDT_Pos 8
#define MCLK_APBAMASK_WDT (_U_(0x1) << MCLK_APBAMASK_WDT_Pos)
#define MCLK_APBAMASK_RTC_Pos 9
#define MCLK_APBAMASK_RTC (_U_(0x1) << MCLK_APBAMASK_RTC_Pos)
#define MCLK_APBAMASK_EIC_Pos 10
#define MCLK_APBAMASK_EIC (_U_(0x1) << MCLK_APBAMASK_EIC_Pos)
#define MCLK_APBAMASK_FREQM_Pos 11
#define MCLK_APBAMASK_FREQM (_U_(0x1) << MCLK_APBAMASK_FREQM_Pos)
#define MCLK_APBAMASK_SERCOM0_Pos 12
#define MCLK_APBAMASK_SERCOM0 (_U_(0x1) << MCLK_APBAMASK_SERCOM0_Pos)
#define MCLK_APBAMASK_SERCOM1_Pos 13
#define MCLK_APBAMASK_SERCOM1 (_U_(0x1) << MCLK_APBAMASK_SERCOM1_Pos)
#define MCLK_APBAMASK_TC0_Pos 14
#define MCLK_APBAMASK_TC0 (_U_(0x1) << MCLK_APBAMASK_TC0_Pos)
#define MCLK_APBAMASK_TC1_Pos 15
#define MCLK_APBAMASK_TC1 (_U_(0x1) << MCLK_APBAMASK_TC1_Pos)
#define MCLK_APBAMASK_MASK _U_(0x0000FFFF)



typedef union {
  struct {
    uint32_t USB_:1;
    uint32_t DSU_:1;
    uint32_t NVMCTRL_:1;
    uint32_t :1;
    uint32_t PORT_:1;
    uint32_t :1;
    uint32_t HMATRIX_:1;
    uint32_t EVSYS_:1;
    uint32_t :1;
    uint32_t SERCOM2_:1;
    uint32_t SERCOM3_:1;
    uint32_t TCC0_:1;
    uint32_t TCC1_:1;
    uint32_t TC2_:1;
    uint32_t TC3_:1;
    uint32_t TAL_:1;
    uint32_t RAMECC_:1;
    uint32_t :15;
  } bit;
  uint32_t reg;
} MCLK_APBBMASK_Type;


#define MCLK_APBBMASK_OFFSET 0x18
#define MCLK_APBBMASK_RESETVALUE _U_(0x00018056)

#define MCLK_APBBMASK_USB_Pos 0
#define MCLK_APBBMASK_USB (_U_(0x1) << MCLK_APBBMASK_USB_Pos)
#define MCLK_APBBMASK_DSU_Pos 1
#define MCLK_APBBMASK_DSU (_U_(0x1) << MCLK_APBBMASK_DSU_Pos)
#define MCLK_APBBMASK_NVMCTRL_Pos 2
#define MCLK_APBBMASK_NVMCTRL (_U_(0x1) << MCLK_APBBMASK_NVMCTRL_Pos)
#define MCLK_APBBMASK_PORT_Pos 4
#define MCLK_APBBMASK_PORT (_U_(0x1) << MCLK_APBBMASK_PORT_Pos)
#define MCLK_APBBMASK_HMATRIX_Pos 6
#define MCLK_APBBMASK_HMATRIX (_U_(0x1) << MCLK_APBBMASK_HMATRIX_Pos)
#define MCLK_APBBMASK_EVSYS_Pos 7
#define MCLK_APBBMASK_EVSYS (_U_(0x1) << MCLK_APBBMASK_EVSYS_Pos)
#define MCLK_APBBMASK_SERCOM2_Pos 9
#define MCLK_APBBMASK_SERCOM2 (_U_(0x1) << MCLK_APBBMASK_SERCOM2_Pos)
#define MCLK_APBBMASK_SERCOM3_Pos 10
#define MCLK_APBBMASK_SERCOM3 (_U_(0x1) << MCLK_APBBMASK_SERCOM3_Pos)
#define MCLK_APBBMASK_TCC0_Pos 11
#define MCLK_APBBMASK_TCC0 (_U_(0x1) << MCLK_APBBMASK_TCC0_Pos)
#define MCLK_APBBMASK_TCC1_Pos 12
#define MCLK_APBBMASK_TCC1 (_U_(0x1) << MCLK_APBBMASK_TCC1_Pos)
#define MCLK_APBBMASK_TC2_Pos 13
#define MCLK_APBBMASK_TC2 (_U_(0x1) << MCLK_APBBMASK_TC2_Pos)
#define MCLK_APBBMASK_TC3_Pos 14
#define MCLK_APBBMASK_TC3 (_U_(0x1) << MCLK_APBBMASK_TC3_Pos)
#define MCLK_APBBMASK_TAL_Pos 15
#define MCLK_APBBMASK_TAL (_U_(0x1) << MCLK_APBBMASK_TAL_Pos)
#define MCLK_APBBMASK_RAMECC_Pos 16
#define MCLK_APBBMASK_RAMECC (_U_(0x1) << MCLK_APBBMASK_RAMECC_Pos)
#define MCLK_APBBMASK_MASK _U_(0x0001FED7)



typedef union {
  struct {
    uint32_t :3;
    uint32_t TCC2_:1;
    uint32_t TCC3_:1;
    uint32_t TC4_:1;
    uint32_t TC5_:1;
    uint32_t PDEC_:1;
    uint32_t AC_:1;
    uint32_t AES_:1;
    uint32_t TRNG_:1;
    uint32_t ICM_:1;
    uint32_t :1;
    uint32_t QSPI_:1;
    uint32_t CCL_:1;
    uint32_t :17;
  } bit;
  uint32_t reg;
} MCLK_APBCMASK_Type;


#define MCLK_APBCMASK_OFFSET 0x1C
#define MCLK_APBCMASK_RESETVALUE _U_(0x00002000)

#define MCLK_APBCMASK_TCC2_Pos 3
#define MCLK_APBCMASK_TCC2 (_U_(0x1) << MCLK_APBCMASK_TCC2_Pos)
#define MCLK_APBCMASK_TCC3_Pos 4
#define MCLK_APBCMASK_TCC3 (_U_(0x1) << MCLK_APBCMASK_TCC3_Pos)
#define MCLK_APBCMASK_TC4_Pos 5
#define MCLK_APBCMASK_TC4 (_U_(0x1) << MCLK_APBCMASK_TC4_Pos)
#define MCLK_APBCMASK_TC5_Pos 6
#define MCLK_APBCMASK_TC5 (_U_(0x1) << MCLK_APBCMASK_TC5_Pos)
#define MCLK_APBCMASK_PDEC_Pos 7
#define MCLK_APBCMASK_PDEC (_U_(0x1) << MCLK_APBCMASK_PDEC_Pos)
#define MCLK_APBCMASK_AC_Pos 8
#define MCLK_APBCMASK_AC (_U_(0x1) << MCLK_APBCMASK_AC_Pos)
#define MCLK_APBCMASK_AES_Pos 9
#define MCLK_APBCMASK_AES (_U_(0x1) << MCLK_APBCMASK_AES_Pos)
#define MCLK_APBCMASK_TRNG_Pos 10
#define MCLK_APBCMASK_TRNG (_U_(0x1) << MCLK_APBCMASK_TRNG_Pos)
#define MCLK_APBCMASK_ICM_Pos 11
#define MCLK_APBCMASK_ICM (_U_(0x1) << MCLK_APBCMASK_ICM_Pos)
#define MCLK_APBCMASK_QSPI_Pos 13
#define MCLK_APBCMASK_QSPI (_U_(0x1) << MCLK_APBCMASK_QSPI_Pos)
#define MCLK_APBCMASK_CCL_Pos 14
#define MCLK_APBCMASK_CCL (_U_(0x1) << MCLK_APBCMASK_CCL_Pos)
#define MCLK_APBCMASK_MASK _U_(0x00006FF8)



typedef union {
  struct {
    uint32_t SERCOM4_:1;
    uint32_t SERCOM5_:1;
    uint32_t SERCOM6_:1;
    uint32_t SERCOM7_:1;
    uint32_t TCC4_:1;
    uint32_t TC6_:1;
    uint32_t TC7_:1;
    uint32_t ADC0_:1;
    uint32_t ADC1_:1;
    uint32_t DAC_:1;
    uint32_t I2S_:1;
    uint32_t PCC_:1;
    uint32_t :20;
  } bit;
  uint32_t reg;
} MCLK_APBDMASK_Type;


#define MCLK_APBDMASK_OFFSET 0x20
#define MCLK_APBDMASK_RESETVALUE _U_(0x00000000)

#define MCLK_APBDMASK_SERCOM4_Pos 0
#define MCLK_APBDMASK_SERCOM4 (_U_(0x1) << MCLK_APBDMASK_SERCOM4_Pos)
#define MCLK_APBDMASK_SERCOM5_Pos 1
#define MCLK_APBDMASK_SERCOM5 (_U_(0x1) << MCLK_APBDMASK_SERCOM5_Pos)
#define MCLK_APBDMASK_SERCOM6_Pos 2
#define MCLK_APBDMASK_SERCOM6 (_U_(0x1) << MCLK_APBDMASK_SERCOM6_Pos)
#define MCLK_APBDMASK_SERCOM7_Pos 3
#define MCLK_APBDMASK_SERCOM7 (_U_(0x1) << MCLK_APBDMASK_SERCOM7_Pos)
#define MCLK_APBDMASK_TCC4_Pos 4
#define MCLK_APBDMASK_TCC4 (_U_(0x1) << MCLK_APBDMASK_TCC4_Pos)
#define MCLK_APBDMASK_TC6_Pos 5
#define MCLK_APBDMASK_TC6 (_U_(0x1) << MCLK_APBDMASK_TC6_Pos)
#define MCLK_APBDMASK_TC7_Pos 6
#define MCLK_APBDMASK_TC7 (_U_(0x1) << MCLK_APBDMASK_TC7_Pos)
#define MCLK_APBDMASK_ADC0_Pos 7
#define MCLK_APBDMASK_ADC0 (_U_(0x1) << MCLK_APBDMASK_ADC0_Pos)
#define MCLK_APBDMASK_ADC1_Pos 8
#define MCLK_APBDMASK_ADC1 (_U_(0x1) << MCLK_APBDMASK_ADC1_Pos)
#define MCLK_APBDMASK_DAC_Pos 9
#define MCLK_APBDMASK_DAC (_U_(0x1) << MCLK_APBDMASK_DAC_Pos)
#define MCLK_APBDMASK_I2S_Pos 10
#define MCLK_APBDMASK_I2S (_U_(0x1) << MCLK_APBDMASK_I2S_Pos)
#define MCLK_APBDMASK_PCC_Pos 11
#define MCLK_APBDMASK_PCC (_U_(0x1) << MCLK_APBDMASK_PCC_Pos)
#define MCLK_APBDMASK_MASK _U_(0x00000FFF)



typedef struct {
       RoReg8 Reserved1[0x1];
  volatile MCLK_INTENCLR_Type INTENCLR;
  volatile MCLK_INTENSET_Type INTENSET;
  volatile MCLK_INTFLAG_Type INTFLAG;
  volatile const MCLK_HSDIV_Type HSDIV;
  volatile MCLK_CPUDIV_Type CPUDIV;
       RoReg8 Reserved2[0xA];
  volatile MCLK_AHBMASK_Type AHBMASK;
  volatile MCLK_APBAMASK_Type APBAMASK;
  volatile MCLK_APBBMASK_Type APBBMASK;
  volatile MCLK_APBCMASK_Type APBCMASK;
  volatile MCLK_APBDMASK_Type APBDMASK;
} Mclk;
# 597 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/nvmctrl.h" 1
# 31 "asf4/samd51/include/component/nvmctrl.h"
#define _SAMD51_NVMCTRL_COMPONENT_ 







#define NVMCTRL_U2409 
#define REV_NVMCTRL 0x100



typedef union {
  struct {
    uint16_t :2;
    uint16_t AUTOWS:1;
    uint16_t SUSPEN:1;
    uint16_t WMODE:2;
    uint16_t PRM:2;
    uint16_t RWS:4;
    uint16_t AHBNS0:1;
    uint16_t AHBNS1:1;
    uint16_t CACHEDIS0:1;
    uint16_t CACHEDIS1:1;
  } bit;
  uint16_t reg;
} NVMCTRL_CTRLA_Type;


#define NVMCTRL_CTRLA_OFFSET 0x00
#define NVMCTRL_CTRLA_RESETVALUE _U_(0x0004)

#define NVMCTRL_CTRLA_AUTOWS_Pos 2
#define NVMCTRL_CTRLA_AUTOWS (_U_(0x1) << NVMCTRL_CTRLA_AUTOWS_Pos)
#define NVMCTRL_CTRLA_SUSPEN_Pos 3
#define NVMCTRL_CTRLA_SUSPEN (_U_(0x1) << NVMCTRL_CTRLA_SUSPEN_Pos)
#define NVMCTRL_CTRLA_WMODE_Pos 4
#define NVMCTRL_CTRLA_WMODE_Msk (_U_(0x3) << NVMCTRL_CTRLA_WMODE_Pos)
#define NVMCTRL_CTRLA_WMODE(value) (NVMCTRL_CTRLA_WMODE_Msk & ((value) << NVMCTRL_CTRLA_WMODE_Pos))
#define NVMCTRL_CTRLA_WMODE_MAN_Val _U_(0x0)
#define NVMCTRL_CTRLA_WMODE_ADW_Val _U_(0x1)
#define NVMCTRL_CTRLA_WMODE_AQW_Val _U_(0x2)
#define NVMCTRL_CTRLA_WMODE_AP_Val _U_(0x3)
#define NVMCTRL_CTRLA_WMODE_MAN (NVMCTRL_CTRLA_WMODE_MAN_Val << NVMCTRL_CTRLA_WMODE_Pos)
#define NVMCTRL_CTRLA_WMODE_ADW (NVMCTRL_CTRLA_WMODE_ADW_Val << NVMCTRL_CTRLA_WMODE_Pos)
#define NVMCTRL_CTRLA_WMODE_AQW (NVMCTRL_CTRLA_WMODE_AQW_Val << NVMCTRL_CTRLA_WMODE_Pos)
#define NVMCTRL_CTRLA_WMODE_AP (NVMCTRL_CTRLA_WMODE_AP_Val << NVMCTRL_CTRLA_WMODE_Pos)
#define NVMCTRL_CTRLA_PRM_Pos 6
#define NVMCTRL_CTRLA_PRM_Msk (_U_(0x3) << NVMCTRL_CTRLA_PRM_Pos)
#define NVMCTRL_CTRLA_PRM(value) (NVMCTRL_CTRLA_PRM_Msk & ((value) << NVMCTRL_CTRLA_PRM_Pos))
#define NVMCTRL_CTRLA_PRM_SEMIAUTO_Val _U_(0x0)
#define NVMCTRL_CTRLA_PRM_FULLAUTO_Val _U_(0x1)
#define NVMCTRL_CTRLA_PRM_MANUAL_Val _U_(0x3)
#define NVMCTRL_CTRLA_PRM_SEMIAUTO (NVMCTRL_CTRLA_PRM_SEMIAUTO_Val << NVMCTRL_CTRLA_PRM_Pos)
#define NVMCTRL_CTRLA_PRM_FULLAUTO (NVMCTRL_CTRLA_PRM_FULLAUTO_Val << NVMCTRL_CTRLA_PRM_Pos)
#define NVMCTRL_CTRLA_PRM_MANUAL (NVMCTRL_CTRLA_PRM_MANUAL_Val << NVMCTRL_CTRLA_PRM_Pos)
#define NVMCTRL_CTRLA_RWS_Pos 8
#define NVMCTRL_CTRLA_RWS_Msk (_U_(0xF) << NVMCTRL_CTRLA_RWS_Pos)
#define NVMCTRL_CTRLA_RWS(value) (NVMCTRL_CTRLA_RWS_Msk & ((value) << NVMCTRL_CTRLA_RWS_Pos))
#define NVMCTRL_CTRLA_AHBNS0_Pos 12
#define NVMCTRL_CTRLA_AHBNS0 (_U_(0x1) << NVMCTRL_CTRLA_AHBNS0_Pos)
#define NVMCTRL_CTRLA_AHBNS1_Pos 13
#define NVMCTRL_CTRLA_AHBNS1 (_U_(0x1) << NVMCTRL_CTRLA_AHBNS1_Pos)
#define NVMCTRL_CTRLA_CACHEDIS0_Pos 14
#define NVMCTRL_CTRLA_CACHEDIS0 (_U_(0x1) << NVMCTRL_CTRLA_CACHEDIS0_Pos)
#define NVMCTRL_CTRLA_CACHEDIS1_Pos 15
#define NVMCTRL_CTRLA_CACHEDIS1 (_U_(0x1) << NVMCTRL_CTRLA_CACHEDIS1_Pos)
#define NVMCTRL_CTRLA_MASK _U_(0xFFFC)



typedef union {
  struct {
    uint16_t CMD:7;
    uint16_t :1;
    uint16_t CMDEX:8;
  } bit;
  uint16_t reg;
} NVMCTRL_CTRLB_Type;


#define NVMCTRL_CTRLB_OFFSET 0x04
#define NVMCTRL_CTRLB_RESETVALUE _U_(0x0000)

#define NVMCTRL_CTRLB_CMD_Pos 0
#define NVMCTRL_CTRLB_CMD_Msk (_U_(0x7F) << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD(value) (NVMCTRL_CTRLB_CMD_Msk & ((value) << NVMCTRL_CTRLB_CMD_Pos))
#define NVMCTRL_CTRLB_CMD_EP_Val _U_(0x0)
#define NVMCTRL_CTRLB_CMD_EB_Val _U_(0x1)
#define NVMCTRL_CTRLB_CMD_WP_Val _U_(0x3)
#define NVMCTRL_CTRLB_CMD_WQW_Val _U_(0x4)
#define NVMCTRL_CTRLB_CMD_SWRST_Val _U_(0x10)
#define NVMCTRL_CTRLB_CMD_LR_Val _U_(0x11)
#define NVMCTRL_CTRLB_CMD_UR_Val _U_(0x12)
#define NVMCTRL_CTRLB_CMD_SPRM_Val _U_(0x13)
#define NVMCTRL_CTRLB_CMD_CPRM_Val _U_(0x14)
#define NVMCTRL_CTRLB_CMD_PBC_Val _U_(0x15)
#define NVMCTRL_CTRLB_CMD_SSB_Val _U_(0x16)
#define NVMCTRL_CTRLB_CMD_BKSWRST_Val _U_(0x17)
#define NVMCTRL_CTRLB_CMD_CELCK_Val _U_(0x18)
#define NVMCTRL_CTRLB_CMD_CEULCK_Val _U_(0x19)
#define NVMCTRL_CTRLB_CMD_SBPDIS_Val _U_(0x1A)
#define NVMCTRL_CTRLB_CMD_CBPDIS_Val _U_(0x1B)
#define NVMCTRL_CTRLB_CMD_ASEES0_Val _U_(0x30)
#define NVMCTRL_CTRLB_CMD_ASEES1_Val _U_(0x31)
#define NVMCTRL_CTRLB_CMD_SEERALOC_Val _U_(0x32)
#define NVMCTRL_CTRLB_CMD_SEEFLUSH_Val _U_(0x33)
#define NVMCTRL_CTRLB_CMD_LSEE_Val _U_(0x34)
#define NVMCTRL_CTRLB_CMD_USEE_Val _U_(0x35)
#define NVMCTRL_CTRLB_CMD_LSEER_Val _U_(0x36)
#define NVMCTRL_CTRLB_CMD_USEER_Val _U_(0x37)
#define NVMCTRL_CTRLB_CMD_EP (NVMCTRL_CTRLB_CMD_EP_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_EB (NVMCTRL_CTRLB_CMD_EB_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_WP (NVMCTRL_CTRLB_CMD_WP_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_WQW (NVMCTRL_CTRLB_CMD_WQW_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_SWRST (NVMCTRL_CTRLB_CMD_SWRST_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_LR (NVMCTRL_CTRLB_CMD_LR_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_UR (NVMCTRL_CTRLB_CMD_UR_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_SPRM (NVMCTRL_CTRLB_CMD_SPRM_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_CPRM (NVMCTRL_CTRLB_CMD_CPRM_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_PBC (NVMCTRL_CTRLB_CMD_PBC_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_SSB (NVMCTRL_CTRLB_CMD_SSB_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_BKSWRST (NVMCTRL_CTRLB_CMD_BKSWRST_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_CELCK (NVMCTRL_CTRLB_CMD_CELCK_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_CEULCK (NVMCTRL_CTRLB_CMD_CEULCK_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_SBPDIS (NVMCTRL_CTRLB_CMD_SBPDIS_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_CBPDIS (NVMCTRL_CTRLB_CMD_CBPDIS_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_ASEES0 (NVMCTRL_CTRLB_CMD_ASEES0_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_ASEES1 (NVMCTRL_CTRLB_CMD_ASEES1_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_SEERALOC (NVMCTRL_CTRLB_CMD_SEERALOC_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_SEEFLUSH (NVMCTRL_CTRLB_CMD_SEEFLUSH_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_LSEE (NVMCTRL_CTRLB_CMD_LSEE_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_USEE (NVMCTRL_CTRLB_CMD_USEE_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_LSEER (NVMCTRL_CTRLB_CMD_LSEER_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMD_USEER (NVMCTRL_CTRLB_CMD_USEER_Val << NVMCTRL_CTRLB_CMD_Pos)
#define NVMCTRL_CTRLB_CMDEX_Pos 8
#define NVMCTRL_CTRLB_CMDEX_Msk (_U_(0xFF) << NVMCTRL_CTRLB_CMDEX_Pos)
#define NVMCTRL_CTRLB_CMDEX(value) (NVMCTRL_CTRLB_CMDEX_Msk & ((value) << NVMCTRL_CTRLB_CMDEX_Pos))
#define NVMCTRL_CTRLB_CMDEX_KEY_Val _U_(0xA5)
#define NVMCTRL_CTRLB_CMDEX_KEY (NVMCTRL_CTRLB_CMDEX_KEY_Val << NVMCTRL_CTRLB_CMDEX_Pos)
#define NVMCTRL_CTRLB_MASK _U_(0xFF7F)



typedef union {
  struct {
    uint32_t NVMP:16;
    uint32_t PSZ:3;
    uint32_t :12;
    uint32_t SEE:1;
  } bit;
  uint32_t reg;
} NVMCTRL_PARAM_Type;


#define NVMCTRL_PARAM_OFFSET 0x08
#define NVMCTRL_PARAM_RESETVALUE _U_(0x00060000)

#define NVMCTRL_PARAM_NVMP_Pos 0
#define NVMCTRL_PARAM_NVMP_Msk (_U_(0xFFFF) << NVMCTRL_PARAM_NVMP_Pos)
#define NVMCTRL_PARAM_NVMP(value) (NVMCTRL_PARAM_NVMP_Msk & ((value) << NVMCTRL_PARAM_NVMP_Pos))
#define NVMCTRL_PARAM_PSZ_Pos 16
#define NVMCTRL_PARAM_PSZ_Msk (_U_(0x7) << NVMCTRL_PARAM_PSZ_Pos)
#define NVMCTRL_PARAM_PSZ(value) (NVMCTRL_PARAM_PSZ_Msk & ((value) << NVMCTRL_PARAM_PSZ_Pos))
#define NVMCTRL_PARAM_PSZ_8_Val _U_(0x0)
#define NVMCTRL_PARAM_PSZ_16_Val _U_(0x1)
#define NVMCTRL_PARAM_PSZ_32_Val _U_(0x2)
#define NVMCTRL_PARAM_PSZ_64_Val _U_(0x3)
#define NVMCTRL_PARAM_PSZ_128_Val _U_(0x4)
#define NVMCTRL_PARAM_PSZ_256_Val _U_(0x5)
#define NVMCTRL_PARAM_PSZ_512_Val _U_(0x6)
#define NVMCTRL_PARAM_PSZ_1024_Val _U_(0x7)
#define NVMCTRL_PARAM_PSZ_8 (NVMCTRL_PARAM_PSZ_8_Val << NVMCTRL_PARAM_PSZ_Pos)
#define NVMCTRL_PARAM_PSZ_16 (NVMCTRL_PARAM_PSZ_16_Val << NVMCTRL_PARAM_PSZ_Pos)
#define NVMCTRL_PARAM_PSZ_32 (NVMCTRL_PARAM_PSZ_32_Val << NVMCTRL_PARAM_PSZ_Pos)
#define NVMCTRL_PARAM_PSZ_64 (NVMCTRL_PARAM_PSZ_64_Val << NVMCTRL_PARAM_PSZ_Pos)
#define NVMCTRL_PARAM_PSZ_128 (NVMCTRL_PARAM_PSZ_128_Val << NVMCTRL_PARAM_PSZ_Pos)
#define NVMCTRL_PARAM_PSZ_256 (NVMCTRL_PARAM_PSZ_256_Val << NVMCTRL_PARAM_PSZ_Pos)
#define NVMCTRL_PARAM_PSZ_512 (NVMCTRL_PARAM_PSZ_512_Val << NVMCTRL_PARAM_PSZ_Pos)
#define NVMCTRL_PARAM_PSZ_1024 (NVMCTRL_PARAM_PSZ_1024_Val << NVMCTRL_PARAM_PSZ_Pos)
#define NVMCTRL_PARAM_SEE_Pos 31
#define NVMCTRL_PARAM_SEE (_U_(0x1) << NVMCTRL_PARAM_SEE_Pos)
#define NVMCTRL_PARAM_MASK _U_(0x8007FFFF)



typedef union {
  struct {
    uint16_t DONE:1;
    uint16_t ADDRE:1;
    uint16_t PROGE:1;
    uint16_t LOCKE:1;
    uint16_t ECCSE:1;
    uint16_t ECCDE:1;
    uint16_t NVME:1;
    uint16_t SUSP:1;
    uint16_t SEESFULL:1;
    uint16_t SEESOVF:1;
    uint16_t SEEWRC:1;
    uint16_t :5;
  } bit;
  uint16_t reg;
} NVMCTRL_INTENCLR_Type;


#define NVMCTRL_INTENCLR_OFFSET 0x0C
#define NVMCTRL_INTENCLR_RESETVALUE _U_(0x0000)

#define NVMCTRL_INTENCLR_DONE_Pos 0
#define NVMCTRL_INTENCLR_DONE (_U_(0x1) << NVMCTRL_INTENCLR_DONE_Pos)
#define NVMCTRL_INTENCLR_ADDRE_Pos 1
#define NVMCTRL_INTENCLR_ADDRE (_U_(0x1) << NVMCTRL_INTENCLR_ADDRE_Pos)
#define NVMCTRL_INTENCLR_PROGE_Pos 2
#define NVMCTRL_INTENCLR_PROGE (_U_(0x1) << NVMCTRL_INTENCLR_PROGE_Pos)
#define NVMCTRL_INTENCLR_LOCKE_Pos 3
#define NVMCTRL_INTENCLR_LOCKE (_U_(0x1) << NVMCTRL_INTENCLR_LOCKE_Pos)
#define NVMCTRL_INTENCLR_ECCSE_Pos 4
#define NVMCTRL_INTENCLR_ECCSE (_U_(0x1) << NVMCTRL_INTENCLR_ECCSE_Pos)
#define NVMCTRL_INTENCLR_ECCDE_Pos 5
#define NVMCTRL_INTENCLR_ECCDE (_U_(0x1) << NVMCTRL_INTENCLR_ECCDE_Pos)
#define NVMCTRL_INTENCLR_NVME_Pos 6
#define NVMCTRL_INTENCLR_NVME (_U_(0x1) << NVMCTRL_INTENCLR_NVME_Pos)
#define NVMCTRL_INTENCLR_SUSP_Pos 7
#define NVMCTRL_INTENCLR_SUSP (_U_(0x1) << NVMCTRL_INTENCLR_SUSP_Pos)
#define NVMCTRL_INTENCLR_SEESFULL_Pos 8
#define NVMCTRL_INTENCLR_SEESFULL (_U_(0x1) << NVMCTRL_INTENCLR_SEESFULL_Pos)
#define NVMCTRL_INTENCLR_SEESOVF_Pos 9
#define NVMCTRL_INTENCLR_SEESOVF (_U_(0x1) << NVMCTRL_INTENCLR_SEESOVF_Pos)
#define NVMCTRL_INTENCLR_SEEWRC_Pos 10
#define NVMCTRL_INTENCLR_SEEWRC (_U_(0x1) << NVMCTRL_INTENCLR_SEEWRC_Pos)
#define NVMCTRL_INTENCLR_MASK _U_(0x07FF)



typedef union {
  struct {
    uint16_t DONE:1;
    uint16_t ADDRE:1;
    uint16_t PROGE:1;
    uint16_t LOCKE:1;
    uint16_t ECCSE:1;
    uint16_t ECCDE:1;
    uint16_t NVME:1;
    uint16_t SUSP:1;
    uint16_t SEESFULL:1;
    uint16_t SEESOVF:1;
    uint16_t SEEWRC:1;
    uint16_t :5;
  } bit;
  uint16_t reg;
} NVMCTRL_INTENSET_Type;


#define NVMCTRL_INTENSET_OFFSET 0x0E
#define NVMCTRL_INTENSET_RESETVALUE _U_(0x0000)

#define NVMCTRL_INTENSET_DONE_Pos 0
#define NVMCTRL_INTENSET_DONE (_U_(0x1) << NVMCTRL_INTENSET_DONE_Pos)
#define NVMCTRL_INTENSET_ADDRE_Pos 1
#define NVMCTRL_INTENSET_ADDRE (_U_(0x1) << NVMCTRL_INTENSET_ADDRE_Pos)
#define NVMCTRL_INTENSET_PROGE_Pos 2
#define NVMCTRL_INTENSET_PROGE (_U_(0x1) << NVMCTRL_INTENSET_PROGE_Pos)
#define NVMCTRL_INTENSET_LOCKE_Pos 3
#define NVMCTRL_INTENSET_LOCKE (_U_(0x1) << NVMCTRL_INTENSET_LOCKE_Pos)
#define NVMCTRL_INTENSET_ECCSE_Pos 4
#define NVMCTRL_INTENSET_ECCSE (_U_(0x1) << NVMCTRL_INTENSET_ECCSE_Pos)
#define NVMCTRL_INTENSET_ECCDE_Pos 5
#define NVMCTRL_INTENSET_ECCDE (_U_(0x1) << NVMCTRL_INTENSET_ECCDE_Pos)
#define NVMCTRL_INTENSET_NVME_Pos 6
#define NVMCTRL_INTENSET_NVME (_U_(0x1) << NVMCTRL_INTENSET_NVME_Pos)
#define NVMCTRL_INTENSET_SUSP_Pos 7
#define NVMCTRL_INTENSET_SUSP (_U_(0x1) << NVMCTRL_INTENSET_SUSP_Pos)
#define NVMCTRL_INTENSET_SEESFULL_Pos 8
#define NVMCTRL_INTENSET_SEESFULL (_U_(0x1) << NVMCTRL_INTENSET_SEESFULL_Pos)
#define NVMCTRL_INTENSET_SEESOVF_Pos 9
#define NVMCTRL_INTENSET_SEESOVF (_U_(0x1) << NVMCTRL_INTENSET_SEESOVF_Pos)
#define NVMCTRL_INTENSET_SEEWRC_Pos 10
#define NVMCTRL_INTENSET_SEEWRC (_U_(0x1) << NVMCTRL_INTENSET_SEEWRC_Pos)
#define NVMCTRL_INTENSET_MASK _U_(0x07FF)



typedef union {
  struct {
    volatile const uint16_t DONE:1;
    volatile const uint16_t ADDRE:1;
    volatile const uint16_t PROGE:1;
    volatile const uint16_t LOCKE:1;
    volatile const uint16_t ECCSE:1;
    volatile const uint16_t ECCDE:1;
    volatile const uint16_t NVME:1;
    volatile const uint16_t SUSP:1;
    volatile const uint16_t SEESFULL:1;
    volatile const uint16_t SEESOVF:1;
    volatile const uint16_t SEEWRC:1;
    volatile const uint16_t :5;
  } bit;
  uint16_t reg;
} NVMCTRL_INTFLAG_Type;


#define NVMCTRL_INTFLAG_OFFSET 0x10
#define NVMCTRL_INTFLAG_RESETVALUE _U_(0x0000)

#define NVMCTRL_INTFLAG_DONE_Pos 0
#define NVMCTRL_INTFLAG_DONE (_U_(0x1) << NVMCTRL_INTFLAG_DONE_Pos)
#define NVMCTRL_INTFLAG_ADDRE_Pos 1
#define NVMCTRL_INTFLAG_ADDRE (_U_(0x1) << NVMCTRL_INTFLAG_ADDRE_Pos)
#define NVMCTRL_INTFLAG_PROGE_Pos 2
#define NVMCTRL_INTFLAG_PROGE (_U_(0x1) << NVMCTRL_INTFLAG_PROGE_Pos)
#define NVMCTRL_INTFLAG_LOCKE_Pos 3
#define NVMCTRL_INTFLAG_LOCKE (_U_(0x1) << NVMCTRL_INTFLAG_LOCKE_Pos)
#define NVMCTRL_INTFLAG_ECCSE_Pos 4
#define NVMCTRL_INTFLAG_ECCSE (_U_(0x1) << NVMCTRL_INTFLAG_ECCSE_Pos)
#define NVMCTRL_INTFLAG_ECCDE_Pos 5
#define NVMCTRL_INTFLAG_ECCDE (_U_(0x1) << NVMCTRL_INTFLAG_ECCDE_Pos)
#define NVMCTRL_INTFLAG_NVME_Pos 6
#define NVMCTRL_INTFLAG_NVME (_U_(0x1) << NVMCTRL_INTFLAG_NVME_Pos)
#define NVMCTRL_INTFLAG_SUSP_Pos 7
#define NVMCTRL_INTFLAG_SUSP (_U_(0x1) << NVMCTRL_INTFLAG_SUSP_Pos)
#define NVMCTRL_INTFLAG_SEESFULL_Pos 8
#define NVMCTRL_INTFLAG_SEESFULL (_U_(0x1) << NVMCTRL_INTFLAG_SEESFULL_Pos)
#define NVMCTRL_INTFLAG_SEESOVF_Pos 9
#define NVMCTRL_INTFLAG_SEESOVF (_U_(0x1) << NVMCTRL_INTFLAG_SEESOVF_Pos)
#define NVMCTRL_INTFLAG_SEEWRC_Pos 10
#define NVMCTRL_INTFLAG_SEEWRC (_U_(0x1) << NVMCTRL_INTFLAG_SEEWRC_Pos)
#define NVMCTRL_INTFLAG_MASK _U_(0x07FF)



typedef union {
  struct {
    uint16_t READY:1;
    uint16_t PRM:1;
    uint16_t LOAD:1;
    uint16_t SUSP:1;
    uint16_t AFIRST:1;
    uint16_t BPDIS:1;
    uint16_t :2;
    uint16_t BOOTPROT:4;
    uint16_t :4;
  } bit;
  uint16_t reg;
} NVMCTRL_STATUS_Type;


#define NVMCTRL_STATUS_OFFSET 0x12
#define NVMCTRL_STATUS_RESETVALUE _U_(0x0000)

#define NVMCTRL_STATUS_READY_Pos 0
#define NVMCTRL_STATUS_READY (_U_(0x1) << NVMCTRL_STATUS_READY_Pos)
#define NVMCTRL_STATUS_PRM_Pos 1
#define NVMCTRL_STATUS_PRM (_U_(0x1) << NVMCTRL_STATUS_PRM_Pos)
#define NVMCTRL_STATUS_LOAD_Pos 2
#define NVMCTRL_STATUS_LOAD (_U_(0x1) << NVMCTRL_STATUS_LOAD_Pos)
#define NVMCTRL_STATUS_SUSP_Pos 3
#define NVMCTRL_STATUS_SUSP (_U_(0x1) << NVMCTRL_STATUS_SUSP_Pos)
#define NVMCTRL_STATUS_AFIRST_Pos 4
#define NVMCTRL_STATUS_AFIRST (_U_(0x1) << NVMCTRL_STATUS_AFIRST_Pos)
#define NVMCTRL_STATUS_BPDIS_Pos 5
#define NVMCTRL_STATUS_BPDIS (_U_(0x1) << NVMCTRL_STATUS_BPDIS_Pos)
#define NVMCTRL_STATUS_BOOTPROT_Pos 8
#define NVMCTRL_STATUS_BOOTPROT_Msk (_U_(0xF) << NVMCTRL_STATUS_BOOTPROT_Pos)
#define NVMCTRL_STATUS_BOOTPROT(value) (NVMCTRL_STATUS_BOOTPROT_Msk & ((value) << NVMCTRL_STATUS_BOOTPROT_Pos))
#define NVMCTRL_STATUS_MASK _U_(0x0F3F)



typedef union {
  struct {
    uint32_t ADDR:24;
    uint32_t :8;
  } bit;
  uint32_t reg;
} NVMCTRL_ADDR_Type;


#define NVMCTRL_ADDR_OFFSET 0x14
#define NVMCTRL_ADDR_RESETVALUE _U_(0x00000000)

#define NVMCTRL_ADDR_ADDR_Pos 0
#define NVMCTRL_ADDR_ADDR_Msk (_U_(0xFFFFFF) << NVMCTRL_ADDR_ADDR_Pos)
#define NVMCTRL_ADDR_ADDR(value) (NVMCTRL_ADDR_ADDR_Msk & ((value) << NVMCTRL_ADDR_ADDR_Pos))
#define NVMCTRL_ADDR_MASK _U_(0x00FFFFFF)



typedef union {
  struct {
    uint32_t RUNLOCK:32;
  } bit;
  uint32_t reg;
} NVMCTRL_RUNLOCK_Type;


#define NVMCTRL_RUNLOCK_OFFSET 0x18
#define NVMCTRL_RUNLOCK_RESETVALUE _U_(0x00000000)

#define NVMCTRL_RUNLOCK_RUNLOCK_Pos 0
#define NVMCTRL_RUNLOCK_RUNLOCK_Msk (_U_(0xFFFFFFFF) << NVMCTRL_RUNLOCK_RUNLOCK_Pos)
#define NVMCTRL_RUNLOCK_RUNLOCK(value) (NVMCTRL_RUNLOCK_RUNLOCK_Msk & ((value) << NVMCTRL_RUNLOCK_RUNLOCK_Pos))
#define NVMCTRL_RUNLOCK_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t DATA:32;
  } bit;
  uint32_t reg;
} NVMCTRL_PBLDATA_Type;


#define NVMCTRL_PBLDATA_OFFSET 0x1C
#define NVMCTRL_PBLDATA_RESETVALUE _U_(0xFFFFFFFF)

#define NVMCTRL_PBLDATA_DATA_Pos 0
#define NVMCTRL_PBLDATA_DATA_Msk (_U_(0xFFFFFFFF) << NVMCTRL_PBLDATA_DATA_Pos)
#define NVMCTRL_PBLDATA_DATA(value) (NVMCTRL_PBLDATA_DATA_Msk & ((value) << NVMCTRL_PBLDATA_DATA_Pos))
#define NVMCTRL_PBLDATA_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t ADDR:24;
    uint32_t :4;
    uint32_t TYPEL:2;
    uint32_t TYPEH:2;
  } bit;
  uint32_t reg;
} NVMCTRL_ECCERR_Type;


#define NVMCTRL_ECCERR_OFFSET 0x24
#define NVMCTRL_ECCERR_RESETVALUE _U_(0x00000000)

#define NVMCTRL_ECCERR_ADDR_Pos 0
#define NVMCTRL_ECCERR_ADDR_Msk (_U_(0xFFFFFF) << NVMCTRL_ECCERR_ADDR_Pos)
#define NVMCTRL_ECCERR_ADDR(value) (NVMCTRL_ECCERR_ADDR_Msk & ((value) << NVMCTRL_ECCERR_ADDR_Pos))
#define NVMCTRL_ECCERR_TYPEL_Pos 28
#define NVMCTRL_ECCERR_TYPEL_Msk (_U_(0x3) << NVMCTRL_ECCERR_TYPEL_Pos)
#define NVMCTRL_ECCERR_TYPEL(value) (NVMCTRL_ECCERR_TYPEL_Msk & ((value) << NVMCTRL_ECCERR_TYPEL_Pos))
#define NVMCTRL_ECCERR_TYPEL_NONE_Val _U_(0x0)
#define NVMCTRL_ECCERR_TYPEL_SINGLE_Val _U_(0x1)
#define NVMCTRL_ECCERR_TYPEL_DUAL_Val _U_(0x2)
#define NVMCTRL_ECCERR_TYPEL_NONE (NVMCTRL_ECCERR_TYPEL_NONE_Val << NVMCTRL_ECCERR_TYPEL_Pos)
#define NVMCTRL_ECCERR_TYPEL_SINGLE (NVMCTRL_ECCERR_TYPEL_SINGLE_Val << NVMCTRL_ECCERR_TYPEL_Pos)
#define NVMCTRL_ECCERR_TYPEL_DUAL (NVMCTRL_ECCERR_TYPEL_DUAL_Val << NVMCTRL_ECCERR_TYPEL_Pos)
#define NVMCTRL_ECCERR_TYPEH_Pos 30
#define NVMCTRL_ECCERR_TYPEH_Msk (_U_(0x3) << NVMCTRL_ECCERR_TYPEH_Pos)
#define NVMCTRL_ECCERR_TYPEH(value) (NVMCTRL_ECCERR_TYPEH_Msk & ((value) << NVMCTRL_ECCERR_TYPEH_Pos))
#define NVMCTRL_ECCERR_TYPEH_NONE_Val _U_(0x0)
#define NVMCTRL_ECCERR_TYPEH_SINGLE_Val _U_(0x1)
#define NVMCTRL_ECCERR_TYPEH_DUAL_Val _U_(0x2)
#define NVMCTRL_ECCERR_TYPEH_NONE (NVMCTRL_ECCERR_TYPEH_NONE_Val << NVMCTRL_ECCERR_TYPEH_Pos)
#define NVMCTRL_ECCERR_TYPEH_SINGLE (NVMCTRL_ECCERR_TYPEH_SINGLE_Val << NVMCTRL_ECCERR_TYPEH_Pos)
#define NVMCTRL_ECCERR_TYPEH_DUAL (NVMCTRL_ECCERR_TYPEH_DUAL_Val << NVMCTRL_ECCERR_TYPEH_Pos)
#define NVMCTRL_ECCERR_MASK _U_(0xF0FFFFFF)



typedef union {
  struct {
    uint8_t ECCDIS:1;
    uint8_t ECCELOG:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} NVMCTRL_DBGCTRL_Type;


#define NVMCTRL_DBGCTRL_OFFSET 0x28
#define NVMCTRL_DBGCTRL_RESETVALUE _U_(0x00)

#define NVMCTRL_DBGCTRL_ECCDIS_Pos 0
#define NVMCTRL_DBGCTRL_ECCDIS (_U_(0x1) << NVMCTRL_DBGCTRL_ECCDIS_Pos)
#define NVMCTRL_DBGCTRL_ECCELOG_Pos 1
#define NVMCTRL_DBGCTRL_ECCELOG (_U_(0x1) << NVMCTRL_DBGCTRL_ECCELOG_Pos)
#define NVMCTRL_DBGCTRL_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t WMODE:1;
    uint8_t APRDIS:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} NVMCTRL_SEECFG_Type;


#define NVMCTRL_SEECFG_OFFSET 0x2A
#define NVMCTRL_SEECFG_RESETVALUE _U_(0x00)

#define NVMCTRL_SEECFG_WMODE_Pos 0
#define NVMCTRL_SEECFG_WMODE (_U_(0x1) << NVMCTRL_SEECFG_WMODE_Pos)
#define NVMCTRL_SEECFG_WMODE_UNBUFFERED_Val _U_(0x0)
#define NVMCTRL_SEECFG_WMODE_BUFFERED_Val _U_(0x1)
#define NVMCTRL_SEECFG_WMODE_UNBUFFERED (NVMCTRL_SEECFG_WMODE_UNBUFFERED_Val << NVMCTRL_SEECFG_WMODE_Pos)
#define NVMCTRL_SEECFG_WMODE_BUFFERED (NVMCTRL_SEECFG_WMODE_BUFFERED_Val << NVMCTRL_SEECFG_WMODE_Pos)
#define NVMCTRL_SEECFG_APRDIS_Pos 1
#define NVMCTRL_SEECFG_APRDIS (_U_(0x1) << NVMCTRL_SEECFG_APRDIS_Pos)
#define NVMCTRL_SEECFG_MASK _U_(0x03)



typedef union {
  struct {
    uint32_t ASEES:1;
    uint32_t LOAD:1;
    uint32_t BUSY:1;
    uint32_t LOCK:1;
    uint32_t RLOCK:1;
    uint32_t :3;
    uint32_t SBLK:4;
    uint32_t :4;
    uint32_t PSZ:3;
    uint32_t :13;
  } bit;
  uint32_t reg;
} NVMCTRL_SEESTAT_Type;


#define NVMCTRL_SEESTAT_OFFSET 0x2C
#define NVMCTRL_SEESTAT_RESETVALUE _U_(0x00000000)

#define NVMCTRL_SEESTAT_ASEES_Pos 0
#define NVMCTRL_SEESTAT_ASEES (_U_(0x1) << NVMCTRL_SEESTAT_ASEES_Pos)
#define NVMCTRL_SEESTAT_LOAD_Pos 1
#define NVMCTRL_SEESTAT_LOAD (_U_(0x1) << NVMCTRL_SEESTAT_LOAD_Pos)
#define NVMCTRL_SEESTAT_BUSY_Pos 2
#define NVMCTRL_SEESTAT_BUSY (_U_(0x1) << NVMCTRL_SEESTAT_BUSY_Pos)
#define NVMCTRL_SEESTAT_LOCK_Pos 3
#define NVMCTRL_SEESTAT_LOCK (_U_(0x1) << NVMCTRL_SEESTAT_LOCK_Pos)
#define NVMCTRL_SEESTAT_RLOCK_Pos 4
#define NVMCTRL_SEESTAT_RLOCK (_U_(0x1) << NVMCTRL_SEESTAT_RLOCK_Pos)
#define NVMCTRL_SEESTAT_SBLK_Pos 8
#define NVMCTRL_SEESTAT_SBLK_Msk (_U_(0xF) << NVMCTRL_SEESTAT_SBLK_Pos)
#define NVMCTRL_SEESTAT_SBLK(value) (NVMCTRL_SEESTAT_SBLK_Msk & ((value) << NVMCTRL_SEESTAT_SBLK_Pos))
#define NVMCTRL_SEESTAT_PSZ_Pos 16
#define NVMCTRL_SEESTAT_PSZ_Msk (_U_(0x7) << NVMCTRL_SEESTAT_PSZ_Pos)
#define NVMCTRL_SEESTAT_PSZ(value) (NVMCTRL_SEESTAT_PSZ_Msk & ((value) << NVMCTRL_SEESTAT_PSZ_Pos))
#define NVMCTRL_SEESTAT_MASK _U_(0x00070F1F)



typedef struct {
  volatile NVMCTRL_CTRLA_Type CTRLA;
       RoReg8 Reserved1[0x2];
  volatile NVMCTRL_CTRLB_Type CTRLB;
       RoReg8 Reserved2[0x2];
  volatile const NVMCTRL_PARAM_Type PARAM;
  volatile NVMCTRL_INTENCLR_Type INTENCLR;
  volatile NVMCTRL_INTENSET_Type INTENSET;
  volatile NVMCTRL_INTFLAG_Type INTFLAG;
  volatile const NVMCTRL_STATUS_Type STATUS;
  volatile NVMCTRL_ADDR_Type ADDR;
  volatile const NVMCTRL_RUNLOCK_Type RUNLOCK;
  volatile const NVMCTRL_PBLDATA_Type PBLDATA[2];
  volatile const NVMCTRL_ECCERR_Type ECCERR;
  volatile NVMCTRL_DBGCTRL_Type DBGCTRL;
       RoReg8 Reserved3[0x1];
  volatile NVMCTRL_SEECFG_Type SEECFG;
       RoReg8 Reserved4[0x1];
  volatile const NVMCTRL_SEESTAT_Type SEESTAT;
} Nvmctrl;


#define SECTION_NVMCTRL_CB 

#define SECTION_NVMCTRL_CBW0 

#define SECTION_NVMCTRL_CBW1 

#define SECTION_NVMCTRL_CBW2 

#define SECTION_NVMCTRL_CBW3 

#define SECTION_NVMCTRL_CBW4 

#define SECTION_NVMCTRL_CBW5 

#define SECTION_NVMCTRL_CBW6 

#define SECTION_NVMCTRL_CBW7 

#define SECTION_NVMCTRL_FS 

#define SECTION_NVMCTRL_GB 

#define SECTION_NVMCTRL_SW0 

#define SECTION_NVMCTRL_SW1 

#define SECTION_NVMCTRL_SW2 

#define SECTION_NVMCTRL_SW3 

#define SECTION_NVMCTRL_SW4 

#define SECTION_NVMCTRL_SW5 

#define SECTION_NVMCTRL_SW6 

#define SECTION_NVMCTRL_SW7 

#define SECTION_NVMCTRL_TEMP_LOG 

#define SECTION_NVMCTRL_TEMP_LOG_W0 

#define SECTION_NVMCTRL_TEMP_LOG_W1 

#define SECTION_NVMCTRL_TEMP_LOG_W2 

#define SECTION_NVMCTRL_TEMP_LOG_W3 

#define SECTION_NVMCTRL_TEMP_LOG_W4 

#define SECTION_NVMCTRL_TEMP_LOG_W5 

#define SECTION_NVMCTRL_TEMP_LOG_W6 

#define SECTION_NVMCTRL_TEMP_LOG_W7 

#define SECTION_NVMCTRL_TLATCH 

#define SECTION_NVMCTRL_USER 
# 671 "asf4/samd51/include/component/nvmctrl.h"
#define AC_FUSES_BIAS0_ADDR NVMCTRL_SW0
#define AC_FUSES_BIAS0_Pos 0
#define AC_FUSES_BIAS0_Msk (_U_(0x3) << AC_FUSES_BIAS0_Pos)
#define AC_FUSES_BIAS0(value) (AC_FUSES_BIAS0_Msk & ((value) << AC_FUSES_BIAS0_Pos))

#define ADC0_FUSES_BIASCOMP_ADDR NVMCTRL_SW0
#define ADC0_FUSES_BIASCOMP_Pos 2
#define ADC0_FUSES_BIASCOMP_Msk (_U_(0x7) << ADC0_FUSES_BIASCOMP_Pos)
#define ADC0_FUSES_BIASCOMP(value) (ADC0_FUSES_BIASCOMP_Msk & ((value) << ADC0_FUSES_BIASCOMP_Pos))

#define ADC0_FUSES_BIASR2R_ADDR NVMCTRL_SW0
#define ADC0_FUSES_BIASR2R_Pos 8
#define ADC0_FUSES_BIASR2R_Msk (_U_(0x7) << ADC0_FUSES_BIASR2R_Pos)
#define ADC0_FUSES_BIASR2R(value) (ADC0_FUSES_BIASR2R_Msk & ((value) << ADC0_FUSES_BIASR2R_Pos))

#define ADC0_FUSES_BIASREFBUF_ADDR NVMCTRL_SW0
#define ADC0_FUSES_BIASREFBUF_Pos 5
#define ADC0_FUSES_BIASREFBUF_Msk (_U_(0x7) << ADC0_FUSES_BIASREFBUF_Pos)
#define ADC0_FUSES_BIASREFBUF(value) (ADC0_FUSES_BIASREFBUF_Msk & ((value) << ADC0_FUSES_BIASREFBUF_Pos))

#define ADC1_FUSES_BIASCOMP_ADDR NVMCTRL_SW0
#define ADC1_FUSES_BIASCOMP_Pos 16
#define ADC1_FUSES_BIASCOMP_Msk (_U_(0x7) << ADC1_FUSES_BIASCOMP_Pos)
#define ADC1_FUSES_BIASCOMP(value) (ADC1_FUSES_BIASCOMP_Msk & ((value) << ADC1_FUSES_BIASCOMP_Pos))

#define ADC1_FUSES_BIASR2R_ADDR NVMCTRL_SW0
#define ADC1_FUSES_BIASR2R_Pos 22
#define ADC1_FUSES_BIASR2R_Msk (_U_(0x7) << ADC1_FUSES_BIASR2R_Pos)
#define ADC1_FUSES_BIASR2R(value) (ADC1_FUSES_BIASR2R_Msk & ((value) << ADC1_FUSES_BIASR2R_Pos))

#define ADC1_FUSES_BIASREFBUF_ADDR NVMCTRL_SW0
#define ADC1_FUSES_BIASREFBUF_Pos 19
#define ADC1_FUSES_BIASREFBUF_Msk (_U_(0x7) << ADC1_FUSES_BIASREFBUF_Pos)
#define ADC1_FUSES_BIASREFBUF(value) (ADC1_FUSES_BIASREFBUF_Msk & ((value) << ADC1_FUSES_BIASREFBUF_Pos))

#define FUSES_BOD12USERLEVEL_ADDR NVMCTRL_USER
#define FUSES_BOD12USERLEVEL_Pos 17
#define FUSES_BOD12USERLEVEL_Msk (_U_(0x3F) << FUSES_BOD12USERLEVEL_Pos)
#define FUSES_BOD12USERLEVEL(value) (FUSES_BOD12USERLEVEL_Msk & ((value) << FUSES_BOD12USERLEVEL_Pos))

#define FUSES_BOD12_ACTION_ADDR NVMCTRL_USER
#define FUSES_BOD12_ACTION_Pos 23
#define FUSES_BOD12_ACTION_Msk (_U_(0x3) << FUSES_BOD12_ACTION_Pos)
#define FUSES_BOD12_ACTION(value) (FUSES_BOD12_ACTION_Msk & ((value) << FUSES_BOD12_ACTION_Pos))

#define FUSES_BOD12_DIS_ADDR NVMCTRL_USER
#define FUSES_BOD12_DIS_Pos 16
#define FUSES_BOD12_DIS_Msk (_U_(0x1) << FUSES_BOD12_DIS_Pos)

#define FUSES_BOD12_HYST_ADDR NVMCTRL_USER
#define FUSES_BOD12_HYST_Pos 25
#define FUSES_BOD12_HYST_Msk (_U_(0x1) << FUSES_BOD12_HYST_Pos)

#define FUSES_BOD33USERLEVEL_ADDR NVMCTRL_USER
#define FUSES_BOD33USERLEVEL_Pos 1
#define FUSES_BOD33USERLEVEL_Msk (_U_(0xFF) << FUSES_BOD33USERLEVEL_Pos)
#define FUSES_BOD33USERLEVEL(value) (FUSES_BOD33USERLEVEL_Msk & ((value) << FUSES_BOD33USERLEVEL_Pos))

#define FUSES_BOD33_ACTION_ADDR NVMCTRL_USER
#define FUSES_BOD33_ACTION_Pos 9
#define FUSES_BOD33_ACTION_Msk (_U_(0x3) << FUSES_BOD33_ACTION_Pos)
#define FUSES_BOD33_ACTION(value) (FUSES_BOD33_ACTION_Msk & ((value) << FUSES_BOD33_ACTION_Pos))

#define FUSES_BOD33_DIS_ADDR NVMCTRL_USER
#define FUSES_BOD33_DIS_Pos 0
#define FUSES_BOD33_DIS_Msk (_U_(0x1) << FUSES_BOD33_DIS_Pos)

#define FUSES_BOD33_HYST_ADDR NVMCTRL_USER
#define FUSES_BOD33_HYST_Pos 11
#define FUSES_BOD33_HYST_Msk (_U_(0xF) << FUSES_BOD33_HYST_Pos)
#define FUSES_BOD33_HYST(value) (FUSES_BOD33_HYST_Msk & ((value) << FUSES_BOD33_HYST_Pos))

#define FUSES_HOT_ADC_VAL_CTAT_ADDR (NVMCTRL_TEMP_LOG + 8)
#define FUSES_HOT_ADC_VAL_CTAT_Pos 12
#define FUSES_HOT_ADC_VAL_CTAT_Msk (_U_(0xFFF) << FUSES_HOT_ADC_VAL_CTAT_Pos)
#define FUSES_HOT_ADC_VAL_CTAT(value) (FUSES_HOT_ADC_VAL_CTAT_Msk & ((value) << FUSES_HOT_ADC_VAL_CTAT_Pos))

#define FUSES_HOT_ADC_VAL_PTAT_ADDR (NVMCTRL_TEMP_LOG + 4)
#define FUSES_HOT_ADC_VAL_PTAT_Pos 20
#define FUSES_HOT_ADC_VAL_PTAT_Msk (_U_(0xFFF) << FUSES_HOT_ADC_VAL_PTAT_Pos)
#define FUSES_HOT_ADC_VAL_PTAT(value) (FUSES_HOT_ADC_VAL_PTAT_Msk & ((value) << FUSES_HOT_ADC_VAL_PTAT_Pos))

#define FUSES_HOT_INT1V_VAL_ADDR (NVMCTRL_TEMP_LOG + 4)
#define FUSES_HOT_INT1V_VAL_Pos 0
#define FUSES_HOT_INT1V_VAL_Msk (_U_(0xFF) << FUSES_HOT_INT1V_VAL_Pos)
#define FUSES_HOT_INT1V_VAL(value) (FUSES_HOT_INT1V_VAL_Msk & ((value) << FUSES_HOT_INT1V_VAL_Pos))

#define FUSES_HOT_TEMP_VAL_DEC_ADDR NVMCTRL_TEMP_LOG
#define FUSES_HOT_TEMP_VAL_DEC_Pos 20
#define FUSES_HOT_TEMP_VAL_DEC_Msk (_U_(0xF) << FUSES_HOT_TEMP_VAL_DEC_Pos)
#define FUSES_HOT_TEMP_VAL_DEC(value) (FUSES_HOT_TEMP_VAL_DEC_Msk & ((value) << FUSES_HOT_TEMP_VAL_DEC_Pos))

#define FUSES_HOT_TEMP_VAL_INT_ADDR NVMCTRL_TEMP_LOG
#define FUSES_HOT_TEMP_VAL_INT_Pos 12
#define FUSES_HOT_TEMP_VAL_INT_Msk (_U_(0xFF) << FUSES_HOT_TEMP_VAL_INT_Pos)
#define FUSES_HOT_TEMP_VAL_INT(value) (FUSES_HOT_TEMP_VAL_INT_Msk & ((value) << FUSES_HOT_TEMP_VAL_INT_Pos))

#define FUSES_ROOM_ADC_VAL_CTAT_ADDR (NVMCTRL_TEMP_LOG + 8)
#define FUSES_ROOM_ADC_VAL_CTAT_Pos 0
#define FUSES_ROOM_ADC_VAL_CTAT_Msk (_U_(0xFFF) << FUSES_ROOM_ADC_VAL_CTAT_Pos)
#define FUSES_ROOM_ADC_VAL_CTAT(value) (FUSES_ROOM_ADC_VAL_CTAT_Msk & ((value) << FUSES_ROOM_ADC_VAL_CTAT_Pos))

#define FUSES_ROOM_ADC_VAL_PTAT_ADDR (NVMCTRL_TEMP_LOG + 4)
#define FUSES_ROOM_ADC_VAL_PTAT_Pos 8
#define FUSES_ROOM_ADC_VAL_PTAT_Msk (_U_(0xFFF) << FUSES_ROOM_ADC_VAL_PTAT_Pos)
#define FUSES_ROOM_ADC_VAL_PTAT(value) (FUSES_ROOM_ADC_VAL_PTAT_Msk & ((value) << FUSES_ROOM_ADC_VAL_PTAT_Pos))

#define FUSES_ROOM_INT1V_VAL_ADDR NVMCTRL_TEMP_LOG
#define FUSES_ROOM_INT1V_VAL_Pos 24
#define FUSES_ROOM_INT1V_VAL_Msk (_U_(0xFF) << FUSES_ROOM_INT1V_VAL_Pos)
#define FUSES_ROOM_INT1V_VAL(value) (FUSES_ROOM_INT1V_VAL_Msk & ((value) << FUSES_ROOM_INT1V_VAL_Pos))

#define FUSES_ROOM_TEMP_VAL_DEC_ADDR NVMCTRL_TEMP_LOG
#define FUSES_ROOM_TEMP_VAL_DEC_Pos 8
#define FUSES_ROOM_TEMP_VAL_DEC_Msk (_U_(0xF) << FUSES_ROOM_TEMP_VAL_DEC_Pos)
#define FUSES_ROOM_TEMP_VAL_DEC(value) (FUSES_ROOM_TEMP_VAL_DEC_Msk & ((value) << FUSES_ROOM_TEMP_VAL_DEC_Pos))

#define FUSES_ROOM_TEMP_VAL_INT_ADDR NVMCTRL_TEMP_LOG
#define FUSES_ROOM_TEMP_VAL_INT_Pos 0
#define FUSES_ROOM_TEMP_VAL_INT_Msk (_U_(0xFF) << FUSES_ROOM_TEMP_VAL_INT_Pos)
#define FUSES_ROOM_TEMP_VAL_INT(value) (FUSES_ROOM_TEMP_VAL_INT_Msk & ((value) << FUSES_ROOM_TEMP_VAL_INT_Pos))

#define NVMCTRL_FUSES_BOOTPROT_ADDR NVMCTRL_USER
#define NVMCTRL_FUSES_BOOTPROT_Pos 26
#define NVMCTRL_FUSES_BOOTPROT_Msk (_U_(0xF) << NVMCTRL_FUSES_BOOTPROT_Pos)
#define NVMCTRL_FUSES_BOOTPROT(value) (NVMCTRL_FUSES_BOOTPROT_Msk & ((value) << NVMCTRL_FUSES_BOOTPROT_Pos))

#define NVMCTRL_FUSES_REGION_LOCKS_ADDR (NVMCTRL_USER + 8)
#define NVMCTRL_FUSES_REGION_LOCKS_Pos 0
#define NVMCTRL_FUSES_REGION_LOCKS_Msk (_U_(0xFFFFFFFF) << NVMCTRL_FUSES_REGION_LOCKS_Pos)
#define NVMCTRL_FUSES_REGION_LOCKS(value) (NVMCTRL_FUSES_REGION_LOCKS_Msk & ((value) << NVMCTRL_FUSES_REGION_LOCKS_Pos))

#define NVMCTRL_FUSES_SEEPSZ_ADDR (NVMCTRL_USER + 4)
#define NVMCTRL_FUSES_SEEPSZ_Pos 4
#define NVMCTRL_FUSES_SEEPSZ_Msk (_U_(0x7) << NVMCTRL_FUSES_SEEPSZ_Pos)
#define NVMCTRL_FUSES_SEEPSZ(value) (NVMCTRL_FUSES_SEEPSZ_Msk & ((value) << NVMCTRL_FUSES_SEEPSZ_Pos))

#define NVMCTRL_FUSES_SEESBLK_ADDR (NVMCTRL_USER + 4)
#define NVMCTRL_FUSES_SEESBLK_Pos 0
#define NVMCTRL_FUSES_SEESBLK_Msk (_U_(0xF) << NVMCTRL_FUSES_SEESBLK_Pos)
#define NVMCTRL_FUSES_SEESBLK(value) (NVMCTRL_FUSES_SEESBLK_Msk & ((value) << NVMCTRL_FUSES_SEESBLK_Pos))

#define RAMECC_FUSES_ECCDIS_ADDR (NVMCTRL_USER + 4)
#define RAMECC_FUSES_ECCDIS_Pos 7
#define RAMECC_FUSES_ECCDIS_Msk (_U_(0x1) << RAMECC_FUSES_ECCDIS_Pos)

#define USB_FUSES_TRANSN_ADDR (NVMCTRL_SW0 + 4)
#define USB_FUSES_TRANSN_Pos 0
#define USB_FUSES_TRANSN_Msk (_U_(0x1F) << USB_FUSES_TRANSN_Pos)
#define USB_FUSES_TRANSN(value) (USB_FUSES_TRANSN_Msk & ((value) << USB_FUSES_TRANSN_Pos))

#define USB_FUSES_TRANSP_ADDR (NVMCTRL_SW0 + 4)
#define USB_FUSES_TRANSP_Pos 5
#define USB_FUSES_TRANSP_Msk (_U_(0x1F) << USB_FUSES_TRANSP_Pos)
#define USB_FUSES_TRANSP(value) (USB_FUSES_TRANSP_Msk & ((value) << USB_FUSES_TRANSP_Pos))

#define USB_FUSES_TRIM_ADDR (NVMCTRL_SW0 + 4)
#define USB_FUSES_TRIM_Pos 10
#define USB_FUSES_TRIM_Msk (_U_(0x7) << USB_FUSES_TRIM_Pos)
#define USB_FUSES_TRIM(value) (USB_FUSES_TRIM_Msk & ((value) << USB_FUSES_TRIM_Pos))

#define WDT_FUSES_ALWAYSON_ADDR (NVMCTRL_USER + 4)
#define WDT_FUSES_ALWAYSON_Pos 17
#define WDT_FUSES_ALWAYSON_Msk (_U_(0x1) << WDT_FUSES_ALWAYSON_Pos)

#define WDT_FUSES_ENABLE_ADDR (NVMCTRL_USER + 4)
#define WDT_FUSES_ENABLE_Pos 16
#define WDT_FUSES_ENABLE_Msk (_U_(0x1) << WDT_FUSES_ENABLE_Pos)

#define WDT_FUSES_EWOFFSET_ADDR (NVMCTRL_USER + 4)
#define WDT_FUSES_EWOFFSET_Pos 26
#define WDT_FUSES_EWOFFSET_Msk (_U_(0xF) << WDT_FUSES_EWOFFSET_Pos)
#define WDT_FUSES_EWOFFSET(value) (WDT_FUSES_EWOFFSET_Msk & ((value) << WDT_FUSES_EWOFFSET_Pos))

#define WDT_FUSES_PER_ADDR (NVMCTRL_USER + 4)
#define WDT_FUSES_PER_Pos 18
#define WDT_FUSES_PER_Msk (_U_(0xF) << WDT_FUSES_PER_Pos)
#define WDT_FUSES_PER(value) (WDT_FUSES_PER_Msk & ((value) << WDT_FUSES_PER_Pos))

#define WDT_FUSES_WEN_ADDR (NVMCTRL_USER + 4)
#define WDT_FUSES_WEN_Pos 30
#define WDT_FUSES_WEN_Msk (_U_(0x1) << WDT_FUSES_WEN_Pos)

#define WDT_FUSES_WINDOW_ADDR (NVMCTRL_USER + 4)
#define WDT_FUSES_WINDOW_Pos 22
#define WDT_FUSES_WINDOW_Msk (_U_(0xF) << WDT_FUSES_WINDOW_Pos)
#define WDT_FUSES_WINDOW(value) (WDT_FUSES_WINDOW_Msk & ((value) << WDT_FUSES_WINDOW_Pos))
# 598 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/oscctrl.h" 1
# 31 "asf4/samd51/include/component/oscctrl.h"
#define _SAMD51_OSCCTRL_COMPONENT_ 







#define OSCCTRL_U2401 
#define REV_OSCCTRL 0x100



typedef union {
  struct {
    uint8_t CFDEO0:1;
    uint8_t CFDEO1:1;
    uint8_t :6;
  } bit;
  struct {
    uint8_t CFDEO:2;
    uint8_t :6;
  } vec;
  uint8_t reg;
} OSCCTRL_EVCTRL_Type;


#define OSCCTRL_EVCTRL_OFFSET 0x00
#define OSCCTRL_EVCTRL_RESETVALUE _U_(0x00)

#define OSCCTRL_EVCTRL_CFDEO0_Pos 0
#define OSCCTRL_EVCTRL_CFDEO0 (_U_(1) << OSCCTRL_EVCTRL_CFDEO0_Pos)
#define OSCCTRL_EVCTRL_CFDEO1_Pos 1
#define OSCCTRL_EVCTRL_CFDEO1 (_U_(1) << OSCCTRL_EVCTRL_CFDEO1_Pos)
#define OSCCTRL_EVCTRL_CFDEO_Pos 0
#define OSCCTRL_EVCTRL_CFDEO_Msk (_U_(0x3) << OSCCTRL_EVCTRL_CFDEO_Pos)
#define OSCCTRL_EVCTRL_CFDEO(value) (OSCCTRL_EVCTRL_CFDEO_Msk & ((value) << OSCCTRL_EVCTRL_CFDEO_Pos))
#define OSCCTRL_EVCTRL_MASK _U_(0x03)



typedef union {
  struct {
    uint32_t XOSCRDY0:1;
    uint32_t XOSCRDY1:1;
    uint32_t XOSCFAIL0:1;
    uint32_t XOSCFAIL1:1;
    uint32_t :4;
    uint32_t DFLLRDY:1;
    uint32_t DFLLOOB:1;
    uint32_t DFLLLCKF:1;
    uint32_t DFLLLCKC:1;
    uint32_t DFLLRCS:1;
    uint32_t :3;
    uint32_t DPLL0LCKR:1;
    uint32_t DPLL0LCKF:1;
    uint32_t DPLL0LTO:1;
    uint32_t DPLL0LDRTO:1;
    uint32_t :4;
    uint32_t DPLL1LCKR:1;
    uint32_t DPLL1LCKF:1;
    uint32_t DPLL1LTO:1;
    uint32_t DPLL1LDRTO:1;
    uint32_t :4;
  } bit;
  struct {
    uint32_t XOSCRDY:2;
    uint32_t XOSCFAIL:2;
    uint32_t :28;
  } vec;
  uint32_t reg;
} OSCCTRL_INTENCLR_Type;


#define OSCCTRL_INTENCLR_OFFSET 0x04
#define OSCCTRL_INTENCLR_RESETVALUE _U_(0x00000000)

#define OSCCTRL_INTENCLR_XOSCRDY0_Pos 0
#define OSCCTRL_INTENCLR_XOSCRDY0 (_U_(1) << OSCCTRL_INTENCLR_XOSCRDY0_Pos)
#define OSCCTRL_INTENCLR_XOSCRDY1_Pos 1
#define OSCCTRL_INTENCLR_XOSCRDY1 (_U_(1) << OSCCTRL_INTENCLR_XOSCRDY1_Pos)
#define OSCCTRL_INTENCLR_XOSCRDY_Pos 0
#define OSCCTRL_INTENCLR_XOSCRDY_Msk (_U_(0x3) << OSCCTRL_INTENCLR_XOSCRDY_Pos)
#define OSCCTRL_INTENCLR_XOSCRDY(value) (OSCCTRL_INTENCLR_XOSCRDY_Msk & ((value) << OSCCTRL_INTENCLR_XOSCRDY_Pos))
#define OSCCTRL_INTENCLR_XOSCFAIL0_Pos 2
#define OSCCTRL_INTENCLR_XOSCFAIL0 (_U_(1) << OSCCTRL_INTENCLR_XOSCFAIL0_Pos)
#define OSCCTRL_INTENCLR_XOSCFAIL1_Pos 3
#define OSCCTRL_INTENCLR_XOSCFAIL1 (_U_(1) << OSCCTRL_INTENCLR_XOSCFAIL1_Pos)
#define OSCCTRL_INTENCLR_XOSCFAIL_Pos 2
#define OSCCTRL_INTENCLR_XOSCFAIL_Msk (_U_(0x3) << OSCCTRL_INTENCLR_XOSCFAIL_Pos)
#define OSCCTRL_INTENCLR_XOSCFAIL(value) (OSCCTRL_INTENCLR_XOSCFAIL_Msk & ((value) << OSCCTRL_INTENCLR_XOSCFAIL_Pos))
#define OSCCTRL_INTENCLR_DFLLRDY_Pos 8
#define OSCCTRL_INTENCLR_DFLLRDY (_U_(0x1) << OSCCTRL_INTENCLR_DFLLRDY_Pos)
#define OSCCTRL_INTENCLR_DFLLOOB_Pos 9
#define OSCCTRL_INTENCLR_DFLLOOB (_U_(0x1) << OSCCTRL_INTENCLR_DFLLOOB_Pos)
#define OSCCTRL_INTENCLR_DFLLLCKF_Pos 10
#define OSCCTRL_INTENCLR_DFLLLCKF (_U_(0x1) << OSCCTRL_INTENCLR_DFLLLCKF_Pos)
#define OSCCTRL_INTENCLR_DFLLLCKC_Pos 11
#define OSCCTRL_INTENCLR_DFLLLCKC (_U_(0x1) << OSCCTRL_INTENCLR_DFLLLCKC_Pos)
#define OSCCTRL_INTENCLR_DFLLRCS_Pos 12
#define OSCCTRL_INTENCLR_DFLLRCS (_U_(0x1) << OSCCTRL_INTENCLR_DFLLRCS_Pos)
#define OSCCTRL_INTENCLR_DPLL0LCKR_Pos 16
#define OSCCTRL_INTENCLR_DPLL0LCKR (_U_(0x1) << OSCCTRL_INTENCLR_DPLL0LCKR_Pos)
#define OSCCTRL_INTENCLR_DPLL0LCKF_Pos 17
#define OSCCTRL_INTENCLR_DPLL0LCKF (_U_(0x1) << OSCCTRL_INTENCLR_DPLL0LCKF_Pos)
#define OSCCTRL_INTENCLR_DPLL0LTO_Pos 18
#define OSCCTRL_INTENCLR_DPLL0LTO (_U_(0x1) << OSCCTRL_INTENCLR_DPLL0LTO_Pos)
#define OSCCTRL_INTENCLR_DPLL0LDRTO_Pos 19
#define OSCCTRL_INTENCLR_DPLL0LDRTO (_U_(0x1) << OSCCTRL_INTENCLR_DPLL0LDRTO_Pos)
#define OSCCTRL_INTENCLR_DPLL1LCKR_Pos 24
#define OSCCTRL_INTENCLR_DPLL1LCKR (_U_(0x1) << OSCCTRL_INTENCLR_DPLL1LCKR_Pos)
#define OSCCTRL_INTENCLR_DPLL1LCKF_Pos 25
#define OSCCTRL_INTENCLR_DPLL1LCKF (_U_(0x1) << OSCCTRL_INTENCLR_DPLL1LCKF_Pos)
#define OSCCTRL_INTENCLR_DPLL1LTO_Pos 26
#define OSCCTRL_INTENCLR_DPLL1LTO (_U_(0x1) << OSCCTRL_INTENCLR_DPLL1LTO_Pos)
#define OSCCTRL_INTENCLR_DPLL1LDRTO_Pos 27
#define OSCCTRL_INTENCLR_DPLL1LDRTO (_U_(0x1) << OSCCTRL_INTENCLR_DPLL1LDRTO_Pos)
#define OSCCTRL_INTENCLR_MASK _U_(0x0F0F1F0F)



typedef union {
  struct {
    uint32_t XOSCRDY0:1;
    uint32_t XOSCRDY1:1;
    uint32_t XOSCFAIL0:1;
    uint32_t XOSCFAIL1:1;
    uint32_t :4;
    uint32_t DFLLRDY:1;
    uint32_t DFLLOOB:1;
    uint32_t DFLLLCKF:1;
    uint32_t DFLLLCKC:1;
    uint32_t DFLLRCS:1;
    uint32_t :3;
    uint32_t DPLL0LCKR:1;
    uint32_t DPLL0LCKF:1;
    uint32_t DPLL0LTO:1;
    uint32_t DPLL0LDRTO:1;
    uint32_t :4;
    uint32_t DPLL1LCKR:1;
    uint32_t DPLL1LCKF:1;
    uint32_t DPLL1LTO:1;
    uint32_t DPLL1LDRTO:1;
    uint32_t :4;
  } bit;
  struct {
    uint32_t XOSCRDY:2;
    uint32_t XOSCFAIL:2;
    uint32_t :28;
  } vec;
  uint32_t reg;
} OSCCTRL_INTENSET_Type;


#define OSCCTRL_INTENSET_OFFSET 0x08
#define OSCCTRL_INTENSET_RESETVALUE _U_(0x00000000)

#define OSCCTRL_INTENSET_XOSCRDY0_Pos 0
#define OSCCTRL_INTENSET_XOSCRDY0 (_U_(1) << OSCCTRL_INTENSET_XOSCRDY0_Pos)
#define OSCCTRL_INTENSET_XOSCRDY1_Pos 1
#define OSCCTRL_INTENSET_XOSCRDY1 (_U_(1) << OSCCTRL_INTENSET_XOSCRDY1_Pos)
#define OSCCTRL_INTENSET_XOSCRDY_Pos 0
#define OSCCTRL_INTENSET_XOSCRDY_Msk (_U_(0x3) << OSCCTRL_INTENSET_XOSCRDY_Pos)
#define OSCCTRL_INTENSET_XOSCRDY(value) (OSCCTRL_INTENSET_XOSCRDY_Msk & ((value) << OSCCTRL_INTENSET_XOSCRDY_Pos))
#define OSCCTRL_INTENSET_XOSCFAIL0_Pos 2
#define OSCCTRL_INTENSET_XOSCFAIL0 (_U_(1) << OSCCTRL_INTENSET_XOSCFAIL0_Pos)
#define OSCCTRL_INTENSET_XOSCFAIL1_Pos 3
#define OSCCTRL_INTENSET_XOSCFAIL1 (_U_(1) << OSCCTRL_INTENSET_XOSCFAIL1_Pos)
#define OSCCTRL_INTENSET_XOSCFAIL_Pos 2
#define OSCCTRL_INTENSET_XOSCFAIL_Msk (_U_(0x3) << OSCCTRL_INTENSET_XOSCFAIL_Pos)
#define OSCCTRL_INTENSET_XOSCFAIL(value) (OSCCTRL_INTENSET_XOSCFAIL_Msk & ((value) << OSCCTRL_INTENSET_XOSCFAIL_Pos))
#define OSCCTRL_INTENSET_DFLLRDY_Pos 8
#define OSCCTRL_INTENSET_DFLLRDY (_U_(0x1) << OSCCTRL_INTENSET_DFLLRDY_Pos)
#define OSCCTRL_INTENSET_DFLLOOB_Pos 9
#define OSCCTRL_INTENSET_DFLLOOB (_U_(0x1) << OSCCTRL_INTENSET_DFLLOOB_Pos)
#define OSCCTRL_INTENSET_DFLLLCKF_Pos 10
#define OSCCTRL_INTENSET_DFLLLCKF (_U_(0x1) << OSCCTRL_INTENSET_DFLLLCKF_Pos)
#define OSCCTRL_INTENSET_DFLLLCKC_Pos 11
#define OSCCTRL_INTENSET_DFLLLCKC (_U_(0x1) << OSCCTRL_INTENSET_DFLLLCKC_Pos)
#define OSCCTRL_INTENSET_DFLLRCS_Pos 12
#define OSCCTRL_INTENSET_DFLLRCS (_U_(0x1) << OSCCTRL_INTENSET_DFLLRCS_Pos)
#define OSCCTRL_INTENSET_DPLL0LCKR_Pos 16
#define OSCCTRL_INTENSET_DPLL0LCKR (_U_(0x1) << OSCCTRL_INTENSET_DPLL0LCKR_Pos)
#define OSCCTRL_INTENSET_DPLL0LCKF_Pos 17
#define OSCCTRL_INTENSET_DPLL0LCKF (_U_(0x1) << OSCCTRL_INTENSET_DPLL0LCKF_Pos)
#define OSCCTRL_INTENSET_DPLL0LTO_Pos 18
#define OSCCTRL_INTENSET_DPLL0LTO (_U_(0x1) << OSCCTRL_INTENSET_DPLL0LTO_Pos)
#define OSCCTRL_INTENSET_DPLL0LDRTO_Pos 19
#define OSCCTRL_INTENSET_DPLL0LDRTO (_U_(0x1) << OSCCTRL_INTENSET_DPLL0LDRTO_Pos)
#define OSCCTRL_INTENSET_DPLL1LCKR_Pos 24
#define OSCCTRL_INTENSET_DPLL1LCKR (_U_(0x1) << OSCCTRL_INTENSET_DPLL1LCKR_Pos)
#define OSCCTRL_INTENSET_DPLL1LCKF_Pos 25
#define OSCCTRL_INTENSET_DPLL1LCKF (_U_(0x1) << OSCCTRL_INTENSET_DPLL1LCKF_Pos)
#define OSCCTRL_INTENSET_DPLL1LTO_Pos 26
#define OSCCTRL_INTENSET_DPLL1LTO (_U_(0x1) << OSCCTRL_INTENSET_DPLL1LTO_Pos)
#define OSCCTRL_INTENSET_DPLL1LDRTO_Pos 27
#define OSCCTRL_INTENSET_DPLL1LDRTO (_U_(0x1) << OSCCTRL_INTENSET_DPLL1LDRTO_Pos)
#define OSCCTRL_INTENSET_MASK _U_(0x0F0F1F0F)



typedef union {
  struct {
    volatile const uint32_t XOSCRDY0:1;
    volatile const uint32_t XOSCRDY1:1;
    volatile const uint32_t XOSCFAIL0:1;
    volatile const uint32_t XOSCFAIL1:1;
    volatile const uint32_t :4;
    volatile const uint32_t DFLLRDY:1;
    volatile const uint32_t DFLLOOB:1;
    volatile const uint32_t DFLLLCKF:1;
    volatile const uint32_t DFLLLCKC:1;
    volatile const uint32_t DFLLRCS:1;
    volatile const uint32_t :3;
    volatile const uint32_t DPLL0LCKR:1;
    volatile const uint32_t DPLL0LCKF:1;
    volatile const uint32_t DPLL0LTO:1;
    volatile const uint32_t DPLL0LDRTO:1;
    volatile const uint32_t :4;
    volatile const uint32_t DPLL1LCKR:1;
    volatile const uint32_t DPLL1LCKF:1;
    volatile const uint32_t DPLL1LTO:1;
    volatile const uint32_t DPLL1LDRTO:1;
    volatile const uint32_t :4;
  } bit;
  struct {
    volatile const uint32_t XOSCRDY:2;
    volatile const uint32_t XOSCFAIL:2;
    volatile const uint32_t :28;
  } vec;
  uint32_t reg;
} OSCCTRL_INTFLAG_Type;


#define OSCCTRL_INTFLAG_OFFSET 0x0C
#define OSCCTRL_INTFLAG_RESETVALUE _U_(0x00000000)

#define OSCCTRL_INTFLAG_XOSCRDY0_Pos 0
#define OSCCTRL_INTFLAG_XOSCRDY0 (_U_(1) << OSCCTRL_INTFLAG_XOSCRDY0_Pos)
#define OSCCTRL_INTFLAG_XOSCRDY1_Pos 1
#define OSCCTRL_INTFLAG_XOSCRDY1 (_U_(1) << OSCCTRL_INTFLAG_XOSCRDY1_Pos)
#define OSCCTRL_INTFLAG_XOSCRDY_Pos 0
#define OSCCTRL_INTFLAG_XOSCRDY_Msk (_U_(0x3) << OSCCTRL_INTFLAG_XOSCRDY_Pos)
#define OSCCTRL_INTFLAG_XOSCRDY(value) (OSCCTRL_INTFLAG_XOSCRDY_Msk & ((value) << OSCCTRL_INTFLAG_XOSCRDY_Pos))
#define OSCCTRL_INTFLAG_XOSCFAIL0_Pos 2
#define OSCCTRL_INTFLAG_XOSCFAIL0 (_U_(1) << OSCCTRL_INTFLAG_XOSCFAIL0_Pos)
#define OSCCTRL_INTFLAG_XOSCFAIL1_Pos 3
#define OSCCTRL_INTFLAG_XOSCFAIL1 (_U_(1) << OSCCTRL_INTFLAG_XOSCFAIL1_Pos)
#define OSCCTRL_INTFLAG_XOSCFAIL_Pos 2
#define OSCCTRL_INTFLAG_XOSCFAIL_Msk (_U_(0x3) << OSCCTRL_INTFLAG_XOSCFAIL_Pos)
#define OSCCTRL_INTFLAG_XOSCFAIL(value) (OSCCTRL_INTFLAG_XOSCFAIL_Msk & ((value) << OSCCTRL_INTFLAG_XOSCFAIL_Pos))
#define OSCCTRL_INTFLAG_DFLLRDY_Pos 8
#define OSCCTRL_INTFLAG_DFLLRDY (_U_(0x1) << OSCCTRL_INTFLAG_DFLLRDY_Pos)
#define OSCCTRL_INTFLAG_DFLLOOB_Pos 9
#define OSCCTRL_INTFLAG_DFLLOOB (_U_(0x1) << OSCCTRL_INTFLAG_DFLLOOB_Pos)
#define OSCCTRL_INTFLAG_DFLLLCKF_Pos 10
#define OSCCTRL_INTFLAG_DFLLLCKF (_U_(0x1) << OSCCTRL_INTFLAG_DFLLLCKF_Pos)
#define OSCCTRL_INTFLAG_DFLLLCKC_Pos 11
#define OSCCTRL_INTFLAG_DFLLLCKC (_U_(0x1) << OSCCTRL_INTFLAG_DFLLLCKC_Pos)
#define OSCCTRL_INTFLAG_DFLLRCS_Pos 12
#define OSCCTRL_INTFLAG_DFLLRCS (_U_(0x1) << OSCCTRL_INTFLAG_DFLLRCS_Pos)
#define OSCCTRL_INTFLAG_DPLL0LCKR_Pos 16
#define OSCCTRL_INTFLAG_DPLL0LCKR (_U_(0x1) << OSCCTRL_INTFLAG_DPLL0LCKR_Pos)
#define OSCCTRL_INTFLAG_DPLL0LCKF_Pos 17
#define OSCCTRL_INTFLAG_DPLL0LCKF (_U_(0x1) << OSCCTRL_INTFLAG_DPLL0LCKF_Pos)
#define OSCCTRL_INTFLAG_DPLL0LTO_Pos 18
#define OSCCTRL_INTFLAG_DPLL0LTO (_U_(0x1) << OSCCTRL_INTFLAG_DPLL0LTO_Pos)
#define OSCCTRL_INTFLAG_DPLL0LDRTO_Pos 19
#define OSCCTRL_INTFLAG_DPLL0LDRTO (_U_(0x1) << OSCCTRL_INTFLAG_DPLL0LDRTO_Pos)
#define OSCCTRL_INTFLAG_DPLL1LCKR_Pos 24
#define OSCCTRL_INTFLAG_DPLL1LCKR (_U_(0x1) << OSCCTRL_INTFLAG_DPLL1LCKR_Pos)
#define OSCCTRL_INTFLAG_DPLL1LCKF_Pos 25
#define OSCCTRL_INTFLAG_DPLL1LCKF (_U_(0x1) << OSCCTRL_INTFLAG_DPLL1LCKF_Pos)
#define OSCCTRL_INTFLAG_DPLL1LTO_Pos 26
#define OSCCTRL_INTFLAG_DPLL1LTO (_U_(0x1) << OSCCTRL_INTFLAG_DPLL1LTO_Pos)
#define OSCCTRL_INTFLAG_DPLL1LDRTO_Pos 27
#define OSCCTRL_INTFLAG_DPLL1LDRTO (_U_(0x1) << OSCCTRL_INTFLAG_DPLL1LDRTO_Pos)
#define OSCCTRL_INTFLAG_MASK _U_(0x0F0F1F0F)



typedef union {
  struct {
    uint32_t XOSCRDY0:1;
    uint32_t XOSCRDY1:1;
    uint32_t XOSCFAIL0:1;
    uint32_t XOSCFAIL1:1;
    uint32_t XOSCCKSW0:1;
    uint32_t XOSCCKSW1:1;
    uint32_t :2;
    uint32_t DFLLRDY:1;
    uint32_t DFLLOOB:1;
    uint32_t DFLLLCKF:1;
    uint32_t DFLLLCKC:1;
    uint32_t DFLLRCS:1;
    uint32_t :3;
    uint32_t DPLL0LCKR:1;
    uint32_t DPLL0LCKF:1;
    uint32_t DPLL0TO:1;
    uint32_t DPLL0LDRTO:1;
    uint32_t :4;
    uint32_t DPLL1LCKR:1;
    uint32_t DPLL1LCKF:1;
    uint32_t DPLL1TO:1;
    uint32_t DPLL1LDRTO:1;
    uint32_t :4;
  } bit;
  struct {
    uint32_t XOSCRDY:2;
    uint32_t XOSCFAIL:2;
    uint32_t XOSCCKSW:2;
    uint32_t :26;
  } vec;
  uint32_t reg;
} OSCCTRL_STATUS_Type;


#define OSCCTRL_STATUS_OFFSET 0x10
#define OSCCTRL_STATUS_RESETVALUE _U_(0x00000000)

#define OSCCTRL_STATUS_XOSCRDY0_Pos 0
#define OSCCTRL_STATUS_XOSCRDY0 (_U_(1) << OSCCTRL_STATUS_XOSCRDY0_Pos)
#define OSCCTRL_STATUS_XOSCRDY1_Pos 1
#define OSCCTRL_STATUS_XOSCRDY1 (_U_(1) << OSCCTRL_STATUS_XOSCRDY1_Pos)
#define OSCCTRL_STATUS_XOSCRDY_Pos 0
#define OSCCTRL_STATUS_XOSCRDY_Msk (_U_(0x3) << OSCCTRL_STATUS_XOSCRDY_Pos)
#define OSCCTRL_STATUS_XOSCRDY(value) (OSCCTRL_STATUS_XOSCRDY_Msk & ((value) << OSCCTRL_STATUS_XOSCRDY_Pos))
#define OSCCTRL_STATUS_XOSCFAIL0_Pos 2
#define OSCCTRL_STATUS_XOSCFAIL0 (_U_(1) << OSCCTRL_STATUS_XOSCFAIL0_Pos)
#define OSCCTRL_STATUS_XOSCFAIL1_Pos 3
#define OSCCTRL_STATUS_XOSCFAIL1 (_U_(1) << OSCCTRL_STATUS_XOSCFAIL1_Pos)
#define OSCCTRL_STATUS_XOSCFAIL_Pos 2
#define OSCCTRL_STATUS_XOSCFAIL_Msk (_U_(0x3) << OSCCTRL_STATUS_XOSCFAIL_Pos)
#define OSCCTRL_STATUS_XOSCFAIL(value) (OSCCTRL_STATUS_XOSCFAIL_Msk & ((value) << OSCCTRL_STATUS_XOSCFAIL_Pos))
#define OSCCTRL_STATUS_XOSCCKSW0_Pos 4
#define OSCCTRL_STATUS_XOSCCKSW0 (_U_(1) << OSCCTRL_STATUS_XOSCCKSW0_Pos)
#define OSCCTRL_STATUS_XOSCCKSW1_Pos 5
#define OSCCTRL_STATUS_XOSCCKSW1 (_U_(1) << OSCCTRL_STATUS_XOSCCKSW1_Pos)
#define OSCCTRL_STATUS_XOSCCKSW_Pos 4
#define OSCCTRL_STATUS_XOSCCKSW_Msk (_U_(0x3) << OSCCTRL_STATUS_XOSCCKSW_Pos)
#define OSCCTRL_STATUS_XOSCCKSW(value) (OSCCTRL_STATUS_XOSCCKSW_Msk & ((value) << OSCCTRL_STATUS_XOSCCKSW_Pos))
#define OSCCTRL_STATUS_DFLLRDY_Pos 8
#define OSCCTRL_STATUS_DFLLRDY (_U_(0x1) << OSCCTRL_STATUS_DFLLRDY_Pos)
#define OSCCTRL_STATUS_DFLLOOB_Pos 9
#define OSCCTRL_STATUS_DFLLOOB (_U_(0x1) << OSCCTRL_STATUS_DFLLOOB_Pos)
#define OSCCTRL_STATUS_DFLLLCKF_Pos 10
#define OSCCTRL_STATUS_DFLLLCKF (_U_(0x1) << OSCCTRL_STATUS_DFLLLCKF_Pos)
#define OSCCTRL_STATUS_DFLLLCKC_Pos 11
#define OSCCTRL_STATUS_DFLLLCKC (_U_(0x1) << OSCCTRL_STATUS_DFLLLCKC_Pos)
#define OSCCTRL_STATUS_DFLLRCS_Pos 12
#define OSCCTRL_STATUS_DFLLRCS (_U_(0x1) << OSCCTRL_STATUS_DFLLRCS_Pos)
#define OSCCTRL_STATUS_DPLL0LCKR_Pos 16
#define OSCCTRL_STATUS_DPLL0LCKR (_U_(0x1) << OSCCTRL_STATUS_DPLL0LCKR_Pos)
#define OSCCTRL_STATUS_DPLL0LCKF_Pos 17
#define OSCCTRL_STATUS_DPLL0LCKF (_U_(0x1) << OSCCTRL_STATUS_DPLL0LCKF_Pos)
#define OSCCTRL_STATUS_DPLL0TO_Pos 18
#define OSCCTRL_STATUS_DPLL0TO (_U_(0x1) << OSCCTRL_STATUS_DPLL0TO_Pos)
#define OSCCTRL_STATUS_DPLL0LDRTO_Pos 19
#define OSCCTRL_STATUS_DPLL0LDRTO (_U_(0x1) << OSCCTRL_STATUS_DPLL0LDRTO_Pos)
#define OSCCTRL_STATUS_DPLL1LCKR_Pos 24
#define OSCCTRL_STATUS_DPLL1LCKR (_U_(0x1) << OSCCTRL_STATUS_DPLL1LCKR_Pos)
#define OSCCTRL_STATUS_DPLL1LCKF_Pos 25
#define OSCCTRL_STATUS_DPLL1LCKF (_U_(0x1) << OSCCTRL_STATUS_DPLL1LCKF_Pos)
#define OSCCTRL_STATUS_DPLL1TO_Pos 26
#define OSCCTRL_STATUS_DPLL1TO (_U_(0x1) << OSCCTRL_STATUS_DPLL1TO_Pos)
#define OSCCTRL_STATUS_DPLL1LDRTO_Pos 27
#define OSCCTRL_STATUS_DPLL1LDRTO (_U_(0x1) << OSCCTRL_STATUS_DPLL1LDRTO_Pos)
#define OSCCTRL_STATUS_MASK _U_(0x0F0F1F3F)



typedef union {
  struct {
    uint32_t :1;
    uint32_t ENABLE:1;
    uint32_t XTALEN:1;
    uint32_t :3;
    uint32_t RUNSTDBY:1;
    uint32_t ONDEMAND:1;
    uint32_t LOWBUFGAIN:1;
    uint32_t IPTAT:2;
    uint32_t IMULT:4;
    uint32_t ENALC:1;
    uint32_t CFDEN:1;
    uint32_t SWBEN:1;
    uint32_t :2;
    uint32_t STARTUP:4;
    uint32_t CFDPRESC:4;
    uint32_t :4;
  } bit;
  uint32_t reg;
} OSCCTRL_XOSCCTRL_Type;


#define OSCCTRL_XOSCCTRL_OFFSET 0x14
#define OSCCTRL_XOSCCTRL_RESETVALUE _U_(0x00000080)

#define OSCCTRL_XOSCCTRL_ENABLE_Pos 1
#define OSCCTRL_XOSCCTRL_ENABLE (_U_(0x1) << OSCCTRL_XOSCCTRL_ENABLE_Pos)
#define OSCCTRL_XOSCCTRL_XTALEN_Pos 2
#define OSCCTRL_XOSCCTRL_XTALEN (_U_(0x1) << OSCCTRL_XOSCCTRL_XTALEN_Pos)
#define OSCCTRL_XOSCCTRL_RUNSTDBY_Pos 6
#define OSCCTRL_XOSCCTRL_RUNSTDBY (_U_(0x1) << OSCCTRL_XOSCCTRL_RUNSTDBY_Pos)
#define OSCCTRL_XOSCCTRL_ONDEMAND_Pos 7
#define OSCCTRL_XOSCCTRL_ONDEMAND (_U_(0x1) << OSCCTRL_XOSCCTRL_ONDEMAND_Pos)
#define OSCCTRL_XOSCCTRL_LOWBUFGAIN_Pos 8
#define OSCCTRL_XOSCCTRL_LOWBUFGAIN (_U_(0x1) << OSCCTRL_XOSCCTRL_LOWBUFGAIN_Pos)
#define OSCCTRL_XOSCCTRL_IPTAT_Pos 9
#define OSCCTRL_XOSCCTRL_IPTAT_Msk (_U_(0x3) << OSCCTRL_XOSCCTRL_IPTAT_Pos)
#define OSCCTRL_XOSCCTRL_IPTAT(value) (OSCCTRL_XOSCCTRL_IPTAT_Msk & ((value) << OSCCTRL_XOSCCTRL_IPTAT_Pos))
#define OSCCTRL_XOSCCTRL_IMULT_Pos 11
#define OSCCTRL_XOSCCTRL_IMULT_Msk (_U_(0xF) << OSCCTRL_XOSCCTRL_IMULT_Pos)
#define OSCCTRL_XOSCCTRL_IMULT(value) (OSCCTRL_XOSCCTRL_IMULT_Msk & ((value) << OSCCTRL_XOSCCTRL_IMULT_Pos))
#define OSCCTRL_XOSCCTRL_ENALC_Pos 15
#define OSCCTRL_XOSCCTRL_ENALC (_U_(0x1) << OSCCTRL_XOSCCTRL_ENALC_Pos)
#define OSCCTRL_XOSCCTRL_CFDEN_Pos 16
#define OSCCTRL_XOSCCTRL_CFDEN (_U_(0x1) << OSCCTRL_XOSCCTRL_CFDEN_Pos)
#define OSCCTRL_XOSCCTRL_SWBEN_Pos 17
#define OSCCTRL_XOSCCTRL_SWBEN (_U_(0x1) << OSCCTRL_XOSCCTRL_SWBEN_Pos)
#define OSCCTRL_XOSCCTRL_STARTUP_Pos 20
#define OSCCTRL_XOSCCTRL_STARTUP_Msk (_U_(0xF) << OSCCTRL_XOSCCTRL_STARTUP_Pos)
#define OSCCTRL_XOSCCTRL_STARTUP(value) (OSCCTRL_XOSCCTRL_STARTUP_Msk & ((value) << OSCCTRL_XOSCCTRL_STARTUP_Pos))
#define OSCCTRL_XOSCCTRL_CFDPRESC_Pos 24
#define OSCCTRL_XOSCCTRL_CFDPRESC_Msk (_U_(0xF) << OSCCTRL_XOSCCTRL_CFDPRESC_Pos)
#define OSCCTRL_XOSCCTRL_CFDPRESC(value) (OSCCTRL_XOSCCTRL_CFDPRESC_Msk & ((value) << OSCCTRL_XOSCCTRL_CFDPRESC_Pos))
#define OSCCTRL_XOSCCTRL_MASK _U_(0x0FF3FFC6)



typedef union {
  struct {
    uint8_t :1;
    uint8_t ENABLE:1;
    uint8_t :4;
    uint8_t RUNSTDBY:1;
    uint8_t ONDEMAND:1;
  } bit;
  uint8_t reg;
} OSCCTRL_DFLLCTRLA_Type;


#define OSCCTRL_DFLLCTRLA_OFFSET 0x1C
#define OSCCTRL_DFLLCTRLA_RESETVALUE _U_(0x82)

#define OSCCTRL_DFLLCTRLA_ENABLE_Pos 1
#define OSCCTRL_DFLLCTRLA_ENABLE (_U_(0x1) << OSCCTRL_DFLLCTRLA_ENABLE_Pos)
#define OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos 6
#define OSCCTRL_DFLLCTRLA_RUNSTDBY (_U_(0x1) << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos)
#define OSCCTRL_DFLLCTRLA_ONDEMAND_Pos 7
#define OSCCTRL_DFLLCTRLA_ONDEMAND (_U_(0x1) << OSCCTRL_DFLLCTRLA_ONDEMAND_Pos)
#define OSCCTRL_DFLLCTRLA_MASK _U_(0xC2)



typedef union {
  struct {
    uint8_t MODE:1;
    uint8_t STABLE:1;
    uint8_t LLAW:1;
    uint8_t USBCRM:1;
    uint8_t CCDIS:1;
    uint8_t QLDIS:1;
    uint8_t BPLCKC:1;
    uint8_t WAITLOCK:1;
  } bit;
  uint8_t reg;
} OSCCTRL_DFLLCTRLB_Type;


#define OSCCTRL_DFLLCTRLB_OFFSET 0x20
#define OSCCTRL_DFLLCTRLB_RESETVALUE _U_(0x00)

#define OSCCTRL_DFLLCTRLB_MODE_Pos 0
#define OSCCTRL_DFLLCTRLB_MODE (_U_(0x1) << OSCCTRL_DFLLCTRLB_MODE_Pos)
#define OSCCTRL_DFLLCTRLB_STABLE_Pos 1
#define OSCCTRL_DFLLCTRLB_STABLE (_U_(0x1) << OSCCTRL_DFLLCTRLB_STABLE_Pos)
#define OSCCTRL_DFLLCTRLB_LLAW_Pos 2
#define OSCCTRL_DFLLCTRLB_LLAW (_U_(0x1) << OSCCTRL_DFLLCTRLB_LLAW_Pos)
#define OSCCTRL_DFLLCTRLB_USBCRM_Pos 3
#define OSCCTRL_DFLLCTRLB_USBCRM (_U_(0x1) << OSCCTRL_DFLLCTRLB_USBCRM_Pos)
#define OSCCTRL_DFLLCTRLB_CCDIS_Pos 4
#define OSCCTRL_DFLLCTRLB_CCDIS (_U_(0x1) << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
#define OSCCTRL_DFLLCTRLB_QLDIS_Pos 5
#define OSCCTRL_DFLLCTRLB_QLDIS (_U_(0x1) << OSCCTRL_DFLLCTRLB_QLDIS_Pos)
#define OSCCTRL_DFLLCTRLB_BPLCKC_Pos 6
#define OSCCTRL_DFLLCTRLB_BPLCKC (_U_(0x1) << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
#define OSCCTRL_DFLLCTRLB_WAITLOCK_Pos 7
#define OSCCTRL_DFLLCTRLB_WAITLOCK (_U_(0x1) << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos)
#define OSCCTRL_DFLLCTRLB_MASK _U_(0xFF)



typedef union {
  struct {
    uint32_t FINE:8;
    uint32_t :2;
    uint32_t COARSE:6;
    uint32_t DIFF:16;
  } bit;
  uint32_t reg;
} OSCCTRL_DFLLVAL_Type;


#define OSCCTRL_DFLLVAL_OFFSET 0x24
#define OSCCTRL_DFLLVAL_RESETVALUE _U_(0x00000000)

#define OSCCTRL_DFLLVAL_FINE_Pos 0
#define OSCCTRL_DFLLVAL_FINE_Msk (_U_(0xFF) << OSCCTRL_DFLLVAL_FINE_Pos)
#define OSCCTRL_DFLLVAL_FINE(value) (OSCCTRL_DFLLVAL_FINE_Msk & ((value) << OSCCTRL_DFLLVAL_FINE_Pos))
#define OSCCTRL_DFLLVAL_COARSE_Pos 10
#define OSCCTRL_DFLLVAL_COARSE_Msk (_U_(0x3F) << OSCCTRL_DFLLVAL_COARSE_Pos)
#define OSCCTRL_DFLLVAL_COARSE(value) (OSCCTRL_DFLLVAL_COARSE_Msk & ((value) << OSCCTRL_DFLLVAL_COARSE_Pos))
#define OSCCTRL_DFLLVAL_DIFF_Pos 16
#define OSCCTRL_DFLLVAL_DIFF_Msk (_U_(0xFFFF) << OSCCTRL_DFLLVAL_DIFF_Pos)
#define OSCCTRL_DFLLVAL_DIFF(value) (OSCCTRL_DFLLVAL_DIFF_Msk & ((value) << OSCCTRL_DFLLVAL_DIFF_Pos))
#define OSCCTRL_DFLLVAL_MASK _U_(0xFFFFFCFF)



typedef union {
  struct {
    uint32_t MUL:16;
    uint32_t FSTEP:8;
    uint32_t :2;
    uint32_t CSTEP:6;
  } bit;
  uint32_t reg;
} OSCCTRL_DFLLMUL_Type;


#define OSCCTRL_DFLLMUL_OFFSET 0x28
#define OSCCTRL_DFLLMUL_RESETVALUE _U_(0x00000000)

#define OSCCTRL_DFLLMUL_MUL_Pos 0
#define OSCCTRL_DFLLMUL_MUL_Msk (_U_(0xFFFF) << OSCCTRL_DFLLMUL_MUL_Pos)
#define OSCCTRL_DFLLMUL_MUL(value) (OSCCTRL_DFLLMUL_MUL_Msk & ((value) << OSCCTRL_DFLLMUL_MUL_Pos))
#define OSCCTRL_DFLLMUL_FSTEP_Pos 16
#define OSCCTRL_DFLLMUL_FSTEP_Msk (_U_(0xFF) << OSCCTRL_DFLLMUL_FSTEP_Pos)
#define OSCCTRL_DFLLMUL_FSTEP(value) (OSCCTRL_DFLLMUL_FSTEP_Msk & ((value) << OSCCTRL_DFLLMUL_FSTEP_Pos))
#define OSCCTRL_DFLLMUL_CSTEP_Pos 26
#define OSCCTRL_DFLLMUL_CSTEP_Msk (_U_(0x3F) << OSCCTRL_DFLLMUL_CSTEP_Pos)
#define OSCCTRL_DFLLMUL_CSTEP(value) (OSCCTRL_DFLLMUL_CSTEP_Msk & ((value) << OSCCTRL_DFLLMUL_CSTEP_Pos))
#define OSCCTRL_DFLLMUL_MASK _U_(0xFCFFFFFF)



typedef union {
  struct {
    uint8_t :1;
    uint8_t ENABLE:1;
    uint8_t DFLLCTRLB:1;
    uint8_t DFLLVAL:1;
    uint8_t DFLLMUL:1;
    uint8_t :3;
  } bit;
  uint8_t reg;
} OSCCTRL_DFLLSYNC_Type;


#define OSCCTRL_DFLLSYNC_OFFSET 0x2C
#define OSCCTRL_DFLLSYNC_RESETVALUE _U_(0x00)

#define OSCCTRL_DFLLSYNC_ENABLE_Pos 1
#define OSCCTRL_DFLLSYNC_ENABLE (_U_(0x1) << OSCCTRL_DFLLSYNC_ENABLE_Pos)
#define OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos 2
#define OSCCTRL_DFLLSYNC_DFLLCTRLB (_U_(0x1) << OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos)
#define OSCCTRL_DFLLSYNC_DFLLVAL_Pos 3
#define OSCCTRL_DFLLSYNC_DFLLVAL (_U_(0x1) << OSCCTRL_DFLLSYNC_DFLLVAL_Pos)
#define OSCCTRL_DFLLSYNC_DFLLMUL_Pos 4
#define OSCCTRL_DFLLSYNC_DFLLMUL (_U_(0x1) << OSCCTRL_DFLLSYNC_DFLLMUL_Pos)
#define OSCCTRL_DFLLSYNC_MASK _U_(0x1E)



typedef union {
  struct {
    uint8_t :1;
    uint8_t ENABLE:1;
    uint8_t :4;
    uint8_t RUNSTDBY:1;
    uint8_t ONDEMAND:1;
  } bit;
  uint8_t reg;
} OSCCTRL_DPLLCTRLA_Type;


#define OSCCTRL_DPLLCTRLA_OFFSET 0x30
#define OSCCTRL_DPLLCTRLA_RESETVALUE _U_(0x80)

#define OSCCTRL_DPLLCTRLA_ENABLE_Pos 1
#define OSCCTRL_DPLLCTRLA_ENABLE (_U_(0x1) << OSCCTRL_DPLLCTRLA_ENABLE_Pos)
#define OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos 6
#define OSCCTRL_DPLLCTRLA_RUNSTDBY (_U_(0x1) << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
#define OSCCTRL_DPLLCTRLA_ONDEMAND_Pos 7
#define OSCCTRL_DPLLCTRLA_ONDEMAND (_U_(0x1) << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos)
#define OSCCTRL_DPLLCTRLA_MASK _U_(0xC2)



typedef union {
  struct {
    uint32_t LDR:13;
    uint32_t :3;
    uint32_t LDRFRAC:5;
    uint32_t :11;
  } bit;
  uint32_t reg;
} OSCCTRL_DPLLRATIO_Type;


#define OSCCTRL_DPLLRATIO_OFFSET 0x34
#define OSCCTRL_DPLLRATIO_RESETVALUE _U_(0x00000000)

#define OSCCTRL_DPLLRATIO_LDR_Pos 0
#define OSCCTRL_DPLLRATIO_LDR_Msk (_U_(0x1FFF) << OSCCTRL_DPLLRATIO_LDR_Pos)
#define OSCCTRL_DPLLRATIO_LDR(value) (OSCCTRL_DPLLRATIO_LDR_Msk & ((value) << OSCCTRL_DPLLRATIO_LDR_Pos))
#define OSCCTRL_DPLLRATIO_LDRFRAC_Pos 16
#define OSCCTRL_DPLLRATIO_LDRFRAC_Msk (_U_(0x1F) << OSCCTRL_DPLLRATIO_LDRFRAC_Pos)
#define OSCCTRL_DPLLRATIO_LDRFRAC(value) (OSCCTRL_DPLLRATIO_LDRFRAC_Msk & ((value) << OSCCTRL_DPLLRATIO_LDRFRAC_Pos))
#define OSCCTRL_DPLLRATIO_MASK _U_(0x001F1FFF)



typedef union {
  struct {
    uint32_t FILTER:4;
    uint32_t WUF:1;
    uint32_t REFCLK:3;
    uint32_t LTIME:3;
    uint32_t LBYPASS:1;
    uint32_t DCOFILTER:3;
    uint32_t DCOEN:1;
    uint32_t DIV:11;
    uint32_t :5;
  } bit;
  uint32_t reg;
} OSCCTRL_DPLLCTRLB_Type;


#define OSCCTRL_DPLLCTRLB_OFFSET 0x38
#define OSCCTRL_DPLLCTRLB_RESETVALUE _U_(0x00000020)

#define OSCCTRL_DPLLCTRLB_FILTER_Pos 0
#define OSCCTRL_DPLLCTRLB_FILTER_Msk (_U_(0xF) << OSCCTRL_DPLLCTRLB_FILTER_Pos)
#define OSCCTRL_DPLLCTRLB_FILTER(value) (OSCCTRL_DPLLCTRLB_FILTER_Msk & ((value) << OSCCTRL_DPLLCTRLB_FILTER_Pos))
#define OSCCTRL_DPLLCTRLB_WUF_Pos 4
#define OSCCTRL_DPLLCTRLB_WUF (_U_(0x1) << OSCCTRL_DPLLCTRLB_WUF_Pos)
#define OSCCTRL_DPLLCTRLB_REFCLK_Pos 5
#define OSCCTRL_DPLLCTRLB_REFCLK_Msk (_U_(0x7) << OSCCTRL_DPLLCTRLB_REFCLK_Pos)
#define OSCCTRL_DPLLCTRLB_REFCLK(value) (OSCCTRL_DPLLCTRLB_REFCLK_Msk & ((value) << OSCCTRL_DPLLCTRLB_REFCLK_Pos))
#define OSCCTRL_DPLLCTRLB_REFCLK_GCLK_Val _U_(0x0)
#define OSCCTRL_DPLLCTRLB_REFCLK_XOSC32_Val _U_(0x1)
#define OSCCTRL_DPLLCTRLB_REFCLK_XOSC0_Val _U_(0x2)
#define OSCCTRL_DPLLCTRLB_REFCLK_XOSC1_Val _U_(0x3)
#define OSCCTRL_DPLLCTRLB_REFCLK_GCLK (OSCCTRL_DPLLCTRLB_REFCLK_GCLK_Val << OSCCTRL_DPLLCTRLB_REFCLK_Pos)
#define OSCCTRL_DPLLCTRLB_REFCLK_XOSC32 (OSCCTRL_DPLLCTRLB_REFCLK_XOSC32_Val << OSCCTRL_DPLLCTRLB_REFCLK_Pos)
#define OSCCTRL_DPLLCTRLB_REFCLK_XOSC0 (OSCCTRL_DPLLCTRLB_REFCLK_XOSC0_Val << OSCCTRL_DPLLCTRLB_REFCLK_Pos)
#define OSCCTRL_DPLLCTRLB_REFCLK_XOSC1 (OSCCTRL_DPLLCTRLB_REFCLK_XOSC1_Val << OSCCTRL_DPLLCTRLB_REFCLK_Pos)
#define OSCCTRL_DPLLCTRLB_LTIME_Pos 8
#define OSCCTRL_DPLLCTRLB_LTIME_Msk (_U_(0x7) << OSCCTRL_DPLLCTRLB_LTIME_Pos)
#define OSCCTRL_DPLLCTRLB_LTIME(value) (OSCCTRL_DPLLCTRLB_LTIME_Msk & ((value) << OSCCTRL_DPLLCTRLB_LTIME_Pos))
#define OSCCTRL_DPLLCTRLB_LTIME_DEFAULT_Val _U_(0x0)
#define OSCCTRL_DPLLCTRLB_LTIME_800US_Val _U_(0x4)
#define OSCCTRL_DPLLCTRLB_LTIME_900US_Val _U_(0x5)
#define OSCCTRL_DPLLCTRLB_LTIME_1MS_Val _U_(0x6)
#define OSCCTRL_DPLLCTRLB_LTIME_1P1MS_Val _U_(0x7)
#define OSCCTRL_DPLLCTRLB_LTIME_DEFAULT (OSCCTRL_DPLLCTRLB_LTIME_DEFAULT_Val << OSCCTRL_DPLLCTRLB_LTIME_Pos)
#define OSCCTRL_DPLLCTRLB_LTIME_800US (OSCCTRL_DPLLCTRLB_LTIME_800US_Val << OSCCTRL_DPLLCTRLB_LTIME_Pos)
#define OSCCTRL_DPLLCTRLB_LTIME_900US (OSCCTRL_DPLLCTRLB_LTIME_900US_Val << OSCCTRL_DPLLCTRLB_LTIME_Pos)
#define OSCCTRL_DPLLCTRLB_LTIME_1MS (OSCCTRL_DPLLCTRLB_LTIME_1MS_Val << OSCCTRL_DPLLCTRLB_LTIME_Pos)
#define OSCCTRL_DPLLCTRLB_LTIME_1P1MS (OSCCTRL_DPLLCTRLB_LTIME_1P1MS_Val << OSCCTRL_DPLLCTRLB_LTIME_Pos)
#define OSCCTRL_DPLLCTRLB_LBYPASS_Pos 11
#define OSCCTRL_DPLLCTRLB_LBYPASS (_U_(0x1) << OSCCTRL_DPLLCTRLB_LBYPASS_Pos)
#define OSCCTRL_DPLLCTRLB_DCOFILTER_Pos 12
#define OSCCTRL_DPLLCTRLB_DCOFILTER_Msk (_U_(0x7) << OSCCTRL_DPLLCTRLB_DCOFILTER_Pos)
#define OSCCTRL_DPLLCTRLB_DCOFILTER(value) (OSCCTRL_DPLLCTRLB_DCOFILTER_Msk & ((value) << OSCCTRL_DPLLCTRLB_DCOFILTER_Pos))
#define OSCCTRL_DPLLCTRLB_DCOEN_Pos 15
#define OSCCTRL_DPLLCTRLB_DCOEN (_U_(0x1) << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
#define OSCCTRL_DPLLCTRLB_DIV_Pos 16
#define OSCCTRL_DPLLCTRLB_DIV_Msk (_U_(0x7FF) << OSCCTRL_DPLLCTRLB_DIV_Pos)
#define OSCCTRL_DPLLCTRLB_DIV(value) (OSCCTRL_DPLLCTRLB_DIV_Msk & ((value) << OSCCTRL_DPLLCTRLB_DIV_Pos))
#define OSCCTRL_DPLLCTRLB_MASK _U_(0x07FFFFFF)



typedef union {
  struct {
    uint32_t :1;
    uint32_t ENABLE:1;
    uint32_t DPLLRATIO:1;
    uint32_t :29;
  } bit;
  uint32_t reg;
} OSCCTRL_DPLLSYNCBUSY_Type;


#define OSCCTRL_DPLLSYNCBUSY_OFFSET 0x3C
#define OSCCTRL_DPLLSYNCBUSY_RESETVALUE _U_(0x00000000)

#define OSCCTRL_DPLLSYNCBUSY_ENABLE_Pos 1
#define OSCCTRL_DPLLSYNCBUSY_ENABLE (_U_(0x1) << OSCCTRL_DPLLSYNCBUSY_ENABLE_Pos)
#define OSCCTRL_DPLLSYNCBUSY_DPLLRATIO_Pos 2
#define OSCCTRL_DPLLSYNCBUSY_DPLLRATIO (_U_(0x1) << OSCCTRL_DPLLSYNCBUSY_DPLLRATIO_Pos)
#define OSCCTRL_DPLLSYNCBUSY_MASK _U_(0x00000006)



typedef union {
  struct {
    uint32_t LOCK:1;
    uint32_t CLKRDY:1;
    uint32_t :30;
  } bit;
  uint32_t reg;
} OSCCTRL_DPLLSTATUS_Type;


#define OSCCTRL_DPLLSTATUS_OFFSET 0x40
#define OSCCTRL_DPLLSTATUS_RESETVALUE _U_(0x00000000)

#define OSCCTRL_DPLLSTATUS_LOCK_Pos 0
#define OSCCTRL_DPLLSTATUS_LOCK (_U_(0x1) << OSCCTRL_DPLLSTATUS_LOCK_Pos)
#define OSCCTRL_DPLLSTATUS_CLKRDY_Pos 1
#define OSCCTRL_DPLLSTATUS_CLKRDY (_U_(0x1) << OSCCTRL_DPLLSTATUS_CLKRDY_Pos)
#define OSCCTRL_DPLLSTATUS_MASK _U_(0x00000003)



typedef struct {
  volatile OSCCTRL_DPLLCTRLA_Type DPLLCTRLA;
       RoReg8 Reserved1[0x3];
  volatile OSCCTRL_DPLLRATIO_Type DPLLRATIO;
  volatile OSCCTRL_DPLLCTRLB_Type DPLLCTRLB;
  volatile const OSCCTRL_DPLLSYNCBUSY_Type DPLLSYNCBUSY;
  volatile const OSCCTRL_DPLLSTATUS_Type DPLLSTATUS;
} OscctrlDpll;




typedef struct {
  volatile OSCCTRL_EVCTRL_Type EVCTRL;
       RoReg8 Reserved1[0x3];
  volatile OSCCTRL_INTENCLR_Type INTENCLR;
  volatile OSCCTRL_INTENSET_Type INTENSET;
  volatile OSCCTRL_INTFLAG_Type INTFLAG;
  volatile const OSCCTRL_STATUS_Type STATUS;
  volatile OSCCTRL_XOSCCTRL_Type XOSCCTRL[2];
  volatile OSCCTRL_DFLLCTRLA_Type DFLLCTRLA;
       RoReg8 Reserved2[0x3];
  volatile OSCCTRL_DFLLCTRLB_Type DFLLCTRLB;
       RoReg8 Reserved3[0x3];
  volatile OSCCTRL_DFLLVAL_Type DFLLVAL;
  volatile OSCCTRL_DFLLMUL_Type DFLLMUL;
  volatile OSCCTRL_DFLLSYNC_Type DFLLSYNC;
       RoReg8 Reserved4[0x3];
       OscctrlDpll Dpll[2];
} Oscctrl;
# 599 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/osc32kctrl.h" 1
# 31 "asf4/samd51/include/component/osc32kctrl.h"
#define _SAMD51_OSC32KCTRL_COMPONENT_ 







#define OSC32KCTRL_U2400 
#define REV_OSC32KCTRL 0x100



typedef union {
  struct {
    uint32_t XOSC32KRDY:1;
    uint32_t :1;
    uint32_t XOSC32KFAIL:1;
    uint32_t :29;
  } bit;
  uint32_t reg;
} OSC32KCTRL_INTENCLR_Type;


#define OSC32KCTRL_INTENCLR_OFFSET 0x00
#define OSC32KCTRL_INTENCLR_RESETVALUE _U_(0x00000000)

#define OSC32KCTRL_INTENCLR_XOSC32KRDY_Pos 0
#define OSC32KCTRL_INTENCLR_XOSC32KRDY (_U_(0x1) << OSC32KCTRL_INTENCLR_XOSC32KRDY_Pos)
#define OSC32KCTRL_INTENCLR_XOSC32KFAIL_Pos 2
#define OSC32KCTRL_INTENCLR_XOSC32KFAIL (_U_(0x1) << OSC32KCTRL_INTENCLR_XOSC32KFAIL_Pos)
#define OSC32KCTRL_INTENCLR_MASK _U_(0x00000005)



typedef union {
  struct {
    uint32_t XOSC32KRDY:1;
    uint32_t :1;
    uint32_t XOSC32KFAIL:1;
    uint32_t :29;
  } bit;
  uint32_t reg;
} OSC32KCTRL_INTENSET_Type;


#define OSC32KCTRL_INTENSET_OFFSET 0x04
#define OSC32KCTRL_INTENSET_RESETVALUE _U_(0x00000000)

#define OSC32KCTRL_INTENSET_XOSC32KRDY_Pos 0
#define OSC32KCTRL_INTENSET_XOSC32KRDY (_U_(0x1) << OSC32KCTRL_INTENSET_XOSC32KRDY_Pos)
#define OSC32KCTRL_INTENSET_XOSC32KFAIL_Pos 2
#define OSC32KCTRL_INTENSET_XOSC32KFAIL (_U_(0x1) << OSC32KCTRL_INTENSET_XOSC32KFAIL_Pos)
#define OSC32KCTRL_INTENSET_MASK _U_(0x00000005)



typedef union {
  struct {
    volatile const uint32_t XOSC32KRDY:1;
    volatile const uint32_t :1;
    volatile const uint32_t XOSC32KFAIL:1;
    volatile const uint32_t :29;
  } bit;
  uint32_t reg;
} OSC32KCTRL_INTFLAG_Type;


#define OSC32KCTRL_INTFLAG_OFFSET 0x08
#define OSC32KCTRL_INTFLAG_RESETVALUE _U_(0x00000000)

#define OSC32KCTRL_INTFLAG_XOSC32KRDY_Pos 0
#define OSC32KCTRL_INTFLAG_XOSC32KRDY (_U_(0x1) << OSC32KCTRL_INTFLAG_XOSC32KRDY_Pos)
#define OSC32KCTRL_INTFLAG_XOSC32KFAIL_Pos 2
#define OSC32KCTRL_INTFLAG_XOSC32KFAIL (_U_(0x1) << OSC32KCTRL_INTFLAG_XOSC32KFAIL_Pos)
#define OSC32KCTRL_INTFLAG_MASK _U_(0x00000005)



typedef union {
  struct {
    uint32_t XOSC32KRDY:1;
    uint32_t :1;
    uint32_t XOSC32KFAIL:1;
    uint32_t XOSC32KSW:1;
    uint32_t :28;
  } bit;
  uint32_t reg;
} OSC32KCTRL_STATUS_Type;


#define OSC32KCTRL_STATUS_OFFSET 0x0C
#define OSC32KCTRL_STATUS_RESETVALUE _U_(0x00000000)

#define OSC32KCTRL_STATUS_XOSC32KRDY_Pos 0
#define OSC32KCTRL_STATUS_XOSC32KRDY (_U_(0x1) << OSC32KCTRL_STATUS_XOSC32KRDY_Pos)
#define OSC32KCTRL_STATUS_XOSC32KFAIL_Pos 2
#define OSC32KCTRL_STATUS_XOSC32KFAIL (_U_(0x1) << OSC32KCTRL_STATUS_XOSC32KFAIL_Pos)
#define OSC32KCTRL_STATUS_XOSC32KSW_Pos 3
#define OSC32KCTRL_STATUS_XOSC32KSW (_U_(0x1) << OSC32KCTRL_STATUS_XOSC32KSW_Pos)
#define OSC32KCTRL_STATUS_MASK _U_(0x0000000D)



typedef union {
  struct {
    uint8_t RTCSEL:3;
    uint8_t :5;
  } bit;
  uint8_t reg;
} OSC32KCTRL_RTCCTRL_Type;


#define OSC32KCTRL_RTCCTRL_OFFSET 0x10
#define OSC32KCTRL_RTCCTRL_RESETVALUE _U_(0x00)

#define OSC32KCTRL_RTCCTRL_RTCSEL_Pos 0
#define OSC32KCTRL_RTCCTRL_RTCSEL_Msk (_U_(0x7) << OSC32KCTRL_RTCCTRL_RTCSEL_Pos)
#define OSC32KCTRL_RTCCTRL_RTCSEL(value) (OSC32KCTRL_RTCCTRL_RTCSEL_Msk & ((value) << OSC32KCTRL_RTCCTRL_RTCSEL_Pos))
#define OSC32KCTRL_RTCCTRL_RTCSEL_ULP1K_Val _U_(0x0)
#define OSC32KCTRL_RTCCTRL_RTCSEL_ULP32K_Val _U_(0x1)
#define OSC32KCTRL_RTCCTRL_RTCSEL_XOSC1K_Val _U_(0x4)
#define OSC32KCTRL_RTCCTRL_RTCSEL_XOSC32K_Val _U_(0x5)
#define OSC32KCTRL_RTCCTRL_RTCSEL_ULP1K (OSC32KCTRL_RTCCTRL_RTCSEL_ULP1K_Val << OSC32KCTRL_RTCCTRL_RTCSEL_Pos)
#define OSC32KCTRL_RTCCTRL_RTCSEL_ULP32K (OSC32KCTRL_RTCCTRL_RTCSEL_ULP32K_Val << OSC32KCTRL_RTCCTRL_RTCSEL_Pos)
#define OSC32KCTRL_RTCCTRL_RTCSEL_XOSC1K (OSC32KCTRL_RTCCTRL_RTCSEL_XOSC1K_Val << OSC32KCTRL_RTCCTRL_RTCSEL_Pos)
#define OSC32KCTRL_RTCCTRL_RTCSEL_XOSC32K (OSC32KCTRL_RTCCTRL_RTCSEL_XOSC32K_Val << OSC32KCTRL_RTCCTRL_RTCSEL_Pos)
#define OSC32KCTRL_RTCCTRL_MASK _U_(0x07)



typedef union {
  struct {
    uint16_t :1;
    uint16_t ENABLE:1;
    uint16_t XTALEN:1;
    uint16_t EN32K:1;
    uint16_t EN1K:1;
    uint16_t :1;
    uint16_t RUNSTDBY:1;
    uint16_t ONDEMAND:1;
    uint16_t STARTUP:3;
    uint16_t :1;
    uint16_t WRTLOCK:1;
    uint16_t CGM:2;
    uint16_t :1;
  } bit;
  uint16_t reg;
} OSC32KCTRL_XOSC32K_Type;


#define OSC32KCTRL_XOSC32K_OFFSET 0x14
#define OSC32KCTRL_XOSC32K_RESETVALUE _U_(0x2080)

#define OSC32KCTRL_XOSC32K_ENABLE_Pos 1
#define OSC32KCTRL_XOSC32K_ENABLE (_U_(0x1) << OSC32KCTRL_XOSC32K_ENABLE_Pos)
#define OSC32KCTRL_XOSC32K_XTALEN_Pos 2
#define OSC32KCTRL_XOSC32K_XTALEN (_U_(0x1) << OSC32KCTRL_XOSC32K_XTALEN_Pos)
#define OSC32KCTRL_XOSC32K_EN32K_Pos 3
#define OSC32KCTRL_XOSC32K_EN32K (_U_(0x1) << OSC32KCTRL_XOSC32K_EN32K_Pos)
#define OSC32KCTRL_XOSC32K_EN1K_Pos 4
#define OSC32KCTRL_XOSC32K_EN1K (_U_(0x1) << OSC32KCTRL_XOSC32K_EN1K_Pos)
#define OSC32KCTRL_XOSC32K_RUNSTDBY_Pos 6
#define OSC32KCTRL_XOSC32K_RUNSTDBY (_U_(0x1) << OSC32KCTRL_XOSC32K_RUNSTDBY_Pos)
#define OSC32KCTRL_XOSC32K_ONDEMAND_Pos 7
#define OSC32KCTRL_XOSC32K_ONDEMAND (_U_(0x1) << OSC32KCTRL_XOSC32K_ONDEMAND_Pos)
#define OSC32KCTRL_XOSC32K_STARTUP_Pos 8
#define OSC32KCTRL_XOSC32K_STARTUP_Msk (_U_(0x7) << OSC32KCTRL_XOSC32K_STARTUP_Pos)
#define OSC32KCTRL_XOSC32K_STARTUP(value) (OSC32KCTRL_XOSC32K_STARTUP_Msk & ((value) << OSC32KCTRL_XOSC32K_STARTUP_Pos))
#define OSC32KCTRL_XOSC32K_WRTLOCK_Pos 12
#define OSC32KCTRL_XOSC32K_WRTLOCK (_U_(0x1) << OSC32KCTRL_XOSC32K_WRTLOCK_Pos)
#define OSC32KCTRL_XOSC32K_CGM_Pos 13
#define OSC32KCTRL_XOSC32K_CGM_Msk (_U_(0x3) << OSC32KCTRL_XOSC32K_CGM_Pos)
#define OSC32KCTRL_XOSC32K_CGM(value) (OSC32KCTRL_XOSC32K_CGM_Msk & ((value) << OSC32KCTRL_XOSC32K_CGM_Pos))
#define OSC32KCTRL_XOSC32K_CGM_XT_Val _U_(0x1)
#define OSC32KCTRL_XOSC32K_CGM_HS_Val _U_(0x2)
#define OSC32KCTRL_XOSC32K_CGM_XT (OSC32KCTRL_XOSC32K_CGM_XT_Val << OSC32KCTRL_XOSC32K_CGM_Pos)
#define OSC32KCTRL_XOSC32K_CGM_HS (OSC32KCTRL_XOSC32K_CGM_HS_Val << OSC32KCTRL_XOSC32K_CGM_Pos)
#define OSC32KCTRL_XOSC32K_MASK _U_(0x77DE)



typedef union {
  struct {
    uint8_t CFDEN:1;
    uint8_t SWBACK:1;
    uint8_t CFDPRESC:1;
    uint8_t :5;
  } bit;
  uint8_t reg;
} OSC32KCTRL_CFDCTRL_Type;


#define OSC32KCTRL_CFDCTRL_OFFSET 0x16
#define OSC32KCTRL_CFDCTRL_RESETVALUE _U_(0x00)

#define OSC32KCTRL_CFDCTRL_CFDEN_Pos 0
#define OSC32KCTRL_CFDCTRL_CFDEN (_U_(0x1) << OSC32KCTRL_CFDCTRL_CFDEN_Pos)
#define OSC32KCTRL_CFDCTRL_SWBACK_Pos 1
#define OSC32KCTRL_CFDCTRL_SWBACK (_U_(0x1) << OSC32KCTRL_CFDCTRL_SWBACK_Pos)
#define OSC32KCTRL_CFDCTRL_CFDPRESC_Pos 2
#define OSC32KCTRL_CFDCTRL_CFDPRESC (_U_(0x1) << OSC32KCTRL_CFDCTRL_CFDPRESC_Pos)
#define OSC32KCTRL_CFDCTRL_MASK _U_(0x07)



typedef union {
  struct {
    uint8_t CFDEO:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} OSC32KCTRL_EVCTRL_Type;


#define OSC32KCTRL_EVCTRL_OFFSET 0x17
#define OSC32KCTRL_EVCTRL_RESETVALUE _U_(0x00)

#define OSC32KCTRL_EVCTRL_CFDEO_Pos 0
#define OSC32KCTRL_EVCTRL_CFDEO (_U_(0x1) << OSC32KCTRL_EVCTRL_CFDEO_Pos)
#define OSC32KCTRL_EVCTRL_MASK _U_(0x01)



typedef union {
  struct {
    uint32_t :1;
    uint32_t EN32K:1;
    uint32_t EN1K:1;
    uint32_t :5;
    uint32_t CALIB:6;
    uint32_t :1;
    uint32_t WRTLOCK:1;
    uint32_t :16;
  } bit;
  uint32_t reg;
} OSC32KCTRL_OSCULP32K_Type;


#define OSC32KCTRL_OSCULP32K_OFFSET 0x1C
#define OSC32KCTRL_OSCULP32K_RESETVALUE _U_(0x00000000)

#define OSC32KCTRL_OSCULP32K_EN32K_Pos 1
#define OSC32KCTRL_OSCULP32K_EN32K (_U_(0x1) << OSC32KCTRL_OSCULP32K_EN32K_Pos)
#define OSC32KCTRL_OSCULP32K_EN1K_Pos 2
#define OSC32KCTRL_OSCULP32K_EN1K (_U_(0x1) << OSC32KCTRL_OSCULP32K_EN1K_Pos)
#define OSC32KCTRL_OSCULP32K_CALIB_Pos 8
#define OSC32KCTRL_OSCULP32K_CALIB_Msk (_U_(0x3F) << OSC32KCTRL_OSCULP32K_CALIB_Pos)
#define OSC32KCTRL_OSCULP32K_CALIB(value) (OSC32KCTRL_OSCULP32K_CALIB_Msk & ((value) << OSC32KCTRL_OSCULP32K_CALIB_Pos))
#define OSC32KCTRL_OSCULP32K_WRTLOCK_Pos 15
#define OSC32KCTRL_OSCULP32K_WRTLOCK (_U_(0x1) << OSC32KCTRL_OSCULP32K_WRTLOCK_Pos)
#define OSC32KCTRL_OSCULP32K_MASK _U_(0x0000BF06)



typedef struct {
  volatile OSC32KCTRL_INTENCLR_Type INTENCLR;
  volatile OSC32KCTRL_INTENSET_Type INTENSET;
  volatile OSC32KCTRL_INTFLAG_Type INTFLAG;
  volatile const OSC32KCTRL_STATUS_Type STATUS;
  volatile OSC32KCTRL_RTCCTRL_Type RTCCTRL;
       RoReg8 Reserved1[0x3];
  volatile OSC32KCTRL_XOSC32K_Type XOSC32K;
  volatile OSC32KCTRL_CFDCTRL_Type CFDCTRL;
  volatile OSC32KCTRL_EVCTRL_Type EVCTRL;
       RoReg8 Reserved2[0x4];
  volatile OSC32KCTRL_OSCULP32K_Type OSCULP32K;
} Osc32kctrl;
# 600 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/pac.h" 1
# 31 "asf4/samd51/include/component/pac.h"
#define _SAMD51_PAC_COMPONENT_ 







#define PAC_U2120 
#define REV_PAC 0x120



typedef union {
  struct {
    uint32_t PERID:16;
    uint32_t KEY:8;
    uint32_t :8;
  } bit;
  uint32_t reg;
} PAC_WRCTRL_Type;


#define PAC_WRCTRL_OFFSET 0x00
#define PAC_WRCTRL_RESETVALUE _U_(0x00000000)

#define PAC_WRCTRL_PERID_Pos 0
#define PAC_WRCTRL_PERID_Msk (_U_(0xFFFF) << PAC_WRCTRL_PERID_Pos)
#define PAC_WRCTRL_PERID(value) (PAC_WRCTRL_PERID_Msk & ((value) << PAC_WRCTRL_PERID_Pos))
#define PAC_WRCTRL_KEY_Pos 16
#define PAC_WRCTRL_KEY_Msk (_U_(0xFF) << PAC_WRCTRL_KEY_Pos)
#define PAC_WRCTRL_KEY(value) (PAC_WRCTRL_KEY_Msk & ((value) << PAC_WRCTRL_KEY_Pos))
#define PAC_WRCTRL_KEY_OFF_Val _U_(0x0)
#define PAC_WRCTRL_KEY_CLR_Val _U_(0x1)
#define PAC_WRCTRL_KEY_SET_Val _U_(0x2)
#define PAC_WRCTRL_KEY_SETLCK_Val _U_(0x3)
#define PAC_WRCTRL_KEY_OFF (PAC_WRCTRL_KEY_OFF_Val << PAC_WRCTRL_KEY_Pos)
#define PAC_WRCTRL_KEY_CLR (PAC_WRCTRL_KEY_CLR_Val << PAC_WRCTRL_KEY_Pos)
#define PAC_WRCTRL_KEY_SET (PAC_WRCTRL_KEY_SET_Val << PAC_WRCTRL_KEY_Pos)
#define PAC_WRCTRL_KEY_SETLCK (PAC_WRCTRL_KEY_SETLCK_Val << PAC_WRCTRL_KEY_Pos)
#define PAC_WRCTRL_MASK _U_(0x00FFFFFF)



typedef union {
  struct {
    uint8_t ERREO:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} PAC_EVCTRL_Type;


#define PAC_EVCTRL_OFFSET 0x04
#define PAC_EVCTRL_RESETVALUE _U_(0x00)

#define PAC_EVCTRL_ERREO_Pos 0
#define PAC_EVCTRL_ERREO (_U_(0x1) << PAC_EVCTRL_ERREO_Pos)
#define PAC_EVCTRL_MASK _U_(0x01)



typedef union {
  struct {
    uint8_t ERR:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} PAC_INTENCLR_Type;


#define PAC_INTENCLR_OFFSET 0x08
#define PAC_INTENCLR_RESETVALUE _U_(0x00)

#define PAC_INTENCLR_ERR_Pos 0
#define PAC_INTENCLR_ERR (_U_(0x1) << PAC_INTENCLR_ERR_Pos)
#define PAC_INTENCLR_MASK _U_(0x01)



typedef union {
  struct {
    uint8_t ERR:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} PAC_INTENSET_Type;


#define PAC_INTENSET_OFFSET 0x09
#define PAC_INTENSET_RESETVALUE _U_(0x00)

#define PAC_INTENSET_ERR_Pos 0
#define PAC_INTENSET_ERR (_U_(0x1) << PAC_INTENSET_ERR_Pos)
#define PAC_INTENSET_MASK _U_(0x01)



typedef union {
  struct {
    volatile const uint32_t FLASH_:1;
    volatile const uint32_t FLASH_ALT_:1;
    volatile const uint32_t SEEPROM_:1;
    volatile const uint32_t RAMCM4S_:1;
    volatile const uint32_t RAMPPPDSU_:1;
    volatile const uint32_t RAMDMAWR_:1;
    volatile const uint32_t RAMDMACICM_:1;
    volatile const uint32_t HPB0_:1;
    volatile const uint32_t HPB1_:1;
    volatile const uint32_t HPB2_:1;
    volatile const uint32_t HPB3_:1;
    volatile const uint32_t PUKCC_:1;
    volatile const uint32_t SDHC0_:1;
    volatile const uint32_t SDHC1_:1;
    volatile const uint32_t QSPI_:1;
    volatile const uint32_t BKUPRAM_:1;
    volatile const uint32_t :16;
  } bit;
  uint32_t reg;
} PAC_INTFLAGAHB_Type;


#define PAC_INTFLAGAHB_OFFSET 0x10
#define PAC_INTFLAGAHB_RESETVALUE _U_(0x00000000)

#define PAC_INTFLAGAHB_FLASH_Pos 0
#define PAC_INTFLAGAHB_FLASH (_U_(0x1) << PAC_INTFLAGAHB_FLASH_Pos)
#define PAC_INTFLAGAHB_FLASH_ALT_Pos 1
#define PAC_INTFLAGAHB_FLASH_ALT (_U_(0x1) << PAC_INTFLAGAHB_FLASH_ALT_Pos)
#define PAC_INTFLAGAHB_SEEPROM_Pos 2
#define PAC_INTFLAGAHB_SEEPROM (_U_(0x1) << PAC_INTFLAGAHB_SEEPROM_Pos)
#define PAC_INTFLAGAHB_RAMCM4S_Pos 3
#define PAC_INTFLAGAHB_RAMCM4S (_U_(0x1) << PAC_INTFLAGAHB_RAMCM4S_Pos)
#define PAC_INTFLAGAHB_RAMPPPDSU_Pos 4
#define PAC_INTFLAGAHB_RAMPPPDSU (_U_(0x1) << PAC_INTFLAGAHB_RAMPPPDSU_Pos)
#define PAC_INTFLAGAHB_RAMDMAWR_Pos 5
#define PAC_INTFLAGAHB_RAMDMAWR (_U_(0x1) << PAC_INTFLAGAHB_RAMDMAWR_Pos)
#define PAC_INTFLAGAHB_RAMDMACICM_Pos 6
#define PAC_INTFLAGAHB_RAMDMACICM (_U_(0x1) << PAC_INTFLAGAHB_RAMDMACICM_Pos)
#define PAC_INTFLAGAHB_HPB0_Pos 7
#define PAC_INTFLAGAHB_HPB0 (_U_(0x1) << PAC_INTFLAGAHB_HPB0_Pos)
#define PAC_INTFLAGAHB_HPB1_Pos 8
#define PAC_INTFLAGAHB_HPB1 (_U_(0x1) << PAC_INTFLAGAHB_HPB1_Pos)
#define PAC_INTFLAGAHB_HPB2_Pos 9
#define PAC_INTFLAGAHB_HPB2 (_U_(0x1) << PAC_INTFLAGAHB_HPB2_Pos)
#define PAC_INTFLAGAHB_HPB3_Pos 10
#define PAC_INTFLAGAHB_HPB3 (_U_(0x1) << PAC_INTFLAGAHB_HPB3_Pos)
#define PAC_INTFLAGAHB_PUKCC_Pos 11
#define PAC_INTFLAGAHB_PUKCC (_U_(0x1) << PAC_INTFLAGAHB_PUKCC_Pos)
#define PAC_INTFLAGAHB_SDHC0_Pos 12
#define PAC_INTFLAGAHB_SDHC0 (_U_(0x1) << PAC_INTFLAGAHB_SDHC0_Pos)
#define PAC_INTFLAGAHB_SDHC1_Pos 13
#define PAC_INTFLAGAHB_SDHC1 (_U_(0x1) << PAC_INTFLAGAHB_SDHC1_Pos)
#define PAC_INTFLAGAHB_QSPI_Pos 14
#define PAC_INTFLAGAHB_QSPI (_U_(0x1) << PAC_INTFLAGAHB_QSPI_Pos)
#define PAC_INTFLAGAHB_BKUPRAM_Pos 15
#define PAC_INTFLAGAHB_BKUPRAM (_U_(0x1) << PAC_INTFLAGAHB_BKUPRAM_Pos)
#define PAC_INTFLAGAHB_MASK _U_(0x0000FFFF)



typedef union {
  struct {
    volatile const uint32_t PAC_:1;
    volatile const uint32_t PM_:1;
    volatile const uint32_t MCLK_:1;
    volatile const uint32_t RSTC_:1;
    volatile const uint32_t OSCCTRL_:1;
    volatile const uint32_t OSC32KCTRL_:1;
    volatile const uint32_t SUPC_:1;
    volatile const uint32_t GCLK_:1;
    volatile const uint32_t WDT_:1;
    volatile const uint32_t RTC_:1;
    volatile const uint32_t EIC_:1;
    volatile const uint32_t FREQM_:1;
    volatile const uint32_t SERCOM0_:1;
    volatile const uint32_t SERCOM1_:1;
    volatile const uint32_t TC0_:1;
    volatile const uint32_t TC1_:1;
    volatile const uint32_t :16;
  } bit;
  uint32_t reg;
} PAC_INTFLAGA_Type;


#define PAC_INTFLAGA_OFFSET 0x14
#define PAC_INTFLAGA_RESETVALUE _U_(0x00000000)

#define PAC_INTFLAGA_PAC_Pos 0
#define PAC_INTFLAGA_PAC (_U_(0x1) << PAC_INTFLAGA_PAC_Pos)
#define PAC_INTFLAGA_PM_Pos 1
#define PAC_INTFLAGA_PM (_U_(0x1) << PAC_INTFLAGA_PM_Pos)
#define PAC_INTFLAGA_MCLK_Pos 2
#define PAC_INTFLAGA_MCLK (_U_(0x1) << PAC_INTFLAGA_MCLK_Pos)
#define PAC_INTFLAGA_RSTC_Pos 3
#define PAC_INTFLAGA_RSTC (_U_(0x1) << PAC_INTFLAGA_RSTC_Pos)
#define PAC_INTFLAGA_OSCCTRL_Pos 4
#define PAC_INTFLAGA_OSCCTRL (_U_(0x1) << PAC_INTFLAGA_OSCCTRL_Pos)
#define PAC_INTFLAGA_OSC32KCTRL_Pos 5
#define PAC_INTFLAGA_OSC32KCTRL (_U_(0x1) << PAC_INTFLAGA_OSC32KCTRL_Pos)
#define PAC_INTFLAGA_SUPC_Pos 6
#define PAC_INTFLAGA_SUPC (_U_(0x1) << PAC_INTFLAGA_SUPC_Pos)
#define PAC_INTFLAGA_GCLK_Pos 7
#define PAC_INTFLAGA_GCLK (_U_(0x1) << PAC_INTFLAGA_GCLK_Pos)
#define PAC_INTFLAGA_WDT_Pos 8
#define PAC_INTFLAGA_WDT (_U_(0x1) << PAC_INTFLAGA_WDT_Pos)
#define PAC_INTFLAGA_RTC_Pos 9
#define PAC_INTFLAGA_RTC (_U_(0x1) << PAC_INTFLAGA_RTC_Pos)
#define PAC_INTFLAGA_EIC_Pos 10
#define PAC_INTFLAGA_EIC (_U_(0x1) << PAC_INTFLAGA_EIC_Pos)
#define PAC_INTFLAGA_FREQM_Pos 11
#define PAC_INTFLAGA_FREQM (_U_(0x1) << PAC_INTFLAGA_FREQM_Pos)
#define PAC_INTFLAGA_SERCOM0_Pos 12
#define PAC_INTFLAGA_SERCOM0 (_U_(0x1) << PAC_INTFLAGA_SERCOM0_Pos)
#define PAC_INTFLAGA_SERCOM1_Pos 13
#define PAC_INTFLAGA_SERCOM1 (_U_(0x1) << PAC_INTFLAGA_SERCOM1_Pos)
#define PAC_INTFLAGA_TC0_Pos 14
#define PAC_INTFLAGA_TC0 (_U_(0x1) << PAC_INTFLAGA_TC0_Pos)
#define PAC_INTFLAGA_TC1_Pos 15
#define PAC_INTFLAGA_TC1 (_U_(0x1) << PAC_INTFLAGA_TC1_Pos)
#define PAC_INTFLAGA_MASK _U_(0x0000FFFF)



typedef union {
  struct {
    volatile const uint32_t USB_:1;
    volatile const uint32_t DSU_:1;
    volatile const uint32_t NVMCTRL_:1;
    volatile const uint32_t CMCC_:1;
    volatile const uint32_t PORT_:1;
    volatile const uint32_t DMAC_:1;
    volatile const uint32_t HMATRIX_:1;
    volatile const uint32_t EVSYS_:1;
    volatile const uint32_t :1;
    volatile const uint32_t SERCOM2_:1;
    volatile const uint32_t SERCOM3_:1;
    volatile const uint32_t TCC0_:1;
    volatile const uint32_t TCC1_:1;
    volatile const uint32_t TC2_:1;
    volatile const uint32_t TC3_:1;
    volatile const uint32_t TAL_:1;
    volatile const uint32_t RAMECC_:1;
    volatile const uint32_t :15;
  } bit;
  uint32_t reg;
} PAC_INTFLAGB_Type;


#define PAC_INTFLAGB_OFFSET 0x18
#define PAC_INTFLAGB_RESETVALUE _U_(0x00000000)

#define PAC_INTFLAGB_USB_Pos 0
#define PAC_INTFLAGB_USB (_U_(0x1) << PAC_INTFLAGB_USB_Pos)
#define PAC_INTFLAGB_DSU_Pos 1
#define PAC_INTFLAGB_DSU (_U_(0x1) << PAC_INTFLAGB_DSU_Pos)
#define PAC_INTFLAGB_NVMCTRL_Pos 2
#define PAC_INTFLAGB_NVMCTRL (_U_(0x1) << PAC_INTFLAGB_NVMCTRL_Pos)
#define PAC_INTFLAGB_CMCC_Pos 3
#define PAC_INTFLAGB_CMCC (_U_(0x1) << PAC_INTFLAGB_CMCC_Pos)
#define PAC_INTFLAGB_PORT_Pos 4
#define PAC_INTFLAGB_PORT (_U_(0x1) << PAC_INTFLAGB_PORT_Pos)
#define PAC_INTFLAGB_DMAC_Pos 5
#define PAC_INTFLAGB_DMAC (_U_(0x1) << PAC_INTFLAGB_DMAC_Pos)
#define PAC_INTFLAGB_HMATRIX_Pos 6
#define PAC_INTFLAGB_HMATRIX (_U_(0x1) << PAC_INTFLAGB_HMATRIX_Pos)
#define PAC_INTFLAGB_EVSYS_Pos 7
#define PAC_INTFLAGB_EVSYS (_U_(0x1) << PAC_INTFLAGB_EVSYS_Pos)
#define PAC_INTFLAGB_SERCOM2_Pos 9
#define PAC_INTFLAGB_SERCOM2 (_U_(0x1) << PAC_INTFLAGB_SERCOM2_Pos)
#define PAC_INTFLAGB_SERCOM3_Pos 10
#define PAC_INTFLAGB_SERCOM3 (_U_(0x1) << PAC_INTFLAGB_SERCOM3_Pos)
#define PAC_INTFLAGB_TCC0_Pos 11
#define PAC_INTFLAGB_TCC0 (_U_(0x1) << PAC_INTFLAGB_TCC0_Pos)
#define PAC_INTFLAGB_TCC1_Pos 12
#define PAC_INTFLAGB_TCC1 (_U_(0x1) << PAC_INTFLAGB_TCC1_Pos)
#define PAC_INTFLAGB_TC2_Pos 13
#define PAC_INTFLAGB_TC2 (_U_(0x1) << PAC_INTFLAGB_TC2_Pos)
#define PAC_INTFLAGB_TC3_Pos 14
#define PAC_INTFLAGB_TC3 (_U_(0x1) << PAC_INTFLAGB_TC3_Pos)
#define PAC_INTFLAGB_TAL_Pos 15
#define PAC_INTFLAGB_TAL (_U_(0x1) << PAC_INTFLAGB_TAL_Pos)
#define PAC_INTFLAGB_RAMECC_Pos 16
#define PAC_INTFLAGB_RAMECC (_U_(0x1) << PAC_INTFLAGB_RAMECC_Pos)
#define PAC_INTFLAGB_MASK _U_(0x0001FEFF)



typedef union {
  struct {
    volatile const uint32_t :3;
    volatile const uint32_t TCC2_:1;
    volatile const uint32_t TCC3_:1;
    volatile const uint32_t TC4_:1;
    volatile const uint32_t TC5_:1;
    volatile const uint32_t PDEC_:1;
    volatile const uint32_t AC_:1;
    volatile const uint32_t AES_:1;
    volatile const uint32_t TRNG_:1;
    volatile const uint32_t ICM_:1;
    volatile const uint32_t PUKCC_:1;
    volatile const uint32_t QSPI_:1;
    volatile const uint32_t CCL_:1;
    volatile const uint32_t :17;
  } bit;
  uint32_t reg;
} PAC_INTFLAGC_Type;


#define PAC_INTFLAGC_OFFSET 0x1C
#define PAC_INTFLAGC_RESETVALUE _U_(0x00000000)

#define PAC_INTFLAGC_TCC2_Pos 3
#define PAC_INTFLAGC_TCC2 (_U_(0x1) << PAC_INTFLAGC_TCC2_Pos)
#define PAC_INTFLAGC_TCC3_Pos 4
#define PAC_INTFLAGC_TCC3 (_U_(0x1) << PAC_INTFLAGC_TCC3_Pos)
#define PAC_INTFLAGC_TC4_Pos 5
#define PAC_INTFLAGC_TC4 (_U_(0x1) << PAC_INTFLAGC_TC4_Pos)
#define PAC_INTFLAGC_TC5_Pos 6
#define PAC_INTFLAGC_TC5 (_U_(0x1) << PAC_INTFLAGC_TC5_Pos)
#define PAC_INTFLAGC_PDEC_Pos 7
#define PAC_INTFLAGC_PDEC (_U_(0x1) << PAC_INTFLAGC_PDEC_Pos)
#define PAC_INTFLAGC_AC_Pos 8
#define PAC_INTFLAGC_AC (_U_(0x1) << PAC_INTFLAGC_AC_Pos)
#define PAC_INTFLAGC_AES_Pos 9
#define PAC_INTFLAGC_AES (_U_(0x1) << PAC_INTFLAGC_AES_Pos)
#define PAC_INTFLAGC_TRNG_Pos 10
#define PAC_INTFLAGC_TRNG (_U_(0x1) << PAC_INTFLAGC_TRNG_Pos)
#define PAC_INTFLAGC_ICM_Pos 11
#define PAC_INTFLAGC_ICM (_U_(0x1) << PAC_INTFLAGC_ICM_Pos)
#define PAC_INTFLAGC_PUKCC_Pos 12
#define PAC_INTFLAGC_PUKCC (_U_(0x1) << PAC_INTFLAGC_PUKCC_Pos)
#define PAC_INTFLAGC_QSPI_Pos 13
#define PAC_INTFLAGC_QSPI (_U_(0x1) << PAC_INTFLAGC_QSPI_Pos)
#define PAC_INTFLAGC_CCL_Pos 14
#define PAC_INTFLAGC_CCL (_U_(0x1) << PAC_INTFLAGC_CCL_Pos)
#define PAC_INTFLAGC_MASK _U_(0x00007FF8)



typedef union {
  struct {
    volatile const uint32_t SERCOM4_:1;
    volatile const uint32_t SERCOM5_:1;
    volatile const uint32_t SERCOM6_:1;
    volatile const uint32_t SERCOM7_:1;
    volatile const uint32_t TCC4_:1;
    volatile const uint32_t TC6_:1;
    volatile const uint32_t TC7_:1;
    volatile const uint32_t ADC0_:1;
    volatile const uint32_t ADC1_:1;
    volatile const uint32_t DAC_:1;
    volatile const uint32_t I2S_:1;
    volatile const uint32_t PCC_:1;
    volatile const uint32_t :20;
  } bit;
  uint32_t reg;
} PAC_INTFLAGD_Type;


#define PAC_INTFLAGD_OFFSET 0x20
#define PAC_INTFLAGD_RESETVALUE _U_(0x00000000)

#define PAC_INTFLAGD_SERCOM4_Pos 0
#define PAC_INTFLAGD_SERCOM4 (_U_(0x1) << PAC_INTFLAGD_SERCOM4_Pos)
#define PAC_INTFLAGD_SERCOM5_Pos 1
#define PAC_INTFLAGD_SERCOM5 (_U_(0x1) << PAC_INTFLAGD_SERCOM5_Pos)
#define PAC_INTFLAGD_SERCOM6_Pos 2
#define PAC_INTFLAGD_SERCOM6 (_U_(0x1) << PAC_INTFLAGD_SERCOM6_Pos)
#define PAC_INTFLAGD_SERCOM7_Pos 3
#define PAC_INTFLAGD_SERCOM7 (_U_(0x1) << PAC_INTFLAGD_SERCOM7_Pos)
#define PAC_INTFLAGD_TCC4_Pos 4
#define PAC_INTFLAGD_TCC4 (_U_(0x1) << PAC_INTFLAGD_TCC4_Pos)
#define PAC_INTFLAGD_TC6_Pos 5
#define PAC_INTFLAGD_TC6 (_U_(0x1) << PAC_INTFLAGD_TC6_Pos)
#define PAC_INTFLAGD_TC7_Pos 6
#define PAC_INTFLAGD_TC7 (_U_(0x1) << PAC_INTFLAGD_TC7_Pos)
#define PAC_INTFLAGD_ADC0_Pos 7
#define PAC_INTFLAGD_ADC0 (_U_(0x1) << PAC_INTFLAGD_ADC0_Pos)
#define PAC_INTFLAGD_ADC1_Pos 8
#define PAC_INTFLAGD_ADC1 (_U_(0x1) << PAC_INTFLAGD_ADC1_Pos)
#define PAC_INTFLAGD_DAC_Pos 9
#define PAC_INTFLAGD_DAC (_U_(0x1) << PAC_INTFLAGD_DAC_Pos)
#define PAC_INTFLAGD_I2S_Pos 10
#define PAC_INTFLAGD_I2S (_U_(0x1) << PAC_INTFLAGD_I2S_Pos)
#define PAC_INTFLAGD_PCC_Pos 11
#define PAC_INTFLAGD_PCC (_U_(0x1) << PAC_INTFLAGD_PCC_Pos)
#define PAC_INTFLAGD_MASK _U_(0x00000FFF)



typedef union {
  struct {
    uint32_t PAC_:1;
    uint32_t PM_:1;
    uint32_t MCLK_:1;
    uint32_t RSTC_:1;
    uint32_t OSCCTRL_:1;
    uint32_t OSC32KCTRL_:1;
    uint32_t SUPC_:1;
    uint32_t GCLK_:1;
    uint32_t WDT_:1;
    uint32_t RTC_:1;
    uint32_t EIC_:1;
    uint32_t FREQM_:1;
    uint32_t SERCOM0_:1;
    uint32_t SERCOM1_:1;
    uint32_t TC0_:1;
    uint32_t TC1_:1;
    uint32_t :16;
  } bit;
  uint32_t reg;
} PAC_STATUSA_Type;


#define PAC_STATUSA_OFFSET 0x34
#define PAC_STATUSA_RESETVALUE _U_(0x00010000)

#define PAC_STATUSA_PAC_Pos 0
#define PAC_STATUSA_PAC (_U_(0x1) << PAC_STATUSA_PAC_Pos)
#define PAC_STATUSA_PM_Pos 1
#define PAC_STATUSA_PM (_U_(0x1) << PAC_STATUSA_PM_Pos)
#define PAC_STATUSA_MCLK_Pos 2
#define PAC_STATUSA_MCLK (_U_(0x1) << PAC_STATUSA_MCLK_Pos)
#define PAC_STATUSA_RSTC_Pos 3
#define PAC_STATUSA_RSTC (_U_(0x1) << PAC_STATUSA_RSTC_Pos)
#define PAC_STATUSA_OSCCTRL_Pos 4
#define PAC_STATUSA_OSCCTRL (_U_(0x1) << PAC_STATUSA_OSCCTRL_Pos)
#define PAC_STATUSA_OSC32KCTRL_Pos 5
#define PAC_STATUSA_OSC32KCTRL (_U_(0x1) << PAC_STATUSA_OSC32KCTRL_Pos)
#define PAC_STATUSA_SUPC_Pos 6
#define PAC_STATUSA_SUPC (_U_(0x1) << PAC_STATUSA_SUPC_Pos)
#define PAC_STATUSA_GCLK_Pos 7
#define PAC_STATUSA_GCLK (_U_(0x1) << PAC_STATUSA_GCLK_Pos)
#define PAC_STATUSA_WDT_Pos 8
#define PAC_STATUSA_WDT (_U_(0x1) << PAC_STATUSA_WDT_Pos)
#define PAC_STATUSA_RTC_Pos 9
#define PAC_STATUSA_RTC (_U_(0x1) << PAC_STATUSA_RTC_Pos)
#define PAC_STATUSA_EIC_Pos 10
#define PAC_STATUSA_EIC (_U_(0x1) << PAC_STATUSA_EIC_Pos)
#define PAC_STATUSA_FREQM_Pos 11
#define PAC_STATUSA_FREQM (_U_(0x1) << PAC_STATUSA_FREQM_Pos)
#define PAC_STATUSA_SERCOM0_Pos 12
#define PAC_STATUSA_SERCOM0 (_U_(0x1) << PAC_STATUSA_SERCOM0_Pos)
#define PAC_STATUSA_SERCOM1_Pos 13
#define PAC_STATUSA_SERCOM1 (_U_(0x1) << PAC_STATUSA_SERCOM1_Pos)
#define PAC_STATUSA_TC0_Pos 14
#define PAC_STATUSA_TC0 (_U_(0x1) << PAC_STATUSA_TC0_Pos)
#define PAC_STATUSA_TC1_Pos 15
#define PAC_STATUSA_TC1 (_U_(0x1) << PAC_STATUSA_TC1_Pos)
#define PAC_STATUSA_MASK _U_(0x0000FFFF)



typedef union {
  struct {
    uint32_t USB_:1;
    uint32_t DSU_:1;
    uint32_t NVMCTRL_:1;
    uint32_t CMCC_:1;
    uint32_t PORT_:1;
    uint32_t DMAC_:1;
    uint32_t HMATRIX_:1;
    uint32_t EVSYS_:1;
    uint32_t :1;
    uint32_t SERCOM2_:1;
    uint32_t SERCOM3_:1;
    uint32_t TCC0_:1;
    uint32_t TCC1_:1;
    uint32_t TC2_:1;
    uint32_t TC3_:1;
    uint32_t TAL_:1;
    uint32_t RAMECC_:1;
    uint32_t :15;
  } bit;
  uint32_t reg;
} PAC_STATUSB_Type;


#define PAC_STATUSB_OFFSET 0x38
#define PAC_STATUSB_RESETVALUE _U_(0x00000002)

#define PAC_STATUSB_USB_Pos 0
#define PAC_STATUSB_USB (_U_(0x1) << PAC_STATUSB_USB_Pos)
#define PAC_STATUSB_DSU_Pos 1
#define PAC_STATUSB_DSU (_U_(0x1) << PAC_STATUSB_DSU_Pos)
#define PAC_STATUSB_NVMCTRL_Pos 2
#define PAC_STATUSB_NVMCTRL (_U_(0x1) << PAC_STATUSB_NVMCTRL_Pos)
#define PAC_STATUSB_CMCC_Pos 3
#define PAC_STATUSB_CMCC (_U_(0x1) << PAC_STATUSB_CMCC_Pos)
#define PAC_STATUSB_PORT_Pos 4
#define PAC_STATUSB_PORT (_U_(0x1) << PAC_STATUSB_PORT_Pos)
#define PAC_STATUSB_DMAC_Pos 5
#define PAC_STATUSB_DMAC (_U_(0x1) << PAC_STATUSB_DMAC_Pos)
#define PAC_STATUSB_HMATRIX_Pos 6
#define PAC_STATUSB_HMATRIX (_U_(0x1) << PAC_STATUSB_HMATRIX_Pos)
#define PAC_STATUSB_EVSYS_Pos 7
#define PAC_STATUSB_EVSYS (_U_(0x1) << PAC_STATUSB_EVSYS_Pos)
#define PAC_STATUSB_SERCOM2_Pos 9
#define PAC_STATUSB_SERCOM2 (_U_(0x1) << PAC_STATUSB_SERCOM2_Pos)
#define PAC_STATUSB_SERCOM3_Pos 10
#define PAC_STATUSB_SERCOM3 (_U_(0x1) << PAC_STATUSB_SERCOM3_Pos)
#define PAC_STATUSB_TCC0_Pos 11
#define PAC_STATUSB_TCC0 (_U_(0x1) << PAC_STATUSB_TCC0_Pos)
#define PAC_STATUSB_TCC1_Pos 12
#define PAC_STATUSB_TCC1 (_U_(0x1) << PAC_STATUSB_TCC1_Pos)
#define PAC_STATUSB_TC2_Pos 13
#define PAC_STATUSB_TC2 (_U_(0x1) << PAC_STATUSB_TC2_Pos)
#define PAC_STATUSB_TC3_Pos 14
#define PAC_STATUSB_TC3 (_U_(0x1) << PAC_STATUSB_TC3_Pos)
#define PAC_STATUSB_TAL_Pos 15
#define PAC_STATUSB_TAL (_U_(0x1) << PAC_STATUSB_TAL_Pos)
#define PAC_STATUSB_RAMECC_Pos 16
#define PAC_STATUSB_RAMECC (_U_(0x1) << PAC_STATUSB_RAMECC_Pos)
#define PAC_STATUSB_MASK _U_(0x0001FEFF)



typedef union {
  struct {
    uint32_t :3;
    uint32_t TCC2_:1;
    uint32_t TCC3_:1;
    uint32_t TC4_:1;
    uint32_t TC5_:1;
    uint32_t PDEC_:1;
    uint32_t AC_:1;
    uint32_t AES_:1;
    uint32_t TRNG_:1;
    uint32_t ICM_:1;
    uint32_t PUKCC_:1;
    uint32_t QSPI_:1;
    uint32_t CCL_:1;
    uint32_t :17;
  } bit;
  uint32_t reg;
} PAC_STATUSC_Type;


#define PAC_STATUSC_OFFSET 0x3C
#define PAC_STATUSC_RESETVALUE _U_(0x00000000)

#define PAC_STATUSC_TCC2_Pos 3
#define PAC_STATUSC_TCC2 (_U_(0x1) << PAC_STATUSC_TCC2_Pos)
#define PAC_STATUSC_TCC3_Pos 4
#define PAC_STATUSC_TCC3 (_U_(0x1) << PAC_STATUSC_TCC3_Pos)
#define PAC_STATUSC_TC4_Pos 5
#define PAC_STATUSC_TC4 (_U_(0x1) << PAC_STATUSC_TC4_Pos)
#define PAC_STATUSC_TC5_Pos 6
#define PAC_STATUSC_TC5 (_U_(0x1) << PAC_STATUSC_TC5_Pos)
#define PAC_STATUSC_PDEC_Pos 7
#define PAC_STATUSC_PDEC (_U_(0x1) << PAC_STATUSC_PDEC_Pos)
#define PAC_STATUSC_AC_Pos 8
#define PAC_STATUSC_AC (_U_(0x1) << PAC_STATUSC_AC_Pos)
#define PAC_STATUSC_AES_Pos 9
#define PAC_STATUSC_AES (_U_(0x1) << PAC_STATUSC_AES_Pos)
#define PAC_STATUSC_TRNG_Pos 10
#define PAC_STATUSC_TRNG (_U_(0x1) << PAC_STATUSC_TRNG_Pos)
#define PAC_STATUSC_ICM_Pos 11
#define PAC_STATUSC_ICM (_U_(0x1) << PAC_STATUSC_ICM_Pos)
#define PAC_STATUSC_PUKCC_Pos 12
#define PAC_STATUSC_PUKCC (_U_(0x1) << PAC_STATUSC_PUKCC_Pos)
#define PAC_STATUSC_QSPI_Pos 13
#define PAC_STATUSC_QSPI (_U_(0x1) << PAC_STATUSC_QSPI_Pos)
#define PAC_STATUSC_CCL_Pos 14
#define PAC_STATUSC_CCL (_U_(0x1) << PAC_STATUSC_CCL_Pos)
#define PAC_STATUSC_MASK _U_(0x00007FF8)



typedef union {
  struct {
    uint32_t SERCOM4_:1;
    uint32_t SERCOM5_:1;
    uint32_t SERCOM6_:1;
    uint32_t SERCOM7_:1;
    uint32_t TCC4_:1;
    uint32_t TC6_:1;
    uint32_t TC7_:1;
    uint32_t ADC0_:1;
    uint32_t ADC1_:1;
    uint32_t DAC_:1;
    uint32_t I2S_:1;
    uint32_t PCC_:1;
    uint32_t :20;
  } bit;
  uint32_t reg;
} PAC_STATUSD_Type;


#define PAC_STATUSD_OFFSET 0x40
#define PAC_STATUSD_RESETVALUE _U_(0x00000000)

#define PAC_STATUSD_SERCOM4_Pos 0
#define PAC_STATUSD_SERCOM4 (_U_(0x1) << PAC_STATUSD_SERCOM4_Pos)
#define PAC_STATUSD_SERCOM5_Pos 1
#define PAC_STATUSD_SERCOM5 (_U_(0x1) << PAC_STATUSD_SERCOM5_Pos)
#define PAC_STATUSD_SERCOM6_Pos 2
#define PAC_STATUSD_SERCOM6 (_U_(0x1) << PAC_STATUSD_SERCOM6_Pos)
#define PAC_STATUSD_SERCOM7_Pos 3
#define PAC_STATUSD_SERCOM7 (_U_(0x1) << PAC_STATUSD_SERCOM7_Pos)
#define PAC_STATUSD_TCC4_Pos 4
#define PAC_STATUSD_TCC4 (_U_(0x1) << PAC_STATUSD_TCC4_Pos)
#define PAC_STATUSD_TC6_Pos 5
#define PAC_STATUSD_TC6 (_U_(0x1) << PAC_STATUSD_TC6_Pos)
#define PAC_STATUSD_TC7_Pos 6
#define PAC_STATUSD_TC7 (_U_(0x1) << PAC_STATUSD_TC7_Pos)
#define PAC_STATUSD_ADC0_Pos 7
#define PAC_STATUSD_ADC0 (_U_(0x1) << PAC_STATUSD_ADC0_Pos)
#define PAC_STATUSD_ADC1_Pos 8
#define PAC_STATUSD_ADC1 (_U_(0x1) << PAC_STATUSD_ADC1_Pos)
#define PAC_STATUSD_DAC_Pos 9
#define PAC_STATUSD_DAC (_U_(0x1) << PAC_STATUSD_DAC_Pos)
#define PAC_STATUSD_I2S_Pos 10
#define PAC_STATUSD_I2S (_U_(0x1) << PAC_STATUSD_I2S_Pos)
#define PAC_STATUSD_PCC_Pos 11
#define PAC_STATUSD_PCC (_U_(0x1) << PAC_STATUSD_PCC_Pos)
#define PAC_STATUSD_MASK _U_(0x00000FFF)



typedef struct {
  volatile PAC_WRCTRL_Type WRCTRL;
  volatile PAC_EVCTRL_Type EVCTRL;
       RoReg8 Reserved1[0x3];
  volatile PAC_INTENCLR_Type INTENCLR;
  volatile PAC_INTENSET_Type INTENSET;
       RoReg8 Reserved2[0x6];
  volatile PAC_INTFLAGAHB_Type INTFLAGAHB;
  volatile PAC_INTFLAGA_Type INTFLAGA;
  volatile PAC_INTFLAGB_Type INTFLAGB;
  volatile PAC_INTFLAGC_Type INTFLAGC;
  volatile PAC_INTFLAGD_Type INTFLAGD;
       RoReg8 Reserved3[0x10];
  volatile const PAC_STATUSA_Type STATUSA;
  volatile const PAC_STATUSB_Type STATUSB;
  volatile const PAC_STATUSC_Type STATUSC;
  volatile const PAC_STATUSD_Type STATUSD;
} Pac;
# 601 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/pcc.h" 1
# 31 "asf4/samd51/include/component/pcc.h"
#define _SAMD51_PCC_COMPONENT_ 







#define PCC_U2017 
#define REV_PCC 0x110



typedef union {
  struct {
    uint32_t PCEN:1;
    uint32_t :3;
    uint32_t DSIZE:2;
    uint32_t :2;
    uint32_t SCALE:1;
    uint32_t ALWYS:1;
    uint32_t HALFS:1;
    uint32_t FRSTS:1;
    uint32_t :4;
    uint32_t ISIZE:3;
    uint32_t :11;
    uint32_t CID:2;
  } bit;
  uint32_t reg;
} PCC_MR_Type;


#define PCC_MR_OFFSET 0x00
#define PCC_MR_RESETVALUE _U_(0x00000000)

#define PCC_MR_PCEN_Pos 0
#define PCC_MR_PCEN (_U_(0x1) << PCC_MR_PCEN_Pos)
#define PCC_MR_DSIZE_Pos 4
#define PCC_MR_DSIZE_Msk (_U_(0x3) << PCC_MR_DSIZE_Pos)
#define PCC_MR_DSIZE(value) (PCC_MR_DSIZE_Msk & ((value) << PCC_MR_DSIZE_Pos))
#define PCC_MR_SCALE_Pos 8
#define PCC_MR_SCALE (_U_(0x1) << PCC_MR_SCALE_Pos)
#define PCC_MR_ALWYS_Pos 9
#define PCC_MR_ALWYS (_U_(0x1) << PCC_MR_ALWYS_Pos)
#define PCC_MR_HALFS_Pos 10
#define PCC_MR_HALFS (_U_(0x1) << PCC_MR_HALFS_Pos)
#define PCC_MR_FRSTS_Pos 11
#define PCC_MR_FRSTS (_U_(0x1) << PCC_MR_FRSTS_Pos)
#define PCC_MR_ISIZE_Pos 16
#define PCC_MR_ISIZE_Msk (_U_(0x7) << PCC_MR_ISIZE_Pos)
#define PCC_MR_ISIZE(value) (PCC_MR_ISIZE_Msk & ((value) << PCC_MR_ISIZE_Pos))
#define PCC_MR_CID_Pos 30
#define PCC_MR_CID_Msk (_U_(0x3) << PCC_MR_CID_Pos)
#define PCC_MR_CID(value) (PCC_MR_CID_Msk & ((value) << PCC_MR_CID_Pos))
#define PCC_MR_MASK _U_(0xC0070F31)



typedef union {
  struct {
    uint32_t DRDY:1;
    uint32_t OVRE:1;
    uint32_t :30;
  } bit;
  uint32_t reg;
} PCC_IER_Type;


#define PCC_IER_OFFSET 0x04
#define PCC_IER_RESETVALUE _U_(0x00000000)

#define PCC_IER_DRDY_Pos 0
#define PCC_IER_DRDY (_U_(0x1) << PCC_IER_DRDY_Pos)
#define PCC_IER_OVRE_Pos 1
#define PCC_IER_OVRE (_U_(0x1) << PCC_IER_OVRE_Pos)
#define PCC_IER_MASK _U_(0x00000003)



typedef union {
  struct {
    uint32_t DRDY:1;
    uint32_t OVRE:1;
    uint32_t :30;
  } bit;
  uint32_t reg;
} PCC_IDR_Type;


#define PCC_IDR_OFFSET 0x08
#define PCC_IDR_RESETVALUE _U_(0x00000000)

#define PCC_IDR_DRDY_Pos 0
#define PCC_IDR_DRDY (_U_(0x1) << PCC_IDR_DRDY_Pos)
#define PCC_IDR_OVRE_Pos 1
#define PCC_IDR_OVRE (_U_(0x1) << PCC_IDR_OVRE_Pos)
#define PCC_IDR_MASK _U_(0x00000003)



typedef union {
  struct {
    uint32_t DRDY:1;
    uint32_t OVRE:1;
    uint32_t :30;
  } bit;
  uint32_t reg;
} PCC_IMR_Type;


#define PCC_IMR_OFFSET 0x0C
#define PCC_IMR_RESETVALUE _U_(0x00000000)

#define PCC_IMR_DRDY_Pos 0
#define PCC_IMR_DRDY (_U_(0x1) << PCC_IMR_DRDY_Pos)
#define PCC_IMR_OVRE_Pos 1
#define PCC_IMR_OVRE (_U_(0x1) << PCC_IMR_OVRE_Pos)
#define PCC_IMR_MASK _U_(0x00000003)



typedef union {
  struct {
    uint32_t DRDY:1;
    uint32_t OVRE:1;
    uint32_t :30;
  } bit;
  uint32_t reg;
} PCC_ISR_Type;


#define PCC_ISR_OFFSET 0x10
#define PCC_ISR_RESETVALUE _U_(0x00000000)

#define PCC_ISR_DRDY_Pos 0
#define PCC_ISR_DRDY (_U_(0x1) << PCC_ISR_DRDY_Pos)
#define PCC_ISR_OVRE_Pos 1
#define PCC_ISR_OVRE (_U_(0x1) << PCC_ISR_OVRE_Pos)
#define PCC_ISR_MASK _U_(0x00000003)



typedef union {
  struct {
    uint32_t RDATA:32;
  } bit;
  uint32_t reg;
} PCC_RHR_Type;


#define PCC_RHR_OFFSET 0x14
#define PCC_RHR_RESETVALUE _U_(0x00000000)

#define PCC_RHR_RDATA_Pos 0
#define PCC_RHR_RDATA_Msk (_U_(0xFFFFFFFF) << PCC_RHR_RDATA_Pos)
#define PCC_RHR_RDATA(value) (PCC_RHR_RDATA_Msk & ((value) << PCC_RHR_RDATA_Pos))
#define PCC_RHR_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t WPEN:1;
    uint32_t :7;
    uint32_t WPKEY:24;
  } bit;
  uint32_t reg;
} PCC_WPMR_Type;


#define PCC_WPMR_OFFSET 0xE0
#define PCC_WPMR_RESETVALUE _U_(0x00000000)

#define PCC_WPMR_WPEN_Pos 0
#define PCC_WPMR_WPEN (_U_(0x1) << PCC_WPMR_WPEN_Pos)
#define PCC_WPMR_WPKEY_Pos 8
#define PCC_WPMR_WPKEY_Msk (_U_(0xFFFFFF) << PCC_WPMR_WPKEY_Pos)
#define PCC_WPMR_WPKEY(value) (PCC_WPMR_WPKEY_Msk & ((value) << PCC_WPMR_WPKEY_Pos))
#define PCC_WPMR_MASK _U_(0xFFFFFF01)



typedef union {
  struct {
    uint32_t WPVS:1;
    uint32_t :7;
    uint32_t WPVSRC:16;
    uint32_t :8;
  } bit;
  uint32_t reg;
} PCC_WPSR_Type;


#define PCC_WPSR_OFFSET 0xE4
#define PCC_WPSR_RESETVALUE _U_(0x00000000)

#define PCC_WPSR_WPVS_Pos 0
#define PCC_WPSR_WPVS (_U_(0x1) << PCC_WPSR_WPVS_Pos)
#define PCC_WPSR_WPVSRC_Pos 8
#define PCC_WPSR_WPVSRC_Msk (_U_(0xFFFF) << PCC_WPSR_WPVSRC_Pos)
#define PCC_WPSR_WPVSRC(value) (PCC_WPSR_WPVSRC_Msk & ((value) << PCC_WPSR_WPVSRC_Pos))
#define PCC_WPSR_MASK _U_(0x00FFFF01)



typedef struct {
  volatile PCC_MR_Type MR;
  volatile PCC_IER_Type IER;
  volatile PCC_IDR_Type IDR;
  volatile const PCC_IMR_Type IMR;
  volatile const PCC_ISR_Type ISR;
  volatile const PCC_RHR_Type RHR;
       RoReg8 Reserved1[0xC8];
  volatile PCC_WPMR_Type WPMR;
  volatile const PCC_WPSR_Type WPSR;
} Pcc;
# 602 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/pdec.h" 1
# 31 "asf4/samd51/include/component/pdec.h"
#define _SAMD51_PDEC_COMPONENT_ 







#define PDEC_U2263 
#define REV_PDEC 0x100



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t MODE:2;
    uint32_t :2;
    uint32_t RUNSTDBY:1;
    uint32_t :1;
    uint32_t CONF:3;
    uint32_t ALOCK:1;
    uint32_t :2;
    uint32_t SWAP:1;
    uint32_t PEREN:1;
    uint32_t PINEN0:1;
    uint32_t PINEN1:1;
    uint32_t PINEN2:1;
    uint32_t :1;
    uint32_t PINVEN0:1;
    uint32_t PINVEN1:1;
    uint32_t PINVEN2:1;
    uint32_t :1;
    uint32_t ANGULAR:3;
    uint32_t :1;
    uint32_t MAXCMP:4;
  } bit;
  struct {
    uint32_t :16;
    uint32_t PINEN:3;
    uint32_t :1;
    uint32_t PINVEN:3;
    uint32_t :9;
  } vec;
  uint32_t reg;
} PDEC_CTRLA_Type;


#define PDEC_CTRLA_OFFSET 0x00
#define PDEC_CTRLA_RESETVALUE _U_(0x00000000)

#define PDEC_CTRLA_SWRST_Pos 0
#define PDEC_CTRLA_SWRST (_U_(0x1) << PDEC_CTRLA_SWRST_Pos)
#define PDEC_CTRLA_ENABLE_Pos 1
#define PDEC_CTRLA_ENABLE (_U_(0x1) << PDEC_CTRLA_ENABLE_Pos)
#define PDEC_CTRLA_MODE_Pos 2
#define PDEC_CTRLA_MODE_Msk (_U_(0x3) << PDEC_CTRLA_MODE_Pos)
#define PDEC_CTRLA_MODE(value) (PDEC_CTRLA_MODE_Msk & ((value) << PDEC_CTRLA_MODE_Pos))
#define PDEC_CTRLA_MODE_QDEC_Val _U_(0x0)
#define PDEC_CTRLA_MODE_HALL_Val _U_(0x1)
#define PDEC_CTRLA_MODE_COUNTER_Val _U_(0x2)
#define PDEC_CTRLA_MODE_QDEC (PDEC_CTRLA_MODE_QDEC_Val << PDEC_CTRLA_MODE_Pos)
#define PDEC_CTRLA_MODE_HALL (PDEC_CTRLA_MODE_HALL_Val << PDEC_CTRLA_MODE_Pos)
#define PDEC_CTRLA_MODE_COUNTER (PDEC_CTRLA_MODE_COUNTER_Val << PDEC_CTRLA_MODE_Pos)
#define PDEC_CTRLA_RUNSTDBY_Pos 6
#define PDEC_CTRLA_RUNSTDBY (_U_(0x1) << PDEC_CTRLA_RUNSTDBY_Pos)
#define PDEC_CTRLA_CONF_Pos 8
#define PDEC_CTRLA_CONF_Msk (_U_(0x7) << PDEC_CTRLA_CONF_Pos)
#define PDEC_CTRLA_CONF(value) (PDEC_CTRLA_CONF_Msk & ((value) << PDEC_CTRLA_CONF_Pos))
#define PDEC_CTRLA_CONF_X4_Val _U_(0x0)
#define PDEC_CTRLA_CONF_X4S_Val _U_(0x1)
#define PDEC_CTRLA_CONF_X2_Val _U_(0x2)
#define PDEC_CTRLA_CONF_X2S_Val _U_(0x3)
#define PDEC_CTRLA_CONF_AUTOC_Val _U_(0x4)
#define PDEC_CTRLA_CONF_X4 (PDEC_CTRLA_CONF_X4_Val << PDEC_CTRLA_CONF_Pos)
#define PDEC_CTRLA_CONF_X4S (PDEC_CTRLA_CONF_X4S_Val << PDEC_CTRLA_CONF_Pos)
#define PDEC_CTRLA_CONF_X2 (PDEC_CTRLA_CONF_X2_Val << PDEC_CTRLA_CONF_Pos)
#define PDEC_CTRLA_CONF_X2S (PDEC_CTRLA_CONF_X2S_Val << PDEC_CTRLA_CONF_Pos)
#define PDEC_CTRLA_CONF_AUTOC (PDEC_CTRLA_CONF_AUTOC_Val << PDEC_CTRLA_CONF_Pos)
#define PDEC_CTRLA_ALOCK_Pos 11
#define PDEC_CTRLA_ALOCK (_U_(0x1) << PDEC_CTRLA_ALOCK_Pos)
#define PDEC_CTRLA_SWAP_Pos 14
#define PDEC_CTRLA_SWAP (_U_(0x1) << PDEC_CTRLA_SWAP_Pos)
#define PDEC_CTRLA_PEREN_Pos 15
#define PDEC_CTRLA_PEREN (_U_(0x1) << PDEC_CTRLA_PEREN_Pos)
#define PDEC_CTRLA_PINEN0_Pos 16
#define PDEC_CTRLA_PINEN0 (_U_(1) << PDEC_CTRLA_PINEN0_Pos)
#define PDEC_CTRLA_PINEN1_Pos 17
#define PDEC_CTRLA_PINEN1 (_U_(1) << PDEC_CTRLA_PINEN1_Pos)
#define PDEC_CTRLA_PINEN2_Pos 18
#define PDEC_CTRLA_PINEN2 (_U_(1) << PDEC_CTRLA_PINEN2_Pos)
#define PDEC_CTRLA_PINEN_Pos 16
#define PDEC_CTRLA_PINEN_Msk (_U_(0x7) << PDEC_CTRLA_PINEN_Pos)
#define PDEC_CTRLA_PINEN(value) (PDEC_CTRLA_PINEN_Msk & ((value) << PDEC_CTRLA_PINEN_Pos))
#define PDEC_CTRLA_PINVEN0_Pos 20
#define PDEC_CTRLA_PINVEN0 (_U_(1) << PDEC_CTRLA_PINVEN0_Pos)
#define PDEC_CTRLA_PINVEN1_Pos 21
#define PDEC_CTRLA_PINVEN1 (_U_(1) << PDEC_CTRLA_PINVEN1_Pos)
#define PDEC_CTRLA_PINVEN2_Pos 22
#define PDEC_CTRLA_PINVEN2 (_U_(1) << PDEC_CTRLA_PINVEN2_Pos)
#define PDEC_CTRLA_PINVEN_Pos 20
#define PDEC_CTRLA_PINVEN_Msk (_U_(0x7) << PDEC_CTRLA_PINVEN_Pos)
#define PDEC_CTRLA_PINVEN(value) (PDEC_CTRLA_PINVEN_Msk & ((value) << PDEC_CTRLA_PINVEN_Pos))
#define PDEC_CTRLA_ANGULAR_Pos 24
#define PDEC_CTRLA_ANGULAR_Msk (_U_(0x7) << PDEC_CTRLA_ANGULAR_Pos)
#define PDEC_CTRLA_ANGULAR(value) (PDEC_CTRLA_ANGULAR_Msk & ((value) << PDEC_CTRLA_ANGULAR_Pos))
#define PDEC_CTRLA_MAXCMP_Pos 28
#define PDEC_CTRLA_MAXCMP_Msk (_U_(0xF) << PDEC_CTRLA_MAXCMP_Pos)
#define PDEC_CTRLA_MAXCMP(value) (PDEC_CTRLA_MAXCMP_Msk & ((value) << PDEC_CTRLA_MAXCMP_Pos))
#define PDEC_CTRLA_MASK _U_(0xF777CF4F)



typedef union {
  struct {
    uint8_t :1;
    uint8_t LUPD:1;
    uint8_t :3;
    uint8_t CMD:3;
  } bit;
  uint8_t reg;
} PDEC_CTRLBCLR_Type;


#define PDEC_CTRLBCLR_OFFSET 0x04
#define PDEC_CTRLBCLR_RESETVALUE _U_(0x00)

#define PDEC_CTRLBCLR_LUPD_Pos 1
#define PDEC_CTRLBCLR_LUPD (_U_(0x1) << PDEC_CTRLBCLR_LUPD_Pos)
#define PDEC_CTRLBCLR_CMD_Pos 5
#define PDEC_CTRLBCLR_CMD_Msk (_U_(0x7) << PDEC_CTRLBCLR_CMD_Pos)
#define PDEC_CTRLBCLR_CMD(value) (PDEC_CTRLBCLR_CMD_Msk & ((value) << PDEC_CTRLBCLR_CMD_Pos))
#define PDEC_CTRLBCLR_CMD_NONE_Val _U_(0x0)
#define PDEC_CTRLBCLR_CMD_RETRIGGER_Val _U_(0x1)
#define PDEC_CTRLBCLR_CMD_UPDATE_Val _U_(0x2)
#define PDEC_CTRLBCLR_CMD_READSYNC_Val _U_(0x3)
#define PDEC_CTRLBCLR_CMD_START_Val _U_(0x4)
#define PDEC_CTRLBCLR_CMD_STOP_Val _U_(0x5)
#define PDEC_CTRLBCLR_CMD_NONE (PDEC_CTRLBCLR_CMD_NONE_Val << PDEC_CTRLBCLR_CMD_Pos)
#define PDEC_CTRLBCLR_CMD_RETRIGGER (PDEC_CTRLBCLR_CMD_RETRIGGER_Val << PDEC_CTRLBCLR_CMD_Pos)
#define PDEC_CTRLBCLR_CMD_UPDATE (PDEC_CTRLBCLR_CMD_UPDATE_Val << PDEC_CTRLBCLR_CMD_Pos)
#define PDEC_CTRLBCLR_CMD_READSYNC (PDEC_CTRLBCLR_CMD_READSYNC_Val << PDEC_CTRLBCLR_CMD_Pos)
#define PDEC_CTRLBCLR_CMD_START (PDEC_CTRLBCLR_CMD_START_Val << PDEC_CTRLBCLR_CMD_Pos)
#define PDEC_CTRLBCLR_CMD_STOP (PDEC_CTRLBCLR_CMD_STOP_Val << PDEC_CTRLBCLR_CMD_Pos)
#define PDEC_CTRLBCLR_MASK _U_(0xE2)



typedef union {
  struct {
    uint8_t :1;
    uint8_t LUPD:1;
    uint8_t :3;
    uint8_t CMD:3;
  } bit;
  uint8_t reg;
} PDEC_CTRLBSET_Type;


#define PDEC_CTRLBSET_OFFSET 0x05
#define PDEC_CTRLBSET_RESETVALUE _U_(0x00)

#define PDEC_CTRLBSET_LUPD_Pos 1
#define PDEC_CTRLBSET_LUPD (_U_(0x1) << PDEC_CTRLBSET_LUPD_Pos)
#define PDEC_CTRLBSET_CMD_Pos 5
#define PDEC_CTRLBSET_CMD_Msk (_U_(0x7) << PDEC_CTRLBSET_CMD_Pos)
#define PDEC_CTRLBSET_CMD(value) (PDEC_CTRLBSET_CMD_Msk & ((value) << PDEC_CTRLBSET_CMD_Pos))
#define PDEC_CTRLBSET_CMD_NONE_Val _U_(0x0)
#define PDEC_CTRLBSET_CMD_RETRIGGER_Val _U_(0x1)
#define PDEC_CTRLBSET_CMD_UPDATE_Val _U_(0x2)
#define PDEC_CTRLBSET_CMD_READSYNC_Val _U_(0x3)
#define PDEC_CTRLBSET_CMD_START_Val _U_(0x4)
#define PDEC_CTRLBSET_CMD_STOP_Val _U_(0x5)
#define PDEC_CTRLBSET_CMD_NONE (PDEC_CTRLBSET_CMD_NONE_Val << PDEC_CTRLBSET_CMD_Pos)
#define PDEC_CTRLBSET_CMD_RETRIGGER (PDEC_CTRLBSET_CMD_RETRIGGER_Val << PDEC_CTRLBSET_CMD_Pos)
#define PDEC_CTRLBSET_CMD_UPDATE (PDEC_CTRLBSET_CMD_UPDATE_Val << PDEC_CTRLBSET_CMD_Pos)
#define PDEC_CTRLBSET_CMD_READSYNC (PDEC_CTRLBSET_CMD_READSYNC_Val << PDEC_CTRLBSET_CMD_Pos)
#define PDEC_CTRLBSET_CMD_START (PDEC_CTRLBSET_CMD_START_Val << PDEC_CTRLBSET_CMD_Pos)
#define PDEC_CTRLBSET_CMD_STOP (PDEC_CTRLBSET_CMD_STOP_Val << PDEC_CTRLBSET_CMD_Pos)
#define PDEC_CTRLBSET_MASK _U_(0xE2)



typedef union {
  struct {
    uint16_t EVACT:2;
    uint16_t EVINV:3;
    uint16_t EVEI:3;
    uint16_t OVFEO:1;
    uint16_t ERREO:1;
    uint16_t DIREO:1;
    uint16_t VLCEO:1;
    uint16_t MCEO0:1;
    uint16_t MCEO1:1;
    uint16_t :2;
  } bit;
  struct {
    uint16_t :12;
    uint16_t MCEO:2;
    uint16_t :2;
  } vec;
  uint16_t reg;
} PDEC_EVCTRL_Type;


#define PDEC_EVCTRL_OFFSET 0x06
#define PDEC_EVCTRL_RESETVALUE _U_(0x0000)

#define PDEC_EVCTRL_EVACT_Pos 0
#define PDEC_EVCTRL_EVACT_Msk (_U_(0x3) << PDEC_EVCTRL_EVACT_Pos)
#define PDEC_EVCTRL_EVACT(value) (PDEC_EVCTRL_EVACT_Msk & ((value) << PDEC_EVCTRL_EVACT_Pos))
#define PDEC_EVCTRL_EVACT_OFF_Val _U_(0x0)
#define PDEC_EVCTRL_EVACT_RETRIGGER_Val _U_(0x1)
#define PDEC_EVCTRL_EVACT_COUNT_Val _U_(0x2)
#define PDEC_EVCTRL_EVACT_OFF (PDEC_EVCTRL_EVACT_OFF_Val << PDEC_EVCTRL_EVACT_Pos)
#define PDEC_EVCTRL_EVACT_RETRIGGER (PDEC_EVCTRL_EVACT_RETRIGGER_Val << PDEC_EVCTRL_EVACT_Pos)
#define PDEC_EVCTRL_EVACT_COUNT (PDEC_EVCTRL_EVACT_COUNT_Val << PDEC_EVCTRL_EVACT_Pos)
#define PDEC_EVCTRL_EVINV_Pos 2
#define PDEC_EVCTRL_EVINV_Msk (_U_(0x7) << PDEC_EVCTRL_EVINV_Pos)
#define PDEC_EVCTRL_EVINV(value) (PDEC_EVCTRL_EVINV_Msk & ((value) << PDEC_EVCTRL_EVINV_Pos))
#define PDEC_EVCTRL_EVEI_Pos 5
#define PDEC_EVCTRL_EVEI_Msk (_U_(0x7) << PDEC_EVCTRL_EVEI_Pos)
#define PDEC_EVCTRL_EVEI(value) (PDEC_EVCTRL_EVEI_Msk & ((value) << PDEC_EVCTRL_EVEI_Pos))
#define PDEC_EVCTRL_OVFEO_Pos 8
#define PDEC_EVCTRL_OVFEO (_U_(0x1) << PDEC_EVCTRL_OVFEO_Pos)
#define PDEC_EVCTRL_ERREO_Pos 9
#define PDEC_EVCTRL_ERREO (_U_(0x1) << PDEC_EVCTRL_ERREO_Pos)
#define PDEC_EVCTRL_DIREO_Pos 10
#define PDEC_EVCTRL_DIREO (_U_(0x1) << PDEC_EVCTRL_DIREO_Pos)
#define PDEC_EVCTRL_VLCEO_Pos 11
#define PDEC_EVCTRL_VLCEO (_U_(0x1) << PDEC_EVCTRL_VLCEO_Pos)
#define PDEC_EVCTRL_MCEO0_Pos 12
#define PDEC_EVCTRL_MCEO0 (_U_(1) << PDEC_EVCTRL_MCEO0_Pos)
#define PDEC_EVCTRL_MCEO1_Pos 13
#define PDEC_EVCTRL_MCEO1 (_U_(1) << PDEC_EVCTRL_MCEO1_Pos)
#define PDEC_EVCTRL_MCEO_Pos 12
#define PDEC_EVCTRL_MCEO_Msk (_U_(0x3) << PDEC_EVCTRL_MCEO_Pos)
#define PDEC_EVCTRL_MCEO(value) (PDEC_EVCTRL_MCEO_Msk & ((value) << PDEC_EVCTRL_MCEO_Pos))
#define PDEC_EVCTRL_MASK _U_(0x3FFF)



typedef union {
  struct {
    uint8_t OVF:1;
    uint8_t ERR:1;
    uint8_t DIR:1;
    uint8_t VLC:1;
    uint8_t MC0:1;
    uint8_t MC1:1;
    uint8_t :2;
  } bit;
  struct {
    uint8_t :4;
    uint8_t MC:2;
    uint8_t :2;
  } vec;
  uint8_t reg;
} PDEC_INTENCLR_Type;


#define PDEC_INTENCLR_OFFSET 0x08
#define PDEC_INTENCLR_RESETVALUE _U_(0x00)

#define PDEC_INTENCLR_OVF_Pos 0
#define PDEC_INTENCLR_OVF (_U_(0x1) << PDEC_INTENCLR_OVF_Pos)
#define PDEC_INTENCLR_ERR_Pos 1
#define PDEC_INTENCLR_ERR (_U_(0x1) << PDEC_INTENCLR_ERR_Pos)
#define PDEC_INTENCLR_DIR_Pos 2
#define PDEC_INTENCLR_DIR (_U_(0x1) << PDEC_INTENCLR_DIR_Pos)
#define PDEC_INTENCLR_VLC_Pos 3
#define PDEC_INTENCLR_VLC (_U_(0x1) << PDEC_INTENCLR_VLC_Pos)
#define PDEC_INTENCLR_MC0_Pos 4
#define PDEC_INTENCLR_MC0 (_U_(1) << PDEC_INTENCLR_MC0_Pos)
#define PDEC_INTENCLR_MC1_Pos 5
#define PDEC_INTENCLR_MC1 (_U_(1) << PDEC_INTENCLR_MC1_Pos)
#define PDEC_INTENCLR_MC_Pos 4
#define PDEC_INTENCLR_MC_Msk (_U_(0x3) << PDEC_INTENCLR_MC_Pos)
#define PDEC_INTENCLR_MC(value) (PDEC_INTENCLR_MC_Msk & ((value) << PDEC_INTENCLR_MC_Pos))
#define PDEC_INTENCLR_MASK _U_(0x3F)



typedef union {
  struct {
    uint8_t OVF:1;
    uint8_t ERR:1;
    uint8_t DIR:1;
    uint8_t VLC:1;
    uint8_t MC0:1;
    uint8_t MC1:1;
    uint8_t :2;
  } bit;
  struct {
    uint8_t :4;
    uint8_t MC:2;
    uint8_t :2;
  } vec;
  uint8_t reg;
} PDEC_INTENSET_Type;


#define PDEC_INTENSET_OFFSET 0x09
#define PDEC_INTENSET_RESETVALUE _U_(0x00)

#define PDEC_INTENSET_OVF_Pos 0
#define PDEC_INTENSET_OVF (_U_(0x1) << PDEC_INTENSET_OVF_Pos)
#define PDEC_INTENSET_ERR_Pos 1
#define PDEC_INTENSET_ERR (_U_(0x1) << PDEC_INTENSET_ERR_Pos)
#define PDEC_INTENSET_DIR_Pos 2
#define PDEC_INTENSET_DIR (_U_(0x1) << PDEC_INTENSET_DIR_Pos)
#define PDEC_INTENSET_VLC_Pos 3
#define PDEC_INTENSET_VLC (_U_(0x1) << PDEC_INTENSET_VLC_Pos)
#define PDEC_INTENSET_MC0_Pos 4
#define PDEC_INTENSET_MC0 (_U_(1) << PDEC_INTENSET_MC0_Pos)
#define PDEC_INTENSET_MC1_Pos 5
#define PDEC_INTENSET_MC1 (_U_(1) << PDEC_INTENSET_MC1_Pos)
#define PDEC_INTENSET_MC_Pos 4
#define PDEC_INTENSET_MC_Msk (_U_(0x3) << PDEC_INTENSET_MC_Pos)
#define PDEC_INTENSET_MC(value) (PDEC_INTENSET_MC_Msk & ((value) << PDEC_INTENSET_MC_Pos))
#define PDEC_INTENSET_MASK _U_(0x3F)



typedef union {
  struct {
    volatile const uint8_t OVF:1;
    volatile const uint8_t ERR:1;
    volatile const uint8_t DIR:1;
    volatile const uint8_t VLC:1;
    volatile const uint8_t MC0:1;
    volatile const uint8_t MC1:1;
    volatile const uint8_t :2;
  } bit;
  struct {
    volatile const uint8_t :4;
    volatile const uint8_t MC:2;
    volatile const uint8_t :2;
  } vec;
  uint8_t reg;
} PDEC_INTFLAG_Type;


#define PDEC_INTFLAG_OFFSET 0x0A
#define PDEC_INTFLAG_RESETVALUE _U_(0x00)

#define PDEC_INTFLAG_OVF_Pos 0
#define PDEC_INTFLAG_OVF (_U_(0x1) << PDEC_INTFLAG_OVF_Pos)
#define PDEC_INTFLAG_ERR_Pos 1
#define PDEC_INTFLAG_ERR (_U_(0x1) << PDEC_INTFLAG_ERR_Pos)
#define PDEC_INTFLAG_DIR_Pos 2
#define PDEC_INTFLAG_DIR (_U_(0x1) << PDEC_INTFLAG_DIR_Pos)
#define PDEC_INTFLAG_VLC_Pos 3
#define PDEC_INTFLAG_VLC (_U_(0x1) << PDEC_INTFLAG_VLC_Pos)
#define PDEC_INTFLAG_MC0_Pos 4
#define PDEC_INTFLAG_MC0 (_U_(1) << PDEC_INTFLAG_MC0_Pos)
#define PDEC_INTFLAG_MC1_Pos 5
#define PDEC_INTFLAG_MC1 (_U_(1) << PDEC_INTFLAG_MC1_Pos)
#define PDEC_INTFLAG_MC_Pos 4
#define PDEC_INTFLAG_MC_Msk (_U_(0x3) << PDEC_INTFLAG_MC_Pos)
#define PDEC_INTFLAG_MC(value) (PDEC_INTFLAG_MC_Msk & ((value) << PDEC_INTFLAG_MC_Pos))
#define PDEC_INTFLAG_MASK _U_(0x3F)



typedef union {
  struct {
    uint16_t QERR:1;
    uint16_t IDXERR:1;
    uint16_t MPERR:1;
    uint16_t :1;
    uint16_t WINERR:1;
    uint16_t HERR:1;
    uint16_t STOP:1;
    uint16_t DIR:1;
    uint16_t PRESCBUFV:1;
    uint16_t FILTERBUFV:1;
    uint16_t :2;
    uint16_t CCBUFV0:1;
    uint16_t CCBUFV1:1;
    uint16_t :2;
  } bit;
  struct {
    uint16_t :12;
    uint16_t CCBUFV:2;
    uint16_t :2;
  } vec;
  uint16_t reg;
} PDEC_STATUS_Type;


#define PDEC_STATUS_OFFSET 0x0C
#define PDEC_STATUS_RESETVALUE _U_(0x0040)

#define PDEC_STATUS_QERR_Pos 0
#define PDEC_STATUS_QERR (_U_(0x1) << PDEC_STATUS_QERR_Pos)
#define PDEC_STATUS_IDXERR_Pos 1
#define PDEC_STATUS_IDXERR (_U_(0x1) << PDEC_STATUS_IDXERR_Pos)
#define PDEC_STATUS_MPERR_Pos 2
#define PDEC_STATUS_MPERR (_U_(0x1) << PDEC_STATUS_MPERR_Pos)
#define PDEC_STATUS_WINERR_Pos 4
#define PDEC_STATUS_WINERR (_U_(0x1) << PDEC_STATUS_WINERR_Pos)
#define PDEC_STATUS_HERR_Pos 5
#define PDEC_STATUS_HERR (_U_(0x1) << PDEC_STATUS_HERR_Pos)
#define PDEC_STATUS_STOP_Pos 6
#define PDEC_STATUS_STOP (_U_(0x1) << PDEC_STATUS_STOP_Pos)
#define PDEC_STATUS_DIR_Pos 7
#define PDEC_STATUS_DIR (_U_(0x1) << PDEC_STATUS_DIR_Pos)
#define PDEC_STATUS_PRESCBUFV_Pos 8
#define PDEC_STATUS_PRESCBUFV (_U_(0x1) << PDEC_STATUS_PRESCBUFV_Pos)
#define PDEC_STATUS_FILTERBUFV_Pos 9
#define PDEC_STATUS_FILTERBUFV (_U_(0x1) << PDEC_STATUS_FILTERBUFV_Pos)
#define PDEC_STATUS_CCBUFV0_Pos 12
#define PDEC_STATUS_CCBUFV0 (_U_(1) << PDEC_STATUS_CCBUFV0_Pos)
#define PDEC_STATUS_CCBUFV1_Pos 13
#define PDEC_STATUS_CCBUFV1 (_U_(1) << PDEC_STATUS_CCBUFV1_Pos)
#define PDEC_STATUS_CCBUFV_Pos 12
#define PDEC_STATUS_CCBUFV_Msk (_U_(0x3) << PDEC_STATUS_CCBUFV_Pos)
#define PDEC_STATUS_CCBUFV(value) (PDEC_STATUS_CCBUFV_Msk & ((value) << PDEC_STATUS_CCBUFV_Pos))
#define PDEC_STATUS_MASK _U_(0x33F7)



typedef union {
  struct {
    uint8_t DBGRUN:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} PDEC_DBGCTRL_Type;


#define PDEC_DBGCTRL_OFFSET 0x0F
#define PDEC_DBGCTRL_RESETVALUE _U_(0x00)

#define PDEC_DBGCTRL_DBGRUN_Pos 0
#define PDEC_DBGCTRL_DBGRUN (_U_(0x1) << PDEC_DBGCTRL_DBGRUN_Pos)
#define PDEC_DBGCTRL_MASK _U_(0x01)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t CTRLB:1;
    uint32_t STATUS:1;
    uint32_t PRESC:1;
    uint32_t FILTER:1;
    uint32_t COUNT:1;
    uint32_t CC0:1;
    uint32_t CC1:1;
    uint32_t :23;
  } bit;
  struct {
    uint32_t :7;
    uint32_t CC:2;
    uint32_t :23;
  } vec;
  uint32_t reg;
} PDEC_SYNCBUSY_Type;


#define PDEC_SYNCBUSY_OFFSET 0x10
#define PDEC_SYNCBUSY_RESETVALUE _U_(0x00000000)

#define PDEC_SYNCBUSY_SWRST_Pos 0
#define PDEC_SYNCBUSY_SWRST (_U_(0x1) << PDEC_SYNCBUSY_SWRST_Pos)
#define PDEC_SYNCBUSY_ENABLE_Pos 1
#define PDEC_SYNCBUSY_ENABLE (_U_(0x1) << PDEC_SYNCBUSY_ENABLE_Pos)
#define PDEC_SYNCBUSY_CTRLB_Pos 2
#define PDEC_SYNCBUSY_CTRLB (_U_(0x1) << PDEC_SYNCBUSY_CTRLB_Pos)
#define PDEC_SYNCBUSY_STATUS_Pos 3
#define PDEC_SYNCBUSY_STATUS (_U_(0x1) << PDEC_SYNCBUSY_STATUS_Pos)
#define PDEC_SYNCBUSY_PRESC_Pos 4
#define PDEC_SYNCBUSY_PRESC (_U_(0x1) << PDEC_SYNCBUSY_PRESC_Pos)
#define PDEC_SYNCBUSY_FILTER_Pos 5
#define PDEC_SYNCBUSY_FILTER (_U_(0x1) << PDEC_SYNCBUSY_FILTER_Pos)
#define PDEC_SYNCBUSY_COUNT_Pos 6
#define PDEC_SYNCBUSY_COUNT (_U_(0x1) << PDEC_SYNCBUSY_COUNT_Pos)
#define PDEC_SYNCBUSY_CC0_Pos 7
#define PDEC_SYNCBUSY_CC0 (_U_(1) << PDEC_SYNCBUSY_CC0_Pos)
#define PDEC_SYNCBUSY_CC1_Pos 8
#define PDEC_SYNCBUSY_CC1 (_U_(1) << PDEC_SYNCBUSY_CC1_Pos)
#define PDEC_SYNCBUSY_CC_Pos 7
#define PDEC_SYNCBUSY_CC_Msk (_U_(0x3) << PDEC_SYNCBUSY_CC_Pos)
#define PDEC_SYNCBUSY_CC(value) (PDEC_SYNCBUSY_CC_Msk & ((value) << PDEC_SYNCBUSY_CC_Pos))
#define PDEC_SYNCBUSY_MASK _U_(0x000001FF)



typedef union {
  struct {
    uint8_t PRESC:4;
    uint8_t :4;
  } bit;
  uint8_t reg;
} PDEC_PRESC_Type;


#define PDEC_PRESC_OFFSET 0x14
#define PDEC_PRESC_RESETVALUE _U_(0x00)

#define PDEC_PRESC_PRESC_Pos 0
#define PDEC_PRESC_PRESC_Msk (_U_(0xF) << PDEC_PRESC_PRESC_Pos)
#define PDEC_PRESC_PRESC(value) (PDEC_PRESC_PRESC_Msk & ((value) << PDEC_PRESC_PRESC_Pos))
#define PDEC_PRESC_PRESC_DIV1_Val _U_(0x0)
#define PDEC_PRESC_PRESC_DIV2_Val _U_(0x1)
#define PDEC_PRESC_PRESC_DIV4_Val _U_(0x2)
#define PDEC_PRESC_PRESC_DIV8_Val _U_(0x3)
#define PDEC_PRESC_PRESC_DIV16_Val _U_(0x4)
#define PDEC_PRESC_PRESC_DIV32_Val _U_(0x5)
#define PDEC_PRESC_PRESC_DIV64_Val _U_(0x6)
#define PDEC_PRESC_PRESC_DIV128_Val _U_(0x7)
#define PDEC_PRESC_PRESC_DIV256_Val _U_(0x8)
#define PDEC_PRESC_PRESC_DIV512_Val _U_(0x9)
#define PDEC_PRESC_PRESC_DIV1024_Val _U_(0xA)
#define PDEC_PRESC_PRESC_DIV1 (PDEC_PRESC_PRESC_DIV1_Val << PDEC_PRESC_PRESC_Pos)
#define PDEC_PRESC_PRESC_DIV2 (PDEC_PRESC_PRESC_DIV2_Val << PDEC_PRESC_PRESC_Pos)
#define PDEC_PRESC_PRESC_DIV4 (PDEC_PRESC_PRESC_DIV4_Val << PDEC_PRESC_PRESC_Pos)
#define PDEC_PRESC_PRESC_DIV8 (PDEC_PRESC_PRESC_DIV8_Val << PDEC_PRESC_PRESC_Pos)
#define PDEC_PRESC_PRESC_DIV16 (PDEC_PRESC_PRESC_DIV16_Val << PDEC_PRESC_PRESC_Pos)
#define PDEC_PRESC_PRESC_DIV32 (PDEC_PRESC_PRESC_DIV32_Val << PDEC_PRESC_PRESC_Pos)
#define PDEC_PRESC_PRESC_DIV64 (PDEC_PRESC_PRESC_DIV64_Val << PDEC_PRESC_PRESC_Pos)
#define PDEC_PRESC_PRESC_DIV128 (PDEC_PRESC_PRESC_DIV128_Val << PDEC_PRESC_PRESC_Pos)
#define PDEC_PRESC_PRESC_DIV256 (PDEC_PRESC_PRESC_DIV256_Val << PDEC_PRESC_PRESC_Pos)
#define PDEC_PRESC_PRESC_DIV512 (PDEC_PRESC_PRESC_DIV512_Val << PDEC_PRESC_PRESC_Pos)
#define PDEC_PRESC_PRESC_DIV1024 (PDEC_PRESC_PRESC_DIV1024_Val << PDEC_PRESC_PRESC_Pos)
#define PDEC_PRESC_MASK _U_(0x0F)



typedef union {
  struct {
    uint8_t FILTER:8;
  } bit;
  uint8_t reg;
} PDEC_FILTER_Type;


#define PDEC_FILTER_OFFSET 0x15
#define PDEC_FILTER_RESETVALUE _U_(0x00)

#define PDEC_FILTER_FILTER_Pos 0
#define PDEC_FILTER_FILTER_Msk (_U_(0xFF) << PDEC_FILTER_FILTER_Pos)
#define PDEC_FILTER_FILTER(value) (PDEC_FILTER_FILTER_Msk & ((value) << PDEC_FILTER_FILTER_Pos))
#define PDEC_FILTER_MASK _U_(0xFF)



typedef union {
  struct {
    uint8_t PRESCBUF:4;
    uint8_t :4;
  } bit;
  uint8_t reg;
} PDEC_PRESCBUF_Type;


#define PDEC_PRESCBUF_OFFSET 0x18
#define PDEC_PRESCBUF_RESETVALUE _U_(0x00)

#define PDEC_PRESCBUF_PRESCBUF_Pos 0
#define PDEC_PRESCBUF_PRESCBUF_Msk (_U_(0xF) << PDEC_PRESCBUF_PRESCBUF_Pos)
#define PDEC_PRESCBUF_PRESCBUF(value) (PDEC_PRESCBUF_PRESCBUF_Msk & ((value) << PDEC_PRESCBUF_PRESCBUF_Pos))
#define PDEC_PRESCBUF_PRESCBUF_DIV1_Val _U_(0x0)
#define PDEC_PRESCBUF_PRESCBUF_DIV2_Val _U_(0x1)
#define PDEC_PRESCBUF_PRESCBUF_DIV4_Val _U_(0x2)
#define PDEC_PRESCBUF_PRESCBUF_DIV8_Val _U_(0x3)
#define PDEC_PRESCBUF_PRESCBUF_DIV16_Val _U_(0x4)
#define PDEC_PRESCBUF_PRESCBUF_DIV32_Val _U_(0x5)
#define PDEC_PRESCBUF_PRESCBUF_DIV64_Val _U_(0x6)
#define PDEC_PRESCBUF_PRESCBUF_DIV128_Val _U_(0x7)
#define PDEC_PRESCBUF_PRESCBUF_DIV256_Val _U_(0x8)
#define PDEC_PRESCBUF_PRESCBUF_DIV512_Val _U_(0x9)
#define PDEC_PRESCBUF_PRESCBUF_DIV1024_Val _U_(0xA)
#define PDEC_PRESCBUF_PRESCBUF_DIV1 (PDEC_PRESCBUF_PRESCBUF_DIV1_Val << PDEC_PRESCBUF_PRESCBUF_Pos)
#define PDEC_PRESCBUF_PRESCBUF_DIV2 (PDEC_PRESCBUF_PRESCBUF_DIV2_Val << PDEC_PRESCBUF_PRESCBUF_Pos)
#define PDEC_PRESCBUF_PRESCBUF_DIV4 (PDEC_PRESCBUF_PRESCBUF_DIV4_Val << PDEC_PRESCBUF_PRESCBUF_Pos)
#define PDEC_PRESCBUF_PRESCBUF_DIV8 (PDEC_PRESCBUF_PRESCBUF_DIV8_Val << PDEC_PRESCBUF_PRESCBUF_Pos)
#define PDEC_PRESCBUF_PRESCBUF_DIV16 (PDEC_PRESCBUF_PRESCBUF_DIV16_Val << PDEC_PRESCBUF_PRESCBUF_Pos)
#define PDEC_PRESCBUF_PRESCBUF_DIV32 (PDEC_PRESCBUF_PRESCBUF_DIV32_Val << PDEC_PRESCBUF_PRESCBUF_Pos)
#define PDEC_PRESCBUF_PRESCBUF_DIV64 (PDEC_PRESCBUF_PRESCBUF_DIV64_Val << PDEC_PRESCBUF_PRESCBUF_Pos)
#define PDEC_PRESCBUF_PRESCBUF_DIV128 (PDEC_PRESCBUF_PRESCBUF_DIV128_Val << PDEC_PRESCBUF_PRESCBUF_Pos)
#define PDEC_PRESCBUF_PRESCBUF_DIV256 (PDEC_PRESCBUF_PRESCBUF_DIV256_Val << PDEC_PRESCBUF_PRESCBUF_Pos)
#define PDEC_PRESCBUF_PRESCBUF_DIV512 (PDEC_PRESCBUF_PRESCBUF_DIV512_Val << PDEC_PRESCBUF_PRESCBUF_Pos)
#define PDEC_PRESCBUF_PRESCBUF_DIV1024 (PDEC_PRESCBUF_PRESCBUF_DIV1024_Val << PDEC_PRESCBUF_PRESCBUF_Pos)
#define PDEC_PRESCBUF_MASK _U_(0x0F)



typedef union {
  struct {
    uint8_t FILTERBUF:8;
  } bit;
  uint8_t reg;
} PDEC_FILTERBUF_Type;


#define PDEC_FILTERBUF_OFFSET 0x19
#define PDEC_FILTERBUF_RESETVALUE _U_(0x00)

#define PDEC_FILTERBUF_FILTERBUF_Pos 0
#define PDEC_FILTERBUF_FILTERBUF_Msk (_U_(0xFF) << PDEC_FILTERBUF_FILTERBUF_Pos)
#define PDEC_FILTERBUF_FILTERBUF(value) (PDEC_FILTERBUF_FILTERBUF_Msk & ((value) << PDEC_FILTERBUF_FILTERBUF_Pos))
#define PDEC_FILTERBUF_MASK _U_(0xFF)



typedef union {
  struct {
    uint32_t COUNT:16;
    uint32_t :16;
  } bit;
  uint32_t reg;
} PDEC_COUNT_Type;


#define PDEC_COUNT_OFFSET 0x1C
#define PDEC_COUNT_RESETVALUE _U_(0x00000000)

#define PDEC_COUNT_COUNT_Pos 0
#define PDEC_COUNT_COUNT_Msk (_U_(0xFFFF) << PDEC_COUNT_COUNT_Pos)
#define PDEC_COUNT_COUNT(value) (PDEC_COUNT_COUNT_Msk & ((value) << PDEC_COUNT_COUNT_Pos))
#define PDEC_COUNT_MASK _U_(0x0000FFFF)



typedef union {
  struct {
    uint32_t CC:16;
    uint32_t :16;
  } bit;
  uint32_t reg;
} PDEC_CC_Type;


#define PDEC_CC_OFFSET 0x20
#define PDEC_CC_RESETVALUE _U_(0x00000000)

#define PDEC_CC_CC_Pos 0
#define PDEC_CC_CC_Msk (_U_(0xFFFF) << PDEC_CC_CC_Pos)
#define PDEC_CC_CC(value) (PDEC_CC_CC_Msk & ((value) << PDEC_CC_CC_Pos))
#define PDEC_CC_MASK _U_(0x0000FFFF)



typedef union {
  struct {
    uint32_t CCBUF:16;
    uint32_t :16;
  } bit;
  uint32_t reg;
} PDEC_CCBUF_Type;


#define PDEC_CCBUF_OFFSET 0x30
#define PDEC_CCBUF_RESETVALUE _U_(0x00000000)

#define PDEC_CCBUF_CCBUF_Pos 0
#define PDEC_CCBUF_CCBUF_Msk (_U_(0xFFFF) << PDEC_CCBUF_CCBUF_Pos)
#define PDEC_CCBUF_CCBUF(value) (PDEC_CCBUF_CCBUF_Msk & ((value) << PDEC_CCBUF_CCBUF_Pos))
#define PDEC_CCBUF_MASK _U_(0x0000FFFF)



typedef struct {
  volatile PDEC_CTRLA_Type CTRLA;
  volatile PDEC_CTRLBCLR_Type CTRLBCLR;
  volatile PDEC_CTRLBSET_Type CTRLBSET;
  volatile PDEC_EVCTRL_Type EVCTRL;
  volatile PDEC_INTENCLR_Type INTENCLR;
  volatile PDEC_INTENSET_Type INTENSET;
  volatile PDEC_INTFLAG_Type INTFLAG;
       RoReg8 Reserved1[0x1];
  volatile PDEC_STATUS_Type STATUS;
       RoReg8 Reserved2[0x1];
  volatile PDEC_DBGCTRL_Type DBGCTRL;
  volatile const PDEC_SYNCBUSY_Type SYNCBUSY;
  volatile PDEC_PRESC_Type PRESC;
  volatile PDEC_FILTER_Type FILTER;
       RoReg8 Reserved3[0x2];
  volatile PDEC_PRESCBUF_Type PRESCBUF;
  volatile PDEC_FILTERBUF_Type FILTERBUF;
       RoReg8 Reserved4[0x2];
  volatile PDEC_COUNT_Type COUNT;
  volatile PDEC_CC_Type CC[2];
       RoReg8 Reserved5[0x8];
  volatile PDEC_CCBUF_Type CCBUF[2];
} Pdec;
# 603 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/pm.h" 1
# 31 "asf4/samd51/include/component/pm.h"
#define _SAMD51_PM_COMPONENT_ 







#define PM_U2406 
#define REV_PM 0x100



typedef union {
  struct {
    uint8_t :2;
    uint8_t IORET:1;
    uint8_t :5;
  } bit;
  uint8_t reg;
} PM_CTRLA_Type;


#define PM_CTRLA_OFFSET 0x00
#define PM_CTRLA_RESETVALUE _U_(0x00)

#define PM_CTRLA_IORET_Pos 2
#define PM_CTRLA_IORET (_U_(0x1) << PM_CTRLA_IORET_Pos)
#define PM_CTRLA_MASK _U_(0x04)



typedef union {
  struct {
    uint8_t SLEEPMODE:3;
    uint8_t :5;
  } bit;
  uint8_t reg;
} PM_SLEEPCFG_Type;


#define PM_SLEEPCFG_OFFSET 0x01
#define PM_SLEEPCFG_RESETVALUE _U_(0x02)

#define PM_SLEEPCFG_SLEEPMODE_Pos 0
#define PM_SLEEPCFG_SLEEPMODE_Msk (_U_(0x7) << PM_SLEEPCFG_SLEEPMODE_Pos)
#define PM_SLEEPCFG_SLEEPMODE(value) (PM_SLEEPCFG_SLEEPMODE_Msk & ((value) << PM_SLEEPCFG_SLEEPMODE_Pos))
#define PM_SLEEPCFG_SLEEPMODE_IDLE0_Val _U_(0x0)
#define PM_SLEEPCFG_SLEEPMODE_IDLE1_Val _U_(0x1)
#define PM_SLEEPCFG_SLEEPMODE_IDLE2_Val _U_(0x2)
#define PM_SLEEPCFG_SLEEPMODE_STANDBY_Val _U_(0x4)
#define PM_SLEEPCFG_SLEEPMODE_HIBERNATE_Val _U_(0x5)
#define PM_SLEEPCFG_SLEEPMODE_BACKUP_Val _U_(0x6)
#define PM_SLEEPCFG_SLEEPMODE_OFF_Val _U_(0x7)
#define PM_SLEEPCFG_SLEEPMODE_IDLE0 (PM_SLEEPCFG_SLEEPMODE_IDLE0_Val << PM_SLEEPCFG_SLEEPMODE_Pos)
#define PM_SLEEPCFG_SLEEPMODE_IDLE1 (PM_SLEEPCFG_SLEEPMODE_IDLE1_Val << PM_SLEEPCFG_SLEEPMODE_Pos)
#define PM_SLEEPCFG_SLEEPMODE_IDLE2 (PM_SLEEPCFG_SLEEPMODE_IDLE2_Val << PM_SLEEPCFG_SLEEPMODE_Pos)
#define PM_SLEEPCFG_SLEEPMODE_STANDBY (PM_SLEEPCFG_SLEEPMODE_STANDBY_Val << PM_SLEEPCFG_SLEEPMODE_Pos)
#define PM_SLEEPCFG_SLEEPMODE_HIBERNATE (PM_SLEEPCFG_SLEEPMODE_HIBERNATE_Val << PM_SLEEPCFG_SLEEPMODE_Pos)
#define PM_SLEEPCFG_SLEEPMODE_BACKUP (PM_SLEEPCFG_SLEEPMODE_BACKUP_Val << PM_SLEEPCFG_SLEEPMODE_Pos)
#define PM_SLEEPCFG_SLEEPMODE_OFF (PM_SLEEPCFG_SLEEPMODE_OFF_Val << PM_SLEEPCFG_SLEEPMODE_Pos)
#define PM_SLEEPCFG_MASK _U_(0x07)



typedef union {
  struct {
    uint8_t SLEEPRDY:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} PM_INTENCLR_Type;


#define PM_INTENCLR_OFFSET 0x04
#define PM_INTENCLR_RESETVALUE _U_(0x00)

#define PM_INTENCLR_SLEEPRDY_Pos 0
#define PM_INTENCLR_SLEEPRDY (_U_(0x1) << PM_INTENCLR_SLEEPRDY_Pos)
#define PM_INTENCLR_MASK _U_(0x01)



typedef union {
  struct {
    uint8_t SLEEPRDY:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} PM_INTENSET_Type;


#define PM_INTENSET_OFFSET 0x05
#define PM_INTENSET_RESETVALUE _U_(0x00)

#define PM_INTENSET_SLEEPRDY_Pos 0
#define PM_INTENSET_SLEEPRDY (_U_(0x1) << PM_INTENSET_SLEEPRDY_Pos)
#define PM_INTENSET_MASK _U_(0x01)



typedef union {
  struct {
    volatile const uint8_t SLEEPRDY:1;
    volatile const uint8_t :7;
  } bit;
  uint8_t reg;
} PM_INTFLAG_Type;


#define PM_INTFLAG_OFFSET 0x06
#define PM_INTFLAG_RESETVALUE _U_(0x00)

#define PM_INTFLAG_SLEEPRDY_Pos 0
#define PM_INTFLAG_SLEEPRDY (_U_(0x1) << PM_INTFLAG_SLEEPRDY_Pos)
#define PM_INTFLAG_MASK _U_(0x01)



typedef union {
  struct {
    uint8_t RAMCFG:2;
    uint8_t :2;
    uint8_t FASTWKUP:2;
    uint8_t :2;
  } bit;
  uint8_t reg;
} PM_STDBYCFG_Type;


#define PM_STDBYCFG_OFFSET 0x08
#define PM_STDBYCFG_RESETVALUE _U_(0x00)

#define PM_STDBYCFG_RAMCFG_Pos 0
#define PM_STDBYCFG_RAMCFG_Msk (_U_(0x3) << PM_STDBYCFG_RAMCFG_Pos)
#define PM_STDBYCFG_RAMCFG(value) (PM_STDBYCFG_RAMCFG_Msk & ((value) << PM_STDBYCFG_RAMCFG_Pos))
#define PM_STDBYCFG_RAMCFG_RET_Val _U_(0x0)
#define PM_STDBYCFG_RAMCFG_PARTIAL_Val _U_(0x1)
#define PM_STDBYCFG_RAMCFG_OFF_Val _U_(0x2)
#define PM_STDBYCFG_RAMCFG_RET (PM_STDBYCFG_RAMCFG_RET_Val << PM_STDBYCFG_RAMCFG_Pos)
#define PM_STDBYCFG_RAMCFG_PARTIAL (PM_STDBYCFG_RAMCFG_PARTIAL_Val << PM_STDBYCFG_RAMCFG_Pos)
#define PM_STDBYCFG_RAMCFG_OFF (PM_STDBYCFG_RAMCFG_OFF_Val << PM_STDBYCFG_RAMCFG_Pos)
#define PM_STDBYCFG_FASTWKUP_Pos 4
#define PM_STDBYCFG_FASTWKUP_Msk (_U_(0x3) << PM_STDBYCFG_FASTWKUP_Pos)
#define PM_STDBYCFG_FASTWKUP(value) (PM_STDBYCFG_FASTWKUP_Msk & ((value) << PM_STDBYCFG_FASTWKUP_Pos))
#define PM_STDBYCFG_MASK _U_(0x33)



typedef union {
  struct {
    uint8_t RAMCFG:2;
    uint8_t BRAMCFG:2;
    uint8_t :4;
  } bit;
  uint8_t reg;
} PM_HIBCFG_Type;


#define PM_HIBCFG_OFFSET 0x09
#define PM_HIBCFG_RESETVALUE _U_(0x00)

#define PM_HIBCFG_RAMCFG_Pos 0
#define PM_HIBCFG_RAMCFG_Msk (_U_(0x3) << PM_HIBCFG_RAMCFG_Pos)
#define PM_HIBCFG_RAMCFG(value) (PM_HIBCFG_RAMCFG_Msk & ((value) << PM_HIBCFG_RAMCFG_Pos))
#define PM_HIBCFG_BRAMCFG_Pos 2
#define PM_HIBCFG_BRAMCFG_Msk (_U_(0x3) << PM_HIBCFG_BRAMCFG_Pos)
#define PM_HIBCFG_BRAMCFG(value) (PM_HIBCFG_BRAMCFG_Msk & ((value) << PM_HIBCFG_BRAMCFG_Pos))
#define PM_HIBCFG_MASK _U_(0x0F)



typedef union {
  struct {
    uint8_t BRAMCFG:2;
    uint8_t :6;
  } bit;
  uint8_t reg;
} PM_BKUPCFG_Type;


#define PM_BKUPCFG_OFFSET 0x0A
#define PM_BKUPCFG_RESETVALUE _U_(0x00)

#define PM_BKUPCFG_BRAMCFG_Pos 0
#define PM_BKUPCFG_BRAMCFG_Msk (_U_(0x3) << PM_BKUPCFG_BRAMCFG_Pos)
#define PM_BKUPCFG_BRAMCFG(value) (PM_BKUPCFG_BRAMCFG_Msk & ((value) << PM_BKUPCFG_BRAMCFG_Pos))
#define PM_BKUPCFG_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t DLYVAL:7;
    uint8_t IGNACK:1;
  } bit;
  uint8_t reg;
} PM_PWSAKDLY_Type;


#define PM_PWSAKDLY_OFFSET 0x12
#define PM_PWSAKDLY_RESETVALUE _U_(0x00)

#define PM_PWSAKDLY_DLYVAL_Pos 0
#define PM_PWSAKDLY_DLYVAL_Msk (_U_(0x7F) << PM_PWSAKDLY_DLYVAL_Pos)
#define PM_PWSAKDLY_DLYVAL(value) (PM_PWSAKDLY_DLYVAL_Msk & ((value) << PM_PWSAKDLY_DLYVAL_Pos))
#define PM_PWSAKDLY_IGNACK_Pos 7
#define PM_PWSAKDLY_IGNACK (_U_(0x1) << PM_PWSAKDLY_IGNACK_Pos)
#define PM_PWSAKDLY_MASK _U_(0xFF)



typedef struct {
  volatile PM_CTRLA_Type CTRLA;
  volatile PM_SLEEPCFG_Type SLEEPCFG;
       RoReg8 Reserved1[0x2];
  volatile PM_INTENCLR_Type INTENCLR;
  volatile PM_INTENSET_Type INTENSET;
  volatile PM_INTFLAG_Type INTFLAG;
       RoReg8 Reserved2[0x1];
  volatile PM_STDBYCFG_Type STDBYCFG;
  volatile PM_HIBCFG_Type HIBCFG;
  volatile PM_BKUPCFG_Type BKUPCFG;
       RoReg8 Reserved3[0x7];
  volatile PM_PWSAKDLY_Type PWSAKDLY;
} Pm;
# 604 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/port.h" 1
# 31 "asf4/samd51/include/component/port.h"
#define _SAMD51_PORT_COMPONENT_ 







#define PORT_U2210 
#define REV_PORT 0x220



typedef union {
  struct {
    uint32_t DIR:32;
  } bit;
  uint32_t reg;
} PORT_DIR_Type;


#define PORT_DIR_OFFSET 0x00
#define PORT_DIR_RESETVALUE _U_(0x00000000)

#define PORT_DIR_DIR_Pos 0
#define PORT_DIR_DIR_Msk (_U_(0xFFFFFFFF) << PORT_DIR_DIR_Pos)
#define PORT_DIR_DIR(value) (PORT_DIR_DIR_Msk & ((value) << PORT_DIR_DIR_Pos))
#define PORT_DIR_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t DIRCLR:32;
  } bit;
  uint32_t reg;
} PORT_DIRCLR_Type;


#define PORT_DIRCLR_OFFSET 0x04
#define PORT_DIRCLR_RESETVALUE _U_(0x00000000)

#define PORT_DIRCLR_DIRCLR_Pos 0
#define PORT_DIRCLR_DIRCLR_Msk (_U_(0xFFFFFFFF) << PORT_DIRCLR_DIRCLR_Pos)
#define PORT_DIRCLR_DIRCLR(value) (PORT_DIRCLR_DIRCLR_Msk & ((value) << PORT_DIRCLR_DIRCLR_Pos))
#define PORT_DIRCLR_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t DIRSET:32;
  } bit;
  uint32_t reg;
} PORT_DIRSET_Type;


#define PORT_DIRSET_OFFSET 0x08
#define PORT_DIRSET_RESETVALUE _U_(0x00000000)

#define PORT_DIRSET_DIRSET_Pos 0
#define PORT_DIRSET_DIRSET_Msk (_U_(0xFFFFFFFF) << PORT_DIRSET_DIRSET_Pos)
#define PORT_DIRSET_DIRSET(value) (PORT_DIRSET_DIRSET_Msk & ((value) << PORT_DIRSET_DIRSET_Pos))
#define PORT_DIRSET_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t DIRTGL:32;
  } bit;
  uint32_t reg;
} PORT_DIRTGL_Type;


#define PORT_DIRTGL_OFFSET 0x0C
#define PORT_DIRTGL_RESETVALUE _U_(0x00000000)

#define PORT_DIRTGL_DIRTGL_Pos 0
#define PORT_DIRTGL_DIRTGL_Msk (_U_(0xFFFFFFFF) << PORT_DIRTGL_DIRTGL_Pos)
#define PORT_DIRTGL_DIRTGL(value) (PORT_DIRTGL_DIRTGL_Msk & ((value) << PORT_DIRTGL_DIRTGL_Pos))
#define PORT_DIRTGL_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t OUT:32;
  } bit;
  uint32_t reg;
} PORT_OUT_Type;


#define PORT_OUT_OFFSET 0x10
#define PORT_OUT_RESETVALUE _U_(0x00000000)

#define PORT_OUT_OUT_Pos 0
#define PORT_OUT_OUT_Msk (_U_(0xFFFFFFFF) << PORT_OUT_OUT_Pos)
#define PORT_OUT_OUT(value) (PORT_OUT_OUT_Msk & ((value) << PORT_OUT_OUT_Pos))
#define PORT_OUT_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t OUTCLR:32;
  } bit;
  uint32_t reg;
} PORT_OUTCLR_Type;


#define PORT_OUTCLR_OFFSET 0x14
#define PORT_OUTCLR_RESETVALUE _U_(0x00000000)

#define PORT_OUTCLR_OUTCLR_Pos 0
#define PORT_OUTCLR_OUTCLR_Msk (_U_(0xFFFFFFFF) << PORT_OUTCLR_OUTCLR_Pos)
#define PORT_OUTCLR_OUTCLR(value) (PORT_OUTCLR_OUTCLR_Msk & ((value) << PORT_OUTCLR_OUTCLR_Pos))
#define PORT_OUTCLR_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t OUTSET:32;
  } bit;
  uint32_t reg;
} PORT_OUTSET_Type;


#define PORT_OUTSET_OFFSET 0x18
#define PORT_OUTSET_RESETVALUE _U_(0x00000000)

#define PORT_OUTSET_OUTSET_Pos 0
#define PORT_OUTSET_OUTSET_Msk (_U_(0xFFFFFFFF) << PORT_OUTSET_OUTSET_Pos)
#define PORT_OUTSET_OUTSET(value) (PORT_OUTSET_OUTSET_Msk & ((value) << PORT_OUTSET_OUTSET_Pos))
#define PORT_OUTSET_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t OUTTGL:32;
  } bit;
  uint32_t reg;
} PORT_OUTTGL_Type;


#define PORT_OUTTGL_OFFSET 0x1C
#define PORT_OUTTGL_RESETVALUE _U_(0x00000000)

#define PORT_OUTTGL_OUTTGL_Pos 0
#define PORT_OUTTGL_OUTTGL_Msk (_U_(0xFFFFFFFF) << PORT_OUTTGL_OUTTGL_Pos)
#define PORT_OUTTGL_OUTTGL(value) (PORT_OUTTGL_OUTTGL_Msk & ((value) << PORT_OUTTGL_OUTTGL_Pos))
#define PORT_OUTTGL_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t IN:32;
  } bit;
  uint32_t reg;
} PORT_IN_Type;


#define PORT_IN_OFFSET 0x20
#define PORT_IN_RESETVALUE _U_(0x00000000)

#define PORT_IN_IN_Pos 0
#define PORT_IN_IN_Msk (_U_(0xFFFFFFFF) << PORT_IN_IN_Pos)
#define PORT_IN_IN(value) (PORT_IN_IN_Msk & ((value) << PORT_IN_IN_Pos))
#define PORT_IN_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t SAMPLING:32;
  } bit;
  uint32_t reg;
} PORT_CTRL_Type;


#define PORT_CTRL_OFFSET 0x24
#define PORT_CTRL_RESETVALUE _U_(0x00000000)

#define PORT_CTRL_SAMPLING_Pos 0
#define PORT_CTRL_SAMPLING_Msk (_U_(0xFFFFFFFF) << PORT_CTRL_SAMPLING_Pos)
#define PORT_CTRL_SAMPLING(value) (PORT_CTRL_SAMPLING_Msk & ((value) << PORT_CTRL_SAMPLING_Pos))
#define PORT_CTRL_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t PINMASK:16;
    uint32_t PMUXEN:1;
    uint32_t INEN:1;
    uint32_t PULLEN:1;
    uint32_t :3;
    uint32_t DRVSTR:1;
    uint32_t :1;
    uint32_t PMUX:4;
    uint32_t WRPMUX:1;
    uint32_t :1;
    uint32_t WRPINCFG:1;
    uint32_t HWSEL:1;
  } bit;
  uint32_t reg;
} PORT_WRCONFIG_Type;


#define PORT_WRCONFIG_OFFSET 0x28
#define PORT_WRCONFIG_RESETVALUE _U_(0x00000000)

#define PORT_WRCONFIG_PINMASK_Pos 0
#define PORT_WRCONFIG_PINMASK_Msk (_U_(0xFFFF) << PORT_WRCONFIG_PINMASK_Pos)
#define PORT_WRCONFIG_PINMASK(value) (PORT_WRCONFIG_PINMASK_Msk & ((value) << PORT_WRCONFIG_PINMASK_Pos))
#define PORT_WRCONFIG_PMUXEN_Pos 16
#define PORT_WRCONFIG_PMUXEN (_U_(0x1) << PORT_WRCONFIG_PMUXEN_Pos)
#define PORT_WRCONFIG_INEN_Pos 17
#define PORT_WRCONFIG_INEN (_U_(0x1) << PORT_WRCONFIG_INEN_Pos)
#define PORT_WRCONFIG_PULLEN_Pos 18
#define PORT_WRCONFIG_PULLEN (_U_(0x1) << PORT_WRCONFIG_PULLEN_Pos)
#define PORT_WRCONFIG_DRVSTR_Pos 22
#define PORT_WRCONFIG_DRVSTR (_U_(0x1) << PORT_WRCONFIG_DRVSTR_Pos)
#define PORT_WRCONFIG_PMUX_Pos 24
#define PORT_WRCONFIG_PMUX_Msk (_U_(0xF) << PORT_WRCONFIG_PMUX_Pos)
#define PORT_WRCONFIG_PMUX(value) (PORT_WRCONFIG_PMUX_Msk & ((value) << PORT_WRCONFIG_PMUX_Pos))
#define PORT_WRCONFIG_WRPMUX_Pos 28
#define PORT_WRCONFIG_WRPMUX (_U_(0x1) << PORT_WRCONFIG_WRPMUX_Pos)
#define PORT_WRCONFIG_WRPINCFG_Pos 30
#define PORT_WRCONFIG_WRPINCFG (_U_(0x1) << PORT_WRCONFIG_WRPINCFG_Pos)
#define PORT_WRCONFIG_HWSEL_Pos 31
#define PORT_WRCONFIG_HWSEL (_U_(0x1) << PORT_WRCONFIG_HWSEL_Pos)
#define PORT_WRCONFIG_MASK _U_(0xDF47FFFF)



typedef union {
  struct {
    uint32_t PID0:5;
    uint32_t EVACT0:2;
    uint32_t PORTEI0:1;
    uint32_t PID1:5;
    uint32_t EVACT1:2;
    uint32_t PORTEI1:1;
    uint32_t PID2:5;
    uint32_t EVACT2:2;
    uint32_t PORTEI2:1;
    uint32_t PID3:5;
    uint32_t EVACT3:2;
    uint32_t PORTEI3:1;
  } bit;
  uint32_t reg;
} PORT_EVCTRL_Type;


#define PORT_EVCTRL_OFFSET 0x2C
#define PORT_EVCTRL_RESETVALUE _U_(0x00000000)

#define PORT_EVCTRL_PID0_Pos 0
#define PORT_EVCTRL_PID0_Msk (_U_(0x1F) << PORT_EVCTRL_PID0_Pos)
#define PORT_EVCTRL_PID0(value) (PORT_EVCTRL_PID0_Msk & ((value) << PORT_EVCTRL_PID0_Pos))
#define PORT_EVCTRL_EVACT0_Pos 5
#define PORT_EVCTRL_EVACT0_Msk (_U_(0x3) << PORT_EVCTRL_EVACT0_Pos)
#define PORT_EVCTRL_EVACT0(value) (PORT_EVCTRL_EVACT0_Msk & ((value) << PORT_EVCTRL_EVACT0_Pos))
#define PORT_EVCTRL_EVACT0_OUT_Val _U_(0x0)
#define PORT_EVCTRL_EVACT0_SET_Val _U_(0x1)
#define PORT_EVCTRL_EVACT0_CLR_Val _U_(0x2)
#define PORT_EVCTRL_EVACT0_TGL_Val _U_(0x3)
#define PORT_EVCTRL_EVACT0_OUT (PORT_EVCTRL_EVACT0_OUT_Val << PORT_EVCTRL_EVACT0_Pos)
#define PORT_EVCTRL_EVACT0_SET (PORT_EVCTRL_EVACT0_SET_Val << PORT_EVCTRL_EVACT0_Pos)
#define PORT_EVCTRL_EVACT0_CLR (PORT_EVCTRL_EVACT0_CLR_Val << PORT_EVCTRL_EVACT0_Pos)
#define PORT_EVCTRL_EVACT0_TGL (PORT_EVCTRL_EVACT0_TGL_Val << PORT_EVCTRL_EVACT0_Pos)
#define PORT_EVCTRL_PORTEI0_Pos 7
#define PORT_EVCTRL_PORTEI0 (_U_(0x1) << PORT_EVCTRL_PORTEI0_Pos)
#define PORT_EVCTRL_PID1_Pos 8
#define PORT_EVCTRL_PID1_Msk (_U_(0x1F) << PORT_EVCTRL_PID1_Pos)
#define PORT_EVCTRL_PID1(value) (PORT_EVCTRL_PID1_Msk & ((value) << PORT_EVCTRL_PID1_Pos))
#define PORT_EVCTRL_EVACT1_Pos 13
#define PORT_EVCTRL_EVACT1_Msk (_U_(0x3) << PORT_EVCTRL_EVACT1_Pos)
#define PORT_EVCTRL_EVACT1(value) (PORT_EVCTRL_EVACT1_Msk & ((value) << PORT_EVCTRL_EVACT1_Pos))
#define PORT_EVCTRL_PORTEI1_Pos 15
#define PORT_EVCTRL_PORTEI1 (_U_(0x1) << PORT_EVCTRL_PORTEI1_Pos)
#define PORT_EVCTRL_PID2_Pos 16
#define PORT_EVCTRL_PID2_Msk (_U_(0x1F) << PORT_EVCTRL_PID2_Pos)
#define PORT_EVCTRL_PID2(value) (PORT_EVCTRL_PID2_Msk & ((value) << PORT_EVCTRL_PID2_Pos))
#define PORT_EVCTRL_EVACT2_Pos 21
#define PORT_EVCTRL_EVACT2_Msk (_U_(0x3) << PORT_EVCTRL_EVACT2_Pos)
#define PORT_EVCTRL_EVACT2(value) (PORT_EVCTRL_EVACT2_Msk & ((value) << PORT_EVCTRL_EVACT2_Pos))
#define PORT_EVCTRL_PORTEI2_Pos 23
#define PORT_EVCTRL_PORTEI2 (_U_(0x1) << PORT_EVCTRL_PORTEI2_Pos)
#define PORT_EVCTRL_PID3_Pos 24
#define PORT_EVCTRL_PID3_Msk (_U_(0x1F) << PORT_EVCTRL_PID3_Pos)
#define PORT_EVCTRL_PID3(value) (PORT_EVCTRL_PID3_Msk & ((value) << PORT_EVCTRL_PID3_Pos))
#define PORT_EVCTRL_EVACT3_Pos 29
#define PORT_EVCTRL_EVACT3_Msk (_U_(0x3) << PORT_EVCTRL_EVACT3_Pos)
#define PORT_EVCTRL_EVACT3(value) (PORT_EVCTRL_EVACT3_Msk & ((value) << PORT_EVCTRL_EVACT3_Pos))
#define PORT_EVCTRL_PORTEI3_Pos 31
#define PORT_EVCTRL_PORTEI3 (_U_(0x1) << PORT_EVCTRL_PORTEI3_Pos)
#define PORT_EVCTRL_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint8_t PMUXE:4;
    uint8_t PMUXO:4;
  } bit;
  uint8_t reg;
} PORT_PMUX_Type;


#define PORT_PMUX_OFFSET 0x30
#define PORT_PMUX_RESETVALUE _U_(0x00)

#define PORT_PMUX_PMUXE_Pos 0
#define PORT_PMUX_PMUXE_Msk (_U_(0xF) << PORT_PMUX_PMUXE_Pos)
#define PORT_PMUX_PMUXE(value) (PORT_PMUX_PMUXE_Msk & ((value) << PORT_PMUX_PMUXE_Pos))
#define PORT_PMUX_PMUXO_Pos 4
#define PORT_PMUX_PMUXO_Msk (_U_(0xF) << PORT_PMUX_PMUXO_Pos)
#define PORT_PMUX_PMUXO(value) (PORT_PMUX_PMUXO_Msk & ((value) << PORT_PMUX_PMUXO_Pos))
#define PORT_PMUX_MASK _U_(0xFF)



typedef union {
  struct {
    uint8_t PMUXEN:1;
    uint8_t INEN:1;
    uint8_t PULLEN:1;
    uint8_t :3;
    uint8_t DRVSTR:1;
    uint8_t :1;
  } bit;
  uint8_t reg;
} PORT_PINCFG_Type;


#define PORT_PINCFG_OFFSET 0x40
#define PORT_PINCFG_RESETVALUE _U_(0x00)

#define PORT_PINCFG_PMUXEN_Pos 0
#define PORT_PINCFG_PMUXEN (_U_(0x1) << PORT_PINCFG_PMUXEN_Pos)
#define PORT_PINCFG_INEN_Pos 1
#define PORT_PINCFG_INEN (_U_(0x1) << PORT_PINCFG_INEN_Pos)
#define PORT_PINCFG_PULLEN_Pos 2
#define PORT_PINCFG_PULLEN (_U_(0x1) << PORT_PINCFG_PULLEN_Pos)
#define PORT_PINCFG_DRVSTR_Pos 6
#define PORT_PINCFG_DRVSTR (_U_(0x1) << PORT_PINCFG_DRVSTR_Pos)
#define PORT_PINCFG_MASK _U_(0x47)



typedef struct {
  volatile PORT_DIR_Type DIR;
  volatile PORT_DIRCLR_Type DIRCLR;
  volatile PORT_DIRSET_Type DIRSET;
  volatile PORT_DIRTGL_Type DIRTGL;
  volatile PORT_OUT_Type OUT;
  volatile PORT_OUTCLR_Type OUTCLR;
  volatile PORT_OUTSET_Type OUTSET;
  volatile PORT_OUTTGL_Type OUTTGL;
  volatile const PORT_IN_Type IN;
  volatile PORT_CTRL_Type CTRL;
  volatile PORT_WRCONFIG_Type WRCONFIG;
  volatile PORT_EVCTRL_Type EVCTRL;
  volatile PORT_PMUX_Type PMUX[16];
  volatile PORT_PINCFG_Type PINCFG[32];
       RoReg8 Reserved1[0x20];
} PortGroup;




typedef struct {
       PortGroup Group[4];
} Port;
# 605 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/qspi.h" 1
# 31 "asf4/samd51/include/component/qspi.h"
#define _SAMD51_QSPI_COMPONENT_ 







#define QSPI_U2008 
#define REV_QSPI 0x163



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t :22;
    uint32_t LASTXFER:1;
    uint32_t :7;
  } bit;
  uint32_t reg;
} QSPI_CTRLA_Type;


#define QSPI_CTRLA_OFFSET 0x00
#define QSPI_CTRLA_RESETVALUE _U_(0x00000000)

#define QSPI_CTRLA_SWRST_Pos 0
#define QSPI_CTRLA_SWRST (_U_(0x1) << QSPI_CTRLA_SWRST_Pos)
#define QSPI_CTRLA_ENABLE_Pos 1
#define QSPI_CTRLA_ENABLE (_U_(0x1) << QSPI_CTRLA_ENABLE_Pos)
#define QSPI_CTRLA_LASTXFER_Pos 24
#define QSPI_CTRLA_LASTXFER (_U_(0x1) << QSPI_CTRLA_LASTXFER_Pos)
#define QSPI_CTRLA_MASK _U_(0x01000003)



typedef union {
  struct {
    uint32_t MODE:1;
    uint32_t LOOPEN:1;
    uint32_t WDRBT:1;
    uint32_t SMEMREG:1;
    uint32_t CSMODE:2;
    uint32_t :2;
    uint32_t DATALEN:4;
    uint32_t :4;
    uint32_t DLYBCT:8;
    uint32_t DLYCS:8;
  } bit;
  uint32_t reg;
} QSPI_CTRLB_Type;


#define QSPI_CTRLB_OFFSET 0x04
#define QSPI_CTRLB_RESETVALUE _U_(0x00000000)

#define QSPI_CTRLB_MODE_Pos 0
#define QSPI_CTRLB_MODE (_U_(0x1) << QSPI_CTRLB_MODE_Pos)
#define QSPI_CTRLB_MODE_SPI_Val _U_(0x0)
#define QSPI_CTRLB_MODE_MEMORY_Val _U_(0x1)
#define QSPI_CTRLB_MODE_SPI (QSPI_CTRLB_MODE_SPI_Val << QSPI_CTRLB_MODE_Pos)
#define QSPI_CTRLB_MODE_MEMORY (QSPI_CTRLB_MODE_MEMORY_Val << QSPI_CTRLB_MODE_Pos)
#define QSPI_CTRLB_LOOPEN_Pos 1
#define QSPI_CTRLB_LOOPEN (_U_(0x1) << QSPI_CTRLB_LOOPEN_Pos)
#define QSPI_CTRLB_WDRBT_Pos 2
#define QSPI_CTRLB_WDRBT (_U_(0x1) << QSPI_CTRLB_WDRBT_Pos)
#define QSPI_CTRLB_SMEMREG_Pos 3
#define QSPI_CTRLB_SMEMREG (_U_(0x1) << QSPI_CTRLB_SMEMREG_Pos)
#define QSPI_CTRLB_CSMODE_Pos 4
#define QSPI_CTRLB_CSMODE_Msk (_U_(0x3) << QSPI_CTRLB_CSMODE_Pos)
#define QSPI_CTRLB_CSMODE(value) (QSPI_CTRLB_CSMODE_Msk & ((value) << QSPI_CTRLB_CSMODE_Pos))
#define QSPI_CTRLB_CSMODE_NORELOAD_Val _U_(0x0)
#define QSPI_CTRLB_CSMODE_LASTXFER_Val _U_(0x1)
#define QSPI_CTRLB_CSMODE_SYSTEMATICALLY_Val _U_(0x2)
#define QSPI_CTRLB_CSMODE_NORELOAD (QSPI_CTRLB_CSMODE_NORELOAD_Val << QSPI_CTRLB_CSMODE_Pos)
#define QSPI_CTRLB_CSMODE_LASTXFER (QSPI_CTRLB_CSMODE_LASTXFER_Val << QSPI_CTRLB_CSMODE_Pos)
#define QSPI_CTRLB_CSMODE_SYSTEMATICALLY (QSPI_CTRLB_CSMODE_SYSTEMATICALLY_Val << QSPI_CTRLB_CSMODE_Pos)
#define QSPI_CTRLB_DATALEN_Pos 8
#define QSPI_CTRLB_DATALEN_Msk (_U_(0xF) << QSPI_CTRLB_DATALEN_Pos)
#define QSPI_CTRLB_DATALEN(value) (QSPI_CTRLB_DATALEN_Msk & ((value) << QSPI_CTRLB_DATALEN_Pos))
#define QSPI_CTRLB_DATALEN_8BITS_Val _U_(0x0)
#define QSPI_CTRLB_DATALEN_9BITS_Val _U_(0x1)
#define QSPI_CTRLB_DATALEN_10BITS_Val _U_(0x2)
#define QSPI_CTRLB_DATALEN_11BITS_Val _U_(0x3)
#define QSPI_CTRLB_DATALEN_12BITS_Val _U_(0x4)
#define QSPI_CTRLB_DATALEN_13BITS_Val _U_(0x5)
#define QSPI_CTRLB_DATALEN_14BITS_Val _U_(0x6)
#define QSPI_CTRLB_DATALEN_15BITS_Val _U_(0x7)
#define QSPI_CTRLB_DATALEN_16BITS_Val _U_(0x8)
#define QSPI_CTRLB_DATALEN_8BITS (QSPI_CTRLB_DATALEN_8BITS_Val << QSPI_CTRLB_DATALEN_Pos)
#define QSPI_CTRLB_DATALEN_9BITS (QSPI_CTRLB_DATALEN_9BITS_Val << QSPI_CTRLB_DATALEN_Pos)
#define QSPI_CTRLB_DATALEN_10BITS (QSPI_CTRLB_DATALEN_10BITS_Val << QSPI_CTRLB_DATALEN_Pos)
#define QSPI_CTRLB_DATALEN_11BITS (QSPI_CTRLB_DATALEN_11BITS_Val << QSPI_CTRLB_DATALEN_Pos)
#define QSPI_CTRLB_DATALEN_12BITS (QSPI_CTRLB_DATALEN_12BITS_Val << QSPI_CTRLB_DATALEN_Pos)
#define QSPI_CTRLB_DATALEN_13BITS (QSPI_CTRLB_DATALEN_13BITS_Val << QSPI_CTRLB_DATALEN_Pos)
#define QSPI_CTRLB_DATALEN_14BITS (QSPI_CTRLB_DATALEN_14BITS_Val << QSPI_CTRLB_DATALEN_Pos)
#define QSPI_CTRLB_DATALEN_15BITS (QSPI_CTRLB_DATALEN_15BITS_Val << QSPI_CTRLB_DATALEN_Pos)
#define QSPI_CTRLB_DATALEN_16BITS (QSPI_CTRLB_DATALEN_16BITS_Val << QSPI_CTRLB_DATALEN_Pos)
#define QSPI_CTRLB_DLYBCT_Pos 16
#define QSPI_CTRLB_DLYBCT_Msk (_U_(0xFF) << QSPI_CTRLB_DLYBCT_Pos)
#define QSPI_CTRLB_DLYBCT(value) (QSPI_CTRLB_DLYBCT_Msk & ((value) << QSPI_CTRLB_DLYBCT_Pos))
#define QSPI_CTRLB_DLYCS_Pos 24
#define QSPI_CTRLB_DLYCS_Msk (_U_(0xFF) << QSPI_CTRLB_DLYCS_Pos)
#define QSPI_CTRLB_DLYCS(value) (QSPI_CTRLB_DLYCS_Msk & ((value) << QSPI_CTRLB_DLYCS_Pos))
#define QSPI_CTRLB_MASK _U_(0xFFFF0F3F)



typedef union {
  struct {
    uint32_t CPOL:1;
    uint32_t CPHA:1;
    uint32_t :6;
    uint32_t BAUD:8;
    uint32_t DLYBS:8;
    uint32_t :8;
  } bit;
  uint32_t reg;
} QSPI_BAUD_Type;


#define QSPI_BAUD_OFFSET 0x08
#define QSPI_BAUD_RESETVALUE _U_(0x00000000)

#define QSPI_BAUD_CPOL_Pos 0
#define QSPI_BAUD_CPOL (_U_(0x1) << QSPI_BAUD_CPOL_Pos)
#define QSPI_BAUD_CPHA_Pos 1
#define QSPI_BAUD_CPHA (_U_(0x1) << QSPI_BAUD_CPHA_Pos)
#define QSPI_BAUD_BAUD_Pos 8
#define QSPI_BAUD_BAUD_Msk (_U_(0xFF) << QSPI_BAUD_BAUD_Pos)
#define QSPI_BAUD_BAUD(value) (QSPI_BAUD_BAUD_Msk & ((value) << QSPI_BAUD_BAUD_Pos))
#define QSPI_BAUD_DLYBS_Pos 16
#define QSPI_BAUD_DLYBS_Msk (_U_(0xFF) << QSPI_BAUD_DLYBS_Pos)
#define QSPI_BAUD_DLYBS(value) (QSPI_BAUD_DLYBS_Msk & ((value) << QSPI_BAUD_DLYBS_Pos))
#define QSPI_BAUD_MASK _U_(0x00FFFF03)



typedef union {
  struct {
    uint32_t DATA:16;
    uint32_t :16;
  } bit;
  uint32_t reg;
} QSPI_RXDATA_Type;


#define QSPI_RXDATA_OFFSET 0x0C
#define QSPI_RXDATA_RESETVALUE _U_(0x00000000)

#define QSPI_RXDATA_DATA_Pos 0
#define QSPI_RXDATA_DATA_Msk (_U_(0xFFFF) << QSPI_RXDATA_DATA_Pos)
#define QSPI_RXDATA_DATA(value) (QSPI_RXDATA_DATA_Msk & ((value) << QSPI_RXDATA_DATA_Pos))
#define QSPI_RXDATA_MASK _U_(0x0000FFFF)



typedef union {
  struct {
    uint32_t DATA:16;
    uint32_t :16;
  } bit;
  uint32_t reg;
} QSPI_TXDATA_Type;


#define QSPI_TXDATA_OFFSET 0x10
#define QSPI_TXDATA_RESETVALUE _U_(0x00000000)

#define QSPI_TXDATA_DATA_Pos 0
#define QSPI_TXDATA_DATA_Msk (_U_(0xFFFF) << QSPI_TXDATA_DATA_Pos)
#define QSPI_TXDATA_DATA(value) (QSPI_TXDATA_DATA_Msk & ((value) << QSPI_TXDATA_DATA_Pos))
#define QSPI_TXDATA_MASK _U_(0x0000FFFF)



typedef union {
  struct {
    uint32_t RXC:1;
    uint32_t DRE:1;
    uint32_t TXC:1;
    uint32_t ERROR:1;
    uint32_t :4;
    uint32_t CSRISE:1;
    uint32_t :1;
    uint32_t INSTREND:1;
    uint32_t :21;
  } bit;
  uint32_t reg;
} QSPI_INTENCLR_Type;


#define QSPI_INTENCLR_OFFSET 0x14
#define QSPI_INTENCLR_RESETVALUE _U_(0x00000000)

#define QSPI_INTENCLR_RXC_Pos 0
#define QSPI_INTENCLR_RXC (_U_(0x1) << QSPI_INTENCLR_RXC_Pos)
#define QSPI_INTENCLR_DRE_Pos 1
#define QSPI_INTENCLR_DRE (_U_(0x1) << QSPI_INTENCLR_DRE_Pos)
#define QSPI_INTENCLR_TXC_Pos 2
#define QSPI_INTENCLR_TXC (_U_(0x1) << QSPI_INTENCLR_TXC_Pos)
#define QSPI_INTENCLR_ERROR_Pos 3
#define QSPI_INTENCLR_ERROR (_U_(0x1) << QSPI_INTENCLR_ERROR_Pos)
#define QSPI_INTENCLR_CSRISE_Pos 8
#define QSPI_INTENCLR_CSRISE (_U_(0x1) << QSPI_INTENCLR_CSRISE_Pos)
#define QSPI_INTENCLR_INSTREND_Pos 10
#define QSPI_INTENCLR_INSTREND (_U_(0x1) << QSPI_INTENCLR_INSTREND_Pos)
#define QSPI_INTENCLR_MASK _U_(0x0000050F)



typedef union {
  struct {
    uint32_t RXC:1;
    uint32_t DRE:1;
    uint32_t TXC:1;
    uint32_t ERROR:1;
    uint32_t :4;
    uint32_t CSRISE:1;
    uint32_t :1;
    uint32_t INSTREND:1;
    uint32_t :21;
  } bit;
  uint32_t reg;
} QSPI_INTENSET_Type;


#define QSPI_INTENSET_OFFSET 0x18
#define QSPI_INTENSET_RESETVALUE _U_(0x00000000)

#define QSPI_INTENSET_RXC_Pos 0
#define QSPI_INTENSET_RXC (_U_(0x1) << QSPI_INTENSET_RXC_Pos)
#define QSPI_INTENSET_DRE_Pos 1
#define QSPI_INTENSET_DRE (_U_(0x1) << QSPI_INTENSET_DRE_Pos)
#define QSPI_INTENSET_TXC_Pos 2
#define QSPI_INTENSET_TXC (_U_(0x1) << QSPI_INTENSET_TXC_Pos)
#define QSPI_INTENSET_ERROR_Pos 3
#define QSPI_INTENSET_ERROR (_U_(0x1) << QSPI_INTENSET_ERROR_Pos)
#define QSPI_INTENSET_CSRISE_Pos 8
#define QSPI_INTENSET_CSRISE (_U_(0x1) << QSPI_INTENSET_CSRISE_Pos)
#define QSPI_INTENSET_INSTREND_Pos 10
#define QSPI_INTENSET_INSTREND (_U_(0x1) << QSPI_INTENSET_INSTREND_Pos)
#define QSPI_INTENSET_MASK _U_(0x0000050F)



typedef union {
  struct {
    volatile const uint32_t RXC:1;
    volatile const uint32_t DRE:1;
    volatile const uint32_t TXC:1;
    volatile const uint32_t ERROR:1;
    volatile const uint32_t :4;
    volatile const uint32_t CSRISE:1;
    volatile const uint32_t :1;
    volatile const uint32_t INSTREND:1;
    volatile const uint32_t :21;
  } bit;
  uint32_t reg;
} QSPI_INTFLAG_Type;


#define QSPI_INTFLAG_OFFSET 0x1C
#define QSPI_INTFLAG_RESETVALUE _U_(0x00000000)

#define QSPI_INTFLAG_RXC_Pos 0
#define QSPI_INTFLAG_RXC (_U_(0x1) << QSPI_INTFLAG_RXC_Pos)
#define QSPI_INTFLAG_DRE_Pos 1
#define QSPI_INTFLAG_DRE (_U_(0x1) << QSPI_INTFLAG_DRE_Pos)
#define QSPI_INTFLAG_TXC_Pos 2
#define QSPI_INTFLAG_TXC (_U_(0x1) << QSPI_INTFLAG_TXC_Pos)
#define QSPI_INTFLAG_ERROR_Pos 3
#define QSPI_INTFLAG_ERROR (_U_(0x1) << QSPI_INTFLAG_ERROR_Pos)
#define QSPI_INTFLAG_CSRISE_Pos 8
#define QSPI_INTFLAG_CSRISE (_U_(0x1) << QSPI_INTFLAG_CSRISE_Pos)
#define QSPI_INTFLAG_INSTREND_Pos 10
#define QSPI_INTFLAG_INSTREND (_U_(0x1) << QSPI_INTFLAG_INSTREND_Pos)
#define QSPI_INTFLAG_MASK _U_(0x0000050F)



typedef union {
  struct {
    uint32_t :1;
    uint32_t ENABLE:1;
    uint32_t :7;
    uint32_t CSSTATUS:1;
    uint32_t :22;
  } bit;
  uint32_t reg;
} QSPI_STATUS_Type;


#define QSPI_STATUS_OFFSET 0x20
#define QSPI_STATUS_RESETVALUE _U_(0x00000200)

#define QSPI_STATUS_ENABLE_Pos 1
#define QSPI_STATUS_ENABLE (_U_(0x1) << QSPI_STATUS_ENABLE_Pos)
#define QSPI_STATUS_CSSTATUS_Pos 9
#define QSPI_STATUS_CSSTATUS (_U_(0x1) << QSPI_STATUS_CSSTATUS_Pos)
#define QSPI_STATUS_MASK _U_(0x00000202)



typedef union {
  struct {
    uint32_t ADDR:32;
  } bit;
  uint32_t reg;
} QSPI_INSTRADDR_Type;


#define QSPI_INSTRADDR_OFFSET 0x30
#define QSPI_INSTRADDR_RESETVALUE _U_(0x00000000)

#define QSPI_INSTRADDR_ADDR_Pos 0
#define QSPI_INSTRADDR_ADDR_Msk (_U_(0xFFFFFFFF) << QSPI_INSTRADDR_ADDR_Pos)
#define QSPI_INSTRADDR_ADDR(value) (QSPI_INSTRADDR_ADDR_Msk & ((value) << QSPI_INSTRADDR_ADDR_Pos))
#define QSPI_INSTRADDR_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t INSTR:8;
    uint32_t :8;
    uint32_t OPTCODE:8;
    uint32_t :8;
  } bit;
  uint32_t reg;
} QSPI_INSTRCTRL_Type;


#define QSPI_INSTRCTRL_OFFSET 0x34
#define QSPI_INSTRCTRL_RESETVALUE _U_(0x00000000)

#define QSPI_INSTRCTRL_INSTR_Pos 0
#define QSPI_INSTRCTRL_INSTR_Msk (_U_(0xFF) << QSPI_INSTRCTRL_INSTR_Pos)
#define QSPI_INSTRCTRL_INSTR(value) (QSPI_INSTRCTRL_INSTR_Msk & ((value) << QSPI_INSTRCTRL_INSTR_Pos))
#define QSPI_INSTRCTRL_OPTCODE_Pos 16
#define QSPI_INSTRCTRL_OPTCODE_Msk (_U_(0xFF) << QSPI_INSTRCTRL_OPTCODE_Pos)
#define QSPI_INSTRCTRL_OPTCODE(value) (QSPI_INSTRCTRL_OPTCODE_Msk & ((value) << QSPI_INSTRCTRL_OPTCODE_Pos))
#define QSPI_INSTRCTRL_MASK _U_(0x00FF00FF)



typedef union {
  struct {
    uint32_t WIDTH:3;
    uint32_t :1;
    uint32_t INSTREN:1;
    uint32_t ADDREN:1;
    uint32_t OPTCODEEN:1;
    uint32_t DATAEN:1;
    uint32_t OPTCODELEN:2;
    uint32_t ADDRLEN:1;
    uint32_t :1;
    uint32_t TFRTYPE:2;
    uint32_t CRMODE:1;
    uint32_t DDREN:1;
    uint32_t DUMMYLEN:5;
    uint32_t :11;
  } bit;
  uint32_t reg;
} QSPI_INSTRFRAME_Type;


#define QSPI_INSTRFRAME_OFFSET 0x38
#define QSPI_INSTRFRAME_RESETVALUE _U_(0x00000000)

#define QSPI_INSTRFRAME_WIDTH_Pos 0
#define QSPI_INSTRFRAME_WIDTH_Msk (_U_(0x7) << QSPI_INSTRFRAME_WIDTH_Pos)
#define QSPI_INSTRFRAME_WIDTH(value) (QSPI_INSTRFRAME_WIDTH_Msk & ((value) << QSPI_INSTRFRAME_WIDTH_Pos))
#define QSPI_INSTRFRAME_WIDTH_SINGLE_BIT_SPI_Val _U_(0x0)
#define QSPI_INSTRFRAME_WIDTH_DUAL_OUTPUT_Val _U_(0x1)
#define QSPI_INSTRFRAME_WIDTH_QUAD_OUTPUT_Val _U_(0x2)
#define QSPI_INSTRFRAME_WIDTH_DUAL_IO_Val _U_(0x3)
#define QSPI_INSTRFRAME_WIDTH_QUAD_IO_Val _U_(0x4)
#define QSPI_INSTRFRAME_WIDTH_DUAL_CMD_Val _U_(0x5)
#define QSPI_INSTRFRAME_WIDTH_QUAD_CMD_Val _U_(0x6)
#define QSPI_INSTRFRAME_WIDTH_SINGLE_BIT_SPI (QSPI_INSTRFRAME_WIDTH_SINGLE_BIT_SPI_Val << QSPI_INSTRFRAME_WIDTH_Pos)
#define QSPI_INSTRFRAME_WIDTH_DUAL_OUTPUT (QSPI_INSTRFRAME_WIDTH_DUAL_OUTPUT_Val << QSPI_INSTRFRAME_WIDTH_Pos)
#define QSPI_INSTRFRAME_WIDTH_QUAD_OUTPUT (QSPI_INSTRFRAME_WIDTH_QUAD_OUTPUT_Val << QSPI_INSTRFRAME_WIDTH_Pos)
#define QSPI_INSTRFRAME_WIDTH_DUAL_IO (QSPI_INSTRFRAME_WIDTH_DUAL_IO_Val << QSPI_INSTRFRAME_WIDTH_Pos)
#define QSPI_INSTRFRAME_WIDTH_QUAD_IO (QSPI_INSTRFRAME_WIDTH_QUAD_IO_Val << QSPI_INSTRFRAME_WIDTH_Pos)
#define QSPI_INSTRFRAME_WIDTH_DUAL_CMD (QSPI_INSTRFRAME_WIDTH_DUAL_CMD_Val << QSPI_INSTRFRAME_WIDTH_Pos)
#define QSPI_INSTRFRAME_WIDTH_QUAD_CMD (QSPI_INSTRFRAME_WIDTH_QUAD_CMD_Val << QSPI_INSTRFRAME_WIDTH_Pos)
#define QSPI_INSTRFRAME_INSTREN_Pos 4
#define QSPI_INSTRFRAME_INSTREN (_U_(0x1) << QSPI_INSTRFRAME_INSTREN_Pos)
#define QSPI_INSTRFRAME_ADDREN_Pos 5
#define QSPI_INSTRFRAME_ADDREN (_U_(0x1) << QSPI_INSTRFRAME_ADDREN_Pos)
#define QSPI_INSTRFRAME_OPTCODEEN_Pos 6
#define QSPI_INSTRFRAME_OPTCODEEN (_U_(0x1) << QSPI_INSTRFRAME_OPTCODEEN_Pos)
#define QSPI_INSTRFRAME_DATAEN_Pos 7
#define QSPI_INSTRFRAME_DATAEN (_U_(0x1) << QSPI_INSTRFRAME_DATAEN_Pos)
#define QSPI_INSTRFRAME_OPTCODELEN_Pos 8
#define QSPI_INSTRFRAME_OPTCODELEN_Msk (_U_(0x3) << QSPI_INSTRFRAME_OPTCODELEN_Pos)
#define QSPI_INSTRFRAME_OPTCODELEN(value) (QSPI_INSTRFRAME_OPTCODELEN_Msk & ((value) << QSPI_INSTRFRAME_OPTCODELEN_Pos))
#define QSPI_INSTRFRAME_OPTCODELEN_1BIT_Val _U_(0x0)
#define QSPI_INSTRFRAME_OPTCODELEN_2BITS_Val _U_(0x1)
#define QSPI_INSTRFRAME_OPTCODELEN_4BITS_Val _U_(0x2)
#define QSPI_INSTRFRAME_OPTCODELEN_8BITS_Val _U_(0x3)
#define QSPI_INSTRFRAME_OPTCODELEN_1BIT (QSPI_INSTRFRAME_OPTCODELEN_1BIT_Val << QSPI_INSTRFRAME_OPTCODELEN_Pos)
#define QSPI_INSTRFRAME_OPTCODELEN_2BITS (QSPI_INSTRFRAME_OPTCODELEN_2BITS_Val << QSPI_INSTRFRAME_OPTCODELEN_Pos)
#define QSPI_INSTRFRAME_OPTCODELEN_4BITS (QSPI_INSTRFRAME_OPTCODELEN_4BITS_Val << QSPI_INSTRFRAME_OPTCODELEN_Pos)
#define QSPI_INSTRFRAME_OPTCODELEN_8BITS (QSPI_INSTRFRAME_OPTCODELEN_8BITS_Val << QSPI_INSTRFRAME_OPTCODELEN_Pos)
#define QSPI_INSTRFRAME_ADDRLEN_Pos 10
#define QSPI_INSTRFRAME_ADDRLEN (_U_(0x1) << QSPI_INSTRFRAME_ADDRLEN_Pos)
#define QSPI_INSTRFRAME_ADDRLEN_24BITS_Val _U_(0x0)
#define QSPI_INSTRFRAME_ADDRLEN_32BITS_Val _U_(0x1)
#define QSPI_INSTRFRAME_ADDRLEN_24BITS (QSPI_INSTRFRAME_ADDRLEN_24BITS_Val << QSPI_INSTRFRAME_ADDRLEN_Pos)
#define QSPI_INSTRFRAME_ADDRLEN_32BITS (QSPI_INSTRFRAME_ADDRLEN_32BITS_Val << QSPI_INSTRFRAME_ADDRLEN_Pos)
#define QSPI_INSTRFRAME_TFRTYPE_Pos 12
#define QSPI_INSTRFRAME_TFRTYPE_Msk (_U_(0x3) << QSPI_INSTRFRAME_TFRTYPE_Pos)
#define QSPI_INSTRFRAME_TFRTYPE(value) (QSPI_INSTRFRAME_TFRTYPE_Msk & ((value) << QSPI_INSTRFRAME_TFRTYPE_Pos))
#define QSPI_INSTRFRAME_TFRTYPE_READ_Val _U_(0x0)
#define QSPI_INSTRFRAME_TFRTYPE_READMEMORY_Val _U_(0x1)
#define QSPI_INSTRFRAME_TFRTYPE_WRITE_Val _U_(0x2)
#define QSPI_INSTRFRAME_TFRTYPE_WRITEMEMORY_Val _U_(0x3)
#define QSPI_INSTRFRAME_TFRTYPE_READ (QSPI_INSTRFRAME_TFRTYPE_READ_Val << QSPI_INSTRFRAME_TFRTYPE_Pos)
#define QSPI_INSTRFRAME_TFRTYPE_READMEMORY (QSPI_INSTRFRAME_TFRTYPE_READMEMORY_Val << QSPI_INSTRFRAME_TFRTYPE_Pos)
#define QSPI_INSTRFRAME_TFRTYPE_WRITE (QSPI_INSTRFRAME_TFRTYPE_WRITE_Val << QSPI_INSTRFRAME_TFRTYPE_Pos)
#define QSPI_INSTRFRAME_TFRTYPE_WRITEMEMORY (QSPI_INSTRFRAME_TFRTYPE_WRITEMEMORY_Val << QSPI_INSTRFRAME_TFRTYPE_Pos)
#define QSPI_INSTRFRAME_CRMODE_Pos 14
#define QSPI_INSTRFRAME_CRMODE (_U_(0x1) << QSPI_INSTRFRAME_CRMODE_Pos)
#define QSPI_INSTRFRAME_DDREN_Pos 15
#define QSPI_INSTRFRAME_DDREN (_U_(0x1) << QSPI_INSTRFRAME_DDREN_Pos)
#define QSPI_INSTRFRAME_DUMMYLEN_Pos 16
#define QSPI_INSTRFRAME_DUMMYLEN_Msk (_U_(0x1F) << QSPI_INSTRFRAME_DUMMYLEN_Pos)
#define QSPI_INSTRFRAME_DUMMYLEN(value) (QSPI_INSTRFRAME_DUMMYLEN_Msk & ((value) << QSPI_INSTRFRAME_DUMMYLEN_Pos))
#define QSPI_INSTRFRAME_MASK _U_(0x001FF7F7)



typedef union {
  struct {
    uint32_t ENABLE:1;
    uint32_t RANDOMDIS:1;
    uint32_t :30;
  } bit;
  uint32_t reg;
} QSPI_SCRAMBCTRL_Type;


#define QSPI_SCRAMBCTRL_OFFSET 0x40
#define QSPI_SCRAMBCTRL_RESETVALUE _U_(0x00000000)

#define QSPI_SCRAMBCTRL_ENABLE_Pos 0
#define QSPI_SCRAMBCTRL_ENABLE (_U_(0x1) << QSPI_SCRAMBCTRL_ENABLE_Pos)
#define QSPI_SCRAMBCTRL_RANDOMDIS_Pos 1
#define QSPI_SCRAMBCTRL_RANDOMDIS (_U_(0x1) << QSPI_SCRAMBCTRL_RANDOMDIS_Pos)
#define QSPI_SCRAMBCTRL_MASK _U_(0x00000003)



typedef union {
  struct {
    uint32_t KEY:32;
  } bit;
  uint32_t reg;
} QSPI_SCRAMBKEY_Type;


#define QSPI_SCRAMBKEY_OFFSET 0x44
#define QSPI_SCRAMBKEY_RESETVALUE _U_(0x00000000)

#define QSPI_SCRAMBKEY_KEY_Pos 0
#define QSPI_SCRAMBKEY_KEY_Msk (_U_(0xFFFFFFFF) << QSPI_SCRAMBKEY_KEY_Pos)
#define QSPI_SCRAMBKEY_KEY(value) (QSPI_SCRAMBKEY_KEY_Msk & ((value) << QSPI_SCRAMBKEY_KEY_Pos))
#define QSPI_SCRAMBKEY_MASK _U_(0xFFFFFFFF)



typedef struct {
  volatile QSPI_CTRLA_Type CTRLA;
  volatile QSPI_CTRLB_Type CTRLB;
  volatile QSPI_BAUD_Type BAUD;
  volatile const QSPI_RXDATA_Type RXDATA;
  volatile QSPI_TXDATA_Type TXDATA;
  volatile QSPI_INTENCLR_Type INTENCLR;
  volatile QSPI_INTENSET_Type INTENSET;
  volatile QSPI_INTFLAG_Type INTFLAG;
  volatile const QSPI_STATUS_Type STATUS;
       RoReg8 Reserved1[0xC];
  volatile QSPI_INSTRADDR_Type INSTRADDR;
  volatile QSPI_INSTRCTRL_Type INSTRCTRL;
  volatile QSPI_INSTRFRAME_Type INSTRFRAME;
       RoReg8 Reserved2[0x4];
  volatile QSPI_SCRAMBCTRL_Type SCRAMBCTRL;
  volatile QSPI_SCRAMBKEY_Type SCRAMBKEY;
} Qspi;
# 606 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/ramecc.h" 1
# 31 "asf4/samd51/include/component/ramecc.h"
#define _SAMD51_RAMECC_COMPONENT_ 







#define RAMECC_U2268 
#define REV_RAMECC 0x100



typedef union {
  struct {
    uint8_t SINGLEE:1;
    uint8_t DUALE:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} RAMECC_INTENCLR_Type;


#define RAMECC_INTENCLR_OFFSET 0x0
#define RAMECC_INTENCLR_RESETVALUE _U_(0x00)

#define RAMECC_INTENCLR_SINGLEE_Pos 0
#define RAMECC_INTENCLR_SINGLEE (_U_(0x1) << RAMECC_INTENCLR_SINGLEE_Pos)
#define RAMECC_INTENCLR_DUALE_Pos 1
#define RAMECC_INTENCLR_DUALE (_U_(0x1) << RAMECC_INTENCLR_DUALE_Pos)
#define RAMECC_INTENCLR_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t SINGLEE:1;
    uint8_t DUALE:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} RAMECC_INTENSET_Type;


#define RAMECC_INTENSET_OFFSET 0x1
#define RAMECC_INTENSET_RESETVALUE _U_(0x00)

#define RAMECC_INTENSET_SINGLEE_Pos 0
#define RAMECC_INTENSET_SINGLEE (_U_(0x1) << RAMECC_INTENSET_SINGLEE_Pos)
#define RAMECC_INTENSET_DUALE_Pos 1
#define RAMECC_INTENSET_DUALE (_U_(0x1) << RAMECC_INTENSET_DUALE_Pos)
#define RAMECC_INTENSET_MASK _U_(0x03)



typedef union {
  struct {
    volatile const uint8_t SINGLEE:1;
    volatile const uint8_t DUALE:1;
    volatile const uint8_t :6;
  } bit;
  uint8_t reg;
} RAMECC_INTFLAG_Type;


#define RAMECC_INTFLAG_OFFSET 0x2
#define RAMECC_INTFLAG_RESETVALUE _U_(0x00)

#define RAMECC_INTFLAG_SINGLEE_Pos 0
#define RAMECC_INTFLAG_SINGLEE (_U_(0x1) << RAMECC_INTFLAG_SINGLEE_Pos)
#define RAMECC_INTFLAG_DUALE_Pos 1
#define RAMECC_INTFLAG_DUALE (_U_(0x1) << RAMECC_INTFLAG_DUALE_Pos)
#define RAMECC_INTFLAG_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t ECCDIS:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} RAMECC_STATUS_Type;


#define RAMECC_STATUS_OFFSET 0x3
#define RAMECC_STATUS_RESETVALUE _U_(0x00)

#define RAMECC_STATUS_ECCDIS_Pos 0
#define RAMECC_STATUS_ECCDIS (_U_(0x1) << RAMECC_STATUS_ECCDIS_Pos)
#define RAMECC_STATUS_MASK _U_(0x01)



typedef union {
  struct {
    uint32_t ERRADDR:17;
    uint32_t :15;
  } bit;
  uint32_t reg;
} RAMECC_ERRADDR_Type;


#define RAMECC_ERRADDR_OFFSET 0x4
#define RAMECC_ERRADDR_RESETVALUE _U_(0x00000000)

#define RAMECC_ERRADDR_ERRADDR_Pos 0
#define RAMECC_ERRADDR_ERRADDR_Msk (_U_(0x1FFFF) << RAMECC_ERRADDR_ERRADDR_Pos)
#define RAMECC_ERRADDR_ERRADDR(value) (RAMECC_ERRADDR_ERRADDR_Msk & ((value) << RAMECC_ERRADDR_ERRADDR_Pos))
#define RAMECC_ERRADDR_MASK _U_(0x0001FFFF)



typedef union {
  struct {
    uint8_t ECCDIS:1;
    uint8_t ECCELOG:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} RAMECC_DBGCTRL_Type;


#define RAMECC_DBGCTRL_OFFSET 0xF
#define RAMECC_DBGCTRL_RESETVALUE _U_(0x00)

#define RAMECC_DBGCTRL_ECCDIS_Pos 0
#define RAMECC_DBGCTRL_ECCDIS (_U_(0x1) << RAMECC_DBGCTRL_ECCDIS_Pos)
#define RAMECC_DBGCTRL_ECCELOG_Pos 1
#define RAMECC_DBGCTRL_ECCELOG (_U_(0x1) << RAMECC_DBGCTRL_ECCELOG_Pos)
#define RAMECC_DBGCTRL_MASK _U_(0x03)



typedef struct {
  volatile RAMECC_INTENCLR_Type INTENCLR;
  volatile RAMECC_INTENSET_Type INTENSET;
  volatile RAMECC_INTFLAG_Type INTFLAG;
  volatile const RAMECC_STATUS_Type STATUS;
  volatile const RAMECC_ERRADDR_Type ERRADDR;
       RoReg8 Reserved1[0x7];
  volatile RAMECC_DBGCTRL_Type DBGCTRL;
} Ramecc;
# 607 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/rstc.h" 1
# 31 "asf4/samd51/include/component/rstc.h"
#define _SAMD51_RSTC_COMPONENT_ 







#define RSTC_U2239 
#define REV_RSTC 0x400



typedef union {
  struct {
    uint8_t POR:1;
    uint8_t BODCORE:1;
    uint8_t BODVDD:1;
    uint8_t NVM:1;
    uint8_t EXT:1;
    uint8_t WDT:1;
    uint8_t SYST:1;
    uint8_t BACKUP:1;
  } bit;
  uint8_t reg;
} RSTC_RCAUSE_Type;


#define RSTC_RCAUSE_OFFSET 0x00

#define RSTC_RCAUSE_POR_Pos 0
#define RSTC_RCAUSE_POR (_U_(0x1) << RSTC_RCAUSE_POR_Pos)
#define RSTC_RCAUSE_BODCORE_Pos 1
#define RSTC_RCAUSE_BODCORE (_U_(0x1) << RSTC_RCAUSE_BODCORE_Pos)
#define RSTC_RCAUSE_BODVDD_Pos 2
#define RSTC_RCAUSE_BODVDD (_U_(0x1) << RSTC_RCAUSE_BODVDD_Pos)
#define RSTC_RCAUSE_NVM_Pos 3
#define RSTC_RCAUSE_NVM (_U_(0x1) << RSTC_RCAUSE_NVM_Pos)
#define RSTC_RCAUSE_EXT_Pos 4
#define RSTC_RCAUSE_EXT (_U_(0x1) << RSTC_RCAUSE_EXT_Pos)
#define RSTC_RCAUSE_WDT_Pos 5
#define RSTC_RCAUSE_WDT (_U_(0x1) << RSTC_RCAUSE_WDT_Pos)
#define RSTC_RCAUSE_SYST_Pos 6
#define RSTC_RCAUSE_SYST (_U_(0x1) << RSTC_RCAUSE_SYST_Pos)
#define RSTC_RCAUSE_BACKUP_Pos 7
#define RSTC_RCAUSE_BACKUP (_U_(0x1) << RSTC_RCAUSE_BACKUP_Pos)
#define RSTC_RCAUSE_MASK _U_(0xFF)



typedef union {
  struct {
    uint8_t :1;
    uint8_t RTC:1;
    uint8_t BBPS:1;
    uint8_t :4;
    uint8_t HIB:1;
  } bit;
  uint8_t reg;
} RSTC_BKUPEXIT_Type;


#define RSTC_BKUPEXIT_OFFSET 0x02
#define RSTC_BKUPEXIT_RESETVALUE _U_(0x00)

#define RSTC_BKUPEXIT_RTC_Pos 1
#define RSTC_BKUPEXIT_RTC (_U_(0x1) << RSTC_BKUPEXIT_RTC_Pos)
#define RSTC_BKUPEXIT_BBPS_Pos 2
#define RSTC_BKUPEXIT_BBPS (_U_(0x1) << RSTC_BKUPEXIT_BBPS_Pos)
#define RSTC_BKUPEXIT_HIB_Pos 7
#define RSTC_BKUPEXIT_HIB (_U_(0x1) << RSTC_BKUPEXIT_HIB_Pos)
#define RSTC_BKUPEXIT_MASK _U_(0x86)



typedef struct {
  volatile const RSTC_RCAUSE_Type RCAUSE;
       RoReg8 Reserved1[0x1];
  volatile const RSTC_BKUPEXIT_Type BKUPEXIT;
} Rstc;
# 608 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/rtc.h" 1
# 31 "asf4/samd51/include/component/rtc.h"
#define _SAMD51_RTC_COMPONENT_ 







#define RTC_U2250 
#define REV_RTC 0x210



typedef union {
  struct {
    uint16_t SWRST:1;
    uint16_t ENABLE:1;
    uint16_t MODE:2;
    uint16_t :3;
    uint16_t MATCHCLR:1;
    uint16_t PRESCALER:4;
    uint16_t :1;
    uint16_t BKTRST:1;
    uint16_t GPTRST:1;
    uint16_t COUNTSYNC:1;
  } bit;
  uint16_t reg;
} RTC_MODE0_CTRLA_Type;


#define RTC_MODE0_CTRLA_OFFSET 0x00
#define RTC_MODE0_CTRLA_RESETVALUE _U_(0x0000)

#define RTC_MODE0_CTRLA_SWRST_Pos 0
#define RTC_MODE0_CTRLA_SWRST (_U_(0x1) << RTC_MODE0_CTRLA_SWRST_Pos)
#define RTC_MODE0_CTRLA_ENABLE_Pos 1
#define RTC_MODE0_CTRLA_ENABLE (_U_(0x1) << RTC_MODE0_CTRLA_ENABLE_Pos)
#define RTC_MODE0_CTRLA_MODE_Pos 2
#define RTC_MODE0_CTRLA_MODE_Msk (_U_(0x3) << RTC_MODE0_CTRLA_MODE_Pos)
#define RTC_MODE0_CTRLA_MODE(value) (RTC_MODE0_CTRLA_MODE_Msk & ((value) << RTC_MODE0_CTRLA_MODE_Pos))
#define RTC_MODE0_CTRLA_MODE_COUNT32_Val _U_(0x0)
#define RTC_MODE0_CTRLA_MODE_COUNT16_Val _U_(0x1)
#define RTC_MODE0_CTRLA_MODE_CLOCK_Val _U_(0x2)
#define RTC_MODE0_CTRLA_MODE_COUNT32 (RTC_MODE0_CTRLA_MODE_COUNT32_Val << RTC_MODE0_CTRLA_MODE_Pos)
#define RTC_MODE0_CTRLA_MODE_COUNT16 (RTC_MODE0_CTRLA_MODE_COUNT16_Val << RTC_MODE0_CTRLA_MODE_Pos)
#define RTC_MODE0_CTRLA_MODE_CLOCK (RTC_MODE0_CTRLA_MODE_CLOCK_Val << RTC_MODE0_CTRLA_MODE_Pos)
#define RTC_MODE0_CTRLA_MATCHCLR_Pos 7
#define RTC_MODE0_CTRLA_MATCHCLR (_U_(0x1) << RTC_MODE0_CTRLA_MATCHCLR_Pos)
#define RTC_MODE0_CTRLA_PRESCALER_Pos 8
#define RTC_MODE0_CTRLA_PRESCALER_Msk (_U_(0xF) << RTC_MODE0_CTRLA_PRESCALER_Pos)
#define RTC_MODE0_CTRLA_PRESCALER(value) (RTC_MODE0_CTRLA_PRESCALER_Msk & ((value) << RTC_MODE0_CTRLA_PRESCALER_Pos))
#define RTC_MODE0_CTRLA_PRESCALER_OFF_Val _U_(0x0)
#define RTC_MODE0_CTRLA_PRESCALER_DIV1_Val _U_(0x1)
#define RTC_MODE0_CTRLA_PRESCALER_DIV2_Val _U_(0x2)
#define RTC_MODE0_CTRLA_PRESCALER_DIV4_Val _U_(0x3)
#define RTC_MODE0_CTRLA_PRESCALER_DIV8_Val _U_(0x4)
#define RTC_MODE0_CTRLA_PRESCALER_DIV16_Val _U_(0x5)
#define RTC_MODE0_CTRLA_PRESCALER_DIV32_Val _U_(0x6)
#define RTC_MODE0_CTRLA_PRESCALER_DIV64_Val _U_(0x7)
#define RTC_MODE0_CTRLA_PRESCALER_DIV128_Val _U_(0x8)
#define RTC_MODE0_CTRLA_PRESCALER_DIV256_Val _U_(0x9)
#define RTC_MODE0_CTRLA_PRESCALER_DIV512_Val _U_(0xA)
#define RTC_MODE0_CTRLA_PRESCALER_DIV1024_Val _U_(0xB)
#define RTC_MODE0_CTRLA_PRESCALER_OFF (RTC_MODE0_CTRLA_PRESCALER_OFF_Val << RTC_MODE0_CTRLA_PRESCALER_Pos)
#define RTC_MODE0_CTRLA_PRESCALER_DIV1 (RTC_MODE0_CTRLA_PRESCALER_DIV1_Val << RTC_MODE0_CTRLA_PRESCALER_Pos)
#define RTC_MODE0_CTRLA_PRESCALER_DIV2 (RTC_MODE0_CTRLA_PRESCALER_DIV2_Val << RTC_MODE0_CTRLA_PRESCALER_Pos)
#define RTC_MODE0_CTRLA_PRESCALER_DIV4 (RTC_MODE0_CTRLA_PRESCALER_DIV4_Val << RTC_MODE0_CTRLA_PRESCALER_Pos)
#define RTC_MODE0_CTRLA_PRESCALER_DIV8 (RTC_MODE0_CTRLA_PRESCALER_DIV8_Val << RTC_MODE0_CTRLA_PRESCALER_Pos)
#define RTC_MODE0_CTRLA_PRESCALER_DIV16 (RTC_MODE0_CTRLA_PRESCALER_DIV16_Val << RTC_MODE0_CTRLA_PRESCALER_Pos)
#define RTC_MODE0_CTRLA_PRESCALER_DIV32 (RTC_MODE0_CTRLA_PRESCALER_DIV32_Val << RTC_MODE0_CTRLA_PRESCALER_Pos)
#define RTC_MODE0_CTRLA_PRESCALER_DIV64 (RTC_MODE0_CTRLA_PRESCALER_DIV64_Val << RTC_MODE0_CTRLA_PRESCALER_Pos)
#define RTC_MODE0_CTRLA_PRESCALER_DIV128 (RTC_MODE0_CTRLA_PRESCALER_DIV128_Val << RTC_MODE0_CTRLA_PRESCALER_Pos)
#define RTC_MODE0_CTRLA_PRESCALER_DIV256 (RTC_MODE0_CTRLA_PRESCALER_DIV256_Val << RTC_MODE0_CTRLA_PRESCALER_Pos)
#define RTC_MODE0_CTRLA_PRESCALER_DIV512 (RTC_MODE0_CTRLA_PRESCALER_DIV512_Val << RTC_MODE0_CTRLA_PRESCALER_Pos)
#define RTC_MODE0_CTRLA_PRESCALER_DIV1024 (RTC_MODE0_CTRLA_PRESCALER_DIV1024_Val << RTC_MODE0_CTRLA_PRESCALER_Pos)
#define RTC_MODE0_CTRLA_BKTRST_Pos 13
#define RTC_MODE0_CTRLA_BKTRST (_U_(0x1) << RTC_MODE0_CTRLA_BKTRST_Pos)
#define RTC_MODE0_CTRLA_GPTRST_Pos 14
#define RTC_MODE0_CTRLA_GPTRST (_U_(0x1) << RTC_MODE0_CTRLA_GPTRST_Pos)
#define RTC_MODE0_CTRLA_COUNTSYNC_Pos 15
#define RTC_MODE0_CTRLA_COUNTSYNC (_U_(0x1) << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
#define RTC_MODE0_CTRLA_MASK _U_(0xEF8F)



typedef union {
  struct {
    uint16_t SWRST:1;
    uint16_t ENABLE:1;
    uint16_t MODE:2;
    uint16_t :4;
    uint16_t PRESCALER:4;
    uint16_t :1;
    uint16_t BKTRST:1;
    uint16_t GPTRST:1;
    uint16_t COUNTSYNC:1;
  } bit;
  uint16_t reg;
} RTC_MODE1_CTRLA_Type;


#define RTC_MODE1_CTRLA_OFFSET 0x00
#define RTC_MODE1_CTRLA_RESETVALUE _U_(0x0000)

#define RTC_MODE1_CTRLA_SWRST_Pos 0
#define RTC_MODE1_CTRLA_SWRST (_U_(0x1) << RTC_MODE1_CTRLA_SWRST_Pos)
#define RTC_MODE1_CTRLA_ENABLE_Pos 1
#define RTC_MODE1_CTRLA_ENABLE (_U_(0x1) << RTC_MODE1_CTRLA_ENABLE_Pos)
#define RTC_MODE1_CTRLA_MODE_Pos 2
#define RTC_MODE1_CTRLA_MODE_Msk (_U_(0x3) << RTC_MODE1_CTRLA_MODE_Pos)
#define RTC_MODE1_CTRLA_MODE(value) (RTC_MODE1_CTRLA_MODE_Msk & ((value) << RTC_MODE1_CTRLA_MODE_Pos))
#define RTC_MODE1_CTRLA_MODE_COUNT32_Val _U_(0x0)
#define RTC_MODE1_CTRLA_MODE_COUNT16_Val _U_(0x1)
#define RTC_MODE1_CTRLA_MODE_CLOCK_Val _U_(0x2)
#define RTC_MODE1_CTRLA_MODE_COUNT32 (RTC_MODE1_CTRLA_MODE_COUNT32_Val << RTC_MODE1_CTRLA_MODE_Pos)
#define RTC_MODE1_CTRLA_MODE_COUNT16 (RTC_MODE1_CTRLA_MODE_COUNT16_Val << RTC_MODE1_CTRLA_MODE_Pos)
#define RTC_MODE1_CTRLA_MODE_CLOCK (RTC_MODE1_CTRLA_MODE_CLOCK_Val << RTC_MODE1_CTRLA_MODE_Pos)
#define RTC_MODE1_CTRLA_PRESCALER_Pos 8
#define RTC_MODE1_CTRLA_PRESCALER_Msk (_U_(0xF) << RTC_MODE1_CTRLA_PRESCALER_Pos)
#define RTC_MODE1_CTRLA_PRESCALER(value) (RTC_MODE1_CTRLA_PRESCALER_Msk & ((value) << RTC_MODE1_CTRLA_PRESCALER_Pos))
#define RTC_MODE1_CTRLA_PRESCALER_OFF_Val _U_(0x0)
#define RTC_MODE1_CTRLA_PRESCALER_DIV1_Val _U_(0x1)
#define RTC_MODE1_CTRLA_PRESCALER_DIV2_Val _U_(0x2)
#define RTC_MODE1_CTRLA_PRESCALER_DIV4_Val _U_(0x3)
#define RTC_MODE1_CTRLA_PRESCALER_DIV8_Val _U_(0x4)
#define RTC_MODE1_CTRLA_PRESCALER_DIV16_Val _U_(0x5)
#define RTC_MODE1_CTRLA_PRESCALER_DIV32_Val _U_(0x6)
#define RTC_MODE1_CTRLA_PRESCALER_DIV64_Val _U_(0x7)
#define RTC_MODE1_CTRLA_PRESCALER_DIV128_Val _U_(0x8)
#define RTC_MODE1_CTRLA_PRESCALER_DIV256_Val _U_(0x9)
#define RTC_MODE1_CTRLA_PRESCALER_DIV512_Val _U_(0xA)
#define RTC_MODE1_CTRLA_PRESCALER_DIV1024_Val _U_(0xB)
#define RTC_MODE1_CTRLA_PRESCALER_OFF (RTC_MODE1_CTRLA_PRESCALER_OFF_Val << RTC_MODE1_CTRLA_PRESCALER_Pos)
#define RTC_MODE1_CTRLA_PRESCALER_DIV1 (RTC_MODE1_CTRLA_PRESCALER_DIV1_Val << RTC_MODE1_CTRLA_PRESCALER_Pos)
#define RTC_MODE1_CTRLA_PRESCALER_DIV2 (RTC_MODE1_CTRLA_PRESCALER_DIV2_Val << RTC_MODE1_CTRLA_PRESCALER_Pos)
#define RTC_MODE1_CTRLA_PRESCALER_DIV4 (RTC_MODE1_CTRLA_PRESCALER_DIV4_Val << RTC_MODE1_CTRLA_PRESCALER_Pos)
#define RTC_MODE1_CTRLA_PRESCALER_DIV8 (RTC_MODE1_CTRLA_PRESCALER_DIV8_Val << RTC_MODE1_CTRLA_PRESCALER_Pos)
#define RTC_MODE1_CTRLA_PRESCALER_DIV16 (RTC_MODE1_CTRLA_PRESCALER_DIV16_Val << RTC_MODE1_CTRLA_PRESCALER_Pos)
#define RTC_MODE1_CTRLA_PRESCALER_DIV32 (RTC_MODE1_CTRLA_PRESCALER_DIV32_Val << RTC_MODE1_CTRLA_PRESCALER_Pos)
#define RTC_MODE1_CTRLA_PRESCALER_DIV64 (RTC_MODE1_CTRLA_PRESCALER_DIV64_Val << RTC_MODE1_CTRLA_PRESCALER_Pos)
#define RTC_MODE1_CTRLA_PRESCALER_DIV128 (RTC_MODE1_CTRLA_PRESCALER_DIV128_Val << RTC_MODE1_CTRLA_PRESCALER_Pos)
#define RTC_MODE1_CTRLA_PRESCALER_DIV256 (RTC_MODE1_CTRLA_PRESCALER_DIV256_Val << RTC_MODE1_CTRLA_PRESCALER_Pos)
#define RTC_MODE1_CTRLA_PRESCALER_DIV512 (RTC_MODE1_CTRLA_PRESCALER_DIV512_Val << RTC_MODE1_CTRLA_PRESCALER_Pos)
#define RTC_MODE1_CTRLA_PRESCALER_DIV1024 (RTC_MODE1_CTRLA_PRESCALER_DIV1024_Val << RTC_MODE1_CTRLA_PRESCALER_Pos)
#define RTC_MODE1_CTRLA_BKTRST_Pos 13
#define RTC_MODE1_CTRLA_BKTRST (_U_(0x1) << RTC_MODE1_CTRLA_BKTRST_Pos)
#define RTC_MODE1_CTRLA_GPTRST_Pos 14
#define RTC_MODE1_CTRLA_GPTRST (_U_(0x1) << RTC_MODE1_CTRLA_GPTRST_Pos)
#define RTC_MODE1_CTRLA_COUNTSYNC_Pos 15
#define RTC_MODE1_CTRLA_COUNTSYNC (_U_(0x1) << RTC_MODE1_CTRLA_COUNTSYNC_Pos)
#define RTC_MODE1_CTRLA_MASK _U_(0xEF0F)



typedef union {
  struct {
    uint16_t SWRST:1;
    uint16_t ENABLE:1;
    uint16_t MODE:2;
    uint16_t :2;
    uint16_t CLKREP:1;
    uint16_t MATCHCLR:1;
    uint16_t PRESCALER:4;
    uint16_t :1;
    uint16_t BKTRST:1;
    uint16_t GPTRST:1;
    uint16_t CLOCKSYNC:1;
  } bit;
  uint16_t reg;
} RTC_MODE2_CTRLA_Type;


#define RTC_MODE2_CTRLA_OFFSET 0x00
#define RTC_MODE2_CTRLA_RESETVALUE _U_(0x0000)

#define RTC_MODE2_CTRLA_SWRST_Pos 0
#define RTC_MODE2_CTRLA_SWRST (_U_(0x1) << RTC_MODE2_CTRLA_SWRST_Pos)
#define RTC_MODE2_CTRLA_ENABLE_Pos 1
#define RTC_MODE2_CTRLA_ENABLE (_U_(0x1) << RTC_MODE2_CTRLA_ENABLE_Pos)
#define RTC_MODE2_CTRLA_MODE_Pos 2
#define RTC_MODE2_CTRLA_MODE_Msk (_U_(0x3) << RTC_MODE2_CTRLA_MODE_Pos)
#define RTC_MODE2_CTRLA_MODE(value) (RTC_MODE2_CTRLA_MODE_Msk & ((value) << RTC_MODE2_CTRLA_MODE_Pos))
#define RTC_MODE2_CTRLA_MODE_COUNT32_Val _U_(0x0)
#define RTC_MODE2_CTRLA_MODE_COUNT16_Val _U_(0x1)
#define RTC_MODE2_CTRLA_MODE_CLOCK_Val _U_(0x2)
#define RTC_MODE2_CTRLA_MODE_COUNT32 (RTC_MODE2_CTRLA_MODE_COUNT32_Val << RTC_MODE2_CTRLA_MODE_Pos)
#define RTC_MODE2_CTRLA_MODE_COUNT16 (RTC_MODE2_CTRLA_MODE_COUNT16_Val << RTC_MODE2_CTRLA_MODE_Pos)
#define RTC_MODE2_CTRLA_MODE_CLOCK (RTC_MODE2_CTRLA_MODE_CLOCK_Val << RTC_MODE2_CTRLA_MODE_Pos)
#define RTC_MODE2_CTRLA_CLKREP_Pos 6
#define RTC_MODE2_CTRLA_CLKREP (_U_(0x1) << RTC_MODE2_CTRLA_CLKREP_Pos)
#define RTC_MODE2_CTRLA_MATCHCLR_Pos 7
#define RTC_MODE2_CTRLA_MATCHCLR (_U_(0x1) << RTC_MODE2_CTRLA_MATCHCLR_Pos)
#define RTC_MODE2_CTRLA_PRESCALER_Pos 8
#define RTC_MODE2_CTRLA_PRESCALER_Msk (_U_(0xF) << RTC_MODE2_CTRLA_PRESCALER_Pos)
#define RTC_MODE2_CTRLA_PRESCALER(value) (RTC_MODE2_CTRLA_PRESCALER_Msk & ((value) << RTC_MODE2_CTRLA_PRESCALER_Pos))
#define RTC_MODE2_CTRLA_PRESCALER_OFF_Val _U_(0x0)
#define RTC_MODE2_CTRLA_PRESCALER_DIV1_Val _U_(0x1)
#define RTC_MODE2_CTRLA_PRESCALER_DIV2_Val _U_(0x2)
#define RTC_MODE2_CTRLA_PRESCALER_DIV4_Val _U_(0x3)
#define RTC_MODE2_CTRLA_PRESCALER_DIV8_Val _U_(0x4)
#define RTC_MODE2_CTRLA_PRESCALER_DIV16_Val _U_(0x5)
#define RTC_MODE2_CTRLA_PRESCALER_DIV32_Val _U_(0x6)
#define RTC_MODE2_CTRLA_PRESCALER_DIV64_Val _U_(0x7)
#define RTC_MODE2_CTRLA_PRESCALER_DIV128_Val _U_(0x8)
#define RTC_MODE2_CTRLA_PRESCALER_DIV256_Val _U_(0x9)
#define RTC_MODE2_CTRLA_PRESCALER_DIV512_Val _U_(0xA)
#define RTC_MODE2_CTRLA_PRESCALER_DIV1024_Val _U_(0xB)
#define RTC_MODE2_CTRLA_PRESCALER_OFF (RTC_MODE2_CTRLA_PRESCALER_OFF_Val << RTC_MODE2_CTRLA_PRESCALER_Pos)
#define RTC_MODE2_CTRLA_PRESCALER_DIV1 (RTC_MODE2_CTRLA_PRESCALER_DIV1_Val << RTC_MODE2_CTRLA_PRESCALER_Pos)
#define RTC_MODE2_CTRLA_PRESCALER_DIV2 (RTC_MODE2_CTRLA_PRESCALER_DIV2_Val << RTC_MODE2_CTRLA_PRESCALER_Pos)
#define RTC_MODE2_CTRLA_PRESCALER_DIV4 (RTC_MODE2_CTRLA_PRESCALER_DIV4_Val << RTC_MODE2_CTRLA_PRESCALER_Pos)
#define RTC_MODE2_CTRLA_PRESCALER_DIV8 (RTC_MODE2_CTRLA_PRESCALER_DIV8_Val << RTC_MODE2_CTRLA_PRESCALER_Pos)
#define RTC_MODE2_CTRLA_PRESCALER_DIV16 (RTC_MODE2_CTRLA_PRESCALER_DIV16_Val << RTC_MODE2_CTRLA_PRESCALER_Pos)
#define RTC_MODE2_CTRLA_PRESCALER_DIV32 (RTC_MODE2_CTRLA_PRESCALER_DIV32_Val << RTC_MODE2_CTRLA_PRESCALER_Pos)
#define RTC_MODE2_CTRLA_PRESCALER_DIV64 (RTC_MODE2_CTRLA_PRESCALER_DIV64_Val << RTC_MODE2_CTRLA_PRESCALER_Pos)
#define RTC_MODE2_CTRLA_PRESCALER_DIV128 (RTC_MODE2_CTRLA_PRESCALER_DIV128_Val << RTC_MODE2_CTRLA_PRESCALER_Pos)
#define RTC_MODE2_CTRLA_PRESCALER_DIV256 (RTC_MODE2_CTRLA_PRESCALER_DIV256_Val << RTC_MODE2_CTRLA_PRESCALER_Pos)
#define RTC_MODE2_CTRLA_PRESCALER_DIV512 (RTC_MODE2_CTRLA_PRESCALER_DIV512_Val << RTC_MODE2_CTRLA_PRESCALER_Pos)
#define RTC_MODE2_CTRLA_PRESCALER_DIV1024 (RTC_MODE2_CTRLA_PRESCALER_DIV1024_Val << RTC_MODE2_CTRLA_PRESCALER_Pos)
#define RTC_MODE2_CTRLA_BKTRST_Pos 13
#define RTC_MODE2_CTRLA_BKTRST (_U_(0x1) << RTC_MODE2_CTRLA_BKTRST_Pos)
#define RTC_MODE2_CTRLA_GPTRST_Pos 14
#define RTC_MODE2_CTRLA_GPTRST (_U_(0x1) << RTC_MODE2_CTRLA_GPTRST_Pos)
#define RTC_MODE2_CTRLA_CLOCKSYNC_Pos 15
#define RTC_MODE2_CTRLA_CLOCKSYNC (_U_(0x1) << RTC_MODE2_CTRLA_CLOCKSYNC_Pos)
#define RTC_MODE2_CTRLA_MASK _U_(0xEFCF)



typedef union {
  struct {
    uint16_t GP0EN:1;
    uint16_t GP2EN:1;
    uint16_t :2;
    uint16_t DEBMAJ:1;
    uint16_t DEBASYNC:1;
    uint16_t RTCOUT:1;
    uint16_t DMAEN:1;
    uint16_t DEBF:3;
    uint16_t :1;
    uint16_t ACTF:3;
    uint16_t :1;
  } bit;
  uint16_t reg;
} RTC_MODE0_CTRLB_Type;


#define RTC_MODE0_CTRLB_OFFSET 0x02
#define RTC_MODE0_CTRLB_RESETVALUE _U_(0x0000)

#define RTC_MODE0_CTRLB_GP0EN_Pos 0
#define RTC_MODE0_CTRLB_GP0EN (_U_(0x1) << RTC_MODE0_CTRLB_GP0EN_Pos)
#define RTC_MODE0_CTRLB_GP2EN_Pos 1
#define RTC_MODE0_CTRLB_GP2EN (_U_(0x1) << RTC_MODE0_CTRLB_GP2EN_Pos)
#define RTC_MODE0_CTRLB_DEBMAJ_Pos 4
#define RTC_MODE0_CTRLB_DEBMAJ (_U_(0x1) << RTC_MODE0_CTRLB_DEBMAJ_Pos)
#define RTC_MODE0_CTRLB_DEBASYNC_Pos 5
#define RTC_MODE0_CTRLB_DEBASYNC (_U_(0x1) << RTC_MODE0_CTRLB_DEBASYNC_Pos)
#define RTC_MODE0_CTRLB_RTCOUT_Pos 6
#define RTC_MODE0_CTRLB_RTCOUT (_U_(0x1) << RTC_MODE0_CTRLB_RTCOUT_Pos)
#define RTC_MODE0_CTRLB_DMAEN_Pos 7
#define RTC_MODE0_CTRLB_DMAEN (_U_(0x1) << RTC_MODE0_CTRLB_DMAEN_Pos)
#define RTC_MODE0_CTRLB_DEBF_Pos 8
#define RTC_MODE0_CTRLB_DEBF_Msk (_U_(0x7) << RTC_MODE0_CTRLB_DEBF_Pos)
#define RTC_MODE0_CTRLB_DEBF(value) (RTC_MODE0_CTRLB_DEBF_Msk & ((value) << RTC_MODE0_CTRLB_DEBF_Pos))
#define RTC_MODE0_CTRLB_DEBF_DIV2_Val _U_(0x0)
#define RTC_MODE0_CTRLB_DEBF_DIV4_Val _U_(0x1)
#define RTC_MODE0_CTRLB_DEBF_DIV8_Val _U_(0x2)
#define RTC_MODE0_CTRLB_DEBF_DIV16_Val _U_(0x3)
#define RTC_MODE0_CTRLB_DEBF_DIV32_Val _U_(0x4)
#define RTC_MODE0_CTRLB_DEBF_DIV64_Val _U_(0x5)
#define RTC_MODE0_CTRLB_DEBF_DIV128_Val _U_(0x6)
#define RTC_MODE0_CTRLB_DEBF_DIV256_Val _U_(0x7)
#define RTC_MODE0_CTRLB_DEBF_DIV2 (RTC_MODE0_CTRLB_DEBF_DIV2_Val << RTC_MODE0_CTRLB_DEBF_Pos)
#define RTC_MODE0_CTRLB_DEBF_DIV4 (RTC_MODE0_CTRLB_DEBF_DIV4_Val << RTC_MODE0_CTRLB_DEBF_Pos)
#define RTC_MODE0_CTRLB_DEBF_DIV8 (RTC_MODE0_CTRLB_DEBF_DIV8_Val << RTC_MODE0_CTRLB_DEBF_Pos)
#define RTC_MODE0_CTRLB_DEBF_DIV16 (RTC_MODE0_CTRLB_DEBF_DIV16_Val << RTC_MODE0_CTRLB_DEBF_Pos)
#define RTC_MODE0_CTRLB_DEBF_DIV32 (RTC_MODE0_CTRLB_DEBF_DIV32_Val << RTC_MODE0_CTRLB_DEBF_Pos)
#define RTC_MODE0_CTRLB_DEBF_DIV64 (RTC_MODE0_CTRLB_DEBF_DIV64_Val << RTC_MODE0_CTRLB_DEBF_Pos)
#define RTC_MODE0_CTRLB_DEBF_DIV128 (RTC_MODE0_CTRLB_DEBF_DIV128_Val << RTC_MODE0_CTRLB_DEBF_Pos)
#define RTC_MODE0_CTRLB_DEBF_DIV256 (RTC_MODE0_CTRLB_DEBF_DIV256_Val << RTC_MODE0_CTRLB_DEBF_Pos)
#define RTC_MODE0_CTRLB_ACTF_Pos 12
#define RTC_MODE0_CTRLB_ACTF_Msk (_U_(0x7) << RTC_MODE0_CTRLB_ACTF_Pos)
#define RTC_MODE0_CTRLB_ACTF(value) (RTC_MODE0_CTRLB_ACTF_Msk & ((value) << RTC_MODE0_CTRLB_ACTF_Pos))
#define RTC_MODE0_CTRLB_ACTF_DIV2_Val _U_(0x0)
#define RTC_MODE0_CTRLB_ACTF_DIV4_Val _U_(0x1)
#define RTC_MODE0_CTRLB_ACTF_DIV8_Val _U_(0x2)
#define RTC_MODE0_CTRLB_ACTF_DIV16_Val _U_(0x3)
#define RTC_MODE0_CTRLB_ACTF_DIV32_Val _U_(0x4)
#define RTC_MODE0_CTRLB_ACTF_DIV64_Val _U_(0x5)
#define RTC_MODE0_CTRLB_ACTF_DIV128_Val _U_(0x6)
#define RTC_MODE0_CTRLB_ACTF_DIV256_Val _U_(0x7)
#define RTC_MODE0_CTRLB_ACTF_DIV2 (RTC_MODE0_CTRLB_ACTF_DIV2_Val << RTC_MODE0_CTRLB_ACTF_Pos)
#define RTC_MODE0_CTRLB_ACTF_DIV4 (RTC_MODE0_CTRLB_ACTF_DIV4_Val << RTC_MODE0_CTRLB_ACTF_Pos)
#define RTC_MODE0_CTRLB_ACTF_DIV8 (RTC_MODE0_CTRLB_ACTF_DIV8_Val << RTC_MODE0_CTRLB_ACTF_Pos)
#define RTC_MODE0_CTRLB_ACTF_DIV16 (RTC_MODE0_CTRLB_ACTF_DIV16_Val << RTC_MODE0_CTRLB_ACTF_Pos)
#define RTC_MODE0_CTRLB_ACTF_DIV32 (RTC_MODE0_CTRLB_ACTF_DIV32_Val << RTC_MODE0_CTRLB_ACTF_Pos)
#define RTC_MODE0_CTRLB_ACTF_DIV64 (RTC_MODE0_CTRLB_ACTF_DIV64_Val << RTC_MODE0_CTRLB_ACTF_Pos)
#define RTC_MODE0_CTRLB_ACTF_DIV128 (RTC_MODE0_CTRLB_ACTF_DIV128_Val << RTC_MODE0_CTRLB_ACTF_Pos)
#define RTC_MODE0_CTRLB_ACTF_DIV256 (RTC_MODE0_CTRLB_ACTF_DIV256_Val << RTC_MODE0_CTRLB_ACTF_Pos)
#define RTC_MODE0_CTRLB_MASK _U_(0x77F3)



typedef union {
  struct {
    uint16_t GP0EN:1;
    uint16_t GP2EN:1;
    uint16_t :2;
    uint16_t DEBMAJ:1;
    uint16_t DEBASYNC:1;
    uint16_t RTCOUT:1;
    uint16_t DMAEN:1;
    uint16_t DEBF:3;
    uint16_t :1;
    uint16_t ACTF:3;
    uint16_t :1;
  } bit;
  uint16_t reg;
} RTC_MODE1_CTRLB_Type;


#define RTC_MODE1_CTRLB_OFFSET 0x02
#define RTC_MODE1_CTRLB_RESETVALUE _U_(0x0000)

#define RTC_MODE1_CTRLB_GP0EN_Pos 0
#define RTC_MODE1_CTRLB_GP0EN (_U_(0x1) << RTC_MODE1_CTRLB_GP0EN_Pos)
#define RTC_MODE1_CTRLB_GP2EN_Pos 1
#define RTC_MODE1_CTRLB_GP2EN (_U_(0x1) << RTC_MODE1_CTRLB_GP2EN_Pos)
#define RTC_MODE1_CTRLB_DEBMAJ_Pos 4
#define RTC_MODE1_CTRLB_DEBMAJ (_U_(0x1) << RTC_MODE1_CTRLB_DEBMAJ_Pos)
#define RTC_MODE1_CTRLB_DEBASYNC_Pos 5
#define RTC_MODE1_CTRLB_DEBASYNC (_U_(0x1) << RTC_MODE1_CTRLB_DEBASYNC_Pos)
#define RTC_MODE1_CTRLB_RTCOUT_Pos 6
#define RTC_MODE1_CTRLB_RTCOUT (_U_(0x1) << RTC_MODE1_CTRLB_RTCOUT_Pos)
#define RTC_MODE1_CTRLB_DMAEN_Pos 7
#define RTC_MODE1_CTRLB_DMAEN (_U_(0x1) << RTC_MODE1_CTRLB_DMAEN_Pos)
#define RTC_MODE1_CTRLB_DEBF_Pos 8
#define RTC_MODE1_CTRLB_DEBF_Msk (_U_(0x7) << RTC_MODE1_CTRLB_DEBF_Pos)
#define RTC_MODE1_CTRLB_DEBF(value) (RTC_MODE1_CTRLB_DEBF_Msk & ((value) << RTC_MODE1_CTRLB_DEBF_Pos))
#define RTC_MODE1_CTRLB_DEBF_DIV2_Val _U_(0x0)
#define RTC_MODE1_CTRLB_DEBF_DIV4_Val _U_(0x1)
#define RTC_MODE1_CTRLB_DEBF_DIV8_Val _U_(0x2)
#define RTC_MODE1_CTRLB_DEBF_DIV16_Val _U_(0x3)
#define RTC_MODE1_CTRLB_DEBF_DIV32_Val _U_(0x4)
#define RTC_MODE1_CTRLB_DEBF_DIV64_Val _U_(0x5)
#define RTC_MODE1_CTRLB_DEBF_DIV128_Val _U_(0x6)
#define RTC_MODE1_CTRLB_DEBF_DIV256_Val _U_(0x7)
#define RTC_MODE1_CTRLB_DEBF_DIV2 (RTC_MODE1_CTRLB_DEBF_DIV2_Val << RTC_MODE1_CTRLB_DEBF_Pos)
#define RTC_MODE1_CTRLB_DEBF_DIV4 (RTC_MODE1_CTRLB_DEBF_DIV4_Val << RTC_MODE1_CTRLB_DEBF_Pos)
#define RTC_MODE1_CTRLB_DEBF_DIV8 (RTC_MODE1_CTRLB_DEBF_DIV8_Val << RTC_MODE1_CTRLB_DEBF_Pos)
#define RTC_MODE1_CTRLB_DEBF_DIV16 (RTC_MODE1_CTRLB_DEBF_DIV16_Val << RTC_MODE1_CTRLB_DEBF_Pos)
#define RTC_MODE1_CTRLB_DEBF_DIV32 (RTC_MODE1_CTRLB_DEBF_DIV32_Val << RTC_MODE1_CTRLB_DEBF_Pos)
#define RTC_MODE1_CTRLB_DEBF_DIV64 (RTC_MODE1_CTRLB_DEBF_DIV64_Val << RTC_MODE1_CTRLB_DEBF_Pos)
#define RTC_MODE1_CTRLB_DEBF_DIV128 (RTC_MODE1_CTRLB_DEBF_DIV128_Val << RTC_MODE1_CTRLB_DEBF_Pos)
#define RTC_MODE1_CTRLB_DEBF_DIV256 (RTC_MODE1_CTRLB_DEBF_DIV256_Val << RTC_MODE1_CTRLB_DEBF_Pos)
#define RTC_MODE1_CTRLB_ACTF_Pos 12
#define RTC_MODE1_CTRLB_ACTF_Msk (_U_(0x7) << RTC_MODE1_CTRLB_ACTF_Pos)
#define RTC_MODE1_CTRLB_ACTF(value) (RTC_MODE1_CTRLB_ACTF_Msk & ((value) << RTC_MODE1_CTRLB_ACTF_Pos))
#define RTC_MODE1_CTRLB_ACTF_DIV2_Val _U_(0x0)
#define RTC_MODE1_CTRLB_ACTF_DIV4_Val _U_(0x1)
#define RTC_MODE1_CTRLB_ACTF_DIV8_Val _U_(0x2)
#define RTC_MODE1_CTRLB_ACTF_DIV16_Val _U_(0x3)
#define RTC_MODE1_CTRLB_ACTF_DIV32_Val _U_(0x4)
#define RTC_MODE1_CTRLB_ACTF_DIV64_Val _U_(0x5)
#define RTC_MODE1_CTRLB_ACTF_DIV128_Val _U_(0x6)
#define RTC_MODE1_CTRLB_ACTF_DIV256_Val _U_(0x7)
#define RTC_MODE1_CTRLB_ACTF_DIV2 (RTC_MODE1_CTRLB_ACTF_DIV2_Val << RTC_MODE1_CTRLB_ACTF_Pos)
#define RTC_MODE1_CTRLB_ACTF_DIV4 (RTC_MODE1_CTRLB_ACTF_DIV4_Val << RTC_MODE1_CTRLB_ACTF_Pos)
#define RTC_MODE1_CTRLB_ACTF_DIV8 (RTC_MODE1_CTRLB_ACTF_DIV8_Val << RTC_MODE1_CTRLB_ACTF_Pos)
#define RTC_MODE1_CTRLB_ACTF_DIV16 (RTC_MODE1_CTRLB_ACTF_DIV16_Val << RTC_MODE1_CTRLB_ACTF_Pos)
#define RTC_MODE1_CTRLB_ACTF_DIV32 (RTC_MODE1_CTRLB_ACTF_DIV32_Val << RTC_MODE1_CTRLB_ACTF_Pos)
#define RTC_MODE1_CTRLB_ACTF_DIV64 (RTC_MODE1_CTRLB_ACTF_DIV64_Val << RTC_MODE1_CTRLB_ACTF_Pos)
#define RTC_MODE1_CTRLB_ACTF_DIV128 (RTC_MODE1_CTRLB_ACTF_DIV128_Val << RTC_MODE1_CTRLB_ACTF_Pos)
#define RTC_MODE1_CTRLB_ACTF_DIV256 (RTC_MODE1_CTRLB_ACTF_DIV256_Val << RTC_MODE1_CTRLB_ACTF_Pos)
#define RTC_MODE1_CTRLB_MASK _U_(0x77F3)



typedef union {
  struct {
    uint16_t GP0EN:1;
    uint16_t GP2EN:1;
    uint16_t :2;
    uint16_t DEBMAJ:1;
    uint16_t DEBASYNC:1;
    uint16_t RTCOUT:1;
    uint16_t DMAEN:1;
    uint16_t DEBF:3;
    uint16_t :1;
    uint16_t ACTF:3;
    uint16_t :1;
  } bit;
  uint16_t reg;
} RTC_MODE2_CTRLB_Type;


#define RTC_MODE2_CTRLB_OFFSET 0x02
#define RTC_MODE2_CTRLB_RESETVALUE _U_(0x0000)

#define RTC_MODE2_CTRLB_GP0EN_Pos 0
#define RTC_MODE2_CTRLB_GP0EN (_U_(0x1) << RTC_MODE2_CTRLB_GP0EN_Pos)
#define RTC_MODE2_CTRLB_GP2EN_Pos 1
#define RTC_MODE2_CTRLB_GP2EN (_U_(0x1) << RTC_MODE2_CTRLB_GP2EN_Pos)
#define RTC_MODE2_CTRLB_DEBMAJ_Pos 4
#define RTC_MODE2_CTRLB_DEBMAJ (_U_(0x1) << RTC_MODE2_CTRLB_DEBMAJ_Pos)
#define RTC_MODE2_CTRLB_DEBASYNC_Pos 5
#define RTC_MODE2_CTRLB_DEBASYNC (_U_(0x1) << RTC_MODE2_CTRLB_DEBASYNC_Pos)
#define RTC_MODE2_CTRLB_RTCOUT_Pos 6
#define RTC_MODE2_CTRLB_RTCOUT (_U_(0x1) << RTC_MODE2_CTRLB_RTCOUT_Pos)
#define RTC_MODE2_CTRLB_DMAEN_Pos 7
#define RTC_MODE2_CTRLB_DMAEN (_U_(0x1) << RTC_MODE2_CTRLB_DMAEN_Pos)
#define RTC_MODE2_CTRLB_DEBF_Pos 8
#define RTC_MODE2_CTRLB_DEBF_Msk (_U_(0x7) << RTC_MODE2_CTRLB_DEBF_Pos)
#define RTC_MODE2_CTRLB_DEBF(value) (RTC_MODE2_CTRLB_DEBF_Msk & ((value) << RTC_MODE2_CTRLB_DEBF_Pos))
#define RTC_MODE2_CTRLB_DEBF_DIV2_Val _U_(0x0)
#define RTC_MODE2_CTRLB_DEBF_DIV4_Val _U_(0x1)
#define RTC_MODE2_CTRLB_DEBF_DIV8_Val _U_(0x2)
#define RTC_MODE2_CTRLB_DEBF_DIV16_Val _U_(0x3)
#define RTC_MODE2_CTRLB_DEBF_DIV32_Val _U_(0x4)
#define RTC_MODE2_CTRLB_DEBF_DIV64_Val _U_(0x5)
#define RTC_MODE2_CTRLB_DEBF_DIV128_Val _U_(0x6)
#define RTC_MODE2_CTRLB_DEBF_DIV256_Val _U_(0x7)
#define RTC_MODE2_CTRLB_DEBF_DIV2 (RTC_MODE2_CTRLB_DEBF_DIV2_Val << RTC_MODE2_CTRLB_DEBF_Pos)
#define RTC_MODE2_CTRLB_DEBF_DIV4 (RTC_MODE2_CTRLB_DEBF_DIV4_Val << RTC_MODE2_CTRLB_DEBF_Pos)
#define RTC_MODE2_CTRLB_DEBF_DIV8 (RTC_MODE2_CTRLB_DEBF_DIV8_Val << RTC_MODE2_CTRLB_DEBF_Pos)
#define RTC_MODE2_CTRLB_DEBF_DIV16 (RTC_MODE2_CTRLB_DEBF_DIV16_Val << RTC_MODE2_CTRLB_DEBF_Pos)
#define RTC_MODE2_CTRLB_DEBF_DIV32 (RTC_MODE2_CTRLB_DEBF_DIV32_Val << RTC_MODE2_CTRLB_DEBF_Pos)
#define RTC_MODE2_CTRLB_DEBF_DIV64 (RTC_MODE2_CTRLB_DEBF_DIV64_Val << RTC_MODE2_CTRLB_DEBF_Pos)
#define RTC_MODE2_CTRLB_DEBF_DIV128 (RTC_MODE2_CTRLB_DEBF_DIV128_Val << RTC_MODE2_CTRLB_DEBF_Pos)
#define RTC_MODE2_CTRLB_DEBF_DIV256 (RTC_MODE2_CTRLB_DEBF_DIV256_Val << RTC_MODE2_CTRLB_DEBF_Pos)
#define RTC_MODE2_CTRLB_ACTF_Pos 12
#define RTC_MODE2_CTRLB_ACTF_Msk (_U_(0x7) << RTC_MODE2_CTRLB_ACTF_Pos)
#define RTC_MODE2_CTRLB_ACTF(value) (RTC_MODE2_CTRLB_ACTF_Msk & ((value) << RTC_MODE2_CTRLB_ACTF_Pos))
#define RTC_MODE2_CTRLB_ACTF_DIV2_Val _U_(0x0)
#define RTC_MODE2_CTRLB_ACTF_DIV4_Val _U_(0x1)
#define RTC_MODE2_CTRLB_ACTF_DIV8_Val _U_(0x2)
#define RTC_MODE2_CTRLB_ACTF_DIV16_Val _U_(0x3)
#define RTC_MODE2_CTRLB_ACTF_DIV32_Val _U_(0x4)
#define RTC_MODE2_CTRLB_ACTF_DIV64_Val _U_(0x5)
#define RTC_MODE2_CTRLB_ACTF_DIV128_Val _U_(0x6)
#define RTC_MODE2_CTRLB_ACTF_DIV256_Val _U_(0x7)
#define RTC_MODE2_CTRLB_ACTF_DIV2 (RTC_MODE2_CTRLB_ACTF_DIV2_Val << RTC_MODE2_CTRLB_ACTF_Pos)
#define RTC_MODE2_CTRLB_ACTF_DIV4 (RTC_MODE2_CTRLB_ACTF_DIV4_Val << RTC_MODE2_CTRLB_ACTF_Pos)
#define RTC_MODE2_CTRLB_ACTF_DIV8 (RTC_MODE2_CTRLB_ACTF_DIV8_Val << RTC_MODE2_CTRLB_ACTF_Pos)
#define RTC_MODE2_CTRLB_ACTF_DIV16 (RTC_MODE2_CTRLB_ACTF_DIV16_Val << RTC_MODE2_CTRLB_ACTF_Pos)
#define RTC_MODE2_CTRLB_ACTF_DIV32 (RTC_MODE2_CTRLB_ACTF_DIV32_Val << RTC_MODE2_CTRLB_ACTF_Pos)
#define RTC_MODE2_CTRLB_ACTF_DIV64 (RTC_MODE2_CTRLB_ACTF_DIV64_Val << RTC_MODE2_CTRLB_ACTF_Pos)
#define RTC_MODE2_CTRLB_ACTF_DIV128 (RTC_MODE2_CTRLB_ACTF_DIV128_Val << RTC_MODE2_CTRLB_ACTF_Pos)
#define RTC_MODE2_CTRLB_ACTF_DIV256 (RTC_MODE2_CTRLB_ACTF_DIV256_Val << RTC_MODE2_CTRLB_ACTF_Pos)
#define RTC_MODE2_CTRLB_MASK _U_(0x77F3)



typedef union {
  struct {
    uint32_t PEREO0:1;
    uint32_t PEREO1:1;
    uint32_t PEREO2:1;
    uint32_t PEREO3:1;
    uint32_t PEREO4:1;
    uint32_t PEREO5:1;
    uint32_t PEREO6:1;
    uint32_t PEREO7:1;
    uint32_t CMPEO0:1;
    uint32_t CMPEO1:1;
    uint32_t :4;
    uint32_t TAMPEREO:1;
    uint32_t OVFEO:1;
    uint32_t TAMPEVEI:1;
    uint32_t :15;
  } bit;
  struct {
    uint32_t PEREO:8;
    uint32_t CMPEO:2;
    uint32_t :22;
  } vec;
  uint32_t reg;
} RTC_MODE0_EVCTRL_Type;


#define RTC_MODE0_EVCTRL_OFFSET 0x04
#define RTC_MODE0_EVCTRL_RESETVALUE _U_(0x00000000)

#define RTC_MODE0_EVCTRL_PEREO0_Pos 0
#define RTC_MODE0_EVCTRL_PEREO0 (_U_(1) << RTC_MODE0_EVCTRL_PEREO0_Pos)
#define RTC_MODE0_EVCTRL_PEREO1_Pos 1
#define RTC_MODE0_EVCTRL_PEREO1 (_U_(1) << RTC_MODE0_EVCTRL_PEREO1_Pos)
#define RTC_MODE0_EVCTRL_PEREO2_Pos 2
#define RTC_MODE0_EVCTRL_PEREO2 (_U_(1) << RTC_MODE0_EVCTRL_PEREO2_Pos)
#define RTC_MODE0_EVCTRL_PEREO3_Pos 3
#define RTC_MODE0_EVCTRL_PEREO3 (_U_(1) << RTC_MODE0_EVCTRL_PEREO3_Pos)
#define RTC_MODE0_EVCTRL_PEREO4_Pos 4
#define RTC_MODE0_EVCTRL_PEREO4 (_U_(1) << RTC_MODE0_EVCTRL_PEREO4_Pos)
#define RTC_MODE0_EVCTRL_PEREO5_Pos 5
#define RTC_MODE0_EVCTRL_PEREO5 (_U_(1) << RTC_MODE0_EVCTRL_PEREO5_Pos)
#define RTC_MODE0_EVCTRL_PEREO6_Pos 6
#define RTC_MODE0_EVCTRL_PEREO6 (_U_(1) << RTC_MODE0_EVCTRL_PEREO6_Pos)
#define RTC_MODE0_EVCTRL_PEREO7_Pos 7
#define RTC_MODE0_EVCTRL_PEREO7 (_U_(1) << RTC_MODE0_EVCTRL_PEREO7_Pos)
#define RTC_MODE0_EVCTRL_PEREO_Pos 0
#define RTC_MODE0_EVCTRL_PEREO_Msk (_U_(0xFF) << RTC_MODE0_EVCTRL_PEREO_Pos)
#define RTC_MODE0_EVCTRL_PEREO(value) (RTC_MODE0_EVCTRL_PEREO_Msk & ((value) << RTC_MODE0_EVCTRL_PEREO_Pos))
#define RTC_MODE0_EVCTRL_CMPEO0_Pos 8
#define RTC_MODE0_EVCTRL_CMPEO0 (_U_(1) << RTC_MODE0_EVCTRL_CMPEO0_Pos)
#define RTC_MODE0_EVCTRL_CMPEO1_Pos 9
#define RTC_MODE0_EVCTRL_CMPEO1 (_U_(1) << RTC_MODE0_EVCTRL_CMPEO1_Pos)
#define RTC_MODE0_EVCTRL_CMPEO_Pos 8
#define RTC_MODE0_EVCTRL_CMPEO_Msk (_U_(0x3) << RTC_MODE0_EVCTRL_CMPEO_Pos)
#define RTC_MODE0_EVCTRL_CMPEO(value) (RTC_MODE0_EVCTRL_CMPEO_Msk & ((value) << RTC_MODE0_EVCTRL_CMPEO_Pos))
#define RTC_MODE0_EVCTRL_TAMPEREO_Pos 14
#define RTC_MODE0_EVCTRL_TAMPEREO (_U_(0x1) << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
#define RTC_MODE0_EVCTRL_OVFEO_Pos 15
#define RTC_MODE0_EVCTRL_OVFEO (_U_(0x1) << RTC_MODE0_EVCTRL_OVFEO_Pos)
#define RTC_MODE0_EVCTRL_TAMPEVEI_Pos 16
#define RTC_MODE0_EVCTRL_TAMPEVEI (_U_(0x1) << RTC_MODE0_EVCTRL_TAMPEVEI_Pos)
#define RTC_MODE0_EVCTRL_MASK _U_(0x0001C3FF)



typedef union {
  struct {
    uint32_t PEREO0:1;
    uint32_t PEREO1:1;
    uint32_t PEREO2:1;
    uint32_t PEREO3:1;
    uint32_t PEREO4:1;
    uint32_t PEREO5:1;
    uint32_t PEREO6:1;
    uint32_t PEREO7:1;
    uint32_t CMPEO0:1;
    uint32_t CMPEO1:1;
    uint32_t CMPEO2:1;
    uint32_t CMPEO3:1;
    uint32_t :2;
    uint32_t TAMPEREO:1;
    uint32_t OVFEO:1;
    uint32_t TAMPEVEI:1;
    uint32_t :15;
  } bit;
  struct {
    uint32_t PEREO:8;
    uint32_t CMPEO:4;
    uint32_t :20;
  } vec;
  uint32_t reg;
} RTC_MODE1_EVCTRL_Type;


#define RTC_MODE1_EVCTRL_OFFSET 0x04
#define RTC_MODE1_EVCTRL_RESETVALUE _U_(0x00000000)

#define RTC_MODE1_EVCTRL_PEREO0_Pos 0
#define RTC_MODE1_EVCTRL_PEREO0 (_U_(1) << RTC_MODE1_EVCTRL_PEREO0_Pos)
#define RTC_MODE1_EVCTRL_PEREO1_Pos 1
#define RTC_MODE1_EVCTRL_PEREO1 (_U_(1) << RTC_MODE1_EVCTRL_PEREO1_Pos)
#define RTC_MODE1_EVCTRL_PEREO2_Pos 2
#define RTC_MODE1_EVCTRL_PEREO2 (_U_(1) << RTC_MODE1_EVCTRL_PEREO2_Pos)
#define RTC_MODE1_EVCTRL_PEREO3_Pos 3
#define RTC_MODE1_EVCTRL_PEREO3 (_U_(1) << RTC_MODE1_EVCTRL_PEREO3_Pos)
#define RTC_MODE1_EVCTRL_PEREO4_Pos 4
#define RTC_MODE1_EVCTRL_PEREO4 (_U_(1) << RTC_MODE1_EVCTRL_PEREO4_Pos)
#define RTC_MODE1_EVCTRL_PEREO5_Pos 5
#define RTC_MODE1_EVCTRL_PEREO5 (_U_(1) << RTC_MODE1_EVCTRL_PEREO5_Pos)
#define RTC_MODE1_EVCTRL_PEREO6_Pos 6
#define RTC_MODE1_EVCTRL_PEREO6 (_U_(1) << RTC_MODE1_EVCTRL_PEREO6_Pos)
#define RTC_MODE1_EVCTRL_PEREO7_Pos 7
#define RTC_MODE1_EVCTRL_PEREO7 (_U_(1) << RTC_MODE1_EVCTRL_PEREO7_Pos)
#define RTC_MODE1_EVCTRL_PEREO_Pos 0
#define RTC_MODE1_EVCTRL_PEREO_Msk (_U_(0xFF) << RTC_MODE1_EVCTRL_PEREO_Pos)
#define RTC_MODE1_EVCTRL_PEREO(value) (RTC_MODE1_EVCTRL_PEREO_Msk & ((value) << RTC_MODE1_EVCTRL_PEREO_Pos))
#define RTC_MODE1_EVCTRL_CMPEO0_Pos 8
#define RTC_MODE1_EVCTRL_CMPEO0 (_U_(1) << RTC_MODE1_EVCTRL_CMPEO0_Pos)
#define RTC_MODE1_EVCTRL_CMPEO1_Pos 9
#define RTC_MODE1_EVCTRL_CMPEO1 (_U_(1) << RTC_MODE1_EVCTRL_CMPEO1_Pos)
#define RTC_MODE1_EVCTRL_CMPEO2_Pos 10
#define RTC_MODE1_EVCTRL_CMPEO2 (_U_(1) << RTC_MODE1_EVCTRL_CMPEO2_Pos)
#define RTC_MODE1_EVCTRL_CMPEO3_Pos 11
#define RTC_MODE1_EVCTRL_CMPEO3 (_U_(1) << RTC_MODE1_EVCTRL_CMPEO3_Pos)
#define RTC_MODE1_EVCTRL_CMPEO_Pos 8
#define RTC_MODE1_EVCTRL_CMPEO_Msk (_U_(0xF) << RTC_MODE1_EVCTRL_CMPEO_Pos)
#define RTC_MODE1_EVCTRL_CMPEO(value) (RTC_MODE1_EVCTRL_CMPEO_Msk & ((value) << RTC_MODE1_EVCTRL_CMPEO_Pos))
#define RTC_MODE1_EVCTRL_TAMPEREO_Pos 14
#define RTC_MODE1_EVCTRL_TAMPEREO (_U_(0x1) << RTC_MODE1_EVCTRL_TAMPEREO_Pos)
#define RTC_MODE1_EVCTRL_OVFEO_Pos 15
#define RTC_MODE1_EVCTRL_OVFEO (_U_(0x1) << RTC_MODE1_EVCTRL_OVFEO_Pos)
#define RTC_MODE1_EVCTRL_TAMPEVEI_Pos 16
#define RTC_MODE1_EVCTRL_TAMPEVEI (_U_(0x1) << RTC_MODE1_EVCTRL_TAMPEVEI_Pos)
#define RTC_MODE1_EVCTRL_MASK _U_(0x0001CFFF)



typedef union {
  struct {
    uint32_t PEREO0:1;
    uint32_t PEREO1:1;
    uint32_t PEREO2:1;
    uint32_t PEREO3:1;
    uint32_t PEREO4:1;
    uint32_t PEREO5:1;
    uint32_t PEREO6:1;
    uint32_t PEREO7:1;
    uint32_t ALARMEO0:1;
    uint32_t ALARMEO1:1;
    uint32_t :4;
    uint32_t TAMPEREO:1;
    uint32_t OVFEO:1;
    uint32_t TAMPEVEI:1;
    uint32_t :15;
  } bit;
  struct {
    uint32_t PEREO:8;
    uint32_t ALARMEO:2;
    uint32_t :22;
  } vec;
  uint32_t reg;
} RTC_MODE2_EVCTRL_Type;


#define RTC_MODE2_EVCTRL_OFFSET 0x04
#define RTC_MODE2_EVCTRL_RESETVALUE _U_(0x00000000)

#define RTC_MODE2_EVCTRL_PEREO0_Pos 0
#define RTC_MODE2_EVCTRL_PEREO0 (_U_(1) << RTC_MODE2_EVCTRL_PEREO0_Pos)
#define RTC_MODE2_EVCTRL_PEREO1_Pos 1
#define RTC_MODE2_EVCTRL_PEREO1 (_U_(1) << RTC_MODE2_EVCTRL_PEREO1_Pos)
#define RTC_MODE2_EVCTRL_PEREO2_Pos 2
#define RTC_MODE2_EVCTRL_PEREO2 (_U_(1) << RTC_MODE2_EVCTRL_PEREO2_Pos)
#define RTC_MODE2_EVCTRL_PEREO3_Pos 3
#define RTC_MODE2_EVCTRL_PEREO3 (_U_(1) << RTC_MODE2_EVCTRL_PEREO3_Pos)
#define RTC_MODE2_EVCTRL_PEREO4_Pos 4
#define RTC_MODE2_EVCTRL_PEREO4 (_U_(1) << RTC_MODE2_EVCTRL_PEREO4_Pos)
#define RTC_MODE2_EVCTRL_PEREO5_Pos 5
#define RTC_MODE2_EVCTRL_PEREO5 (_U_(1) << RTC_MODE2_EVCTRL_PEREO5_Pos)
#define RTC_MODE2_EVCTRL_PEREO6_Pos 6
#define RTC_MODE2_EVCTRL_PEREO6 (_U_(1) << RTC_MODE2_EVCTRL_PEREO6_Pos)
#define RTC_MODE2_EVCTRL_PEREO7_Pos 7
#define RTC_MODE2_EVCTRL_PEREO7 (_U_(1) << RTC_MODE2_EVCTRL_PEREO7_Pos)
#define RTC_MODE2_EVCTRL_PEREO_Pos 0
#define RTC_MODE2_EVCTRL_PEREO_Msk (_U_(0xFF) << RTC_MODE2_EVCTRL_PEREO_Pos)
#define RTC_MODE2_EVCTRL_PEREO(value) (RTC_MODE2_EVCTRL_PEREO_Msk & ((value) << RTC_MODE2_EVCTRL_PEREO_Pos))
#define RTC_MODE2_EVCTRL_ALARMEO0_Pos 8
#define RTC_MODE2_EVCTRL_ALARMEO0 (_U_(1) << RTC_MODE2_EVCTRL_ALARMEO0_Pos)
#define RTC_MODE2_EVCTRL_ALARMEO1_Pos 9
#define RTC_MODE2_EVCTRL_ALARMEO1 (_U_(1) << RTC_MODE2_EVCTRL_ALARMEO1_Pos)
#define RTC_MODE2_EVCTRL_ALARMEO_Pos 8
#define RTC_MODE2_EVCTRL_ALARMEO_Msk (_U_(0x3) << RTC_MODE2_EVCTRL_ALARMEO_Pos)
#define RTC_MODE2_EVCTRL_ALARMEO(value) (RTC_MODE2_EVCTRL_ALARMEO_Msk & ((value) << RTC_MODE2_EVCTRL_ALARMEO_Pos))
#define RTC_MODE2_EVCTRL_TAMPEREO_Pos 14
#define RTC_MODE2_EVCTRL_TAMPEREO (_U_(0x1) << RTC_MODE2_EVCTRL_TAMPEREO_Pos)
#define RTC_MODE2_EVCTRL_OVFEO_Pos 15
#define RTC_MODE2_EVCTRL_OVFEO (_U_(0x1) << RTC_MODE2_EVCTRL_OVFEO_Pos)
#define RTC_MODE2_EVCTRL_TAMPEVEI_Pos 16
#define RTC_MODE2_EVCTRL_TAMPEVEI (_U_(0x1) << RTC_MODE2_EVCTRL_TAMPEVEI_Pos)
#define RTC_MODE2_EVCTRL_MASK _U_(0x0001C3FF)



typedef union {
  struct {
    uint16_t PER0:1;
    uint16_t PER1:1;
    uint16_t PER2:1;
    uint16_t PER3:1;
    uint16_t PER4:1;
    uint16_t PER5:1;
    uint16_t PER6:1;
    uint16_t PER7:1;
    uint16_t CMP0:1;
    uint16_t CMP1:1;
    uint16_t :4;
    uint16_t TAMPER:1;
    uint16_t OVF:1;
  } bit;
  struct {
    uint16_t PER:8;
    uint16_t CMP:2;
    uint16_t :6;
  } vec;
  uint16_t reg;
} RTC_MODE0_INTENCLR_Type;


#define RTC_MODE0_INTENCLR_OFFSET 0x08
#define RTC_MODE0_INTENCLR_RESETVALUE _U_(0x0000)

#define RTC_MODE0_INTENCLR_PER0_Pos 0
#define RTC_MODE0_INTENCLR_PER0 (_U_(1) << RTC_MODE0_INTENCLR_PER0_Pos)
#define RTC_MODE0_INTENCLR_PER1_Pos 1
#define RTC_MODE0_INTENCLR_PER1 (_U_(1) << RTC_MODE0_INTENCLR_PER1_Pos)
#define RTC_MODE0_INTENCLR_PER2_Pos 2
#define RTC_MODE0_INTENCLR_PER2 (_U_(1) << RTC_MODE0_INTENCLR_PER2_Pos)
#define RTC_MODE0_INTENCLR_PER3_Pos 3
#define RTC_MODE0_INTENCLR_PER3 (_U_(1) << RTC_MODE0_INTENCLR_PER3_Pos)
#define RTC_MODE0_INTENCLR_PER4_Pos 4
#define RTC_MODE0_INTENCLR_PER4 (_U_(1) << RTC_MODE0_INTENCLR_PER4_Pos)
#define RTC_MODE0_INTENCLR_PER5_Pos 5
#define RTC_MODE0_INTENCLR_PER5 (_U_(1) << RTC_MODE0_INTENCLR_PER5_Pos)
#define RTC_MODE0_INTENCLR_PER6_Pos 6
#define RTC_MODE0_INTENCLR_PER6 (_U_(1) << RTC_MODE0_INTENCLR_PER6_Pos)
#define RTC_MODE0_INTENCLR_PER7_Pos 7
#define RTC_MODE0_INTENCLR_PER7 (_U_(1) << RTC_MODE0_INTENCLR_PER7_Pos)
#define RTC_MODE0_INTENCLR_PER_Pos 0
#define RTC_MODE0_INTENCLR_PER_Msk (_U_(0xFF) << RTC_MODE0_INTENCLR_PER_Pos)
#define RTC_MODE0_INTENCLR_PER(value) (RTC_MODE0_INTENCLR_PER_Msk & ((value) << RTC_MODE0_INTENCLR_PER_Pos))
#define RTC_MODE0_INTENCLR_CMP0_Pos 8
#define RTC_MODE0_INTENCLR_CMP0 (_U_(1) << RTC_MODE0_INTENCLR_CMP0_Pos)
#define RTC_MODE0_INTENCLR_CMP1_Pos 9
#define RTC_MODE0_INTENCLR_CMP1 (_U_(1) << RTC_MODE0_INTENCLR_CMP1_Pos)
#define RTC_MODE0_INTENCLR_CMP_Pos 8
#define RTC_MODE0_INTENCLR_CMP_Msk (_U_(0x3) << RTC_MODE0_INTENCLR_CMP_Pos)
#define RTC_MODE0_INTENCLR_CMP(value) (RTC_MODE0_INTENCLR_CMP_Msk & ((value) << RTC_MODE0_INTENCLR_CMP_Pos))
#define RTC_MODE0_INTENCLR_TAMPER_Pos 14
#define RTC_MODE0_INTENCLR_TAMPER (_U_(0x1) << RTC_MODE0_INTENCLR_TAMPER_Pos)
#define RTC_MODE0_INTENCLR_OVF_Pos 15
#define RTC_MODE0_INTENCLR_OVF (_U_(0x1) << RTC_MODE0_INTENCLR_OVF_Pos)
#define RTC_MODE0_INTENCLR_MASK _U_(0xC3FF)



typedef union {
  struct {
    uint16_t PER0:1;
    uint16_t PER1:1;
    uint16_t PER2:1;
    uint16_t PER3:1;
    uint16_t PER4:1;
    uint16_t PER5:1;
    uint16_t PER6:1;
    uint16_t PER7:1;
    uint16_t CMP0:1;
    uint16_t CMP1:1;
    uint16_t CMP2:1;
    uint16_t CMP3:1;
    uint16_t :2;
    uint16_t TAMPER:1;
    uint16_t OVF:1;
  } bit;
  struct {
    uint16_t PER:8;
    uint16_t CMP:4;
    uint16_t :4;
  } vec;
  uint16_t reg;
} RTC_MODE1_INTENCLR_Type;


#define RTC_MODE1_INTENCLR_OFFSET 0x08
#define RTC_MODE1_INTENCLR_RESETVALUE _U_(0x0000)

#define RTC_MODE1_INTENCLR_PER0_Pos 0
#define RTC_MODE1_INTENCLR_PER0 (_U_(1) << RTC_MODE1_INTENCLR_PER0_Pos)
#define RTC_MODE1_INTENCLR_PER1_Pos 1
#define RTC_MODE1_INTENCLR_PER1 (_U_(1) << RTC_MODE1_INTENCLR_PER1_Pos)
#define RTC_MODE1_INTENCLR_PER2_Pos 2
#define RTC_MODE1_INTENCLR_PER2 (_U_(1) << RTC_MODE1_INTENCLR_PER2_Pos)
#define RTC_MODE1_INTENCLR_PER3_Pos 3
#define RTC_MODE1_INTENCLR_PER3 (_U_(1) << RTC_MODE1_INTENCLR_PER3_Pos)
#define RTC_MODE1_INTENCLR_PER4_Pos 4
#define RTC_MODE1_INTENCLR_PER4 (_U_(1) << RTC_MODE1_INTENCLR_PER4_Pos)
#define RTC_MODE1_INTENCLR_PER5_Pos 5
#define RTC_MODE1_INTENCLR_PER5 (_U_(1) << RTC_MODE1_INTENCLR_PER5_Pos)
#define RTC_MODE1_INTENCLR_PER6_Pos 6
#define RTC_MODE1_INTENCLR_PER6 (_U_(1) << RTC_MODE1_INTENCLR_PER6_Pos)
#define RTC_MODE1_INTENCLR_PER7_Pos 7
#define RTC_MODE1_INTENCLR_PER7 (_U_(1) << RTC_MODE1_INTENCLR_PER7_Pos)
#define RTC_MODE1_INTENCLR_PER_Pos 0
#define RTC_MODE1_INTENCLR_PER_Msk (_U_(0xFF) << RTC_MODE1_INTENCLR_PER_Pos)
#define RTC_MODE1_INTENCLR_PER(value) (RTC_MODE1_INTENCLR_PER_Msk & ((value) << RTC_MODE1_INTENCLR_PER_Pos))
#define RTC_MODE1_INTENCLR_CMP0_Pos 8
#define RTC_MODE1_INTENCLR_CMP0 (_U_(1) << RTC_MODE1_INTENCLR_CMP0_Pos)
#define RTC_MODE1_INTENCLR_CMP1_Pos 9
#define RTC_MODE1_INTENCLR_CMP1 (_U_(1) << RTC_MODE1_INTENCLR_CMP1_Pos)
#define RTC_MODE1_INTENCLR_CMP2_Pos 10
#define RTC_MODE1_INTENCLR_CMP2 (_U_(1) << RTC_MODE1_INTENCLR_CMP2_Pos)
#define RTC_MODE1_INTENCLR_CMP3_Pos 11
#define RTC_MODE1_INTENCLR_CMP3 (_U_(1) << RTC_MODE1_INTENCLR_CMP3_Pos)
#define RTC_MODE1_INTENCLR_CMP_Pos 8
#define RTC_MODE1_INTENCLR_CMP_Msk (_U_(0xF) << RTC_MODE1_INTENCLR_CMP_Pos)
#define RTC_MODE1_INTENCLR_CMP(value) (RTC_MODE1_INTENCLR_CMP_Msk & ((value) << RTC_MODE1_INTENCLR_CMP_Pos))
#define RTC_MODE1_INTENCLR_TAMPER_Pos 14
#define RTC_MODE1_INTENCLR_TAMPER (_U_(0x1) << RTC_MODE1_INTENCLR_TAMPER_Pos)
#define RTC_MODE1_INTENCLR_OVF_Pos 15
#define RTC_MODE1_INTENCLR_OVF (_U_(0x1) << RTC_MODE1_INTENCLR_OVF_Pos)
#define RTC_MODE1_INTENCLR_MASK _U_(0xCFFF)



typedef union {
  struct {
    uint16_t PER0:1;
    uint16_t PER1:1;
    uint16_t PER2:1;
    uint16_t PER3:1;
    uint16_t PER4:1;
    uint16_t PER5:1;
    uint16_t PER6:1;
    uint16_t PER7:1;
    uint16_t ALARM0:1;
    uint16_t ALARM1:1;
    uint16_t :4;
    uint16_t TAMPER:1;
    uint16_t OVF:1;
  } bit;
  struct {
    uint16_t PER:8;
    uint16_t ALARM:2;
    uint16_t :6;
  } vec;
  uint16_t reg;
} RTC_MODE2_INTENCLR_Type;


#define RTC_MODE2_INTENCLR_OFFSET 0x08
#define RTC_MODE2_INTENCLR_RESETVALUE _U_(0x0000)

#define RTC_MODE2_INTENCLR_PER0_Pos 0
#define RTC_MODE2_INTENCLR_PER0 (_U_(1) << RTC_MODE2_INTENCLR_PER0_Pos)
#define RTC_MODE2_INTENCLR_PER1_Pos 1
#define RTC_MODE2_INTENCLR_PER1 (_U_(1) << RTC_MODE2_INTENCLR_PER1_Pos)
#define RTC_MODE2_INTENCLR_PER2_Pos 2
#define RTC_MODE2_INTENCLR_PER2 (_U_(1) << RTC_MODE2_INTENCLR_PER2_Pos)
#define RTC_MODE2_INTENCLR_PER3_Pos 3
#define RTC_MODE2_INTENCLR_PER3 (_U_(1) << RTC_MODE2_INTENCLR_PER3_Pos)
#define RTC_MODE2_INTENCLR_PER4_Pos 4
#define RTC_MODE2_INTENCLR_PER4 (_U_(1) << RTC_MODE2_INTENCLR_PER4_Pos)
#define RTC_MODE2_INTENCLR_PER5_Pos 5
#define RTC_MODE2_INTENCLR_PER5 (_U_(1) << RTC_MODE2_INTENCLR_PER5_Pos)
#define RTC_MODE2_INTENCLR_PER6_Pos 6
#define RTC_MODE2_INTENCLR_PER6 (_U_(1) << RTC_MODE2_INTENCLR_PER6_Pos)
#define RTC_MODE2_INTENCLR_PER7_Pos 7
#define RTC_MODE2_INTENCLR_PER7 (_U_(1) << RTC_MODE2_INTENCLR_PER7_Pos)
#define RTC_MODE2_INTENCLR_PER_Pos 0
#define RTC_MODE2_INTENCLR_PER_Msk (_U_(0xFF) << RTC_MODE2_INTENCLR_PER_Pos)
#define RTC_MODE2_INTENCLR_PER(value) (RTC_MODE2_INTENCLR_PER_Msk & ((value) << RTC_MODE2_INTENCLR_PER_Pos))
#define RTC_MODE2_INTENCLR_ALARM0_Pos 8
#define RTC_MODE2_INTENCLR_ALARM0 (_U_(1) << RTC_MODE2_INTENCLR_ALARM0_Pos)
#define RTC_MODE2_INTENCLR_ALARM1_Pos 9
#define RTC_MODE2_INTENCLR_ALARM1 (_U_(1) << RTC_MODE2_INTENCLR_ALARM1_Pos)
#define RTC_MODE2_INTENCLR_ALARM_Pos 8
#define RTC_MODE2_INTENCLR_ALARM_Msk (_U_(0x3) << RTC_MODE2_INTENCLR_ALARM_Pos)
#define RTC_MODE2_INTENCLR_ALARM(value) (RTC_MODE2_INTENCLR_ALARM_Msk & ((value) << RTC_MODE2_INTENCLR_ALARM_Pos))
#define RTC_MODE2_INTENCLR_TAMPER_Pos 14
#define RTC_MODE2_INTENCLR_TAMPER (_U_(0x1) << RTC_MODE2_INTENCLR_TAMPER_Pos)
#define RTC_MODE2_INTENCLR_OVF_Pos 15
#define RTC_MODE2_INTENCLR_OVF (_U_(0x1) << RTC_MODE2_INTENCLR_OVF_Pos)
#define RTC_MODE2_INTENCLR_MASK _U_(0xC3FF)



typedef union {
  struct {
    uint16_t PER0:1;
    uint16_t PER1:1;
    uint16_t PER2:1;
    uint16_t PER3:1;
    uint16_t PER4:1;
    uint16_t PER5:1;
    uint16_t PER6:1;
    uint16_t PER7:1;
    uint16_t CMP0:1;
    uint16_t CMP1:1;
    uint16_t :4;
    uint16_t TAMPER:1;
    uint16_t OVF:1;
  } bit;
  struct {
    uint16_t PER:8;
    uint16_t CMP:2;
    uint16_t :6;
  } vec;
  uint16_t reg;
} RTC_MODE0_INTENSET_Type;


#define RTC_MODE0_INTENSET_OFFSET 0x0A
#define RTC_MODE0_INTENSET_RESETVALUE _U_(0x0000)

#define RTC_MODE0_INTENSET_PER0_Pos 0
#define RTC_MODE0_INTENSET_PER0 (_U_(1) << RTC_MODE0_INTENSET_PER0_Pos)
#define RTC_MODE0_INTENSET_PER1_Pos 1
#define RTC_MODE0_INTENSET_PER1 (_U_(1) << RTC_MODE0_INTENSET_PER1_Pos)
#define RTC_MODE0_INTENSET_PER2_Pos 2
#define RTC_MODE0_INTENSET_PER2 (_U_(1) << RTC_MODE0_INTENSET_PER2_Pos)
#define RTC_MODE0_INTENSET_PER3_Pos 3
#define RTC_MODE0_INTENSET_PER3 (_U_(1) << RTC_MODE0_INTENSET_PER3_Pos)
#define RTC_MODE0_INTENSET_PER4_Pos 4
#define RTC_MODE0_INTENSET_PER4 (_U_(1) << RTC_MODE0_INTENSET_PER4_Pos)
#define RTC_MODE0_INTENSET_PER5_Pos 5
#define RTC_MODE0_INTENSET_PER5 (_U_(1) << RTC_MODE0_INTENSET_PER5_Pos)
#define RTC_MODE0_INTENSET_PER6_Pos 6
#define RTC_MODE0_INTENSET_PER6 (_U_(1) << RTC_MODE0_INTENSET_PER6_Pos)
#define RTC_MODE0_INTENSET_PER7_Pos 7
#define RTC_MODE0_INTENSET_PER7 (_U_(1) << RTC_MODE0_INTENSET_PER7_Pos)
#define RTC_MODE0_INTENSET_PER_Pos 0
#define RTC_MODE0_INTENSET_PER_Msk (_U_(0xFF) << RTC_MODE0_INTENSET_PER_Pos)
#define RTC_MODE0_INTENSET_PER(value) (RTC_MODE0_INTENSET_PER_Msk & ((value) << RTC_MODE0_INTENSET_PER_Pos))
#define RTC_MODE0_INTENSET_CMP0_Pos 8
#define RTC_MODE0_INTENSET_CMP0 (_U_(1) << RTC_MODE0_INTENSET_CMP0_Pos)
#define RTC_MODE0_INTENSET_CMP1_Pos 9
#define RTC_MODE0_INTENSET_CMP1 (_U_(1) << RTC_MODE0_INTENSET_CMP1_Pos)
#define RTC_MODE0_INTENSET_CMP_Pos 8
#define RTC_MODE0_INTENSET_CMP_Msk (_U_(0x3) << RTC_MODE0_INTENSET_CMP_Pos)
#define RTC_MODE0_INTENSET_CMP(value) (RTC_MODE0_INTENSET_CMP_Msk & ((value) << RTC_MODE0_INTENSET_CMP_Pos))
#define RTC_MODE0_INTENSET_TAMPER_Pos 14
#define RTC_MODE0_INTENSET_TAMPER (_U_(0x1) << RTC_MODE0_INTENSET_TAMPER_Pos)
#define RTC_MODE0_INTENSET_OVF_Pos 15
#define RTC_MODE0_INTENSET_OVF (_U_(0x1) << RTC_MODE0_INTENSET_OVF_Pos)
#define RTC_MODE0_INTENSET_MASK _U_(0xC3FF)



typedef union {
  struct {
    uint16_t PER0:1;
    uint16_t PER1:1;
    uint16_t PER2:1;
    uint16_t PER3:1;
    uint16_t PER4:1;
    uint16_t PER5:1;
    uint16_t PER6:1;
    uint16_t PER7:1;
    uint16_t CMP0:1;
    uint16_t CMP1:1;
    uint16_t CMP2:1;
    uint16_t CMP3:1;
    uint16_t :2;
    uint16_t TAMPER:1;
    uint16_t OVF:1;
  } bit;
  struct {
    uint16_t PER:8;
    uint16_t CMP:4;
    uint16_t :4;
  } vec;
  uint16_t reg;
} RTC_MODE1_INTENSET_Type;


#define RTC_MODE1_INTENSET_OFFSET 0x0A
#define RTC_MODE1_INTENSET_RESETVALUE _U_(0x0000)

#define RTC_MODE1_INTENSET_PER0_Pos 0
#define RTC_MODE1_INTENSET_PER0 (_U_(1) << RTC_MODE1_INTENSET_PER0_Pos)
#define RTC_MODE1_INTENSET_PER1_Pos 1
#define RTC_MODE1_INTENSET_PER1 (_U_(1) << RTC_MODE1_INTENSET_PER1_Pos)
#define RTC_MODE1_INTENSET_PER2_Pos 2
#define RTC_MODE1_INTENSET_PER2 (_U_(1) << RTC_MODE1_INTENSET_PER2_Pos)
#define RTC_MODE1_INTENSET_PER3_Pos 3
#define RTC_MODE1_INTENSET_PER3 (_U_(1) << RTC_MODE1_INTENSET_PER3_Pos)
#define RTC_MODE1_INTENSET_PER4_Pos 4
#define RTC_MODE1_INTENSET_PER4 (_U_(1) << RTC_MODE1_INTENSET_PER4_Pos)
#define RTC_MODE1_INTENSET_PER5_Pos 5
#define RTC_MODE1_INTENSET_PER5 (_U_(1) << RTC_MODE1_INTENSET_PER5_Pos)
#define RTC_MODE1_INTENSET_PER6_Pos 6
#define RTC_MODE1_INTENSET_PER6 (_U_(1) << RTC_MODE1_INTENSET_PER6_Pos)
#define RTC_MODE1_INTENSET_PER7_Pos 7
#define RTC_MODE1_INTENSET_PER7 (_U_(1) << RTC_MODE1_INTENSET_PER7_Pos)
#define RTC_MODE1_INTENSET_PER_Pos 0
#define RTC_MODE1_INTENSET_PER_Msk (_U_(0xFF) << RTC_MODE1_INTENSET_PER_Pos)
#define RTC_MODE1_INTENSET_PER(value) (RTC_MODE1_INTENSET_PER_Msk & ((value) << RTC_MODE1_INTENSET_PER_Pos))
#define RTC_MODE1_INTENSET_CMP0_Pos 8
#define RTC_MODE1_INTENSET_CMP0 (_U_(1) << RTC_MODE1_INTENSET_CMP0_Pos)
#define RTC_MODE1_INTENSET_CMP1_Pos 9
#define RTC_MODE1_INTENSET_CMP1 (_U_(1) << RTC_MODE1_INTENSET_CMP1_Pos)
#define RTC_MODE1_INTENSET_CMP2_Pos 10
#define RTC_MODE1_INTENSET_CMP2 (_U_(1) << RTC_MODE1_INTENSET_CMP2_Pos)
#define RTC_MODE1_INTENSET_CMP3_Pos 11
#define RTC_MODE1_INTENSET_CMP3 (_U_(1) << RTC_MODE1_INTENSET_CMP3_Pos)
#define RTC_MODE1_INTENSET_CMP_Pos 8
#define RTC_MODE1_INTENSET_CMP_Msk (_U_(0xF) << RTC_MODE1_INTENSET_CMP_Pos)
#define RTC_MODE1_INTENSET_CMP(value) (RTC_MODE1_INTENSET_CMP_Msk & ((value) << RTC_MODE1_INTENSET_CMP_Pos))
#define RTC_MODE1_INTENSET_TAMPER_Pos 14
#define RTC_MODE1_INTENSET_TAMPER (_U_(0x1) << RTC_MODE1_INTENSET_TAMPER_Pos)
#define RTC_MODE1_INTENSET_OVF_Pos 15
#define RTC_MODE1_INTENSET_OVF (_U_(0x1) << RTC_MODE1_INTENSET_OVF_Pos)
#define RTC_MODE1_INTENSET_MASK _U_(0xCFFF)



typedef union {
  struct {
    uint16_t PER0:1;
    uint16_t PER1:1;
    uint16_t PER2:1;
    uint16_t PER3:1;
    uint16_t PER4:1;
    uint16_t PER5:1;
    uint16_t PER6:1;
    uint16_t PER7:1;
    uint16_t ALARM0:1;
    uint16_t ALARM1:1;
    uint16_t :4;
    uint16_t TAMPER:1;
    uint16_t OVF:1;
  } bit;
  struct {
    uint16_t PER:8;
    uint16_t ALARM:2;
    uint16_t :6;
  } vec;
  uint16_t reg;
} RTC_MODE2_INTENSET_Type;


#define RTC_MODE2_INTENSET_OFFSET 0x0A
#define RTC_MODE2_INTENSET_RESETVALUE _U_(0x0000)

#define RTC_MODE2_INTENSET_PER0_Pos 0
#define RTC_MODE2_INTENSET_PER0 (_U_(1) << RTC_MODE2_INTENSET_PER0_Pos)
#define RTC_MODE2_INTENSET_PER1_Pos 1
#define RTC_MODE2_INTENSET_PER1 (_U_(1) << RTC_MODE2_INTENSET_PER1_Pos)
#define RTC_MODE2_INTENSET_PER2_Pos 2
#define RTC_MODE2_INTENSET_PER2 (_U_(1) << RTC_MODE2_INTENSET_PER2_Pos)
#define RTC_MODE2_INTENSET_PER3_Pos 3
#define RTC_MODE2_INTENSET_PER3 (_U_(1) << RTC_MODE2_INTENSET_PER3_Pos)
#define RTC_MODE2_INTENSET_PER4_Pos 4
#define RTC_MODE2_INTENSET_PER4 (_U_(1) << RTC_MODE2_INTENSET_PER4_Pos)
#define RTC_MODE2_INTENSET_PER5_Pos 5
#define RTC_MODE2_INTENSET_PER5 (_U_(1) << RTC_MODE2_INTENSET_PER5_Pos)
#define RTC_MODE2_INTENSET_PER6_Pos 6
#define RTC_MODE2_INTENSET_PER6 (_U_(1) << RTC_MODE2_INTENSET_PER6_Pos)
#define RTC_MODE2_INTENSET_PER7_Pos 7
#define RTC_MODE2_INTENSET_PER7 (_U_(1) << RTC_MODE2_INTENSET_PER7_Pos)
#define RTC_MODE2_INTENSET_PER_Pos 0
#define RTC_MODE2_INTENSET_PER_Msk (_U_(0xFF) << RTC_MODE2_INTENSET_PER_Pos)
#define RTC_MODE2_INTENSET_PER(value) (RTC_MODE2_INTENSET_PER_Msk & ((value) << RTC_MODE2_INTENSET_PER_Pos))
#define RTC_MODE2_INTENSET_ALARM0_Pos 8
#define RTC_MODE2_INTENSET_ALARM0 (_U_(1) << RTC_MODE2_INTENSET_ALARM0_Pos)
#define RTC_MODE2_INTENSET_ALARM1_Pos 9
#define RTC_MODE2_INTENSET_ALARM1 (_U_(1) << RTC_MODE2_INTENSET_ALARM1_Pos)
#define RTC_MODE2_INTENSET_ALARM_Pos 8
#define RTC_MODE2_INTENSET_ALARM_Msk (_U_(0x3) << RTC_MODE2_INTENSET_ALARM_Pos)
#define RTC_MODE2_INTENSET_ALARM(value) (RTC_MODE2_INTENSET_ALARM_Msk & ((value) << RTC_MODE2_INTENSET_ALARM_Pos))
#define RTC_MODE2_INTENSET_TAMPER_Pos 14
#define RTC_MODE2_INTENSET_TAMPER (_U_(0x1) << RTC_MODE2_INTENSET_TAMPER_Pos)
#define RTC_MODE2_INTENSET_OVF_Pos 15
#define RTC_MODE2_INTENSET_OVF (_U_(0x1) << RTC_MODE2_INTENSET_OVF_Pos)
#define RTC_MODE2_INTENSET_MASK _U_(0xC3FF)



typedef union {
  struct {
    volatile const uint16_t PER0:1;
    volatile const uint16_t PER1:1;
    volatile const uint16_t PER2:1;
    volatile const uint16_t PER3:1;
    volatile const uint16_t PER4:1;
    volatile const uint16_t PER5:1;
    volatile const uint16_t PER6:1;
    volatile const uint16_t PER7:1;
    volatile const uint16_t CMP0:1;
    volatile const uint16_t CMP1:1;
    volatile const uint16_t :4;
    volatile const uint16_t TAMPER:1;
    volatile const uint16_t OVF:1;
  } bit;
  struct {
    volatile const uint16_t PER:8;
    volatile const uint16_t CMP:2;
    volatile const uint16_t :6;
  } vec;
  uint16_t reg;
} RTC_MODE0_INTFLAG_Type;


#define RTC_MODE0_INTFLAG_OFFSET 0x0C
#define RTC_MODE0_INTFLAG_RESETVALUE _U_(0x0000)

#define RTC_MODE0_INTFLAG_PER0_Pos 0
#define RTC_MODE0_INTFLAG_PER0 (_U_(1) << RTC_MODE0_INTFLAG_PER0_Pos)
#define RTC_MODE0_INTFLAG_PER1_Pos 1
#define RTC_MODE0_INTFLAG_PER1 (_U_(1) << RTC_MODE0_INTFLAG_PER1_Pos)
#define RTC_MODE0_INTFLAG_PER2_Pos 2
#define RTC_MODE0_INTFLAG_PER2 (_U_(1) << RTC_MODE0_INTFLAG_PER2_Pos)
#define RTC_MODE0_INTFLAG_PER3_Pos 3
#define RTC_MODE0_INTFLAG_PER3 (_U_(1) << RTC_MODE0_INTFLAG_PER3_Pos)
#define RTC_MODE0_INTFLAG_PER4_Pos 4
#define RTC_MODE0_INTFLAG_PER4 (_U_(1) << RTC_MODE0_INTFLAG_PER4_Pos)
#define RTC_MODE0_INTFLAG_PER5_Pos 5
#define RTC_MODE0_INTFLAG_PER5 (_U_(1) << RTC_MODE0_INTFLAG_PER5_Pos)
#define RTC_MODE0_INTFLAG_PER6_Pos 6
#define RTC_MODE0_INTFLAG_PER6 (_U_(1) << RTC_MODE0_INTFLAG_PER6_Pos)
#define RTC_MODE0_INTFLAG_PER7_Pos 7
#define RTC_MODE0_INTFLAG_PER7 (_U_(1) << RTC_MODE0_INTFLAG_PER7_Pos)
#define RTC_MODE0_INTFLAG_PER_Pos 0
#define RTC_MODE0_INTFLAG_PER_Msk (_U_(0xFF) << RTC_MODE0_INTFLAG_PER_Pos)
#define RTC_MODE0_INTFLAG_PER(value) (RTC_MODE0_INTFLAG_PER_Msk & ((value) << RTC_MODE0_INTFLAG_PER_Pos))
#define RTC_MODE0_INTFLAG_CMP0_Pos 8
#define RTC_MODE0_INTFLAG_CMP0 (_U_(1) << RTC_MODE0_INTFLAG_CMP0_Pos)
#define RTC_MODE0_INTFLAG_CMP1_Pos 9
#define RTC_MODE0_INTFLAG_CMP1 (_U_(1) << RTC_MODE0_INTFLAG_CMP1_Pos)
#define RTC_MODE0_INTFLAG_CMP_Pos 8
#define RTC_MODE0_INTFLAG_CMP_Msk (_U_(0x3) << RTC_MODE0_INTFLAG_CMP_Pos)
#define RTC_MODE0_INTFLAG_CMP(value) (RTC_MODE0_INTFLAG_CMP_Msk & ((value) << RTC_MODE0_INTFLAG_CMP_Pos))
#define RTC_MODE0_INTFLAG_TAMPER_Pos 14
#define RTC_MODE0_INTFLAG_TAMPER (_U_(0x1) << RTC_MODE0_INTFLAG_TAMPER_Pos)
#define RTC_MODE0_INTFLAG_OVF_Pos 15
#define RTC_MODE0_INTFLAG_OVF (_U_(0x1) << RTC_MODE0_INTFLAG_OVF_Pos)
#define RTC_MODE0_INTFLAG_MASK _U_(0xC3FF)



typedef union {
  struct {
    volatile const uint16_t PER0:1;
    volatile const uint16_t PER1:1;
    volatile const uint16_t PER2:1;
    volatile const uint16_t PER3:1;
    volatile const uint16_t PER4:1;
    volatile const uint16_t PER5:1;
    volatile const uint16_t PER6:1;
    volatile const uint16_t PER7:1;
    volatile const uint16_t CMP0:1;
    volatile const uint16_t CMP1:1;
    volatile const uint16_t CMP2:1;
    volatile const uint16_t CMP3:1;
    volatile const uint16_t :2;
    volatile const uint16_t TAMPER:1;
    volatile const uint16_t OVF:1;
  } bit;
  struct {
    volatile const uint16_t PER:8;
    volatile const uint16_t CMP:4;
    volatile const uint16_t :4;
  } vec;
  uint16_t reg;
} RTC_MODE1_INTFLAG_Type;


#define RTC_MODE1_INTFLAG_OFFSET 0x0C
#define RTC_MODE1_INTFLAG_RESETVALUE _U_(0x0000)

#define RTC_MODE1_INTFLAG_PER0_Pos 0
#define RTC_MODE1_INTFLAG_PER0 (_U_(1) << RTC_MODE1_INTFLAG_PER0_Pos)
#define RTC_MODE1_INTFLAG_PER1_Pos 1
#define RTC_MODE1_INTFLAG_PER1 (_U_(1) << RTC_MODE1_INTFLAG_PER1_Pos)
#define RTC_MODE1_INTFLAG_PER2_Pos 2
#define RTC_MODE1_INTFLAG_PER2 (_U_(1) << RTC_MODE1_INTFLAG_PER2_Pos)
#define RTC_MODE1_INTFLAG_PER3_Pos 3
#define RTC_MODE1_INTFLAG_PER3 (_U_(1) << RTC_MODE1_INTFLAG_PER3_Pos)
#define RTC_MODE1_INTFLAG_PER4_Pos 4
#define RTC_MODE1_INTFLAG_PER4 (_U_(1) << RTC_MODE1_INTFLAG_PER4_Pos)
#define RTC_MODE1_INTFLAG_PER5_Pos 5
#define RTC_MODE1_INTFLAG_PER5 (_U_(1) << RTC_MODE1_INTFLAG_PER5_Pos)
#define RTC_MODE1_INTFLAG_PER6_Pos 6
#define RTC_MODE1_INTFLAG_PER6 (_U_(1) << RTC_MODE1_INTFLAG_PER6_Pos)
#define RTC_MODE1_INTFLAG_PER7_Pos 7
#define RTC_MODE1_INTFLAG_PER7 (_U_(1) << RTC_MODE1_INTFLAG_PER7_Pos)
#define RTC_MODE1_INTFLAG_PER_Pos 0
#define RTC_MODE1_INTFLAG_PER_Msk (_U_(0xFF) << RTC_MODE1_INTFLAG_PER_Pos)
#define RTC_MODE1_INTFLAG_PER(value) (RTC_MODE1_INTFLAG_PER_Msk & ((value) << RTC_MODE1_INTFLAG_PER_Pos))
#define RTC_MODE1_INTFLAG_CMP0_Pos 8
#define RTC_MODE1_INTFLAG_CMP0 (_U_(1) << RTC_MODE1_INTFLAG_CMP0_Pos)
#define RTC_MODE1_INTFLAG_CMP1_Pos 9
#define RTC_MODE1_INTFLAG_CMP1 (_U_(1) << RTC_MODE1_INTFLAG_CMP1_Pos)
#define RTC_MODE1_INTFLAG_CMP2_Pos 10
#define RTC_MODE1_INTFLAG_CMP2 (_U_(1) << RTC_MODE1_INTFLAG_CMP2_Pos)
#define RTC_MODE1_INTFLAG_CMP3_Pos 11
#define RTC_MODE1_INTFLAG_CMP3 (_U_(1) << RTC_MODE1_INTFLAG_CMP3_Pos)
#define RTC_MODE1_INTFLAG_CMP_Pos 8
#define RTC_MODE1_INTFLAG_CMP_Msk (_U_(0xF) << RTC_MODE1_INTFLAG_CMP_Pos)
#define RTC_MODE1_INTFLAG_CMP(value) (RTC_MODE1_INTFLAG_CMP_Msk & ((value) << RTC_MODE1_INTFLAG_CMP_Pos))
#define RTC_MODE1_INTFLAG_TAMPER_Pos 14
#define RTC_MODE1_INTFLAG_TAMPER (_U_(0x1) << RTC_MODE1_INTFLAG_TAMPER_Pos)
#define RTC_MODE1_INTFLAG_OVF_Pos 15
#define RTC_MODE1_INTFLAG_OVF (_U_(0x1) << RTC_MODE1_INTFLAG_OVF_Pos)
#define RTC_MODE1_INTFLAG_MASK _U_(0xCFFF)



typedef union {
  struct {
    volatile const uint16_t PER0:1;
    volatile const uint16_t PER1:1;
    volatile const uint16_t PER2:1;
    volatile const uint16_t PER3:1;
    volatile const uint16_t PER4:1;
    volatile const uint16_t PER5:1;
    volatile const uint16_t PER6:1;
    volatile const uint16_t PER7:1;
    volatile const uint16_t ALARM0:1;
    volatile const uint16_t ALARM1:1;
    volatile const uint16_t :4;
    volatile const uint16_t TAMPER:1;
    volatile const uint16_t OVF:1;
  } bit;
  struct {
    volatile const uint16_t PER:8;
    volatile const uint16_t ALARM:2;
    volatile const uint16_t :6;
  } vec;
  uint16_t reg;
} RTC_MODE2_INTFLAG_Type;


#define RTC_MODE2_INTFLAG_OFFSET 0x0C
#define RTC_MODE2_INTFLAG_RESETVALUE _U_(0x0000)

#define RTC_MODE2_INTFLAG_PER0_Pos 0
#define RTC_MODE2_INTFLAG_PER0 (_U_(1) << RTC_MODE2_INTFLAG_PER0_Pos)
#define RTC_MODE2_INTFLAG_PER1_Pos 1
#define RTC_MODE2_INTFLAG_PER1 (_U_(1) << RTC_MODE2_INTFLAG_PER1_Pos)
#define RTC_MODE2_INTFLAG_PER2_Pos 2
#define RTC_MODE2_INTFLAG_PER2 (_U_(1) << RTC_MODE2_INTFLAG_PER2_Pos)
#define RTC_MODE2_INTFLAG_PER3_Pos 3
#define RTC_MODE2_INTFLAG_PER3 (_U_(1) << RTC_MODE2_INTFLAG_PER3_Pos)
#define RTC_MODE2_INTFLAG_PER4_Pos 4
#define RTC_MODE2_INTFLAG_PER4 (_U_(1) << RTC_MODE2_INTFLAG_PER4_Pos)
#define RTC_MODE2_INTFLAG_PER5_Pos 5
#define RTC_MODE2_INTFLAG_PER5 (_U_(1) << RTC_MODE2_INTFLAG_PER5_Pos)
#define RTC_MODE2_INTFLAG_PER6_Pos 6
#define RTC_MODE2_INTFLAG_PER6 (_U_(1) << RTC_MODE2_INTFLAG_PER6_Pos)
#define RTC_MODE2_INTFLAG_PER7_Pos 7
#define RTC_MODE2_INTFLAG_PER7 (_U_(1) << RTC_MODE2_INTFLAG_PER7_Pos)
#define RTC_MODE2_INTFLAG_PER_Pos 0
#define RTC_MODE2_INTFLAG_PER_Msk (_U_(0xFF) << RTC_MODE2_INTFLAG_PER_Pos)
#define RTC_MODE2_INTFLAG_PER(value) (RTC_MODE2_INTFLAG_PER_Msk & ((value) << RTC_MODE2_INTFLAG_PER_Pos))
#define RTC_MODE2_INTFLAG_ALARM0_Pos 8
#define RTC_MODE2_INTFLAG_ALARM0 (_U_(1) << RTC_MODE2_INTFLAG_ALARM0_Pos)
#define RTC_MODE2_INTFLAG_ALARM1_Pos 9
#define RTC_MODE2_INTFLAG_ALARM1 (_U_(1) << RTC_MODE2_INTFLAG_ALARM1_Pos)
#define RTC_MODE2_INTFLAG_ALARM_Pos 8
#define RTC_MODE2_INTFLAG_ALARM_Msk (_U_(0x3) << RTC_MODE2_INTFLAG_ALARM_Pos)
#define RTC_MODE2_INTFLAG_ALARM(value) (RTC_MODE2_INTFLAG_ALARM_Msk & ((value) << RTC_MODE2_INTFLAG_ALARM_Pos))
#define RTC_MODE2_INTFLAG_TAMPER_Pos 14
#define RTC_MODE2_INTFLAG_TAMPER (_U_(0x1) << RTC_MODE2_INTFLAG_TAMPER_Pos)
#define RTC_MODE2_INTFLAG_OVF_Pos 15
#define RTC_MODE2_INTFLAG_OVF (_U_(0x1) << RTC_MODE2_INTFLAG_OVF_Pos)
#define RTC_MODE2_INTFLAG_MASK _U_(0xC3FF)



typedef union {
  struct {
    uint8_t DBGRUN:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} RTC_DBGCTRL_Type;


#define RTC_DBGCTRL_OFFSET 0x0E
#define RTC_DBGCTRL_RESETVALUE _U_(0x00)

#define RTC_DBGCTRL_DBGRUN_Pos 0
#define RTC_DBGCTRL_DBGRUN (_U_(0x1) << RTC_DBGCTRL_DBGRUN_Pos)
#define RTC_DBGCTRL_MASK _U_(0x01)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t FREQCORR:1;
    uint32_t COUNT:1;
    uint32_t :1;
    uint32_t COMP0:1;
    uint32_t COMP1:1;
    uint32_t :8;
    uint32_t COUNTSYNC:1;
    uint32_t GP0:1;
    uint32_t GP1:1;
    uint32_t GP2:1;
    uint32_t GP3:1;
    uint32_t :12;
  } bit;
  struct {
    uint32_t :5;
    uint32_t COMP:2;
    uint32_t :9;
    uint32_t GP:4;
    uint32_t :12;
  } vec;
  uint32_t reg;
} RTC_MODE0_SYNCBUSY_Type;


#define RTC_MODE0_SYNCBUSY_OFFSET 0x10
#define RTC_MODE0_SYNCBUSY_RESETVALUE _U_(0x00000000)

#define RTC_MODE0_SYNCBUSY_SWRST_Pos 0
#define RTC_MODE0_SYNCBUSY_SWRST (_U_(0x1) << RTC_MODE0_SYNCBUSY_SWRST_Pos)
#define RTC_MODE0_SYNCBUSY_ENABLE_Pos 1
#define RTC_MODE0_SYNCBUSY_ENABLE (_U_(0x1) << RTC_MODE0_SYNCBUSY_ENABLE_Pos)
#define RTC_MODE0_SYNCBUSY_FREQCORR_Pos 2
#define RTC_MODE0_SYNCBUSY_FREQCORR (_U_(0x1) << RTC_MODE0_SYNCBUSY_FREQCORR_Pos)
#define RTC_MODE0_SYNCBUSY_COUNT_Pos 3
#define RTC_MODE0_SYNCBUSY_COUNT (_U_(0x1) << RTC_MODE0_SYNCBUSY_COUNT_Pos)
#define RTC_MODE0_SYNCBUSY_COMP0_Pos 5
#define RTC_MODE0_SYNCBUSY_COMP0 (_U_(1) << RTC_MODE0_SYNCBUSY_COMP0_Pos)
#define RTC_MODE0_SYNCBUSY_COMP1_Pos 6
#define RTC_MODE0_SYNCBUSY_COMP1 (_U_(1) << RTC_MODE0_SYNCBUSY_COMP1_Pos)
#define RTC_MODE0_SYNCBUSY_COMP_Pos 5
#define RTC_MODE0_SYNCBUSY_COMP_Msk (_U_(0x3) << RTC_MODE0_SYNCBUSY_COMP_Pos)
#define RTC_MODE0_SYNCBUSY_COMP(value) (RTC_MODE0_SYNCBUSY_COMP_Msk & ((value) << RTC_MODE0_SYNCBUSY_COMP_Pos))
#define RTC_MODE0_SYNCBUSY_COUNTSYNC_Pos 15
#define RTC_MODE0_SYNCBUSY_COUNTSYNC (_U_(0x1) << RTC_MODE0_SYNCBUSY_COUNTSYNC_Pos)
#define RTC_MODE0_SYNCBUSY_GP0_Pos 16
#define RTC_MODE0_SYNCBUSY_GP0 (_U_(1) << RTC_MODE0_SYNCBUSY_GP0_Pos)
#define RTC_MODE0_SYNCBUSY_GP1_Pos 17
#define RTC_MODE0_SYNCBUSY_GP1 (_U_(1) << RTC_MODE0_SYNCBUSY_GP1_Pos)
#define RTC_MODE0_SYNCBUSY_GP2_Pos 18
#define RTC_MODE0_SYNCBUSY_GP2 (_U_(1) << RTC_MODE0_SYNCBUSY_GP2_Pos)
#define RTC_MODE0_SYNCBUSY_GP3_Pos 19
#define RTC_MODE0_SYNCBUSY_GP3 (_U_(1) << RTC_MODE0_SYNCBUSY_GP3_Pos)
#define RTC_MODE0_SYNCBUSY_GP_Pos 16
#define RTC_MODE0_SYNCBUSY_GP_Msk (_U_(0xF) << RTC_MODE0_SYNCBUSY_GP_Pos)
#define RTC_MODE0_SYNCBUSY_GP(value) (RTC_MODE0_SYNCBUSY_GP_Msk & ((value) << RTC_MODE0_SYNCBUSY_GP_Pos))
#define RTC_MODE0_SYNCBUSY_MASK _U_(0x000F806F)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t FREQCORR:1;
    uint32_t COUNT:1;
    uint32_t PER:1;
    uint32_t COMP0:1;
    uint32_t COMP1:1;
    uint32_t COMP2:1;
    uint32_t COMP3:1;
    uint32_t :6;
    uint32_t COUNTSYNC:1;
    uint32_t GP0:1;
    uint32_t GP1:1;
    uint32_t GP2:1;
    uint32_t GP3:1;
    uint32_t :12;
  } bit;
  struct {
    uint32_t :5;
    uint32_t COMP:4;
    uint32_t :7;
    uint32_t GP:4;
    uint32_t :12;
  } vec;
  uint32_t reg;
} RTC_MODE1_SYNCBUSY_Type;


#define RTC_MODE1_SYNCBUSY_OFFSET 0x10
#define RTC_MODE1_SYNCBUSY_RESETVALUE _U_(0x00000000)

#define RTC_MODE1_SYNCBUSY_SWRST_Pos 0
#define RTC_MODE1_SYNCBUSY_SWRST (_U_(0x1) << RTC_MODE1_SYNCBUSY_SWRST_Pos)
#define RTC_MODE1_SYNCBUSY_ENABLE_Pos 1
#define RTC_MODE1_SYNCBUSY_ENABLE (_U_(0x1) << RTC_MODE1_SYNCBUSY_ENABLE_Pos)
#define RTC_MODE1_SYNCBUSY_FREQCORR_Pos 2
#define RTC_MODE1_SYNCBUSY_FREQCORR (_U_(0x1) << RTC_MODE1_SYNCBUSY_FREQCORR_Pos)
#define RTC_MODE1_SYNCBUSY_COUNT_Pos 3
#define RTC_MODE1_SYNCBUSY_COUNT (_U_(0x1) << RTC_MODE1_SYNCBUSY_COUNT_Pos)
#define RTC_MODE1_SYNCBUSY_PER_Pos 4
#define RTC_MODE1_SYNCBUSY_PER (_U_(0x1) << RTC_MODE1_SYNCBUSY_PER_Pos)
#define RTC_MODE1_SYNCBUSY_COMP0_Pos 5
#define RTC_MODE1_SYNCBUSY_COMP0 (_U_(1) << RTC_MODE1_SYNCBUSY_COMP0_Pos)
#define RTC_MODE1_SYNCBUSY_COMP1_Pos 6
#define RTC_MODE1_SYNCBUSY_COMP1 (_U_(1) << RTC_MODE1_SYNCBUSY_COMP1_Pos)
#define RTC_MODE1_SYNCBUSY_COMP2_Pos 7
#define RTC_MODE1_SYNCBUSY_COMP2 (_U_(1) << RTC_MODE1_SYNCBUSY_COMP2_Pos)
#define RTC_MODE1_SYNCBUSY_COMP3_Pos 8
#define RTC_MODE1_SYNCBUSY_COMP3 (_U_(1) << RTC_MODE1_SYNCBUSY_COMP3_Pos)
#define RTC_MODE1_SYNCBUSY_COMP_Pos 5
#define RTC_MODE1_SYNCBUSY_COMP_Msk (_U_(0xF) << RTC_MODE1_SYNCBUSY_COMP_Pos)
#define RTC_MODE1_SYNCBUSY_COMP(value) (RTC_MODE1_SYNCBUSY_COMP_Msk & ((value) << RTC_MODE1_SYNCBUSY_COMP_Pos))
#define RTC_MODE1_SYNCBUSY_COUNTSYNC_Pos 15
#define RTC_MODE1_SYNCBUSY_COUNTSYNC (_U_(0x1) << RTC_MODE1_SYNCBUSY_COUNTSYNC_Pos)
#define RTC_MODE1_SYNCBUSY_GP0_Pos 16
#define RTC_MODE1_SYNCBUSY_GP0 (_U_(1) << RTC_MODE1_SYNCBUSY_GP0_Pos)
#define RTC_MODE1_SYNCBUSY_GP1_Pos 17
#define RTC_MODE1_SYNCBUSY_GP1 (_U_(1) << RTC_MODE1_SYNCBUSY_GP1_Pos)
#define RTC_MODE1_SYNCBUSY_GP2_Pos 18
#define RTC_MODE1_SYNCBUSY_GP2 (_U_(1) << RTC_MODE1_SYNCBUSY_GP2_Pos)
#define RTC_MODE1_SYNCBUSY_GP3_Pos 19
#define RTC_MODE1_SYNCBUSY_GP3 (_U_(1) << RTC_MODE1_SYNCBUSY_GP3_Pos)
#define RTC_MODE1_SYNCBUSY_GP_Pos 16
#define RTC_MODE1_SYNCBUSY_GP_Msk (_U_(0xF) << RTC_MODE1_SYNCBUSY_GP_Pos)
#define RTC_MODE1_SYNCBUSY_GP(value) (RTC_MODE1_SYNCBUSY_GP_Msk & ((value) << RTC_MODE1_SYNCBUSY_GP_Pos))
#define RTC_MODE1_SYNCBUSY_MASK _U_(0x000F81FF)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t FREQCORR:1;
    uint32_t CLOCK:1;
    uint32_t :1;
    uint32_t ALARM0:1;
    uint32_t ALARM1:1;
    uint32_t :4;
    uint32_t MASK0:1;
    uint32_t MASK1:1;
    uint32_t :2;
    uint32_t CLOCKSYNC:1;
    uint32_t GP0:1;
    uint32_t GP1:1;
    uint32_t GP2:1;
    uint32_t GP3:1;
    uint32_t :12;
  } bit;
  struct {
    uint32_t :5;
    uint32_t ALARM:2;
    uint32_t :4;
    uint32_t MASK:2;
    uint32_t :3;
    uint32_t GP:4;
    uint32_t :12;
  } vec;
  uint32_t reg;
} RTC_MODE2_SYNCBUSY_Type;


#define RTC_MODE2_SYNCBUSY_OFFSET 0x10
#define RTC_MODE2_SYNCBUSY_RESETVALUE _U_(0x00000000)

#define RTC_MODE2_SYNCBUSY_SWRST_Pos 0
#define RTC_MODE2_SYNCBUSY_SWRST (_U_(0x1) << RTC_MODE2_SYNCBUSY_SWRST_Pos)
#define RTC_MODE2_SYNCBUSY_ENABLE_Pos 1
#define RTC_MODE2_SYNCBUSY_ENABLE (_U_(0x1) << RTC_MODE2_SYNCBUSY_ENABLE_Pos)
#define RTC_MODE2_SYNCBUSY_FREQCORR_Pos 2
#define RTC_MODE2_SYNCBUSY_FREQCORR (_U_(0x1) << RTC_MODE2_SYNCBUSY_FREQCORR_Pos)
#define RTC_MODE2_SYNCBUSY_CLOCK_Pos 3
#define RTC_MODE2_SYNCBUSY_CLOCK (_U_(0x1) << RTC_MODE2_SYNCBUSY_CLOCK_Pos)
#define RTC_MODE2_SYNCBUSY_ALARM0_Pos 5
#define RTC_MODE2_SYNCBUSY_ALARM0 (_U_(1) << RTC_MODE2_SYNCBUSY_ALARM0_Pos)
#define RTC_MODE2_SYNCBUSY_ALARM1_Pos 6
#define RTC_MODE2_SYNCBUSY_ALARM1 (_U_(1) << RTC_MODE2_SYNCBUSY_ALARM1_Pos)
#define RTC_MODE2_SYNCBUSY_ALARM_Pos 5
#define RTC_MODE2_SYNCBUSY_ALARM_Msk (_U_(0x3) << RTC_MODE2_SYNCBUSY_ALARM_Pos)
#define RTC_MODE2_SYNCBUSY_ALARM(value) (RTC_MODE2_SYNCBUSY_ALARM_Msk & ((value) << RTC_MODE2_SYNCBUSY_ALARM_Pos))
#define RTC_MODE2_SYNCBUSY_MASK0_Pos 11
#define RTC_MODE2_SYNCBUSY_MASK0 (_U_(1) << RTC_MODE2_SYNCBUSY_MASK0_Pos)
#define RTC_MODE2_SYNCBUSY_MASK1_Pos 12
#define RTC_MODE2_SYNCBUSY_MASK1 (_U_(1) << RTC_MODE2_SYNCBUSY_MASK1_Pos)
#define RTC_MODE2_SYNCBUSY_MASK_Pos 11
#define RTC_MODE2_SYNCBUSY_MASK_Msk (_U_(0x3) << RTC_MODE2_SYNCBUSY_MASK_Pos)
#define RTC_MODE2_SYNCBUSY_MASK(value) (RTC_MODE2_SYNCBUSY_MASK_Msk & ((value) << RTC_MODE2_SYNCBUSY_MASK_Pos))
#define RTC_MODE2_SYNCBUSY_CLOCKSYNC_Pos 15
#define RTC_MODE2_SYNCBUSY_CLOCKSYNC (_U_(0x1) << RTC_MODE2_SYNCBUSY_CLOCKSYNC_Pos)
#define RTC_MODE2_SYNCBUSY_GP0_Pos 16
#define RTC_MODE2_SYNCBUSY_GP0 (_U_(1) << RTC_MODE2_SYNCBUSY_GP0_Pos)
#define RTC_MODE2_SYNCBUSY_GP1_Pos 17
#define RTC_MODE2_SYNCBUSY_GP1 (_U_(1) << RTC_MODE2_SYNCBUSY_GP1_Pos)
#define RTC_MODE2_SYNCBUSY_GP2_Pos 18
#define RTC_MODE2_SYNCBUSY_GP2 (_U_(1) << RTC_MODE2_SYNCBUSY_GP2_Pos)
#define RTC_MODE2_SYNCBUSY_GP3_Pos 19
#define RTC_MODE2_SYNCBUSY_GP3 (_U_(1) << RTC_MODE2_SYNCBUSY_GP3_Pos)
#define RTC_MODE2_SYNCBUSY_GP_Pos 16
#define RTC_MODE2_SYNCBUSY_GP_Msk (_U_(0xF) << RTC_MODE2_SYNCBUSY_GP_Pos)
#define RTC_MODE2_SYNCBUSY_GP(value) (RTC_MODE2_SYNCBUSY_GP_Msk & ((value) << RTC_MODE2_SYNCBUSY_GP_Pos))
#define RTC_MODE2_SYNCBUSY_MASK_ _U_(0x000F986F)



typedef union {
  struct {
    uint8_t VALUE:7;
    uint8_t SIGN:1;
  } bit;
  uint8_t reg;
} RTC_FREQCORR_Type;


#define RTC_FREQCORR_OFFSET 0x14
#define RTC_FREQCORR_RESETVALUE _U_(0x00)

#define RTC_FREQCORR_VALUE_Pos 0
#define RTC_FREQCORR_VALUE_Msk (_U_(0x7F) << RTC_FREQCORR_VALUE_Pos)
#define RTC_FREQCORR_VALUE(value) (RTC_FREQCORR_VALUE_Msk & ((value) << RTC_FREQCORR_VALUE_Pos))
#define RTC_FREQCORR_SIGN_Pos 7
#define RTC_FREQCORR_SIGN (_U_(0x1) << RTC_FREQCORR_SIGN_Pos)
#define RTC_FREQCORR_MASK _U_(0xFF)



typedef union {
  struct {
    uint32_t COUNT:32;
  } bit;
  uint32_t reg;
} RTC_MODE0_COUNT_Type;


#define RTC_MODE0_COUNT_OFFSET 0x18
#define RTC_MODE0_COUNT_RESETVALUE _U_(0x00000000)

#define RTC_MODE0_COUNT_COUNT_Pos 0
#define RTC_MODE0_COUNT_COUNT_Msk (_U_(0xFFFFFFFF) << RTC_MODE0_COUNT_COUNT_Pos)
#define RTC_MODE0_COUNT_COUNT(value) (RTC_MODE0_COUNT_COUNT_Msk & ((value) << RTC_MODE0_COUNT_COUNT_Pos))
#define RTC_MODE0_COUNT_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint16_t COUNT:16;
  } bit;
  uint16_t reg;
} RTC_MODE1_COUNT_Type;


#define RTC_MODE1_COUNT_OFFSET 0x18
#define RTC_MODE1_COUNT_RESETVALUE _U_(0x0000)

#define RTC_MODE1_COUNT_COUNT_Pos 0
#define RTC_MODE1_COUNT_COUNT_Msk (_U_(0xFFFF) << RTC_MODE1_COUNT_COUNT_Pos)
#define RTC_MODE1_COUNT_COUNT(value) (RTC_MODE1_COUNT_COUNT_Msk & ((value) << RTC_MODE1_COUNT_COUNT_Pos))
#define RTC_MODE1_COUNT_MASK _U_(0xFFFF)



typedef union {
  struct {
    uint32_t SECOND:6;
    uint32_t MINUTE:6;
    uint32_t HOUR:5;
    uint32_t DAY:5;
    uint32_t MONTH:4;
    uint32_t YEAR:6;
  } bit;
  uint32_t reg;
} RTC_MODE2_CLOCK_Type;


#define RTC_MODE2_CLOCK_OFFSET 0x18
#define RTC_MODE2_CLOCK_RESETVALUE _U_(0x00000000)

#define RTC_MODE2_CLOCK_SECOND_Pos 0
#define RTC_MODE2_CLOCK_SECOND_Msk (_U_(0x3F) << RTC_MODE2_CLOCK_SECOND_Pos)
#define RTC_MODE2_CLOCK_SECOND(value) (RTC_MODE2_CLOCK_SECOND_Msk & ((value) << RTC_MODE2_CLOCK_SECOND_Pos))
#define RTC_MODE2_CLOCK_MINUTE_Pos 6
#define RTC_MODE2_CLOCK_MINUTE_Msk (_U_(0x3F) << RTC_MODE2_CLOCK_MINUTE_Pos)
#define RTC_MODE2_CLOCK_MINUTE(value) (RTC_MODE2_CLOCK_MINUTE_Msk & ((value) << RTC_MODE2_CLOCK_MINUTE_Pos))
#define RTC_MODE2_CLOCK_HOUR_Pos 12
#define RTC_MODE2_CLOCK_HOUR_Msk (_U_(0x1F) << RTC_MODE2_CLOCK_HOUR_Pos)
#define RTC_MODE2_CLOCK_HOUR(value) (RTC_MODE2_CLOCK_HOUR_Msk & ((value) << RTC_MODE2_CLOCK_HOUR_Pos))
#define RTC_MODE2_CLOCK_HOUR_AM_Val _U_(0x0)
#define RTC_MODE2_CLOCK_HOUR_PM_Val _U_(0x10)
#define RTC_MODE2_CLOCK_HOUR_AM (RTC_MODE2_CLOCK_HOUR_AM_Val << RTC_MODE2_CLOCK_HOUR_Pos)
#define RTC_MODE2_CLOCK_HOUR_PM (RTC_MODE2_CLOCK_HOUR_PM_Val << RTC_MODE2_CLOCK_HOUR_Pos)
#define RTC_MODE2_CLOCK_DAY_Pos 17
#define RTC_MODE2_CLOCK_DAY_Msk (_U_(0x1F) << RTC_MODE2_CLOCK_DAY_Pos)
#define RTC_MODE2_CLOCK_DAY(value) (RTC_MODE2_CLOCK_DAY_Msk & ((value) << RTC_MODE2_CLOCK_DAY_Pos))
#define RTC_MODE2_CLOCK_MONTH_Pos 22
#define RTC_MODE2_CLOCK_MONTH_Msk (_U_(0xF) << RTC_MODE2_CLOCK_MONTH_Pos)
#define RTC_MODE2_CLOCK_MONTH(value) (RTC_MODE2_CLOCK_MONTH_Msk & ((value) << RTC_MODE2_CLOCK_MONTH_Pos))
#define RTC_MODE2_CLOCK_YEAR_Pos 26
#define RTC_MODE2_CLOCK_YEAR_Msk (_U_(0x3F) << RTC_MODE2_CLOCK_YEAR_Pos)
#define RTC_MODE2_CLOCK_YEAR(value) (RTC_MODE2_CLOCK_YEAR_Msk & ((value) << RTC_MODE2_CLOCK_YEAR_Pos))
#define RTC_MODE2_CLOCK_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint16_t PER:16;
  } bit;
  uint16_t reg;
} RTC_MODE1_PER_Type;


#define RTC_MODE1_PER_OFFSET 0x1C
#define RTC_MODE1_PER_RESETVALUE _U_(0x0000)

#define RTC_MODE1_PER_PER_Pos 0
#define RTC_MODE1_PER_PER_Msk (_U_(0xFFFF) << RTC_MODE1_PER_PER_Pos)
#define RTC_MODE1_PER_PER(value) (RTC_MODE1_PER_PER_Msk & ((value) << RTC_MODE1_PER_PER_Pos))
#define RTC_MODE1_PER_MASK _U_(0xFFFF)



typedef union {
  struct {
    uint32_t COMP:32;
  } bit;
  uint32_t reg;
} RTC_MODE0_COMP_Type;


#define RTC_MODE0_COMP_OFFSET 0x20
#define RTC_MODE0_COMP_RESETVALUE _U_(0x00000000)

#define RTC_MODE0_COMP_COMP_Pos 0
#define RTC_MODE0_COMP_COMP_Msk (_U_(0xFFFFFFFF) << RTC_MODE0_COMP_COMP_Pos)
#define RTC_MODE0_COMP_COMP(value) (RTC_MODE0_COMP_COMP_Msk & ((value) << RTC_MODE0_COMP_COMP_Pos))
#define RTC_MODE0_COMP_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint16_t COMP:16;
  } bit;
  uint16_t reg;
} RTC_MODE1_COMP_Type;


#define RTC_MODE1_COMP_OFFSET 0x20
#define RTC_MODE1_COMP_RESETVALUE _U_(0x0000)

#define RTC_MODE1_COMP_COMP_Pos 0
#define RTC_MODE1_COMP_COMP_Msk (_U_(0xFFFF) << RTC_MODE1_COMP_COMP_Pos)
#define RTC_MODE1_COMP_COMP(value) (RTC_MODE1_COMP_COMP_Msk & ((value) << RTC_MODE1_COMP_COMP_Pos))
#define RTC_MODE1_COMP_MASK _U_(0xFFFF)



typedef union {
  struct {
    uint32_t SECOND:6;
    uint32_t MINUTE:6;
    uint32_t HOUR:5;
    uint32_t DAY:5;
    uint32_t MONTH:4;
    uint32_t YEAR:6;
  } bit;
  uint32_t reg;
} RTC_MODE2_ALARM_Type;


#define RTC_MODE2_ALARM_OFFSET 0x20
#define RTC_MODE2_ALARM_RESETVALUE _U_(0x00000000)

#define RTC_MODE2_ALARM_SECOND_Pos 0
#define RTC_MODE2_ALARM_SECOND_Msk (_U_(0x3F) << RTC_MODE2_ALARM_SECOND_Pos)
#define RTC_MODE2_ALARM_SECOND(value) (RTC_MODE2_ALARM_SECOND_Msk & ((value) << RTC_MODE2_ALARM_SECOND_Pos))
#define RTC_MODE2_ALARM_MINUTE_Pos 6
#define RTC_MODE2_ALARM_MINUTE_Msk (_U_(0x3F) << RTC_MODE2_ALARM_MINUTE_Pos)
#define RTC_MODE2_ALARM_MINUTE(value) (RTC_MODE2_ALARM_MINUTE_Msk & ((value) << RTC_MODE2_ALARM_MINUTE_Pos))
#define RTC_MODE2_ALARM_HOUR_Pos 12
#define RTC_MODE2_ALARM_HOUR_Msk (_U_(0x1F) << RTC_MODE2_ALARM_HOUR_Pos)
#define RTC_MODE2_ALARM_HOUR(value) (RTC_MODE2_ALARM_HOUR_Msk & ((value) << RTC_MODE2_ALARM_HOUR_Pos))
#define RTC_MODE2_ALARM_HOUR_AM_Val _U_(0x0)
#define RTC_MODE2_ALARM_HOUR_PM_Val _U_(0x10)
#define RTC_MODE2_ALARM_HOUR_AM (RTC_MODE2_ALARM_HOUR_AM_Val << RTC_MODE2_ALARM_HOUR_Pos)
#define RTC_MODE2_ALARM_HOUR_PM (RTC_MODE2_ALARM_HOUR_PM_Val << RTC_MODE2_ALARM_HOUR_Pos)
#define RTC_MODE2_ALARM_DAY_Pos 17
#define RTC_MODE2_ALARM_DAY_Msk (_U_(0x1F) << RTC_MODE2_ALARM_DAY_Pos)
#define RTC_MODE2_ALARM_DAY(value) (RTC_MODE2_ALARM_DAY_Msk & ((value) << RTC_MODE2_ALARM_DAY_Pos))
#define RTC_MODE2_ALARM_MONTH_Pos 22
#define RTC_MODE2_ALARM_MONTH_Msk (_U_(0xF) << RTC_MODE2_ALARM_MONTH_Pos)
#define RTC_MODE2_ALARM_MONTH(value) (RTC_MODE2_ALARM_MONTH_Msk & ((value) << RTC_MODE2_ALARM_MONTH_Pos))
#define RTC_MODE2_ALARM_YEAR_Pos 26
#define RTC_MODE2_ALARM_YEAR_Msk (_U_(0x3F) << RTC_MODE2_ALARM_YEAR_Pos)
#define RTC_MODE2_ALARM_YEAR(value) (RTC_MODE2_ALARM_YEAR_Msk & ((value) << RTC_MODE2_ALARM_YEAR_Pos))
#define RTC_MODE2_ALARM_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint8_t SEL:3;
    uint8_t :5;
  } bit;
  uint8_t reg;
} RTC_MODE2_MASK_Type;


#define RTC_MODE2_MASK_OFFSET 0x24
#define RTC_MODE2_MASK_RESETVALUE _U_(0x00)

#define RTC_MODE2_MASK_SEL_Pos 0
#define RTC_MODE2_MASK_SEL_Msk (_U_(0x7) << RTC_MODE2_MASK_SEL_Pos)
#define RTC_MODE2_MASK_SEL(value) (RTC_MODE2_MASK_SEL_Msk & ((value) << RTC_MODE2_MASK_SEL_Pos))
#define RTC_MODE2_MASK_SEL_OFF_Val _U_(0x0)
#define RTC_MODE2_MASK_SEL_SS_Val _U_(0x1)
#define RTC_MODE2_MASK_SEL_MMSS_Val _U_(0x2)
#define RTC_MODE2_MASK_SEL_HHMMSS_Val _U_(0x3)
#define RTC_MODE2_MASK_SEL_DDHHMMSS_Val _U_(0x4)
#define RTC_MODE2_MASK_SEL_MMDDHHMMSS_Val _U_(0x5)
#define RTC_MODE2_MASK_SEL_YYMMDDHHMMSS_Val _U_(0x6)
#define RTC_MODE2_MASK_SEL_OFF (RTC_MODE2_MASK_SEL_OFF_Val << RTC_MODE2_MASK_SEL_Pos)
#define RTC_MODE2_MASK_SEL_SS (RTC_MODE2_MASK_SEL_SS_Val << RTC_MODE2_MASK_SEL_Pos)
#define RTC_MODE2_MASK_SEL_MMSS (RTC_MODE2_MASK_SEL_MMSS_Val << RTC_MODE2_MASK_SEL_Pos)
#define RTC_MODE2_MASK_SEL_HHMMSS (RTC_MODE2_MASK_SEL_HHMMSS_Val << RTC_MODE2_MASK_SEL_Pos)
#define RTC_MODE2_MASK_SEL_DDHHMMSS (RTC_MODE2_MASK_SEL_DDHHMMSS_Val << RTC_MODE2_MASK_SEL_Pos)
#define RTC_MODE2_MASK_SEL_MMDDHHMMSS (RTC_MODE2_MASK_SEL_MMDDHHMMSS_Val << RTC_MODE2_MASK_SEL_Pos)
#define RTC_MODE2_MASK_SEL_YYMMDDHHMMSS (RTC_MODE2_MASK_SEL_YYMMDDHHMMSS_Val << RTC_MODE2_MASK_SEL_Pos)
#define RTC_MODE2_MASK_MASK _U_(0x07)



typedef union {
  struct {
    uint32_t GP:32;
  } bit;
  uint32_t reg;
} RTC_GP_Type;


#define RTC_GP_OFFSET 0x40
#define RTC_GP_RESETVALUE _U_(0x00000000)

#define RTC_GP_GP_Pos 0
#define RTC_GP_GP_Msk (_U_(0xFFFFFFFF) << RTC_GP_GP_Pos)
#define RTC_GP_GP(value) (RTC_GP_GP_Msk & ((value) << RTC_GP_GP_Pos))
#define RTC_GP_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t IN0ACT:2;
    uint32_t IN1ACT:2;
    uint32_t IN2ACT:2;
    uint32_t IN3ACT:2;
    uint32_t IN4ACT:2;
    uint32_t :6;
    uint32_t TAMLVL0:1;
    uint32_t TAMLVL1:1;
    uint32_t TAMLVL2:1;
    uint32_t TAMLVL3:1;
    uint32_t TAMLVL4:1;
    uint32_t :3;
    uint32_t DEBNC0:1;
    uint32_t DEBNC1:1;
    uint32_t DEBNC2:1;
    uint32_t DEBNC3:1;
    uint32_t DEBNC4:1;
    uint32_t :3;
  } bit;
  struct {
    uint32_t :16;
    uint32_t TAMLVL:5;
    uint32_t :3;
    uint32_t DEBNC:5;
    uint32_t :3;
  } vec;
  uint32_t reg;
} RTC_TAMPCTRL_Type;


#define RTC_TAMPCTRL_OFFSET 0x60
#define RTC_TAMPCTRL_RESETVALUE _U_(0x00000000)

#define RTC_TAMPCTRL_IN0ACT_Pos 0
#define RTC_TAMPCTRL_IN0ACT_Msk (_U_(0x3) << RTC_TAMPCTRL_IN0ACT_Pos)
#define RTC_TAMPCTRL_IN0ACT(value) (RTC_TAMPCTRL_IN0ACT_Msk & ((value) << RTC_TAMPCTRL_IN0ACT_Pos))
#define RTC_TAMPCTRL_IN0ACT_OFF_Val _U_(0x0)
#define RTC_TAMPCTRL_IN0ACT_WAKE_Val _U_(0x1)
#define RTC_TAMPCTRL_IN0ACT_CAPTURE_Val _U_(0x2)
#define RTC_TAMPCTRL_IN0ACT_ACTL_Val _U_(0x3)
#define RTC_TAMPCTRL_IN0ACT_OFF (RTC_TAMPCTRL_IN0ACT_OFF_Val << RTC_TAMPCTRL_IN0ACT_Pos)
#define RTC_TAMPCTRL_IN0ACT_WAKE (RTC_TAMPCTRL_IN0ACT_WAKE_Val << RTC_TAMPCTRL_IN0ACT_Pos)
#define RTC_TAMPCTRL_IN0ACT_CAPTURE (RTC_TAMPCTRL_IN0ACT_CAPTURE_Val << RTC_TAMPCTRL_IN0ACT_Pos)
#define RTC_TAMPCTRL_IN0ACT_ACTL (RTC_TAMPCTRL_IN0ACT_ACTL_Val << RTC_TAMPCTRL_IN0ACT_Pos)
#define RTC_TAMPCTRL_IN1ACT_Pos 2
#define RTC_TAMPCTRL_IN1ACT_Msk (_U_(0x3) << RTC_TAMPCTRL_IN1ACT_Pos)
#define RTC_TAMPCTRL_IN1ACT(value) (RTC_TAMPCTRL_IN1ACT_Msk & ((value) << RTC_TAMPCTRL_IN1ACT_Pos))
#define RTC_TAMPCTRL_IN1ACT_OFF_Val _U_(0x0)
#define RTC_TAMPCTRL_IN1ACT_WAKE_Val _U_(0x1)
#define RTC_TAMPCTRL_IN1ACT_CAPTURE_Val _U_(0x2)
#define RTC_TAMPCTRL_IN1ACT_ACTL_Val _U_(0x3)
#define RTC_TAMPCTRL_IN1ACT_OFF (RTC_TAMPCTRL_IN1ACT_OFF_Val << RTC_TAMPCTRL_IN1ACT_Pos)
#define RTC_TAMPCTRL_IN1ACT_WAKE (RTC_TAMPCTRL_IN1ACT_WAKE_Val << RTC_TAMPCTRL_IN1ACT_Pos)
#define RTC_TAMPCTRL_IN1ACT_CAPTURE (RTC_TAMPCTRL_IN1ACT_CAPTURE_Val << RTC_TAMPCTRL_IN1ACT_Pos)
#define RTC_TAMPCTRL_IN1ACT_ACTL (RTC_TAMPCTRL_IN1ACT_ACTL_Val << RTC_TAMPCTRL_IN1ACT_Pos)
#define RTC_TAMPCTRL_IN2ACT_Pos 4
#define RTC_TAMPCTRL_IN2ACT_Msk (_U_(0x3) << RTC_TAMPCTRL_IN2ACT_Pos)
#define RTC_TAMPCTRL_IN2ACT(value) (RTC_TAMPCTRL_IN2ACT_Msk & ((value) << RTC_TAMPCTRL_IN2ACT_Pos))
#define RTC_TAMPCTRL_IN2ACT_OFF_Val _U_(0x0)
#define RTC_TAMPCTRL_IN2ACT_WAKE_Val _U_(0x1)
#define RTC_TAMPCTRL_IN2ACT_CAPTURE_Val _U_(0x2)
#define RTC_TAMPCTRL_IN2ACT_ACTL_Val _U_(0x3)
#define RTC_TAMPCTRL_IN2ACT_OFF (RTC_TAMPCTRL_IN2ACT_OFF_Val << RTC_TAMPCTRL_IN2ACT_Pos)
#define RTC_TAMPCTRL_IN2ACT_WAKE (RTC_TAMPCTRL_IN2ACT_WAKE_Val << RTC_TAMPCTRL_IN2ACT_Pos)
#define RTC_TAMPCTRL_IN2ACT_CAPTURE (RTC_TAMPCTRL_IN2ACT_CAPTURE_Val << RTC_TAMPCTRL_IN2ACT_Pos)
#define RTC_TAMPCTRL_IN2ACT_ACTL (RTC_TAMPCTRL_IN2ACT_ACTL_Val << RTC_TAMPCTRL_IN2ACT_Pos)
#define RTC_TAMPCTRL_IN3ACT_Pos 6
#define RTC_TAMPCTRL_IN3ACT_Msk (_U_(0x3) << RTC_TAMPCTRL_IN3ACT_Pos)
#define RTC_TAMPCTRL_IN3ACT(value) (RTC_TAMPCTRL_IN3ACT_Msk & ((value) << RTC_TAMPCTRL_IN3ACT_Pos))
#define RTC_TAMPCTRL_IN3ACT_OFF_Val _U_(0x0)
#define RTC_TAMPCTRL_IN3ACT_WAKE_Val _U_(0x1)
#define RTC_TAMPCTRL_IN3ACT_CAPTURE_Val _U_(0x2)
#define RTC_TAMPCTRL_IN3ACT_ACTL_Val _U_(0x3)
#define RTC_TAMPCTRL_IN3ACT_OFF (RTC_TAMPCTRL_IN3ACT_OFF_Val << RTC_TAMPCTRL_IN3ACT_Pos)
#define RTC_TAMPCTRL_IN3ACT_WAKE (RTC_TAMPCTRL_IN3ACT_WAKE_Val << RTC_TAMPCTRL_IN3ACT_Pos)
#define RTC_TAMPCTRL_IN3ACT_CAPTURE (RTC_TAMPCTRL_IN3ACT_CAPTURE_Val << RTC_TAMPCTRL_IN3ACT_Pos)
#define RTC_TAMPCTRL_IN3ACT_ACTL (RTC_TAMPCTRL_IN3ACT_ACTL_Val << RTC_TAMPCTRL_IN3ACT_Pos)
#define RTC_TAMPCTRL_IN4ACT_Pos 8
#define RTC_TAMPCTRL_IN4ACT_Msk (_U_(0x3) << RTC_TAMPCTRL_IN4ACT_Pos)
#define RTC_TAMPCTRL_IN4ACT(value) (RTC_TAMPCTRL_IN4ACT_Msk & ((value) << RTC_TAMPCTRL_IN4ACT_Pos))
#define RTC_TAMPCTRL_IN4ACT_OFF_Val _U_(0x0)
#define RTC_TAMPCTRL_IN4ACT_WAKE_Val _U_(0x1)
#define RTC_TAMPCTRL_IN4ACT_CAPTURE_Val _U_(0x2)
#define RTC_TAMPCTRL_IN4ACT_ACTL_Val _U_(0x3)
#define RTC_TAMPCTRL_IN4ACT_OFF (RTC_TAMPCTRL_IN4ACT_OFF_Val << RTC_TAMPCTRL_IN4ACT_Pos)
#define RTC_TAMPCTRL_IN4ACT_WAKE (RTC_TAMPCTRL_IN4ACT_WAKE_Val << RTC_TAMPCTRL_IN4ACT_Pos)
#define RTC_TAMPCTRL_IN4ACT_CAPTURE (RTC_TAMPCTRL_IN4ACT_CAPTURE_Val << RTC_TAMPCTRL_IN4ACT_Pos)
#define RTC_TAMPCTRL_IN4ACT_ACTL (RTC_TAMPCTRL_IN4ACT_ACTL_Val << RTC_TAMPCTRL_IN4ACT_Pos)
#define RTC_TAMPCTRL_TAMLVL0_Pos 16
#define RTC_TAMPCTRL_TAMLVL0 (_U_(1) << RTC_TAMPCTRL_TAMLVL0_Pos)
#define RTC_TAMPCTRL_TAMLVL1_Pos 17
#define RTC_TAMPCTRL_TAMLVL1 (_U_(1) << RTC_TAMPCTRL_TAMLVL1_Pos)
#define RTC_TAMPCTRL_TAMLVL2_Pos 18
#define RTC_TAMPCTRL_TAMLVL2 (_U_(1) << RTC_TAMPCTRL_TAMLVL2_Pos)
#define RTC_TAMPCTRL_TAMLVL3_Pos 19
#define RTC_TAMPCTRL_TAMLVL3 (_U_(1) << RTC_TAMPCTRL_TAMLVL3_Pos)
#define RTC_TAMPCTRL_TAMLVL4_Pos 20
#define RTC_TAMPCTRL_TAMLVL4 (_U_(1) << RTC_TAMPCTRL_TAMLVL4_Pos)
#define RTC_TAMPCTRL_TAMLVL_Pos 16
#define RTC_TAMPCTRL_TAMLVL_Msk (_U_(0x1F) << RTC_TAMPCTRL_TAMLVL_Pos)
#define RTC_TAMPCTRL_TAMLVL(value) (RTC_TAMPCTRL_TAMLVL_Msk & ((value) << RTC_TAMPCTRL_TAMLVL_Pos))
#define RTC_TAMPCTRL_DEBNC0_Pos 24
#define RTC_TAMPCTRL_DEBNC0 (_U_(1) << RTC_TAMPCTRL_DEBNC0_Pos)
#define RTC_TAMPCTRL_DEBNC1_Pos 25
#define RTC_TAMPCTRL_DEBNC1 (_U_(1) << RTC_TAMPCTRL_DEBNC1_Pos)
#define RTC_TAMPCTRL_DEBNC2_Pos 26
#define RTC_TAMPCTRL_DEBNC2 (_U_(1) << RTC_TAMPCTRL_DEBNC2_Pos)
#define RTC_TAMPCTRL_DEBNC3_Pos 27
#define RTC_TAMPCTRL_DEBNC3 (_U_(1) << RTC_TAMPCTRL_DEBNC3_Pos)
#define RTC_TAMPCTRL_DEBNC4_Pos 28
#define RTC_TAMPCTRL_DEBNC4 (_U_(1) << RTC_TAMPCTRL_DEBNC4_Pos)
#define RTC_TAMPCTRL_DEBNC_Pos 24
#define RTC_TAMPCTRL_DEBNC_Msk (_U_(0x1F) << RTC_TAMPCTRL_DEBNC_Pos)
#define RTC_TAMPCTRL_DEBNC(value) (RTC_TAMPCTRL_DEBNC_Msk & ((value) << RTC_TAMPCTRL_DEBNC_Pos))
#define RTC_TAMPCTRL_MASK _U_(0x1F1F03FF)



typedef union {
  struct {
    uint32_t COUNT:32;
  } bit;
  uint32_t reg;
} RTC_MODE0_TIMESTAMP_Type;


#define RTC_MODE0_TIMESTAMP_OFFSET 0x64
#define RTC_MODE0_TIMESTAMP_RESETVALUE _U_(0x00000000)

#define RTC_MODE0_TIMESTAMP_COUNT_Pos 0
#define RTC_MODE0_TIMESTAMP_COUNT_Msk (_U_(0xFFFFFFFF) << RTC_MODE0_TIMESTAMP_COUNT_Pos)
#define RTC_MODE0_TIMESTAMP_COUNT(value) (RTC_MODE0_TIMESTAMP_COUNT_Msk & ((value) << RTC_MODE0_TIMESTAMP_COUNT_Pos))
#define RTC_MODE0_TIMESTAMP_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t COUNT:16;
    uint32_t :16;
  } bit;
  uint32_t reg;
} RTC_MODE1_TIMESTAMP_Type;


#define RTC_MODE1_TIMESTAMP_OFFSET 0x64
#define RTC_MODE1_TIMESTAMP_RESETVALUE _U_(0x00000000)

#define RTC_MODE1_TIMESTAMP_COUNT_Pos 0
#define RTC_MODE1_TIMESTAMP_COUNT_Msk (_U_(0xFFFF) << RTC_MODE1_TIMESTAMP_COUNT_Pos)
#define RTC_MODE1_TIMESTAMP_COUNT(value) (RTC_MODE1_TIMESTAMP_COUNT_Msk & ((value) << RTC_MODE1_TIMESTAMP_COUNT_Pos))
#define RTC_MODE1_TIMESTAMP_MASK _U_(0x0000FFFF)



typedef union {
  struct {
    uint32_t SECOND:6;
    uint32_t MINUTE:6;
    uint32_t HOUR:5;
    uint32_t DAY:5;
    uint32_t MONTH:4;
    uint32_t YEAR:6;
  } bit;
  uint32_t reg;
} RTC_MODE2_TIMESTAMP_Type;


#define RTC_MODE2_TIMESTAMP_OFFSET 0x64
#define RTC_MODE2_TIMESTAMP_RESETVALUE _U_(0x00000000)

#define RTC_MODE2_TIMESTAMP_SECOND_Pos 0
#define RTC_MODE2_TIMESTAMP_SECOND_Msk (_U_(0x3F) << RTC_MODE2_TIMESTAMP_SECOND_Pos)
#define RTC_MODE2_TIMESTAMP_SECOND(value) (RTC_MODE2_TIMESTAMP_SECOND_Msk & ((value) << RTC_MODE2_TIMESTAMP_SECOND_Pos))
#define RTC_MODE2_TIMESTAMP_MINUTE_Pos 6
#define RTC_MODE2_TIMESTAMP_MINUTE_Msk (_U_(0x3F) << RTC_MODE2_TIMESTAMP_MINUTE_Pos)
#define RTC_MODE2_TIMESTAMP_MINUTE(value) (RTC_MODE2_TIMESTAMP_MINUTE_Msk & ((value) << RTC_MODE2_TIMESTAMP_MINUTE_Pos))
#define RTC_MODE2_TIMESTAMP_HOUR_Pos 12
#define RTC_MODE2_TIMESTAMP_HOUR_Msk (_U_(0x1F) << RTC_MODE2_TIMESTAMP_HOUR_Pos)
#define RTC_MODE2_TIMESTAMP_HOUR(value) (RTC_MODE2_TIMESTAMP_HOUR_Msk & ((value) << RTC_MODE2_TIMESTAMP_HOUR_Pos))
#define RTC_MODE2_TIMESTAMP_HOUR_AM_Val _U_(0x0)
#define RTC_MODE2_TIMESTAMP_HOUR_PM_Val _U_(0x10)
#define RTC_MODE2_TIMESTAMP_HOUR_AM (RTC_MODE2_TIMESTAMP_HOUR_AM_Val << RTC_MODE2_TIMESTAMP_HOUR_Pos)
#define RTC_MODE2_TIMESTAMP_HOUR_PM (RTC_MODE2_TIMESTAMP_HOUR_PM_Val << RTC_MODE2_TIMESTAMP_HOUR_Pos)
#define RTC_MODE2_TIMESTAMP_DAY_Pos 17
#define RTC_MODE2_TIMESTAMP_DAY_Msk (_U_(0x1F) << RTC_MODE2_TIMESTAMP_DAY_Pos)
#define RTC_MODE2_TIMESTAMP_DAY(value) (RTC_MODE2_TIMESTAMP_DAY_Msk & ((value) << RTC_MODE2_TIMESTAMP_DAY_Pos))
#define RTC_MODE2_TIMESTAMP_MONTH_Pos 22
#define RTC_MODE2_TIMESTAMP_MONTH_Msk (_U_(0xF) << RTC_MODE2_TIMESTAMP_MONTH_Pos)
#define RTC_MODE2_TIMESTAMP_MONTH(value) (RTC_MODE2_TIMESTAMP_MONTH_Msk & ((value) << RTC_MODE2_TIMESTAMP_MONTH_Pos))
#define RTC_MODE2_TIMESTAMP_YEAR_Pos 26
#define RTC_MODE2_TIMESTAMP_YEAR_Msk (_U_(0x3F) << RTC_MODE2_TIMESTAMP_YEAR_Pos)
#define RTC_MODE2_TIMESTAMP_YEAR(value) (RTC_MODE2_TIMESTAMP_YEAR_Msk & ((value) << RTC_MODE2_TIMESTAMP_YEAR_Pos))
#define RTC_MODE2_TIMESTAMP_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t TAMPID0:1;
    uint32_t TAMPID1:1;
    uint32_t TAMPID2:1;
    uint32_t TAMPID3:1;
    uint32_t TAMPID4:1;
    uint32_t :26;
    uint32_t TAMPEVT:1;
  } bit;
  struct {
    uint32_t TAMPID:5;
    uint32_t :27;
  } vec;
  uint32_t reg;
} RTC_TAMPID_Type;


#define RTC_TAMPID_OFFSET 0x68
#define RTC_TAMPID_RESETVALUE _U_(0x00000000)

#define RTC_TAMPID_TAMPID0_Pos 0
#define RTC_TAMPID_TAMPID0 (_U_(1) << RTC_TAMPID_TAMPID0_Pos)
#define RTC_TAMPID_TAMPID1_Pos 1
#define RTC_TAMPID_TAMPID1 (_U_(1) << RTC_TAMPID_TAMPID1_Pos)
#define RTC_TAMPID_TAMPID2_Pos 2
#define RTC_TAMPID_TAMPID2 (_U_(1) << RTC_TAMPID_TAMPID2_Pos)
#define RTC_TAMPID_TAMPID3_Pos 3
#define RTC_TAMPID_TAMPID3 (_U_(1) << RTC_TAMPID_TAMPID3_Pos)
#define RTC_TAMPID_TAMPID4_Pos 4
#define RTC_TAMPID_TAMPID4 (_U_(1) << RTC_TAMPID_TAMPID4_Pos)
#define RTC_TAMPID_TAMPID_Pos 0
#define RTC_TAMPID_TAMPID_Msk (_U_(0x1F) << RTC_TAMPID_TAMPID_Pos)
#define RTC_TAMPID_TAMPID(value) (RTC_TAMPID_TAMPID_Msk & ((value) << RTC_TAMPID_TAMPID_Pos))
#define RTC_TAMPID_TAMPEVT_Pos 31
#define RTC_TAMPID_TAMPEVT (_U_(0x1) << RTC_TAMPID_TAMPEVT_Pos)
#define RTC_TAMPID_MASK _U_(0x8000001F)



typedef union {
  struct {
    uint32_t BKUP:32;
  } bit;
  uint32_t reg;
} RTC_BKUP_Type;


#define RTC_BKUP_OFFSET 0x80
#define RTC_BKUP_RESETVALUE _U_(0x00000000)

#define RTC_BKUP_BKUP_Pos 0
#define RTC_BKUP_BKUP_Msk (_U_(0xFFFFFFFF) << RTC_BKUP_BKUP_Pos)
#define RTC_BKUP_BKUP(value) (RTC_BKUP_BKUP_Msk & ((value) << RTC_BKUP_BKUP_Pos))
#define RTC_BKUP_MASK _U_(0xFFFFFFFF)



typedef struct {
  volatile RTC_MODE2_ALARM_Type ALARM;
  volatile RTC_MODE2_MASK_Type MASK;
       RoReg8 Reserved1[0x3];
} RtcMode2Alarm;




typedef struct {
  volatile RTC_MODE0_CTRLA_Type CTRLA;
  volatile RTC_MODE0_CTRLB_Type CTRLB;
  volatile RTC_MODE0_EVCTRL_Type EVCTRL;
  volatile RTC_MODE0_INTENCLR_Type INTENCLR;
  volatile RTC_MODE0_INTENSET_Type INTENSET;
  volatile RTC_MODE0_INTFLAG_Type INTFLAG;
  volatile RTC_DBGCTRL_Type DBGCTRL;
       RoReg8 Reserved1[0x1];
  volatile const RTC_MODE0_SYNCBUSY_Type SYNCBUSY;
  volatile RTC_FREQCORR_Type FREQCORR;
       RoReg8 Reserved2[0x3];
  volatile RTC_MODE0_COUNT_Type COUNT;
       RoReg8 Reserved3[0x4];
  volatile RTC_MODE0_COMP_Type COMP[2];
       RoReg8 Reserved4[0x18];
  volatile RTC_GP_Type GP[4];
       RoReg8 Reserved5[0x10];
  volatile RTC_TAMPCTRL_Type TAMPCTRL;
  volatile const RTC_MODE0_TIMESTAMP_Type TIMESTAMP;
  volatile RTC_TAMPID_Type TAMPID;
       RoReg8 Reserved6[0x14];
  volatile RTC_BKUP_Type BKUP[8];
} RtcMode0;




typedef struct {
  volatile RTC_MODE1_CTRLA_Type CTRLA;
  volatile RTC_MODE1_CTRLB_Type CTRLB;
  volatile RTC_MODE1_EVCTRL_Type EVCTRL;
  volatile RTC_MODE1_INTENCLR_Type INTENCLR;
  volatile RTC_MODE1_INTENSET_Type INTENSET;
  volatile RTC_MODE1_INTFLAG_Type INTFLAG;
  volatile RTC_DBGCTRL_Type DBGCTRL;
       RoReg8 Reserved1[0x1];
  volatile const RTC_MODE1_SYNCBUSY_Type SYNCBUSY;
  volatile RTC_FREQCORR_Type FREQCORR;
       RoReg8 Reserved2[0x3];
  volatile RTC_MODE1_COUNT_Type COUNT;
       RoReg8 Reserved3[0x2];
  volatile RTC_MODE1_PER_Type PER;
       RoReg8 Reserved4[0x2];
  volatile RTC_MODE1_COMP_Type COMP[4];
       RoReg8 Reserved5[0x18];
  volatile RTC_GP_Type GP[4];
       RoReg8 Reserved6[0x10];
  volatile RTC_TAMPCTRL_Type TAMPCTRL;
  volatile const RTC_MODE1_TIMESTAMP_Type TIMESTAMP;
  volatile RTC_TAMPID_Type TAMPID;
       RoReg8 Reserved7[0x14];
  volatile RTC_BKUP_Type BKUP[8];
} RtcMode1;




typedef struct {
  volatile RTC_MODE2_CTRLA_Type CTRLA;
  volatile RTC_MODE2_CTRLB_Type CTRLB;
  volatile RTC_MODE2_EVCTRL_Type EVCTRL;
  volatile RTC_MODE2_INTENCLR_Type INTENCLR;
  volatile RTC_MODE2_INTENSET_Type INTENSET;
  volatile RTC_MODE2_INTFLAG_Type INTFLAG;
  volatile RTC_DBGCTRL_Type DBGCTRL;
       RoReg8 Reserved1[0x1];
  volatile const RTC_MODE2_SYNCBUSY_Type SYNCBUSY;
  volatile RTC_FREQCORR_Type FREQCORR;
       RoReg8 Reserved2[0x3];
  volatile RTC_MODE2_CLOCK_Type CLOCK;
       RoReg8 Reserved3[0x4];
       RtcMode2Alarm Mode2Alarm[2];
       RoReg8 Reserved4[0x10];
  volatile RTC_GP_Type GP[4];
       RoReg8 Reserved5[0x10];
  volatile RTC_TAMPCTRL_Type TAMPCTRL;
  volatile const RTC_MODE2_TIMESTAMP_Type TIMESTAMP;
  volatile RTC_TAMPID_Type TAMPID;
       RoReg8 Reserved6[0x14];
  volatile RTC_BKUP_Type BKUP[8];
} RtcMode2;



typedef union {
       RtcMode0 MODE0;
       RtcMode1 MODE1;
       RtcMode2 MODE2;
} Rtc;
# 609 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/sdhc.h" 1
# 31 "asf4/samd51/include/component/sdhc.h"
#define _SAMD51_SDHC_COMPONENT_ 







#define SDHC_U2011 
#define REV_SDHC 0x183



typedef union {
  struct {
    uint32_t ARG2:32;
  } CMD23;
  struct {
    uint32_t ADDR:32;
  } bit;
  uint32_t reg;
} SDHC_SSAR_Type;


#define SDHC_SSAR_OFFSET 0x000
#define SDHC_SSAR_RESETVALUE _U_(0x00000000)


#define SDHC_SSAR_CMD23_ARG2_Pos 0
#define SDHC_SSAR_CMD23_ARG2_Msk (_U_(0xFFFFFFFF) << SDHC_SSAR_CMD23_ARG2_Pos)
#define SDHC_SSAR_CMD23_ARG2(value) (SDHC_SSAR_CMD23_ARG2_Msk & ((value) << SDHC_SSAR_CMD23_ARG2_Pos))
#define SDHC_SSAR_CMD23_MASK _U_(0xFFFFFFFF)

#define SDHC_SSAR_ADDR_Pos 0
#define SDHC_SSAR_ADDR_Msk (_U_(0xFFFFFFFF) << SDHC_SSAR_ADDR_Pos)
#define SDHC_SSAR_ADDR(value) (SDHC_SSAR_ADDR_Msk & ((value) << SDHC_SSAR_ADDR_Pos))
#define SDHC_SSAR_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint16_t BLOCKSIZE:10;
    uint16_t :2;
    uint16_t BOUNDARY:3;
    uint16_t :1;
  } bit;
  uint16_t reg;
} SDHC_BSR_Type;


#define SDHC_BSR_OFFSET 0x004
#define SDHC_BSR_RESETVALUE _U_(0x0000)

#define SDHC_BSR_BLOCKSIZE_Pos 0
#define SDHC_BSR_BLOCKSIZE_Msk (_U_(0x3FF) << SDHC_BSR_BLOCKSIZE_Pos)
#define SDHC_BSR_BLOCKSIZE(value) (SDHC_BSR_BLOCKSIZE_Msk & ((value) << SDHC_BSR_BLOCKSIZE_Pos))
#define SDHC_BSR_BOUNDARY_Pos 12
#define SDHC_BSR_BOUNDARY_Msk (_U_(0x7) << SDHC_BSR_BOUNDARY_Pos)
#define SDHC_BSR_BOUNDARY(value) (SDHC_BSR_BOUNDARY_Msk & ((value) << SDHC_BSR_BOUNDARY_Pos))
#define SDHC_BSR_BOUNDARY_4K_Val _U_(0x0)
#define SDHC_BSR_BOUNDARY_8K_Val _U_(0x1)
#define SDHC_BSR_BOUNDARY_16K_Val _U_(0x2)
#define SDHC_BSR_BOUNDARY_32K_Val _U_(0x3)
#define SDHC_BSR_BOUNDARY_64K_Val _U_(0x4)
#define SDHC_BSR_BOUNDARY_128K_Val _U_(0x5)
#define SDHC_BSR_BOUNDARY_256K_Val _U_(0x6)
#define SDHC_BSR_BOUNDARY_512K_Val _U_(0x7)
#define SDHC_BSR_BOUNDARY_4K (SDHC_BSR_BOUNDARY_4K_Val << SDHC_BSR_BOUNDARY_Pos)
#define SDHC_BSR_BOUNDARY_8K (SDHC_BSR_BOUNDARY_8K_Val << SDHC_BSR_BOUNDARY_Pos)
#define SDHC_BSR_BOUNDARY_16K (SDHC_BSR_BOUNDARY_16K_Val << SDHC_BSR_BOUNDARY_Pos)
#define SDHC_BSR_BOUNDARY_32K (SDHC_BSR_BOUNDARY_32K_Val << SDHC_BSR_BOUNDARY_Pos)
#define SDHC_BSR_BOUNDARY_64K (SDHC_BSR_BOUNDARY_64K_Val << SDHC_BSR_BOUNDARY_Pos)
#define SDHC_BSR_BOUNDARY_128K (SDHC_BSR_BOUNDARY_128K_Val << SDHC_BSR_BOUNDARY_Pos)
#define SDHC_BSR_BOUNDARY_256K (SDHC_BSR_BOUNDARY_256K_Val << SDHC_BSR_BOUNDARY_Pos)
#define SDHC_BSR_BOUNDARY_512K (SDHC_BSR_BOUNDARY_512K_Val << SDHC_BSR_BOUNDARY_Pos)
#define SDHC_BSR_MASK _U_(0x73FF)



typedef union {
  struct {
    uint16_t BCNT:16;
  } bit;
  uint16_t reg;
} SDHC_BCR_Type;


#define SDHC_BCR_OFFSET 0x006
#define SDHC_BCR_RESETVALUE _U_(0x0000)

#define SDHC_BCR_BCNT_Pos 0
#define SDHC_BCR_BCNT_Msk (_U_(0xFFFF) << SDHC_BCR_BCNT_Pos)
#define SDHC_BCR_BCNT(value) (SDHC_BCR_BCNT_Msk & ((value) << SDHC_BCR_BCNT_Pos))
#define SDHC_BCR_MASK _U_(0xFFFF)



typedef union {
  struct {
    uint32_t ARG:32;
  } bit;
  uint32_t reg;
} SDHC_ARG1R_Type;


#define SDHC_ARG1R_OFFSET 0x008
#define SDHC_ARG1R_RESETVALUE _U_(0x00000000)

#define SDHC_ARG1R_ARG_Pos 0
#define SDHC_ARG1R_ARG_Msk (_U_(0xFFFFFFFF) << SDHC_ARG1R_ARG_Pos)
#define SDHC_ARG1R_ARG(value) (SDHC_ARG1R_ARG_Msk & ((value) << SDHC_ARG1R_ARG_Pos))
#define SDHC_ARG1R_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint16_t DMAEN:1;
    uint16_t BCEN:1;
    uint16_t ACMDEN:2;
    uint16_t DTDSEL:1;
    uint16_t MSBSEL:1;
    uint16_t :10;
  } bit;
  uint16_t reg;
} SDHC_TMR_Type;


#define SDHC_TMR_OFFSET 0x00C
#define SDHC_TMR_RESETVALUE _U_(0x0000)

#define SDHC_TMR_DMAEN_Pos 0
#define SDHC_TMR_DMAEN (_U_(0x1) << SDHC_TMR_DMAEN_Pos)
#define SDHC_TMR_DMAEN_DISABLE_Val _U_(0x0)
#define SDHC_TMR_DMAEN_ENABLE_Val _U_(0x1)
#define SDHC_TMR_DMAEN_DISABLE (SDHC_TMR_DMAEN_DISABLE_Val << SDHC_TMR_DMAEN_Pos)
#define SDHC_TMR_DMAEN_ENABLE (SDHC_TMR_DMAEN_ENABLE_Val << SDHC_TMR_DMAEN_Pos)
#define SDHC_TMR_BCEN_Pos 1
#define SDHC_TMR_BCEN (_U_(0x1) << SDHC_TMR_BCEN_Pos)
#define SDHC_TMR_BCEN_DISABLE_Val _U_(0x0)
#define SDHC_TMR_BCEN_ENABLE_Val _U_(0x1)
#define SDHC_TMR_BCEN_DISABLE (SDHC_TMR_BCEN_DISABLE_Val << SDHC_TMR_BCEN_Pos)
#define SDHC_TMR_BCEN_ENABLE (SDHC_TMR_BCEN_ENABLE_Val << SDHC_TMR_BCEN_Pos)
#define SDHC_TMR_ACMDEN_Pos 2
#define SDHC_TMR_ACMDEN_Msk (_U_(0x3) << SDHC_TMR_ACMDEN_Pos)
#define SDHC_TMR_ACMDEN(value) (SDHC_TMR_ACMDEN_Msk & ((value) << SDHC_TMR_ACMDEN_Pos))
#define SDHC_TMR_ACMDEN_DISABLED_Val _U_(0x0)
#define SDHC_TMR_ACMDEN_CMD12_Val _U_(0x1)
#define SDHC_TMR_ACMDEN_CMD23_Val _U_(0x2)
#define SDHC_TMR_ACMDEN_3_Val _U_(0x3)
#define SDHC_TMR_ACMDEN_DISABLED (SDHC_TMR_ACMDEN_DISABLED_Val << SDHC_TMR_ACMDEN_Pos)
#define SDHC_TMR_ACMDEN_CMD12 (SDHC_TMR_ACMDEN_CMD12_Val << SDHC_TMR_ACMDEN_Pos)
#define SDHC_TMR_ACMDEN_CMD23 (SDHC_TMR_ACMDEN_CMD23_Val << SDHC_TMR_ACMDEN_Pos)
#define SDHC_TMR_ACMDEN_3 (SDHC_TMR_ACMDEN_3_Val << SDHC_TMR_ACMDEN_Pos)
#define SDHC_TMR_DTDSEL_Pos 4
#define SDHC_TMR_DTDSEL (_U_(0x1) << SDHC_TMR_DTDSEL_Pos)
#define SDHC_TMR_DTDSEL_WRITE_Val _U_(0x0)
#define SDHC_TMR_DTDSEL_READ_Val _U_(0x1)
#define SDHC_TMR_DTDSEL_WRITE (SDHC_TMR_DTDSEL_WRITE_Val << SDHC_TMR_DTDSEL_Pos)
#define SDHC_TMR_DTDSEL_READ (SDHC_TMR_DTDSEL_READ_Val << SDHC_TMR_DTDSEL_Pos)
#define SDHC_TMR_MSBSEL_Pos 5
#define SDHC_TMR_MSBSEL (_U_(0x1) << SDHC_TMR_MSBSEL_Pos)
#define SDHC_TMR_MSBSEL_SINGLE_Val _U_(0x0)
#define SDHC_TMR_MSBSEL_MULTIPLE_Val _U_(0x1)
#define SDHC_TMR_MSBSEL_SINGLE (SDHC_TMR_MSBSEL_SINGLE_Val << SDHC_TMR_MSBSEL_Pos)
#define SDHC_TMR_MSBSEL_MULTIPLE (SDHC_TMR_MSBSEL_MULTIPLE_Val << SDHC_TMR_MSBSEL_Pos)
#define SDHC_TMR_MASK _U_(0x003F)



typedef union {
  struct {
    uint16_t RESPTYP:2;
    uint16_t :1;
    uint16_t CMDCCEN:1;
    uint16_t CMDICEN:1;
    uint16_t DPSEL:1;
    uint16_t CMDTYP:2;
    uint16_t CMDIDX:6;
    uint16_t :2;
  } bit;
  uint16_t reg;
} SDHC_CR_Type;


#define SDHC_CR_OFFSET 0x00E
#define SDHC_CR_RESETVALUE _U_(0x0000)

#define SDHC_CR_RESPTYP_Pos 0
#define SDHC_CR_RESPTYP_Msk (_U_(0x3) << SDHC_CR_RESPTYP_Pos)
#define SDHC_CR_RESPTYP(value) (SDHC_CR_RESPTYP_Msk & ((value) << SDHC_CR_RESPTYP_Pos))
#define SDHC_CR_RESPTYP_NONE_Val _U_(0x0)
#define SDHC_CR_RESPTYP_136_BIT_Val _U_(0x1)
#define SDHC_CR_RESPTYP_48_BIT_Val _U_(0x2)
#define SDHC_CR_RESPTYP_48_BIT_BUSY_Val _U_(0x3)
#define SDHC_CR_RESPTYP_NONE (SDHC_CR_RESPTYP_NONE_Val << SDHC_CR_RESPTYP_Pos)
#define SDHC_CR_RESPTYP_136_BIT (SDHC_CR_RESPTYP_136_BIT_Val << SDHC_CR_RESPTYP_Pos)
#define SDHC_CR_RESPTYP_48_BIT (SDHC_CR_RESPTYP_48_BIT_Val << SDHC_CR_RESPTYP_Pos)
#define SDHC_CR_RESPTYP_48_BIT_BUSY (SDHC_CR_RESPTYP_48_BIT_BUSY_Val << SDHC_CR_RESPTYP_Pos)
#define SDHC_CR_CMDCCEN_Pos 3
#define SDHC_CR_CMDCCEN (_U_(0x1) << SDHC_CR_CMDCCEN_Pos)
#define SDHC_CR_CMDCCEN_DISABLE_Val _U_(0x0)
#define SDHC_CR_CMDCCEN_ENABLE_Val _U_(0x1)
#define SDHC_CR_CMDCCEN_DISABLE (SDHC_CR_CMDCCEN_DISABLE_Val << SDHC_CR_CMDCCEN_Pos)
#define SDHC_CR_CMDCCEN_ENABLE (SDHC_CR_CMDCCEN_ENABLE_Val << SDHC_CR_CMDCCEN_Pos)
#define SDHC_CR_CMDICEN_Pos 4
#define SDHC_CR_CMDICEN (_U_(0x1) << SDHC_CR_CMDICEN_Pos)
#define SDHC_CR_CMDICEN_DISABLE_Val _U_(0x0)
#define SDHC_CR_CMDICEN_ENABLE_Val _U_(0x1)
#define SDHC_CR_CMDICEN_DISABLE (SDHC_CR_CMDICEN_DISABLE_Val << SDHC_CR_CMDICEN_Pos)
#define SDHC_CR_CMDICEN_ENABLE (SDHC_CR_CMDICEN_ENABLE_Val << SDHC_CR_CMDICEN_Pos)
#define SDHC_CR_DPSEL_Pos 5
#define SDHC_CR_DPSEL (_U_(0x1) << SDHC_CR_DPSEL_Pos)
#define SDHC_CR_DPSEL_NO_DATA_Val _U_(0x0)
#define SDHC_CR_DPSEL_DATA_Val _U_(0x1)
#define SDHC_CR_DPSEL_NO_DATA (SDHC_CR_DPSEL_NO_DATA_Val << SDHC_CR_DPSEL_Pos)
#define SDHC_CR_DPSEL_DATA (SDHC_CR_DPSEL_DATA_Val << SDHC_CR_DPSEL_Pos)
#define SDHC_CR_CMDTYP_Pos 6
#define SDHC_CR_CMDTYP_Msk (_U_(0x3) << SDHC_CR_CMDTYP_Pos)
#define SDHC_CR_CMDTYP(value) (SDHC_CR_CMDTYP_Msk & ((value) << SDHC_CR_CMDTYP_Pos))
#define SDHC_CR_CMDTYP_NORMAL_Val _U_(0x0)
#define SDHC_CR_CMDTYP_SUSPEND_Val _U_(0x1)
#define SDHC_CR_CMDTYP_RESUME_Val _U_(0x2)
#define SDHC_CR_CMDTYP_ABORT_Val _U_(0x3)
#define SDHC_CR_CMDTYP_NORMAL (SDHC_CR_CMDTYP_NORMAL_Val << SDHC_CR_CMDTYP_Pos)
#define SDHC_CR_CMDTYP_SUSPEND (SDHC_CR_CMDTYP_SUSPEND_Val << SDHC_CR_CMDTYP_Pos)
#define SDHC_CR_CMDTYP_RESUME (SDHC_CR_CMDTYP_RESUME_Val << SDHC_CR_CMDTYP_Pos)
#define SDHC_CR_CMDTYP_ABORT (SDHC_CR_CMDTYP_ABORT_Val << SDHC_CR_CMDTYP_Pos)
#define SDHC_CR_CMDIDX_Pos 8
#define SDHC_CR_CMDIDX_Msk (_U_(0x3F) << SDHC_CR_CMDIDX_Pos)
#define SDHC_CR_CMDIDX(value) (SDHC_CR_CMDIDX_Msk & ((value) << SDHC_CR_CMDIDX_Pos))
#define SDHC_CR_MASK _U_(0x3FFB)



typedef union {
  struct {
    uint32_t CMDRESP:32;
  } bit;
  uint32_t reg;
} SDHC_RR_Type;


#define SDHC_RR_OFFSET 0x010
#define SDHC_RR_RESETVALUE _U_(0x00000000)

#define SDHC_RR_CMDRESP_Pos 0
#define SDHC_RR_CMDRESP_Msk (_U_(0xFFFFFFFF) << SDHC_RR_CMDRESP_Pos)
#define SDHC_RR_CMDRESP(value) (SDHC_RR_CMDRESP_Msk & ((value) << SDHC_RR_CMDRESP_Pos))
#define SDHC_RR_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t BUFDATA:32;
  } bit;
  uint32_t reg;
} SDHC_BDPR_Type;


#define SDHC_BDPR_OFFSET 0x020
#define SDHC_BDPR_RESETVALUE _U_(0x00000000)

#define SDHC_BDPR_BUFDATA_Pos 0
#define SDHC_BDPR_BUFDATA_Msk (_U_(0xFFFFFFFF) << SDHC_BDPR_BUFDATA_Pos)
#define SDHC_BDPR_BUFDATA(value) (SDHC_BDPR_BUFDATA_Msk & ((value) << SDHC_BDPR_BUFDATA_Pos))
#define SDHC_BDPR_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t CMDINHC:1;
    uint32_t CMDINHD:1;
    uint32_t DLACT:1;
    uint32_t RTREQ:1;
    uint32_t :4;
    uint32_t WTACT:1;
    uint32_t RTACT:1;
    uint32_t BUFWREN:1;
    uint32_t BUFRDEN:1;
    uint32_t :4;
    uint32_t CARDINS:1;
    uint32_t CARDSS:1;
    uint32_t CARDDPL:1;
    uint32_t WRPPL:1;
    uint32_t DATLL:4;
    uint32_t CMDLL:1;
    uint32_t :7;
  } bit;
  uint32_t reg;
} SDHC_PSR_Type;


#define SDHC_PSR_OFFSET 0x024
#define SDHC_PSR_RESETVALUE _U_(0x00F80000)

#define SDHC_PSR_CMDINHC_Pos 0
#define SDHC_PSR_CMDINHC (_U_(0x1) << SDHC_PSR_CMDINHC_Pos)
#define SDHC_PSR_CMDINHC_CAN_Val _U_(0x0)
#define SDHC_PSR_CMDINHC_CANNOT_Val _U_(0x1)
#define SDHC_PSR_CMDINHC_CAN (SDHC_PSR_CMDINHC_CAN_Val << SDHC_PSR_CMDINHC_Pos)
#define SDHC_PSR_CMDINHC_CANNOT (SDHC_PSR_CMDINHC_CANNOT_Val << SDHC_PSR_CMDINHC_Pos)
#define SDHC_PSR_CMDINHD_Pos 1
#define SDHC_PSR_CMDINHD (_U_(0x1) << SDHC_PSR_CMDINHD_Pos)
#define SDHC_PSR_CMDINHD_CAN_Val _U_(0x0)
#define SDHC_PSR_CMDINHD_CANNOT_Val _U_(0x1)
#define SDHC_PSR_CMDINHD_CAN (SDHC_PSR_CMDINHD_CAN_Val << SDHC_PSR_CMDINHD_Pos)
#define SDHC_PSR_CMDINHD_CANNOT (SDHC_PSR_CMDINHD_CANNOT_Val << SDHC_PSR_CMDINHD_Pos)
#define SDHC_PSR_DLACT_Pos 2
#define SDHC_PSR_DLACT (_U_(0x1) << SDHC_PSR_DLACT_Pos)
#define SDHC_PSR_DLACT_INACTIVE_Val _U_(0x0)
#define SDHC_PSR_DLACT_ACTIVE_Val _U_(0x1)
#define SDHC_PSR_DLACT_INACTIVE (SDHC_PSR_DLACT_INACTIVE_Val << SDHC_PSR_DLACT_Pos)
#define SDHC_PSR_DLACT_ACTIVE (SDHC_PSR_DLACT_ACTIVE_Val << SDHC_PSR_DLACT_Pos)
#define SDHC_PSR_RTREQ_Pos 3
#define SDHC_PSR_RTREQ (_U_(0x1) << SDHC_PSR_RTREQ_Pos)
#define SDHC_PSR_RTREQ_OK_Val _U_(0x0)
#define SDHC_PSR_RTREQ_REQUIRED_Val _U_(0x1)
#define SDHC_PSR_RTREQ_OK (SDHC_PSR_RTREQ_OK_Val << SDHC_PSR_RTREQ_Pos)
#define SDHC_PSR_RTREQ_REQUIRED (SDHC_PSR_RTREQ_REQUIRED_Val << SDHC_PSR_RTREQ_Pos)
#define SDHC_PSR_WTACT_Pos 8
#define SDHC_PSR_WTACT (_U_(0x1) << SDHC_PSR_WTACT_Pos)
#define SDHC_PSR_WTACT_NO_Val _U_(0x0)
#define SDHC_PSR_WTACT_YES_Val _U_(0x1)
#define SDHC_PSR_WTACT_NO (SDHC_PSR_WTACT_NO_Val << SDHC_PSR_WTACT_Pos)
#define SDHC_PSR_WTACT_YES (SDHC_PSR_WTACT_YES_Val << SDHC_PSR_WTACT_Pos)
#define SDHC_PSR_RTACT_Pos 9
#define SDHC_PSR_RTACT (_U_(0x1) << SDHC_PSR_RTACT_Pos)
#define SDHC_PSR_RTACT_NO_Val _U_(0x0)
#define SDHC_PSR_RTACT_YES_Val _U_(0x1)
#define SDHC_PSR_RTACT_NO (SDHC_PSR_RTACT_NO_Val << SDHC_PSR_RTACT_Pos)
#define SDHC_PSR_RTACT_YES (SDHC_PSR_RTACT_YES_Val << SDHC_PSR_RTACT_Pos)
#define SDHC_PSR_BUFWREN_Pos 10
#define SDHC_PSR_BUFWREN (_U_(0x1) << SDHC_PSR_BUFWREN_Pos)
#define SDHC_PSR_BUFWREN_DISABLE_Val _U_(0x0)
#define SDHC_PSR_BUFWREN_ENABLE_Val _U_(0x1)
#define SDHC_PSR_BUFWREN_DISABLE (SDHC_PSR_BUFWREN_DISABLE_Val << SDHC_PSR_BUFWREN_Pos)
#define SDHC_PSR_BUFWREN_ENABLE (SDHC_PSR_BUFWREN_ENABLE_Val << SDHC_PSR_BUFWREN_Pos)
#define SDHC_PSR_BUFRDEN_Pos 11
#define SDHC_PSR_BUFRDEN (_U_(0x1) << SDHC_PSR_BUFRDEN_Pos)
#define SDHC_PSR_BUFRDEN_DISABLE_Val _U_(0x0)
#define SDHC_PSR_BUFRDEN_ENABLE_Val _U_(0x1)
#define SDHC_PSR_BUFRDEN_DISABLE (SDHC_PSR_BUFRDEN_DISABLE_Val << SDHC_PSR_BUFRDEN_Pos)
#define SDHC_PSR_BUFRDEN_ENABLE (SDHC_PSR_BUFRDEN_ENABLE_Val << SDHC_PSR_BUFRDEN_Pos)
#define SDHC_PSR_CARDINS_Pos 16
#define SDHC_PSR_CARDINS (_U_(0x1) << SDHC_PSR_CARDINS_Pos)
#define SDHC_PSR_CARDINS_NO_Val _U_(0x0)
#define SDHC_PSR_CARDINS_YES_Val _U_(0x1)
#define SDHC_PSR_CARDINS_NO (SDHC_PSR_CARDINS_NO_Val << SDHC_PSR_CARDINS_Pos)
#define SDHC_PSR_CARDINS_YES (SDHC_PSR_CARDINS_YES_Val << SDHC_PSR_CARDINS_Pos)
#define SDHC_PSR_CARDSS_Pos 17
#define SDHC_PSR_CARDSS (_U_(0x1) << SDHC_PSR_CARDSS_Pos)
#define SDHC_PSR_CARDSS_NO_Val _U_(0x0)
#define SDHC_PSR_CARDSS_YES_Val _U_(0x1)
#define SDHC_PSR_CARDSS_NO (SDHC_PSR_CARDSS_NO_Val << SDHC_PSR_CARDSS_Pos)
#define SDHC_PSR_CARDSS_YES (SDHC_PSR_CARDSS_YES_Val << SDHC_PSR_CARDSS_Pos)
#define SDHC_PSR_CARDDPL_Pos 18
#define SDHC_PSR_CARDDPL (_U_(0x1) << SDHC_PSR_CARDDPL_Pos)
#define SDHC_PSR_CARDDPL_NO_Val _U_(0x0)
#define SDHC_PSR_CARDDPL_YES_Val _U_(0x1)
#define SDHC_PSR_CARDDPL_NO (SDHC_PSR_CARDDPL_NO_Val << SDHC_PSR_CARDDPL_Pos)
#define SDHC_PSR_CARDDPL_YES (SDHC_PSR_CARDDPL_YES_Val << SDHC_PSR_CARDDPL_Pos)
#define SDHC_PSR_WRPPL_Pos 19
#define SDHC_PSR_WRPPL (_U_(0x1) << SDHC_PSR_WRPPL_Pos)
#define SDHC_PSR_WRPPL_PROTECTED_Val _U_(0x0)
#define SDHC_PSR_WRPPL_ENABLED_Val _U_(0x1)
#define SDHC_PSR_WRPPL_PROTECTED (SDHC_PSR_WRPPL_PROTECTED_Val << SDHC_PSR_WRPPL_Pos)
#define SDHC_PSR_WRPPL_ENABLED (SDHC_PSR_WRPPL_ENABLED_Val << SDHC_PSR_WRPPL_Pos)
#define SDHC_PSR_DATLL_Pos 20
#define SDHC_PSR_DATLL_Msk (_U_(0xF) << SDHC_PSR_DATLL_Pos)
#define SDHC_PSR_DATLL(value) (SDHC_PSR_DATLL_Msk & ((value) << SDHC_PSR_DATLL_Pos))
#define SDHC_PSR_CMDLL_Pos 24
#define SDHC_PSR_CMDLL (_U_(0x1) << SDHC_PSR_CMDLL_Pos)
#define SDHC_PSR_MASK _U_(0x01FF0F0F)



typedef union {
  struct {
    uint8_t LEDCTRL:1;
    uint8_t DW:1;
    uint8_t HSEN:1;
    uint8_t DMASEL:2;
    uint8_t :1;
    uint8_t CARDDTL:1;
    uint8_t CARDDSEL:1;
  } bit;
  struct {
    uint8_t :1;
    uint8_t DW:1;
    uint8_t HSEN:1;
    uint8_t DMASEL:2;
    uint8_t :3;
  } EMMC;
  uint8_t reg;
} SDHC_HC1R_Type;


#define SDHC_HC1R_OFFSET 0x028
#define SDHC_HC1R_RESETVALUE _U_(0xE00)

#define SDHC_HC1R_LEDCTRL_Pos 0
#define SDHC_HC1R_LEDCTRL (_U_(0x1) << SDHC_HC1R_LEDCTRL_Pos)
#define SDHC_HC1R_LEDCTRL_OFF_Val _U_(0x0)
#define SDHC_HC1R_LEDCTRL_ON_Val _U_(0x1)
#define SDHC_HC1R_LEDCTRL_OFF (SDHC_HC1R_LEDCTRL_OFF_Val << SDHC_HC1R_LEDCTRL_Pos)
#define SDHC_HC1R_LEDCTRL_ON (SDHC_HC1R_LEDCTRL_ON_Val << SDHC_HC1R_LEDCTRL_Pos)
#define SDHC_HC1R_DW_Pos 1
#define SDHC_HC1R_DW (_U_(0x1) << SDHC_HC1R_DW_Pos)
#define SDHC_HC1R_DW_1BIT_Val _U_(0x0)
#define SDHC_HC1R_DW_4BIT_Val _U_(0x1)
#define SDHC_HC1R_DW_1BIT (SDHC_HC1R_DW_1BIT_Val << SDHC_HC1R_DW_Pos)
#define SDHC_HC1R_DW_4BIT (SDHC_HC1R_DW_4BIT_Val << SDHC_HC1R_DW_Pos)
#define SDHC_HC1R_HSEN_Pos 2
#define SDHC_HC1R_HSEN (_U_(0x1) << SDHC_HC1R_HSEN_Pos)
#define SDHC_HC1R_HSEN_NORMAL_Val _U_(0x0)
#define SDHC_HC1R_HSEN_HIGH_Val _U_(0x1)
#define SDHC_HC1R_HSEN_NORMAL (SDHC_HC1R_HSEN_NORMAL_Val << SDHC_HC1R_HSEN_Pos)
#define SDHC_HC1R_HSEN_HIGH (SDHC_HC1R_HSEN_HIGH_Val << SDHC_HC1R_HSEN_Pos)
#define SDHC_HC1R_DMASEL_Pos 3
#define SDHC_HC1R_DMASEL_Msk (_U_(0x3) << SDHC_HC1R_DMASEL_Pos)
#define SDHC_HC1R_DMASEL(value) (SDHC_HC1R_DMASEL_Msk & ((value) << SDHC_HC1R_DMASEL_Pos))
#define SDHC_HC1R_DMASEL_SDMA_Val _U_(0x0)
#define SDHC_HC1R_DMASEL_1_Val _U_(0x1)
#define SDHC_HC1R_DMASEL_32BIT_Val _U_(0x2)
#define SDHC_HC1R_DMASEL_SDMA (SDHC_HC1R_DMASEL_SDMA_Val << SDHC_HC1R_DMASEL_Pos)
#define SDHC_HC1R_DMASEL_1 (SDHC_HC1R_DMASEL_1_Val << SDHC_HC1R_DMASEL_Pos)
#define SDHC_HC1R_DMASEL_32BIT (SDHC_HC1R_DMASEL_32BIT_Val << SDHC_HC1R_DMASEL_Pos)
#define SDHC_HC1R_CARDDTL_Pos 6
#define SDHC_HC1R_CARDDTL (_U_(0x1) << SDHC_HC1R_CARDDTL_Pos)
#define SDHC_HC1R_CARDDTL_NO_Val _U_(0x0)
#define SDHC_HC1R_CARDDTL_YES_Val _U_(0x1)
#define SDHC_HC1R_CARDDTL_NO (SDHC_HC1R_CARDDTL_NO_Val << SDHC_HC1R_CARDDTL_Pos)
#define SDHC_HC1R_CARDDTL_YES (SDHC_HC1R_CARDDTL_YES_Val << SDHC_HC1R_CARDDTL_Pos)
#define SDHC_HC1R_CARDDSEL_Pos 7
#define SDHC_HC1R_CARDDSEL (_U_(0x1) << SDHC_HC1R_CARDDSEL_Pos)
#define SDHC_HC1R_CARDDSEL_NORMAL_Val _U_(0x0)
#define SDHC_HC1R_CARDDSEL_TEST_Val _U_(0x1)
#define SDHC_HC1R_CARDDSEL_NORMAL (SDHC_HC1R_CARDDSEL_NORMAL_Val << SDHC_HC1R_CARDDSEL_Pos)
#define SDHC_HC1R_CARDDSEL_TEST (SDHC_HC1R_CARDDSEL_TEST_Val << SDHC_HC1R_CARDDSEL_Pos)
#define SDHC_HC1R_MASK _U_(0xDF)


#define SDHC_HC1R_EMMC_DW_Pos 1
#define SDHC_HC1R_EMMC_DW (_U_(0x1) << SDHC_HC1R_EMMC_DW_Pos)
#define SDHC_HC1R_EMMC_DW_1BIT_Val _U_(0x0)
#define SDHC_HC1R_EMMC_DW_4BIT_Val _U_(0x1)
#define SDHC_HC1R_EMMC_DW_1BIT (SDHC_HC1R_EMMC_DW_1BIT_Val << SDHC_HC1R_EMMC_DW_Pos)
#define SDHC_HC1R_EMMC_DW_4BIT (SDHC_HC1R_EMMC_DW_4BIT_Val << SDHC_HC1R_EMMC_DW_Pos)
#define SDHC_HC1R_EMMC_HSEN_Pos 2
#define SDHC_HC1R_EMMC_HSEN (_U_(0x1) << SDHC_HC1R_EMMC_HSEN_Pos)
#define SDHC_HC1R_EMMC_HSEN_NORMAL_Val _U_(0x0)
#define SDHC_HC1R_EMMC_HSEN_HIGH_Val _U_(0x1)
#define SDHC_HC1R_EMMC_HSEN_NORMAL (SDHC_HC1R_EMMC_HSEN_NORMAL_Val << SDHC_HC1R_EMMC_HSEN_Pos)
#define SDHC_HC1R_EMMC_HSEN_HIGH (SDHC_HC1R_EMMC_HSEN_HIGH_Val << SDHC_HC1R_EMMC_HSEN_Pos)
#define SDHC_HC1R_EMMC_DMASEL_Pos 3
#define SDHC_HC1R_EMMC_DMASEL_Msk (_U_(0x3) << SDHC_HC1R_EMMC_DMASEL_Pos)
#define SDHC_HC1R_EMMC_DMASEL(value) (SDHC_HC1R_EMMC_DMASEL_Msk & ((value) << SDHC_HC1R_EMMC_DMASEL_Pos))
#define SDHC_HC1R_EMMC_DMASEL_SDMA_Val _U_(0x0)
#define SDHC_HC1R_EMMC_DMASEL_1_Val _U_(0x1)
#define SDHC_HC1R_EMMC_DMASEL_32BIT_Val _U_(0x2)
#define SDHC_HC1R_EMMC_DMASEL_SDMA (SDHC_HC1R_EMMC_DMASEL_SDMA_Val << SDHC_HC1R_EMMC_DMASEL_Pos)
#define SDHC_HC1R_EMMC_DMASEL_1 (SDHC_HC1R_EMMC_DMASEL_1_Val << SDHC_HC1R_EMMC_DMASEL_Pos)
#define SDHC_HC1R_EMMC_DMASEL_32BIT (SDHC_HC1R_EMMC_DMASEL_32BIT_Val << SDHC_HC1R_EMMC_DMASEL_Pos)
#define SDHC_HC1R_EMMC_MASK _U_(0x1E)



typedef union {
  struct {
    uint8_t SDBPWR:1;
    uint8_t SDBVSEL:3;
    uint8_t :4;
  } bit;
  uint8_t reg;
} SDHC_PCR_Type;


#define SDHC_PCR_OFFSET 0x029
#define SDHC_PCR_RESETVALUE _U_(0x0E)

#define SDHC_PCR_SDBPWR_Pos 0
#define SDHC_PCR_SDBPWR (_U_(0x1) << SDHC_PCR_SDBPWR_Pos)
#define SDHC_PCR_SDBPWR_OFF_Val _U_(0x0)
#define SDHC_PCR_SDBPWR_ON_Val _U_(0x1)
#define SDHC_PCR_SDBPWR_OFF (SDHC_PCR_SDBPWR_OFF_Val << SDHC_PCR_SDBPWR_Pos)
#define SDHC_PCR_SDBPWR_ON (SDHC_PCR_SDBPWR_ON_Val << SDHC_PCR_SDBPWR_Pos)
#define SDHC_PCR_SDBVSEL_Pos 1
#define SDHC_PCR_SDBVSEL_Msk (_U_(0x7) << SDHC_PCR_SDBVSEL_Pos)
#define SDHC_PCR_SDBVSEL(value) (SDHC_PCR_SDBVSEL_Msk & ((value) << SDHC_PCR_SDBVSEL_Pos))
#define SDHC_PCR_SDBVSEL_1V8_Val _U_(0x5)
#define SDHC_PCR_SDBVSEL_3V0_Val _U_(0x6)
#define SDHC_PCR_SDBVSEL_3V3_Val _U_(0x7)
#define SDHC_PCR_SDBVSEL_1V8 (SDHC_PCR_SDBVSEL_1V8_Val << SDHC_PCR_SDBVSEL_Pos)
#define SDHC_PCR_SDBVSEL_3V0 (SDHC_PCR_SDBVSEL_3V0_Val << SDHC_PCR_SDBVSEL_Pos)
#define SDHC_PCR_SDBVSEL_3V3 (SDHC_PCR_SDBVSEL_3V3_Val << SDHC_PCR_SDBVSEL_Pos)
#define SDHC_PCR_MASK _U_(0x0F)



typedef union {
  struct {
    uint8_t STPBGR:1;
    uint8_t CONTR:1;
    uint8_t RWCTRL:1;
    uint8_t INTBG:1;
    uint8_t :4;
  } bit;
  struct {
    uint8_t STPBGR:1;
    uint8_t CONTR:1;
    uint8_t :6;
  } EMMC;
  uint8_t reg;
} SDHC_BGCR_Type;


#define SDHC_BGCR_OFFSET 0x02A
#define SDHC_BGCR_RESETVALUE _U_(0x00)

#define SDHC_BGCR_STPBGR_Pos 0
#define SDHC_BGCR_STPBGR (_U_(0x1) << SDHC_BGCR_STPBGR_Pos)
#define SDHC_BGCR_STPBGR_TRANSFER_Val _U_(0x0)
#define SDHC_BGCR_STPBGR_STOP_Val _U_(0x1)
#define SDHC_BGCR_STPBGR_TRANSFER (SDHC_BGCR_STPBGR_TRANSFER_Val << SDHC_BGCR_STPBGR_Pos)
#define SDHC_BGCR_STPBGR_STOP (SDHC_BGCR_STPBGR_STOP_Val << SDHC_BGCR_STPBGR_Pos)
#define SDHC_BGCR_CONTR_Pos 1
#define SDHC_BGCR_CONTR (_U_(0x1) << SDHC_BGCR_CONTR_Pos)
#define SDHC_BGCR_CONTR_GO_ON_Val _U_(0x0)
#define SDHC_BGCR_CONTR_RESTART_Val _U_(0x1)
#define SDHC_BGCR_CONTR_GO_ON (SDHC_BGCR_CONTR_GO_ON_Val << SDHC_BGCR_CONTR_Pos)
#define SDHC_BGCR_CONTR_RESTART (SDHC_BGCR_CONTR_RESTART_Val << SDHC_BGCR_CONTR_Pos)
#define SDHC_BGCR_RWCTRL_Pos 2
#define SDHC_BGCR_RWCTRL (_U_(0x1) << SDHC_BGCR_RWCTRL_Pos)
#define SDHC_BGCR_RWCTRL_DISABLE_Val _U_(0x0)
#define SDHC_BGCR_RWCTRL_ENABLE_Val _U_(0x1)
#define SDHC_BGCR_RWCTRL_DISABLE (SDHC_BGCR_RWCTRL_DISABLE_Val << SDHC_BGCR_RWCTRL_Pos)
#define SDHC_BGCR_RWCTRL_ENABLE (SDHC_BGCR_RWCTRL_ENABLE_Val << SDHC_BGCR_RWCTRL_Pos)
#define SDHC_BGCR_INTBG_Pos 3
#define SDHC_BGCR_INTBG (_U_(0x1) << SDHC_BGCR_INTBG_Pos)
#define SDHC_BGCR_INTBG_DISABLED_Val _U_(0x0)
#define SDHC_BGCR_INTBG_ENABLED_Val _U_(0x1)
#define SDHC_BGCR_INTBG_DISABLED (SDHC_BGCR_INTBG_DISABLED_Val << SDHC_BGCR_INTBG_Pos)
#define SDHC_BGCR_INTBG_ENABLED (SDHC_BGCR_INTBG_ENABLED_Val << SDHC_BGCR_INTBG_Pos)
#define SDHC_BGCR_MASK _U_(0x0F)


#define SDHC_BGCR_EMMC_STPBGR_Pos 0
#define SDHC_BGCR_EMMC_STPBGR (_U_(0x1) << SDHC_BGCR_EMMC_STPBGR_Pos)
#define SDHC_BGCR_EMMC_STPBGR_TRANSFER_Val _U_(0x0)
#define SDHC_BGCR_EMMC_STPBGR_STOP_Val _U_(0x1)
#define SDHC_BGCR_EMMC_STPBGR_TRANSFER (SDHC_BGCR_EMMC_STPBGR_TRANSFER_Val << SDHC_BGCR_EMMC_STPBGR_Pos)
#define SDHC_BGCR_EMMC_STPBGR_STOP (SDHC_BGCR_EMMC_STPBGR_STOP_Val << SDHC_BGCR_EMMC_STPBGR_Pos)
#define SDHC_BGCR_EMMC_CONTR_Pos 1
#define SDHC_BGCR_EMMC_CONTR (_U_(0x1) << SDHC_BGCR_EMMC_CONTR_Pos)
#define SDHC_BGCR_EMMC_CONTR_GO_ON_Val _U_(0x0)
#define SDHC_BGCR_EMMC_CONTR_RESTART_Val _U_(0x1)
#define SDHC_BGCR_EMMC_CONTR_GO_ON (SDHC_BGCR_EMMC_CONTR_GO_ON_Val << SDHC_BGCR_EMMC_CONTR_Pos)
#define SDHC_BGCR_EMMC_CONTR_RESTART (SDHC_BGCR_EMMC_CONTR_RESTART_Val << SDHC_BGCR_EMMC_CONTR_Pos)
#define SDHC_BGCR_EMMC_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t WKENCINT:1;
    uint8_t WKENCINS:1;
    uint8_t WKENCREM:1;
    uint8_t :5;
  } bit;
  uint8_t reg;
} SDHC_WCR_Type;


#define SDHC_WCR_OFFSET 0x02B
#define SDHC_WCR_RESETVALUE _U_(0x00)

#define SDHC_WCR_WKENCINT_Pos 0
#define SDHC_WCR_WKENCINT (_U_(0x1) << SDHC_WCR_WKENCINT_Pos)
#define SDHC_WCR_WKENCINT_DISABLE_Val _U_(0x0)
#define SDHC_WCR_WKENCINT_ENABLE_Val _U_(0x1)
#define SDHC_WCR_WKENCINT_DISABLE (SDHC_WCR_WKENCINT_DISABLE_Val << SDHC_WCR_WKENCINT_Pos)
#define SDHC_WCR_WKENCINT_ENABLE (SDHC_WCR_WKENCINT_ENABLE_Val << SDHC_WCR_WKENCINT_Pos)
#define SDHC_WCR_WKENCINS_Pos 1
#define SDHC_WCR_WKENCINS (_U_(0x1) << SDHC_WCR_WKENCINS_Pos)
#define SDHC_WCR_WKENCINS_DISABLE_Val _U_(0x0)
#define SDHC_WCR_WKENCINS_ENABLE_Val _U_(0x1)
#define SDHC_WCR_WKENCINS_DISABLE (SDHC_WCR_WKENCINS_DISABLE_Val << SDHC_WCR_WKENCINS_Pos)
#define SDHC_WCR_WKENCINS_ENABLE (SDHC_WCR_WKENCINS_ENABLE_Val << SDHC_WCR_WKENCINS_Pos)
#define SDHC_WCR_WKENCREM_Pos 2
#define SDHC_WCR_WKENCREM (_U_(0x1) << SDHC_WCR_WKENCREM_Pos)
#define SDHC_WCR_WKENCREM_DISABLE_Val _U_(0x0)
#define SDHC_WCR_WKENCREM_ENABLE_Val _U_(0x1)
#define SDHC_WCR_WKENCREM_DISABLE (SDHC_WCR_WKENCREM_DISABLE_Val << SDHC_WCR_WKENCREM_Pos)
#define SDHC_WCR_WKENCREM_ENABLE (SDHC_WCR_WKENCREM_ENABLE_Val << SDHC_WCR_WKENCREM_Pos)
#define SDHC_WCR_MASK _U_(0x07)



typedef union {
  struct {
    uint16_t INTCLKEN:1;
    uint16_t INTCLKS:1;
    uint16_t SDCLKEN:1;
    uint16_t :2;
    uint16_t CLKGSEL:1;
    uint16_t USDCLKFSEL:2;
    uint16_t SDCLKFSEL:8;
  } bit;
  uint16_t reg;
} SDHC_CCR_Type;


#define SDHC_CCR_OFFSET 0x02C
#define SDHC_CCR_RESETVALUE _U_(0x0000)

#define SDHC_CCR_INTCLKEN_Pos 0
#define SDHC_CCR_INTCLKEN (_U_(0x1) << SDHC_CCR_INTCLKEN_Pos)
#define SDHC_CCR_INTCLKEN_OFF_Val _U_(0x0)
#define SDHC_CCR_INTCLKEN_ON_Val _U_(0x1)
#define SDHC_CCR_INTCLKEN_OFF (SDHC_CCR_INTCLKEN_OFF_Val << SDHC_CCR_INTCLKEN_Pos)
#define SDHC_CCR_INTCLKEN_ON (SDHC_CCR_INTCLKEN_ON_Val << SDHC_CCR_INTCLKEN_Pos)
#define SDHC_CCR_INTCLKS_Pos 1
#define SDHC_CCR_INTCLKS (_U_(0x1) << SDHC_CCR_INTCLKS_Pos)
#define SDHC_CCR_INTCLKS_NOT_READY_Val _U_(0x0)
#define SDHC_CCR_INTCLKS_READY_Val _U_(0x1)
#define SDHC_CCR_INTCLKS_NOT_READY (SDHC_CCR_INTCLKS_NOT_READY_Val << SDHC_CCR_INTCLKS_Pos)
#define SDHC_CCR_INTCLKS_READY (SDHC_CCR_INTCLKS_READY_Val << SDHC_CCR_INTCLKS_Pos)
#define SDHC_CCR_SDCLKEN_Pos 2
#define SDHC_CCR_SDCLKEN (_U_(0x1) << SDHC_CCR_SDCLKEN_Pos)
#define SDHC_CCR_SDCLKEN_DISABLE_Val _U_(0x0)
#define SDHC_CCR_SDCLKEN_ENABLE_Val _U_(0x1)
#define SDHC_CCR_SDCLKEN_DISABLE (SDHC_CCR_SDCLKEN_DISABLE_Val << SDHC_CCR_SDCLKEN_Pos)
#define SDHC_CCR_SDCLKEN_ENABLE (SDHC_CCR_SDCLKEN_ENABLE_Val << SDHC_CCR_SDCLKEN_Pos)
#define SDHC_CCR_CLKGSEL_Pos 5
#define SDHC_CCR_CLKGSEL (_U_(0x1) << SDHC_CCR_CLKGSEL_Pos)
#define SDHC_CCR_CLKGSEL_DIV_Val _U_(0x0)
#define SDHC_CCR_CLKGSEL_PROG_Val _U_(0x1)
#define SDHC_CCR_CLKGSEL_DIV (SDHC_CCR_CLKGSEL_DIV_Val << SDHC_CCR_CLKGSEL_Pos)
#define SDHC_CCR_CLKGSEL_PROG (SDHC_CCR_CLKGSEL_PROG_Val << SDHC_CCR_CLKGSEL_Pos)
#define SDHC_CCR_USDCLKFSEL_Pos 6
#define SDHC_CCR_USDCLKFSEL_Msk (_U_(0x3) << SDHC_CCR_USDCLKFSEL_Pos)
#define SDHC_CCR_USDCLKFSEL(value) (SDHC_CCR_USDCLKFSEL_Msk & ((value) << SDHC_CCR_USDCLKFSEL_Pos))
#define SDHC_CCR_SDCLKFSEL_Pos 8
#define SDHC_CCR_SDCLKFSEL_Msk (_U_(0xFF) << SDHC_CCR_SDCLKFSEL_Pos)
#define SDHC_CCR_SDCLKFSEL(value) (SDHC_CCR_SDCLKFSEL_Msk & ((value) << SDHC_CCR_SDCLKFSEL_Pos))
#define SDHC_CCR_MASK _U_(0xFFE7)



typedef union {
  struct {
    uint8_t DTCVAL:4;
    uint8_t :4;
  } bit;
  uint8_t reg;
} SDHC_TCR_Type;


#define SDHC_TCR_OFFSET 0x02E
#define SDHC_TCR_RESETVALUE _U_(0x00)

#define SDHC_TCR_DTCVAL_Pos 0
#define SDHC_TCR_DTCVAL_Msk (_U_(0xF) << SDHC_TCR_DTCVAL_Pos)
#define SDHC_TCR_DTCVAL(value) (SDHC_TCR_DTCVAL_Msk & ((value) << SDHC_TCR_DTCVAL_Pos))
#define SDHC_TCR_MASK _U_(0x0F)



typedef union {
  struct {
    uint8_t SWRSTALL:1;
    uint8_t SWRSTCMD:1;
    uint8_t SWRSTDAT:1;
    uint8_t :5;
  } bit;
  uint8_t reg;
} SDHC_SRR_Type;


#define SDHC_SRR_OFFSET 0x02F
#define SDHC_SRR_RESETVALUE _U_(0x00)

#define SDHC_SRR_SWRSTALL_Pos 0
#define SDHC_SRR_SWRSTALL (_U_(0x1) << SDHC_SRR_SWRSTALL_Pos)
#define SDHC_SRR_SWRSTALL_WORK_Val _U_(0x0)
#define SDHC_SRR_SWRSTALL_RESET_Val _U_(0x1)
#define SDHC_SRR_SWRSTALL_WORK (SDHC_SRR_SWRSTALL_WORK_Val << SDHC_SRR_SWRSTALL_Pos)
#define SDHC_SRR_SWRSTALL_RESET (SDHC_SRR_SWRSTALL_RESET_Val << SDHC_SRR_SWRSTALL_Pos)
#define SDHC_SRR_SWRSTCMD_Pos 1
#define SDHC_SRR_SWRSTCMD (_U_(0x1) << SDHC_SRR_SWRSTCMD_Pos)
#define SDHC_SRR_SWRSTCMD_WORK_Val _U_(0x0)
#define SDHC_SRR_SWRSTCMD_RESET_Val _U_(0x1)
#define SDHC_SRR_SWRSTCMD_WORK (SDHC_SRR_SWRSTCMD_WORK_Val << SDHC_SRR_SWRSTCMD_Pos)
#define SDHC_SRR_SWRSTCMD_RESET (SDHC_SRR_SWRSTCMD_RESET_Val << SDHC_SRR_SWRSTCMD_Pos)
#define SDHC_SRR_SWRSTDAT_Pos 2
#define SDHC_SRR_SWRSTDAT (_U_(0x1) << SDHC_SRR_SWRSTDAT_Pos)
#define SDHC_SRR_SWRSTDAT_WORK_Val _U_(0x0)
#define SDHC_SRR_SWRSTDAT_RESET_Val _U_(0x1)
#define SDHC_SRR_SWRSTDAT_WORK (SDHC_SRR_SWRSTDAT_WORK_Val << SDHC_SRR_SWRSTDAT_Pos)
#define SDHC_SRR_SWRSTDAT_RESET (SDHC_SRR_SWRSTDAT_RESET_Val << SDHC_SRR_SWRSTDAT_Pos)
#define SDHC_SRR_MASK _U_(0x07)



typedef union {
  struct {
    uint16_t CMDC:1;
    uint16_t TRFC:1;
    uint16_t BLKGE:1;
    uint16_t DMAINT:1;
    uint16_t BWRRDY:1;
    uint16_t BRDRDY:1;
    uint16_t CINS:1;
    uint16_t CREM:1;
    uint16_t CINT:1;
    uint16_t :6;
    uint16_t ERRINT:1;
  } bit;
  struct {
    uint16_t CMDC:1;
    uint16_t TRFC:1;
    uint16_t BLKGE:1;
    uint16_t DMAINT:1;
    uint16_t BWRRDY:1;
    uint16_t BRDRDY:1;
    uint16_t :8;
    uint16_t BOOTAR:1;
    uint16_t ERRINT:1;
  } EMMC;
  uint16_t reg;
} SDHC_NISTR_Type;


#define SDHC_NISTR_OFFSET 0x030
#define SDHC_NISTR_RESETVALUE _U_(0x0000)

#define SDHC_NISTR_CMDC_Pos 0
#define SDHC_NISTR_CMDC (_U_(0x1) << SDHC_NISTR_CMDC_Pos)
#define SDHC_NISTR_CMDC_NO_Val _U_(0x0)
#define SDHC_NISTR_CMDC_YES_Val _U_(0x1)
#define SDHC_NISTR_CMDC_NO (SDHC_NISTR_CMDC_NO_Val << SDHC_NISTR_CMDC_Pos)
#define SDHC_NISTR_CMDC_YES (SDHC_NISTR_CMDC_YES_Val << SDHC_NISTR_CMDC_Pos)
#define SDHC_NISTR_TRFC_Pos 1
#define SDHC_NISTR_TRFC (_U_(0x1) << SDHC_NISTR_TRFC_Pos)
#define SDHC_NISTR_TRFC_NO_Val _U_(0x0)
#define SDHC_NISTR_TRFC_YES_Val _U_(0x1)
#define SDHC_NISTR_TRFC_NO (SDHC_NISTR_TRFC_NO_Val << SDHC_NISTR_TRFC_Pos)
#define SDHC_NISTR_TRFC_YES (SDHC_NISTR_TRFC_YES_Val << SDHC_NISTR_TRFC_Pos)
#define SDHC_NISTR_BLKGE_Pos 2
#define SDHC_NISTR_BLKGE (_U_(0x1) << SDHC_NISTR_BLKGE_Pos)
#define SDHC_NISTR_BLKGE_NO_Val _U_(0x0)
#define SDHC_NISTR_BLKGE_STOP_Val _U_(0x1)
#define SDHC_NISTR_BLKGE_NO (SDHC_NISTR_BLKGE_NO_Val << SDHC_NISTR_BLKGE_Pos)
#define SDHC_NISTR_BLKGE_STOP (SDHC_NISTR_BLKGE_STOP_Val << SDHC_NISTR_BLKGE_Pos)
#define SDHC_NISTR_DMAINT_Pos 3
#define SDHC_NISTR_DMAINT (_U_(0x1) << SDHC_NISTR_DMAINT_Pos)
#define SDHC_NISTR_DMAINT_NO_Val _U_(0x0)
#define SDHC_NISTR_DMAINT_YES_Val _U_(0x1)
#define SDHC_NISTR_DMAINT_NO (SDHC_NISTR_DMAINT_NO_Val << SDHC_NISTR_DMAINT_Pos)
#define SDHC_NISTR_DMAINT_YES (SDHC_NISTR_DMAINT_YES_Val << SDHC_NISTR_DMAINT_Pos)
#define SDHC_NISTR_BWRRDY_Pos 4
#define SDHC_NISTR_BWRRDY (_U_(0x1) << SDHC_NISTR_BWRRDY_Pos)
#define SDHC_NISTR_BWRRDY_NO_Val _U_(0x0)
#define SDHC_NISTR_BWRRDY_YES_Val _U_(0x1)
#define SDHC_NISTR_BWRRDY_NO (SDHC_NISTR_BWRRDY_NO_Val << SDHC_NISTR_BWRRDY_Pos)
#define SDHC_NISTR_BWRRDY_YES (SDHC_NISTR_BWRRDY_YES_Val << SDHC_NISTR_BWRRDY_Pos)
#define SDHC_NISTR_BRDRDY_Pos 5
#define SDHC_NISTR_BRDRDY (_U_(0x1) << SDHC_NISTR_BRDRDY_Pos)
#define SDHC_NISTR_BRDRDY_NO_Val _U_(0x0)
#define SDHC_NISTR_BRDRDY_YES_Val _U_(0x1)
#define SDHC_NISTR_BRDRDY_NO (SDHC_NISTR_BRDRDY_NO_Val << SDHC_NISTR_BRDRDY_Pos)
#define SDHC_NISTR_BRDRDY_YES (SDHC_NISTR_BRDRDY_YES_Val << SDHC_NISTR_BRDRDY_Pos)
#define SDHC_NISTR_CINS_Pos 6
#define SDHC_NISTR_CINS (_U_(0x1) << SDHC_NISTR_CINS_Pos)
#define SDHC_NISTR_CINS_NO_Val _U_(0x0)
#define SDHC_NISTR_CINS_YES_Val _U_(0x1)
#define SDHC_NISTR_CINS_NO (SDHC_NISTR_CINS_NO_Val << SDHC_NISTR_CINS_Pos)
#define SDHC_NISTR_CINS_YES (SDHC_NISTR_CINS_YES_Val << SDHC_NISTR_CINS_Pos)
#define SDHC_NISTR_CREM_Pos 7
#define SDHC_NISTR_CREM (_U_(0x1) << SDHC_NISTR_CREM_Pos)
#define SDHC_NISTR_CREM_NO_Val _U_(0x0)
#define SDHC_NISTR_CREM_YES_Val _U_(0x1)
#define SDHC_NISTR_CREM_NO (SDHC_NISTR_CREM_NO_Val << SDHC_NISTR_CREM_Pos)
#define SDHC_NISTR_CREM_YES (SDHC_NISTR_CREM_YES_Val << SDHC_NISTR_CREM_Pos)
#define SDHC_NISTR_CINT_Pos 8
#define SDHC_NISTR_CINT (_U_(0x1) << SDHC_NISTR_CINT_Pos)
#define SDHC_NISTR_CINT_NO_Val _U_(0x0)
#define SDHC_NISTR_CINT_YES_Val _U_(0x1)
#define SDHC_NISTR_CINT_NO (SDHC_NISTR_CINT_NO_Val << SDHC_NISTR_CINT_Pos)
#define SDHC_NISTR_CINT_YES (SDHC_NISTR_CINT_YES_Val << SDHC_NISTR_CINT_Pos)
#define SDHC_NISTR_ERRINT_Pos 15
#define SDHC_NISTR_ERRINT (_U_(0x1) << SDHC_NISTR_ERRINT_Pos)
#define SDHC_NISTR_ERRINT_NO_Val _U_(0x0)
#define SDHC_NISTR_ERRINT_YES_Val _U_(0x1)
#define SDHC_NISTR_ERRINT_NO (SDHC_NISTR_ERRINT_NO_Val << SDHC_NISTR_ERRINT_Pos)
#define SDHC_NISTR_ERRINT_YES (SDHC_NISTR_ERRINT_YES_Val << SDHC_NISTR_ERRINT_Pos)
#define SDHC_NISTR_MASK _U_(0x81FF)


#define SDHC_NISTR_EMMC_CMDC_Pos 0
#define SDHC_NISTR_EMMC_CMDC (_U_(0x1) << SDHC_NISTR_EMMC_CMDC_Pos)
#define SDHC_NISTR_EMMC_CMDC_NO_Val _U_(0x0)
#define SDHC_NISTR_EMMC_CMDC_YES_Val _U_(0x1)
#define SDHC_NISTR_EMMC_CMDC_NO (SDHC_NISTR_EMMC_CMDC_NO_Val << SDHC_NISTR_EMMC_CMDC_Pos)
#define SDHC_NISTR_EMMC_CMDC_YES (SDHC_NISTR_EMMC_CMDC_YES_Val << SDHC_NISTR_EMMC_CMDC_Pos)
#define SDHC_NISTR_EMMC_TRFC_Pos 1
#define SDHC_NISTR_EMMC_TRFC (_U_(0x1) << SDHC_NISTR_EMMC_TRFC_Pos)
#define SDHC_NISTR_EMMC_TRFC_NO_Val _U_(0x0)
#define SDHC_NISTR_EMMC_TRFC_YES_Val _U_(0x1)
#define SDHC_NISTR_EMMC_TRFC_NO (SDHC_NISTR_EMMC_TRFC_NO_Val << SDHC_NISTR_EMMC_TRFC_Pos)
#define SDHC_NISTR_EMMC_TRFC_YES (SDHC_NISTR_EMMC_TRFC_YES_Val << SDHC_NISTR_EMMC_TRFC_Pos)
#define SDHC_NISTR_EMMC_BLKGE_Pos 2
#define SDHC_NISTR_EMMC_BLKGE (_U_(0x1) << SDHC_NISTR_EMMC_BLKGE_Pos)
#define SDHC_NISTR_EMMC_BLKGE_NO_Val _U_(0x0)
#define SDHC_NISTR_EMMC_BLKGE_STOP_Val _U_(0x1)
#define SDHC_NISTR_EMMC_BLKGE_NO (SDHC_NISTR_EMMC_BLKGE_NO_Val << SDHC_NISTR_EMMC_BLKGE_Pos)
#define SDHC_NISTR_EMMC_BLKGE_STOP (SDHC_NISTR_EMMC_BLKGE_STOP_Val << SDHC_NISTR_EMMC_BLKGE_Pos)
#define SDHC_NISTR_EMMC_DMAINT_Pos 3
#define SDHC_NISTR_EMMC_DMAINT (_U_(0x1) << SDHC_NISTR_EMMC_DMAINT_Pos)
#define SDHC_NISTR_EMMC_DMAINT_NO_Val _U_(0x0)
#define SDHC_NISTR_EMMC_DMAINT_YES_Val _U_(0x1)
#define SDHC_NISTR_EMMC_DMAINT_NO (SDHC_NISTR_EMMC_DMAINT_NO_Val << SDHC_NISTR_EMMC_DMAINT_Pos)
#define SDHC_NISTR_EMMC_DMAINT_YES (SDHC_NISTR_EMMC_DMAINT_YES_Val << SDHC_NISTR_EMMC_DMAINT_Pos)
#define SDHC_NISTR_EMMC_BWRRDY_Pos 4
#define SDHC_NISTR_EMMC_BWRRDY (_U_(0x1) << SDHC_NISTR_EMMC_BWRRDY_Pos)
#define SDHC_NISTR_EMMC_BWRRDY_NO_Val _U_(0x0)
#define SDHC_NISTR_EMMC_BWRRDY_YES_Val _U_(0x1)
#define SDHC_NISTR_EMMC_BWRRDY_NO (SDHC_NISTR_EMMC_BWRRDY_NO_Val << SDHC_NISTR_EMMC_BWRRDY_Pos)
#define SDHC_NISTR_EMMC_BWRRDY_YES (SDHC_NISTR_EMMC_BWRRDY_YES_Val << SDHC_NISTR_EMMC_BWRRDY_Pos)
#define SDHC_NISTR_EMMC_BRDRDY_Pos 5
#define SDHC_NISTR_EMMC_BRDRDY (_U_(0x1) << SDHC_NISTR_EMMC_BRDRDY_Pos)
#define SDHC_NISTR_EMMC_BRDRDY_NO_Val _U_(0x0)
#define SDHC_NISTR_EMMC_BRDRDY_YES_Val _U_(0x1)
#define SDHC_NISTR_EMMC_BRDRDY_NO (SDHC_NISTR_EMMC_BRDRDY_NO_Val << SDHC_NISTR_EMMC_BRDRDY_Pos)
#define SDHC_NISTR_EMMC_BRDRDY_YES (SDHC_NISTR_EMMC_BRDRDY_YES_Val << SDHC_NISTR_EMMC_BRDRDY_Pos)
#define SDHC_NISTR_EMMC_BOOTAR_Pos 14
#define SDHC_NISTR_EMMC_BOOTAR (_U_(0x1) << SDHC_NISTR_EMMC_BOOTAR_Pos)
#define SDHC_NISTR_EMMC_ERRINT_Pos 15
#define SDHC_NISTR_EMMC_ERRINT (_U_(0x1) << SDHC_NISTR_EMMC_ERRINT_Pos)
#define SDHC_NISTR_EMMC_ERRINT_NO_Val _U_(0x0)
#define SDHC_NISTR_EMMC_ERRINT_YES_Val _U_(0x1)
#define SDHC_NISTR_EMMC_ERRINT_NO (SDHC_NISTR_EMMC_ERRINT_NO_Val << SDHC_NISTR_EMMC_ERRINT_Pos)
#define SDHC_NISTR_EMMC_ERRINT_YES (SDHC_NISTR_EMMC_ERRINT_YES_Val << SDHC_NISTR_EMMC_ERRINT_Pos)
#define SDHC_NISTR_EMMC_MASK _U_(0xC03F)



typedef union {
  struct {
    uint16_t CMDTEO:1;
    uint16_t CMDCRC:1;
    uint16_t CMDEND:1;
    uint16_t CMDIDX:1;
    uint16_t DATTEO:1;
    uint16_t DATCRC:1;
    uint16_t DATEND:1;
    uint16_t CURLIM:1;
    uint16_t ACMD:1;
    uint16_t ADMA:1;
    uint16_t :6;
  } bit;
  struct {
    uint16_t CMDTEO:1;
    uint16_t CMDCRC:1;
    uint16_t CMDEND:1;
    uint16_t CMDIDX:1;
    uint16_t DATTEO:1;
    uint16_t DATCRC:1;
    uint16_t DATEND:1;
    uint16_t CURLIM:1;
    uint16_t ACMD:1;
    uint16_t ADMA:1;
    uint16_t :2;
    uint16_t BOOTAE:1;
    uint16_t :3;
  } EMMC;
  uint16_t reg;
} SDHC_EISTR_Type;


#define SDHC_EISTR_OFFSET 0x032
#define SDHC_EISTR_RESETVALUE _U_(0x0000)

#define SDHC_EISTR_CMDTEO_Pos 0
#define SDHC_EISTR_CMDTEO (_U_(0x1) << SDHC_EISTR_CMDTEO_Pos)
#define SDHC_EISTR_CMDTEO_NO_Val _U_(0x0)
#define SDHC_EISTR_CMDTEO_YES_Val _U_(0x1)
#define SDHC_EISTR_CMDTEO_NO (SDHC_EISTR_CMDTEO_NO_Val << SDHC_EISTR_CMDTEO_Pos)
#define SDHC_EISTR_CMDTEO_YES (SDHC_EISTR_CMDTEO_YES_Val << SDHC_EISTR_CMDTEO_Pos)
#define SDHC_EISTR_CMDCRC_Pos 1
#define SDHC_EISTR_CMDCRC (_U_(0x1) << SDHC_EISTR_CMDCRC_Pos)
#define SDHC_EISTR_CMDCRC_NO_Val _U_(0x0)
#define SDHC_EISTR_CMDCRC_YES_Val _U_(0x1)
#define SDHC_EISTR_CMDCRC_NO (SDHC_EISTR_CMDCRC_NO_Val << SDHC_EISTR_CMDCRC_Pos)
#define SDHC_EISTR_CMDCRC_YES (SDHC_EISTR_CMDCRC_YES_Val << SDHC_EISTR_CMDCRC_Pos)
#define SDHC_EISTR_CMDEND_Pos 2
#define SDHC_EISTR_CMDEND (_U_(0x1) << SDHC_EISTR_CMDEND_Pos)
#define SDHC_EISTR_CMDEND_NO_Val _U_(0x0)
#define SDHC_EISTR_CMDEND_YES_Val _U_(0x1)
#define SDHC_EISTR_CMDEND_NO (SDHC_EISTR_CMDEND_NO_Val << SDHC_EISTR_CMDEND_Pos)
#define SDHC_EISTR_CMDEND_YES (SDHC_EISTR_CMDEND_YES_Val << SDHC_EISTR_CMDEND_Pos)
#define SDHC_EISTR_CMDIDX_Pos 3
#define SDHC_EISTR_CMDIDX (_U_(0x1) << SDHC_EISTR_CMDIDX_Pos)
#define SDHC_EISTR_CMDIDX_NO_Val _U_(0x0)
#define SDHC_EISTR_CMDIDX_YES_Val _U_(0x1)
#define SDHC_EISTR_CMDIDX_NO (SDHC_EISTR_CMDIDX_NO_Val << SDHC_EISTR_CMDIDX_Pos)
#define SDHC_EISTR_CMDIDX_YES (SDHC_EISTR_CMDIDX_YES_Val << SDHC_EISTR_CMDIDX_Pos)
#define SDHC_EISTR_DATTEO_Pos 4
#define SDHC_EISTR_DATTEO (_U_(0x1) << SDHC_EISTR_DATTEO_Pos)
#define SDHC_EISTR_DATTEO_NO_Val _U_(0x0)
#define SDHC_EISTR_DATTEO_YES_Val _U_(0x1)
#define SDHC_EISTR_DATTEO_NO (SDHC_EISTR_DATTEO_NO_Val << SDHC_EISTR_DATTEO_Pos)
#define SDHC_EISTR_DATTEO_YES (SDHC_EISTR_DATTEO_YES_Val << SDHC_EISTR_DATTEO_Pos)
#define SDHC_EISTR_DATCRC_Pos 5
#define SDHC_EISTR_DATCRC (_U_(0x1) << SDHC_EISTR_DATCRC_Pos)
#define SDHC_EISTR_DATCRC_NO_Val _U_(0x0)
#define SDHC_EISTR_DATCRC_YES_Val _U_(0x1)
#define SDHC_EISTR_DATCRC_NO (SDHC_EISTR_DATCRC_NO_Val << SDHC_EISTR_DATCRC_Pos)
#define SDHC_EISTR_DATCRC_YES (SDHC_EISTR_DATCRC_YES_Val << SDHC_EISTR_DATCRC_Pos)
#define SDHC_EISTR_DATEND_Pos 6
#define SDHC_EISTR_DATEND (_U_(0x1) << SDHC_EISTR_DATEND_Pos)
#define SDHC_EISTR_DATEND_NO_Val _U_(0x0)
#define SDHC_EISTR_DATEND_YES_Val _U_(0x1)
#define SDHC_EISTR_DATEND_NO (SDHC_EISTR_DATEND_NO_Val << SDHC_EISTR_DATEND_Pos)
#define SDHC_EISTR_DATEND_YES (SDHC_EISTR_DATEND_YES_Val << SDHC_EISTR_DATEND_Pos)
#define SDHC_EISTR_CURLIM_Pos 7
#define SDHC_EISTR_CURLIM (_U_(0x1) << SDHC_EISTR_CURLIM_Pos)
#define SDHC_EISTR_CURLIM_NO_Val _U_(0x0)
#define SDHC_EISTR_CURLIM_YES_Val _U_(0x1)
#define SDHC_EISTR_CURLIM_NO (SDHC_EISTR_CURLIM_NO_Val << SDHC_EISTR_CURLIM_Pos)
#define SDHC_EISTR_CURLIM_YES (SDHC_EISTR_CURLIM_YES_Val << SDHC_EISTR_CURLIM_Pos)
#define SDHC_EISTR_ACMD_Pos 8
#define SDHC_EISTR_ACMD (_U_(0x1) << SDHC_EISTR_ACMD_Pos)
#define SDHC_EISTR_ACMD_NO_Val _U_(0x0)
#define SDHC_EISTR_ACMD_YES_Val _U_(0x1)
#define SDHC_EISTR_ACMD_NO (SDHC_EISTR_ACMD_NO_Val << SDHC_EISTR_ACMD_Pos)
#define SDHC_EISTR_ACMD_YES (SDHC_EISTR_ACMD_YES_Val << SDHC_EISTR_ACMD_Pos)
#define SDHC_EISTR_ADMA_Pos 9
#define SDHC_EISTR_ADMA (_U_(0x1) << SDHC_EISTR_ADMA_Pos)
#define SDHC_EISTR_ADMA_NO_Val _U_(0x0)
#define SDHC_EISTR_ADMA_YES_Val _U_(0x1)
#define SDHC_EISTR_ADMA_NO (SDHC_EISTR_ADMA_NO_Val << SDHC_EISTR_ADMA_Pos)
#define SDHC_EISTR_ADMA_YES (SDHC_EISTR_ADMA_YES_Val << SDHC_EISTR_ADMA_Pos)
#define SDHC_EISTR_MASK _U_(0x03FF)


#define SDHC_EISTR_EMMC_CMDTEO_Pos 0
#define SDHC_EISTR_EMMC_CMDTEO (_U_(0x1) << SDHC_EISTR_EMMC_CMDTEO_Pos)
#define SDHC_EISTR_EMMC_CMDTEO_NO_Val _U_(0x0)
#define SDHC_EISTR_EMMC_CMDTEO_YES_Val _U_(0x1)
#define SDHC_EISTR_EMMC_CMDTEO_NO (SDHC_EISTR_EMMC_CMDTEO_NO_Val << SDHC_EISTR_EMMC_CMDTEO_Pos)
#define SDHC_EISTR_EMMC_CMDTEO_YES (SDHC_EISTR_EMMC_CMDTEO_YES_Val << SDHC_EISTR_EMMC_CMDTEO_Pos)
#define SDHC_EISTR_EMMC_CMDCRC_Pos 1
#define SDHC_EISTR_EMMC_CMDCRC (_U_(0x1) << SDHC_EISTR_EMMC_CMDCRC_Pos)
#define SDHC_EISTR_EMMC_CMDCRC_NO_Val _U_(0x0)
#define SDHC_EISTR_EMMC_CMDCRC_YES_Val _U_(0x1)
#define SDHC_EISTR_EMMC_CMDCRC_NO (SDHC_EISTR_EMMC_CMDCRC_NO_Val << SDHC_EISTR_EMMC_CMDCRC_Pos)
#define SDHC_EISTR_EMMC_CMDCRC_YES (SDHC_EISTR_EMMC_CMDCRC_YES_Val << SDHC_EISTR_EMMC_CMDCRC_Pos)
#define SDHC_EISTR_EMMC_CMDEND_Pos 2
#define SDHC_EISTR_EMMC_CMDEND (_U_(0x1) << SDHC_EISTR_EMMC_CMDEND_Pos)
#define SDHC_EISTR_EMMC_CMDEND_NO_Val _U_(0x0)
#define SDHC_EISTR_EMMC_CMDEND_YES_Val _U_(0x1)
#define SDHC_EISTR_EMMC_CMDEND_NO (SDHC_EISTR_EMMC_CMDEND_NO_Val << SDHC_EISTR_EMMC_CMDEND_Pos)
#define SDHC_EISTR_EMMC_CMDEND_YES (SDHC_EISTR_EMMC_CMDEND_YES_Val << SDHC_EISTR_EMMC_CMDEND_Pos)
#define SDHC_EISTR_EMMC_CMDIDX_Pos 3
#define SDHC_EISTR_EMMC_CMDIDX (_U_(0x1) << SDHC_EISTR_EMMC_CMDIDX_Pos)
#define SDHC_EISTR_EMMC_CMDIDX_NO_Val _U_(0x0)
#define SDHC_EISTR_EMMC_CMDIDX_YES_Val _U_(0x1)
#define SDHC_EISTR_EMMC_CMDIDX_NO (SDHC_EISTR_EMMC_CMDIDX_NO_Val << SDHC_EISTR_EMMC_CMDIDX_Pos)
#define SDHC_EISTR_EMMC_CMDIDX_YES (SDHC_EISTR_EMMC_CMDIDX_YES_Val << SDHC_EISTR_EMMC_CMDIDX_Pos)
#define SDHC_EISTR_EMMC_DATTEO_Pos 4
#define SDHC_EISTR_EMMC_DATTEO (_U_(0x1) << SDHC_EISTR_EMMC_DATTEO_Pos)
#define SDHC_EISTR_EMMC_DATTEO_NO_Val _U_(0x0)
#define SDHC_EISTR_EMMC_DATTEO_YES_Val _U_(0x1)
#define SDHC_EISTR_EMMC_DATTEO_NO (SDHC_EISTR_EMMC_DATTEO_NO_Val << SDHC_EISTR_EMMC_DATTEO_Pos)
#define SDHC_EISTR_EMMC_DATTEO_YES (SDHC_EISTR_EMMC_DATTEO_YES_Val << SDHC_EISTR_EMMC_DATTEO_Pos)
#define SDHC_EISTR_EMMC_DATCRC_Pos 5
#define SDHC_EISTR_EMMC_DATCRC (_U_(0x1) << SDHC_EISTR_EMMC_DATCRC_Pos)
#define SDHC_EISTR_EMMC_DATCRC_NO_Val _U_(0x0)
#define SDHC_EISTR_EMMC_DATCRC_YES_Val _U_(0x1)
#define SDHC_EISTR_EMMC_DATCRC_NO (SDHC_EISTR_EMMC_DATCRC_NO_Val << SDHC_EISTR_EMMC_DATCRC_Pos)
#define SDHC_EISTR_EMMC_DATCRC_YES (SDHC_EISTR_EMMC_DATCRC_YES_Val << SDHC_EISTR_EMMC_DATCRC_Pos)
#define SDHC_EISTR_EMMC_DATEND_Pos 6
#define SDHC_EISTR_EMMC_DATEND (_U_(0x1) << SDHC_EISTR_EMMC_DATEND_Pos)
#define SDHC_EISTR_EMMC_DATEND_NO_Val _U_(0x0)
#define SDHC_EISTR_EMMC_DATEND_YES_Val _U_(0x1)
#define SDHC_EISTR_EMMC_DATEND_NO (SDHC_EISTR_EMMC_DATEND_NO_Val << SDHC_EISTR_EMMC_DATEND_Pos)
#define SDHC_EISTR_EMMC_DATEND_YES (SDHC_EISTR_EMMC_DATEND_YES_Val << SDHC_EISTR_EMMC_DATEND_Pos)
#define SDHC_EISTR_EMMC_CURLIM_Pos 7
#define SDHC_EISTR_EMMC_CURLIM (_U_(0x1) << SDHC_EISTR_EMMC_CURLIM_Pos)
#define SDHC_EISTR_EMMC_CURLIM_NO_Val _U_(0x0)
#define SDHC_EISTR_EMMC_CURLIM_YES_Val _U_(0x1)
#define SDHC_EISTR_EMMC_CURLIM_NO (SDHC_EISTR_EMMC_CURLIM_NO_Val << SDHC_EISTR_EMMC_CURLIM_Pos)
#define SDHC_EISTR_EMMC_CURLIM_YES (SDHC_EISTR_EMMC_CURLIM_YES_Val << SDHC_EISTR_EMMC_CURLIM_Pos)
#define SDHC_EISTR_EMMC_ACMD_Pos 8
#define SDHC_EISTR_EMMC_ACMD (_U_(0x1) << SDHC_EISTR_EMMC_ACMD_Pos)
#define SDHC_EISTR_EMMC_ACMD_NO_Val _U_(0x0)
#define SDHC_EISTR_EMMC_ACMD_YES_Val _U_(0x1)
#define SDHC_EISTR_EMMC_ACMD_NO (SDHC_EISTR_EMMC_ACMD_NO_Val << SDHC_EISTR_EMMC_ACMD_Pos)
#define SDHC_EISTR_EMMC_ACMD_YES (SDHC_EISTR_EMMC_ACMD_YES_Val << SDHC_EISTR_EMMC_ACMD_Pos)
#define SDHC_EISTR_EMMC_ADMA_Pos 9
#define SDHC_EISTR_EMMC_ADMA (_U_(0x1) << SDHC_EISTR_EMMC_ADMA_Pos)
#define SDHC_EISTR_EMMC_ADMA_NO_Val _U_(0x0)
#define SDHC_EISTR_EMMC_ADMA_YES_Val _U_(0x1)
#define SDHC_EISTR_EMMC_ADMA_NO (SDHC_EISTR_EMMC_ADMA_NO_Val << SDHC_EISTR_EMMC_ADMA_Pos)
#define SDHC_EISTR_EMMC_ADMA_YES (SDHC_EISTR_EMMC_ADMA_YES_Val << SDHC_EISTR_EMMC_ADMA_Pos)
#define SDHC_EISTR_EMMC_BOOTAE_Pos 12
#define SDHC_EISTR_EMMC_BOOTAE (_U_(0x1) << SDHC_EISTR_EMMC_BOOTAE_Pos)
#define SDHC_EISTR_EMMC_BOOTAE_0_Val _U_(0x0)
#define SDHC_EISTR_EMMC_BOOTAE_1_Val _U_(0x1)
#define SDHC_EISTR_EMMC_BOOTAE_0 (SDHC_EISTR_EMMC_BOOTAE_0_Val << SDHC_EISTR_EMMC_BOOTAE_Pos)
#define SDHC_EISTR_EMMC_BOOTAE_1 (SDHC_EISTR_EMMC_BOOTAE_1_Val << SDHC_EISTR_EMMC_BOOTAE_Pos)
#define SDHC_EISTR_EMMC_MASK _U_(0x13FF)



typedef union {
  struct {
    uint16_t CMDC:1;
    uint16_t TRFC:1;
    uint16_t BLKGE:1;
    uint16_t DMAINT:1;
    uint16_t BWRRDY:1;
    uint16_t BRDRDY:1;
    uint16_t CINS:1;
    uint16_t CREM:1;
    uint16_t CINT:1;
    uint16_t :7;
  } bit;
  struct {
    uint16_t CMDC:1;
    uint16_t TRFC:1;
    uint16_t BLKGE:1;
    uint16_t DMAINT:1;
    uint16_t BWRRDY:1;
    uint16_t BRDRDY:1;
    uint16_t :8;
    uint16_t BOOTAR:1;
    uint16_t :1;
  } EMMC;
  uint16_t reg;
} SDHC_NISTER_Type;


#define SDHC_NISTER_OFFSET 0x034
#define SDHC_NISTER_RESETVALUE _U_(0x0000)

#define SDHC_NISTER_CMDC_Pos 0
#define SDHC_NISTER_CMDC (_U_(0x1) << SDHC_NISTER_CMDC_Pos)
#define SDHC_NISTER_CMDC_MASKED_Val _U_(0x0)
#define SDHC_NISTER_CMDC_ENABLED_Val _U_(0x1)
#define SDHC_NISTER_CMDC_MASKED (SDHC_NISTER_CMDC_MASKED_Val << SDHC_NISTER_CMDC_Pos)
#define SDHC_NISTER_CMDC_ENABLED (SDHC_NISTER_CMDC_ENABLED_Val << SDHC_NISTER_CMDC_Pos)
#define SDHC_NISTER_TRFC_Pos 1
#define SDHC_NISTER_TRFC (_U_(0x1) << SDHC_NISTER_TRFC_Pos)
#define SDHC_NISTER_TRFC_MASKED_Val _U_(0x0)
#define SDHC_NISTER_TRFC_ENABLED_Val _U_(0x1)
#define SDHC_NISTER_TRFC_MASKED (SDHC_NISTER_TRFC_MASKED_Val << SDHC_NISTER_TRFC_Pos)
#define SDHC_NISTER_TRFC_ENABLED (SDHC_NISTER_TRFC_ENABLED_Val << SDHC_NISTER_TRFC_Pos)
#define SDHC_NISTER_BLKGE_Pos 2
#define SDHC_NISTER_BLKGE (_U_(0x1) << SDHC_NISTER_BLKGE_Pos)
#define SDHC_NISTER_BLKGE_MASKED_Val _U_(0x0)
#define SDHC_NISTER_BLKGE_ENABLED_Val _U_(0x1)
#define SDHC_NISTER_BLKGE_MASKED (SDHC_NISTER_BLKGE_MASKED_Val << SDHC_NISTER_BLKGE_Pos)
#define SDHC_NISTER_BLKGE_ENABLED (SDHC_NISTER_BLKGE_ENABLED_Val << SDHC_NISTER_BLKGE_Pos)
#define SDHC_NISTER_DMAINT_Pos 3
#define SDHC_NISTER_DMAINT (_U_(0x1) << SDHC_NISTER_DMAINT_Pos)
#define SDHC_NISTER_DMAINT_MASKED_Val _U_(0x0)
#define SDHC_NISTER_DMAINT_ENABLED_Val _U_(0x1)
#define SDHC_NISTER_DMAINT_MASKED (SDHC_NISTER_DMAINT_MASKED_Val << SDHC_NISTER_DMAINT_Pos)
#define SDHC_NISTER_DMAINT_ENABLED (SDHC_NISTER_DMAINT_ENABLED_Val << SDHC_NISTER_DMAINT_Pos)
#define SDHC_NISTER_BWRRDY_Pos 4
#define SDHC_NISTER_BWRRDY (_U_(0x1) << SDHC_NISTER_BWRRDY_Pos)
#define SDHC_NISTER_BWRRDY_MASKED_Val _U_(0x0)
#define SDHC_NISTER_BWRRDY_ENABLED_Val _U_(0x1)
#define SDHC_NISTER_BWRRDY_MASKED (SDHC_NISTER_BWRRDY_MASKED_Val << SDHC_NISTER_BWRRDY_Pos)
#define SDHC_NISTER_BWRRDY_ENABLED (SDHC_NISTER_BWRRDY_ENABLED_Val << SDHC_NISTER_BWRRDY_Pos)
#define SDHC_NISTER_BRDRDY_Pos 5
#define SDHC_NISTER_BRDRDY (_U_(0x1) << SDHC_NISTER_BRDRDY_Pos)
#define SDHC_NISTER_BRDRDY_MASKED_Val _U_(0x0)
#define SDHC_NISTER_BRDRDY_ENABLED_Val _U_(0x1)
#define SDHC_NISTER_BRDRDY_MASKED (SDHC_NISTER_BRDRDY_MASKED_Val << SDHC_NISTER_BRDRDY_Pos)
#define SDHC_NISTER_BRDRDY_ENABLED (SDHC_NISTER_BRDRDY_ENABLED_Val << SDHC_NISTER_BRDRDY_Pos)
#define SDHC_NISTER_CINS_Pos 6
#define SDHC_NISTER_CINS (_U_(0x1) << SDHC_NISTER_CINS_Pos)
#define SDHC_NISTER_CINS_MASKED_Val _U_(0x0)
#define SDHC_NISTER_CINS_ENABLED_Val _U_(0x1)
#define SDHC_NISTER_CINS_MASKED (SDHC_NISTER_CINS_MASKED_Val << SDHC_NISTER_CINS_Pos)
#define SDHC_NISTER_CINS_ENABLED (SDHC_NISTER_CINS_ENABLED_Val << SDHC_NISTER_CINS_Pos)
#define SDHC_NISTER_CREM_Pos 7
#define SDHC_NISTER_CREM (_U_(0x1) << SDHC_NISTER_CREM_Pos)
#define SDHC_NISTER_CREM_MASKED_Val _U_(0x0)
#define SDHC_NISTER_CREM_ENABLED_Val _U_(0x1)
#define SDHC_NISTER_CREM_MASKED (SDHC_NISTER_CREM_MASKED_Val << SDHC_NISTER_CREM_Pos)
#define SDHC_NISTER_CREM_ENABLED (SDHC_NISTER_CREM_ENABLED_Val << SDHC_NISTER_CREM_Pos)
#define SDHC_NISTER_CINT_Pos 8
#define SDHC_NISTER_CINT (_U_(0x1) << SDHC_NISTER_CINT_Pos)
#define SDHC_NISTER_CINT_MASKED_Val _U_(0x0)
#define SDHC_NISTER_CINT_ENABLED_Val _U_(0x1)
#define SDHC_NISTER_CINT_MASKED (SDHC_NISTER_CINT_MASKED_Val << SDHC_NISTER_CINT_Pos)
#define SDHC_NISTER_CINT_ENABLED (SDHC_NISTER_CINT_ENABLED_Val << SDHC_NISTER_CINT_Pos)
#define SDHC_NISTER_MASK _U_(0x01FF)


#define SDHC_NISTER_EMMC_CMDC_Pos 0
#define SDHC_NISTER_EMMC_CMDC (_U_(0x1) << SDHC_NISTER_EMMC_CMDC_Pos)
#define SDHC_NISTER_EMMC_CMDC_MASKED_Val _U_(0x0)
#define SDHC_NISTER_EMMC_CMDC_ENABLED_Val _U_(0x1)
#define SDHC_NISTER_EMMC_CMDC_MASKED (SDHC_NISTER_EMMC_CMDC_MASKED_Val << SDHC_NISTER_EMMC_CMDC_Pos)
#define SDHC_NISTER_EMMC_CMDC_ENABLED (SDHC_NISTER_EMMC_CMDC_ENABLED_Val << SDHC_NISTER_EMMC_CMDC_Pos)
#define SDHC_NISTER_EMMC_TRFC_Pos 1
#define SDHC_NISTER_EMMC_TRFC (_U_(0x1) << SDHC_NISTER_EMMC_TRFC_Pos)
#define SDHC_NISTER_EMMC_TRFC_MASKED_Val _U_(0x0)
#define SDHC_NISTER_EMMC_TRFC_ENABLED_Val _U_(0x1)
#define SDHC_NISTER_EMMC_TRFC_MASKED (SDHC_NISTER_EMMC_TRFC_MASKED_Val << SDHC_NISTER_EMMC_TRFC_Pos)
#define SDHC_NISTER_EMMC_TRFC_ENABLED (SDHC_NISTER_EMMC_TRFC_ENABLED_Val << SDHC_NISTER_EMMC_TRFC_Pos)
#define SDHC_NISTER_EMMC_BLKGE_Pos 2
#define SDHC_NISTER_EMMC_BLKGE (_U_(0x1) << SDHC_NISTER_EMMC_BLKGE_Pos)
#define SDHC_NISTER_EMMC_BLKGE_MASKED_Val _U_(0x0)
#define SDHC_NISTER_EMMC_BLKGE_ENABLED_Val _U_(0x1)
#define SDHC_NISTER_EMMC_BLKGE_MASKED (SDHC_NISTER_EMMC_BLKGE_MASKED_Val << SDHC_NISTER_EMMC_BLKGE_Pos)
#define SDHC_NISTER_EMMC_BLKGE_ENABLED (SDHC_NISTER_EMMC_BLKGE_ENABLED_Val << SDHC_NISTER_EMMC_BLKGE_Pos)
#define SDHC_NISTER_EMMC_DMAINT_Pos 3
#define SDHC_NISTER_EMMC_DMAINT (_U_(0x1) << SDHC_NISTER_EMMC_DMAINT_Pos)
#define SDHC_NISTER_EMMC_DMAINT_MASKED_Val _U_(0x0)
#define SDHC_NISTER_EMMC_DMAINT_ENABLED_Val _U_(0x1)
#define SDHC_NISTER_EMMC_DMAINT_MASKED (SDHC_NISTER_EMMC_DMAINT_MASKED_Val << SDHC_NISTER_EMMC_DMAINT_Pos)
#define SDHC_NISTER_EMMC_DMAINT_ENABLED (SDHC_NISTER_EMMC_DMAINT_ENABLED_Val << SDHC_NISTER_EMMC_DMAINT_Pos)
#define SDHC_NISTER_EMMC_BWRRDY_Pos 4
#define SDHC_NISTER_EMMC_BWRRDY (_U_(0x1) << SDHC_NISTER_EMMC_BWRRDY_Pos)
#define SDHC_NISTER_EMMC_BWRRDY_MASKED_Val _U_(0x0)
#define SDHC_NISTER_EMMC_BWRRDY_ENABLED_Val _U_(0x1)
#define SDHC_NISTER_EMMC_BWRRDY_MASKED (SDHC_NISTER_EMMC_BWRRDY_MASKED_Val << SDHC_NISTER_EMMC_BWRRDY_Pos)
#define SDHC_NISTER_EMMC_BWRRDY_ENABLED (SDHC_NISTER_EMMC_BWRRDY_ENABLED_Val << SDHC_NISTER_EMMC_BWRRDY_Pos)
#define SDHC_NISTER_EMMC_BRDRDY_Pos 5
#define SDHC_NISTER_EMMC_BRDRDY (_U_(0x1) << SDHC_NISTER_EMMC_BRDRDY_Pos)
#define SDHC_NISTER_EMMC_BRDRDY_MASKED_Val _U_(0x0)
#define SDHC_NISTER_EMMC_BRDRDY_ENABLED_Val _U_(0x1)
#define SDHC_NISTER_EMMC_BRDRDY_MASKED (SDHC_NISTER_EMMC_BRDRDY_MASKED_Val << SDHC_NISTER_EMMC_BRDRDY_Pos)
#define SDHC_NISTER_EMMC_BRDRDY_ENABLED (SDHC_NISTER_EMMC_BRDRDY_ENABLED_Val << SDHC_NISTER_EMMC_BRDRDY_Pos)
#define SDHC_NISTER_EMMC_BOOTAR_Pos 14
#define SDHC_NISTER_EMMC_BOOTAR (_U_(0x1) << SDHC_NISTER_EMMC_BOOTAR_Pos)
#define SDHC_NISTER_EMMC_MASK _U_(0x403F)



typedef union {
  struct {
    uint16_t CMDTEO:1;
    uint16_t CMDCRC:1;
    uint16_t CMDEND:1;
    uint16_t CMDIDX:1;
    uint16_t DATTEO:1;
    uint16_t DATCRC:1;
    uint16_t DATEND:1;
    uint16_t CURLIM:1;
    uint16_t ACMD:1;
    uint16_t ADMA:1;
    uint16_t :6;
  } bit;
  struct {
    uint16_t CMDTEO:1;
    uint16_t CMDCRC:1;
    uint16_t CMDEND:1;
    uint16_t CMDIDX:1;
    uint16_t DATTEO:1;
    uint16_t DATCRC:1;
    uint16_t DATEND:1;
    uint16_t CURLIM:1;
    uint16_t ACMD:1;
    uint16_t ADMA:1;
    uint16_t :2;
    uint16_t BOOTAE:1;
    uint16_t :3;
  } EMMC;
  uint16_t reg;
} SDHC_EISTER_Type;


#define SDHC_EISTER_OFFSET 0x036
#define SDHC_EISTER_RESETVALUE _U_(0x0000)

#define SDHC_EISTER_CMDTEO_Pos 0
#define SDHC_EISTER_CMDTEO (_U_(0x1) << SDHC_EISTER_CMDTEO_Pos)
#define SDHC_EISTER_CMDTEO_MASKED_Val _U_(0x0)
#define SDHC_EISTER_CMDTEO_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_CMDTEO_MASKED (SDHC_EISTER_CMDTEO_MASKED_Val << SDHC_EISTER_CMDTEO_Pos)
#define SDHC_EISTER_CMDTEO_ENABLED (SDHC_EISTER_CMDTEO_ENABLED_Val << SDHC_EISTER_CMDTEO_Pos)
#define SDHC_EISTER_CMDCRC_Pos 1
#define SDHC_EISTER_CMDCRC (_U_(0x1) << SDHC_EISTER_CMDCRC_Pos)
#define SDHC_EISTER_CMDCRC_MASKED_Val _U_(0x0)
#define SDHC_EISTER_CMDCRC_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_CMDCRC_MASKED (SDHC_EISTER_CMDCRC_MASKED_Val << SDHC_EISTER_CMDCRC_Pos)
#define SDHC_EISTER_CMDCRC_ENABLED (SDHC_EISTER_CMDCRC_ENABLED_Val << SDHC_EISTER_CMDCRC_Pos)
#define SDHC_EISTER_CMDEND_Pos 2
#define SDHC_EISTER_CMDEND (_U_(0x1) << SDHC_EISTER_CMDEND_Pos)
#define SDHC_EISTER_CMDEND_MASKED_Val _U_(0x0)
#define SDHC_EISTER_CMDEND_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_CMDEND_MASKED (SDHC_EISTER_CMDEND_MASKED_Val << SDHC_EISTER_CMDEND_Pos)
#define SDHC_EISTER_CMDEND_ENABLED (SDHC_EISTER_CMDEND_ENABLED_Val << SDHC_EISTER_CMDEND_Pos)
#define SDHC_EISTER_CMDIDX_Pos 3
#define SDHC_EISTER_CMDIDX (_U_(0x1) << SDHC_EISTER_CMDIDX_Pos)
#define SDHC_EISTER_CMDIDX_MASKED_Val _U_(0x0)
#define SDHC_EISTER_CMDIDX_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_CMDIDX_MASKED (SDHC_EISTER_CMDIDX_MASKED_Val << SDHC_EISTER_CMDIDX_Pos)
#define SDHC_EISTER_CMDIDX_ENABLED (SDHC_EISTER_CMDIDX_ENABLED_Val << SDHC_EISTER_CMDIDX_Pos)
#define SDHC_EISTER_DATTEO_Pos 4
#define SDHC_EISTER_DATTEO (_U_(0x1) << SDHC_EISTER_DATTEO_Pos)
#define SDHC_EISTER_DATTEO_MASKED_Val _U_(0x0)
#define SDHC_EISTER_DATTEO_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_DATTEO_MASKED (SDHC_EISTER_DATTEO_MASKED_Val << SDHC_EISTER_DATTEO_Pos)
#define SDHC_EISTER_DATTEO_ENABLED (SDHC_EISTER_DATTEO_ENABLED_Val << SDHC_EISTER_DATTEO_Pos)
#define SDHC_EISTER_DATCRC_Pos 5
#define SDHC_EISTER_DATCRC (_U_(0x1) << SDHC_EISTER_DATCRC_Pos)
#define SDHC_EISTER_DATCRC_MASKED_Val _U_(0x0)
#define SDHC_EISTER_DATCRC_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_DATCRC_MASKED (SDHC_EISTER_DATCRC_MASKED_Val << SDHC_EISTER_DATCRC_Pos)
#define SDHC_EISTER_DATCRC_ENABLED (SDHC_EISTER_DATCRC_ENABLED_Val << SDHC_EISTER_DATCRC_Pos)
#define SDHC_EISTER_DATEND_Pos 6
#define SDHC_EISTER_DATEND (_U_(0x1) << SDHC_EISTER_DATEND_Pos)
#define SDHC_EISTER_DATEND_MASKED_Val _U_(0x0)
#define SDHC_EISTER_DATEND_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_DATEND_MASKED (SDHC_EISTER_DATEND_MASKED_Val << SDHC_EISTER_DATEND_Pos)
#define SDHC_EISTER_DATEND_ENABLED (SDHC_EISTER_DATEND_ENABLED_Val << SDHC_EISTER_DATEND_Pos)
#define SDHC_EISTER_CURLIM_Pos 7
#define SDHC_EISTER_CURLIM (_U_(0x1) << SDHC_EISTER_CURLIM_Pos)
#define SDHC_EISTER_CURLIM_MASKED_Val _U_(0x0)
#define SDHC_EISTER_CURLIM_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_CURLIM_MASKED (SDHC_EISTER_CURLIM_MASKED_Val << SDHC_EISTER_CURLIM_Pos)
#define SDHC_EISTER_CURLIM_ENABLED (SDHC_EISTER_CURLIM_ENABLED_Val << SDHC_EISTER_CURLIM_Pos)
#define SDHC_EISTER_ACMD_Pos 8
#define SDHC_EISTER_ACMD (_U_(0x1) << SDHC_EISTER_ACMD_Pos)
#define SDHC_EISTER_ACMD_MASKED_Val _U_(0x0)
#define SDHC_EISTER_ACMD_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_ACMD_MASKED (SDHC_EISTER_ACMD_MASKED_Val << SDHC_EISTER_ACMD_Pos)
#define SDHC_EISTER_ACMD_ENABLED (SDHC_EISTER_ACMD_ENABLED_Val << SDHC_EISTER_ACMD_Pos)
#define SDHC_EISTER_ADMA_Pos 9
#define SDHC_EISTER_ADMA (_U_(0x1) << SDHC_EISTER_ADMA_Pos)
#define SDHC_EISTER_ADMA_MASKED_Val _U_(0x0)
#define SDHC_EISTER_ADMA_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_ADMA_MASKED (SDHC_EISTER_ADMA_MASKED_Val << SDHC_EISTER_ADMA_Pos)
#define SDHC_EISTER_ADMA_ENABLED (SDHC_EISTER_ADMA_ENABLED_Val << SDHC_EISTER_ADMA_Pos)
#define SDHC_EISTER_MASK _U_(0x03FF)


#define SDHC_EISTER_EMMC_CMDTEO_Pos 0
#define SDHC_EISTER_EMMC_CMDTEO (_U_(0x1) << SDHC_EISTER_EMMC_CMDTEO_Pos)
#define SDHC_EISTER_EMMC_CMDTEO_MASKED_Val _U_(0x0)
#define SDHC_EISTER_EMMC_CMDTEO_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_EMMC_CMDTEO_MASKED (SDHC_EISTER_EMMC_CMDTEO_MASKED_Val << SDHC_EISTER_EMMC_CMDTEO_Pos)
#define SDHC_EISTER_EMMC_CMDTEO_ENABLED (SDHC_EISTER_EMMC_CMDTEO_ENABLED_Val << SDHC_EISTER_EMMC_CMDTEO_Pos)
#define SDHC_EISTER_EMMC_CMDCRC_Pos 1
#define SDHC_EISTER_EMMC_CMDCRC (_U_(0x1) << SDHC_EISTER_EMMC_CMDCRC_Pos)
#define SDHC_EISTER_EMMC_CMDCRC_MASKED_Val _U_(0x0)
#define SDHC_EISTER_EMMC_CMDCRC_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_EMMC_CMDCRC_MASKED (SDHC_EISTER_EMMC_CMDCRC_MASKED_Val << SDHC_EISTER_EMMC_CMDCRC_Pos)
#define SDHC_EISTER_EMMC_CMDCRC_ENABLED (SDHC_EISTER_EMMC_CMDCRC_ENABLED_Val << SDHC_EISTER_EMMC_CMDCRC_Pos)
#define SDHC_EISTER_EMMC_CMDEND_Pos 2
#define SDHC_EISTER_EMMC_CMDEND (_U_(0x1) << SDHC_EISTER_EMMC_CMDEND_Pos)
#define SDHC_EISTER_EMMC_CMDEND_MASKED_Val _U_(0x0)
#define SDHC_EISTER_EMMC_CMDEND_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_EMMC_CMDEND_MASKED (SDHC_EISTER_EMMC_CMDEND_MASKED_Val << SDHC_EISTER_EMMC_CMDEND_Pos)
#define SDHC_EISTER_EMMC_CMDEND_ENABLED (SDHC_EISTER_EMMC_CMDEND_ENABLED_Val << SDHC_EISTER_EMMC_CMDEND_Pos)
#define SDHC_EISTER_EMMC_CMDIDX_Pos 3
#define SDHC_EISTER_EMMC_CMDIDX (_U_(0x1) << SDHC_EISTER_EMMC_CMDIDX_Pos)
#define SDHC_EISTER_EMMC_CMDIDX_MASKED_Val _U_(0x0)
#define SDHC_EISTER_EMMC_CMDIDX_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_EMMC_CMDIDX_MASKED (SDHC_EISTER_EMMC_CMDIDX_MASKED_Val << SDHC_EISTER_EMMC_CMDIDX_Pos)
#define SDHC_EISTER_EMMC_CMDIDX_ENABLED (SDHC_EISTER_EMMC_CMDIDX_ENABLED_Val << SDHC_EISTER_EMMC_CMDIDX_Pos)
#define SDHC_EISTER_EMMC_DATTEO_Pos 4
#define SDHC_EISTER_EMMC_DATTEO (_U_(0x1) << SDHC_EISTER_EMMC_DATTEO_Pos)
#define SDHC_EISTER_EMMC_DATTEO_MASKED_Val _U_(0x0)
#define SDHC_EISTER_EMMC_DATTEO_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_EMMC_DATTEO_MASKED (SDHC_EISTER_EMMC_DATTEO_MASKED_Val << SDHC_EISTER_EMMC_DATTEO_Pos)
#define SDHC_EISTER_EMMC_DATTEO_ENABLED (SDHC_EISTER_EMMC_DATTEO_ENABLED_Val << SDHC_EISTER_EMMC_DATTEO_Pos)
#define SDHC_EISTER_EMMC_DATCRC_Pos 5
#define SDHC_EISTER_EMMC_DATCRC (_U_(0x1) << SDHC_EISTER_EMMC_DATCRC_Pos)
#define SDHC_EISTER_EMMC_DATCRC_MASKED_Val _U_(0x0)
#define SDHC_EISTER_EMMC_DATCRC_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_EMMC_DATCRC_MASKED (SDHC_EISTER_EMMC_DATCRC_MASKED_Val << SDHC_EISTER_EMMC_DATCRC_Pos)
#define SDHC_EISTER_EMMC_DATCRC_ENABLED (SDHC_EISTER_EMMC_DATCRC_ENABLED_Val << SDHC_EISTER_EMMC_DATCRC_Pos)
#define SDHC_EISTER_EMMC_DATEND_Pos 6
#define SDHC_EISTER_EMMC_DATEND (_U_(0x1) << SDHC_EISTER_EMMC_DATEND_Pos)
#define SDHC_EISTER_EMMC_DATEND_MASKED_Val _U_(0x0)
#define SDHC_EISTER_EMMC_DATEND_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_EMMC_DATEND_MASKED (SDHC_EISTER_EMMC_DATEND_MASKED_Val << SDHC_EISTER_EMMC_DATEND_Pos)
#define SDHC_EISTER_EMMC_DATEND_ENABLED (SDHC_EISTER_EMMC_DATEND_ENABLED_Val << SDHC_EISTER_EMMC_DATEND_Pos)
#define SDHC_EISTER_EMMC_CURLIM_Pos 7
#define SDHC_EISTER_EMMC_CURLIM (_U_(0x1) << SDHC_EISTER_EMMC_CURLIM_Pos)
#define SDHC_EISTER_EMMC_CURLIM_MASKED_Val _U_(0x0)
#define SDHC_EISTER_EMMC_CURLIM_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_EMMC_CURLIM_MASKED (SDHC_EISTER_EMMC_CURLIM_MASKED_Val << SDHC_EISTER_EMMC_CURLIM_Pos)
#define SDHC_EISTER_EMMC_CURLIM_ENABLED (SDHC_EISTER_EMMC_CURLIM_ENABLED_Val << SDHC_EISTER_EMMC_CURLIM_Pos)
#define SDHC_EISTER_EMMC_ACMD_Pos 8
#define SDHC_EISTER_EMMC_ACMD (_U_(0x1) << SDHC_EISTER_EMMC_ACMD_Pos)
#define SDHC_EISTER_EMMC_ACMD_MASKED_Val _U_(0x0)
#define SDHC_EISTER_EMMC_ACMD_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_EMMC_ACMD_MASKED (SDHC_EISTER_EMMC_ACMD_MASKED_Val << SDHC_EISTER_EMMC_ACMD_Pos)
#define SDHC_EISTER_EMMC_ACMD_ENABLED (SDHC_EISTER_EMMC_ACMD_ENABLED_Val << SDHC_EISTER_EMMC_ACMD_Pos)
#define SDHC_EISTER_EMMC_ADMA_Pos 9
#define SDHC_EISTER_EMMC_ADMA (_U_(0x1) << SDHC_EISTER_EMMC_ADMA_Pos)
#define SDHC_EISTER_EMMC_ADMA_MASKED_Val _U_(0x0)
#define SDHC_EISTER_EMMC_ADMA_ENABLED_Val _U_(0x1)
#define SDHC_EISTER_EMMC_ADMA_MASKED (SDHC_EISTER_EMMC_ADMA_MASKED_Val << SDHC_EISTER_EMMC_ADMA_Pos)
#define SDHC_EISTER_EMMC_ADMA_ENABLED (SDHC_EISTER_EMMC_ADMA_ENABLED_Val << SDHC_EISTER_EMMC_ADMA_Pos)
#define SDHC_EISTER_EMMC_BOOTAE_Pos 12
#define SDHC_EISTER_EMMC_BOOTAE (_U_(0x1) << SDHC_EISTER_EMMC_BOOTAE_Pos)
#define SDHC_EISTER_EMMC_MASK _U_(0x13FF)



typedef union {
  struct {
    uint16_t CMDC:1;
    uint16_t TRFC:1;
    uint16_t BLKGE:1;
    uint16_t DMAINT:1;
    uint16_t BWRRDY:1;
    uint16_t BRDRDY:1;
    uint16_t CINS:1;
    uint16_t CREM:1;
    uint16_t CINT:1;
    uint16_t :7;
  } bit;
  struct {
    uint16_t CMDC:1;
    uint16_t TRFC:1;
    uint16_t BLKGE:1;
    uint16_t DMAINT:1;
    uint16_t BWRRDY:1;
    uint16_t BRDRDY:1;
    uint16_t :8;
    uint16_t BOOTAR:1;
    uint16_t :1;
  } EMMC;
  uint16_t reg;
} SDHC_NISIER_Type;


#define SDHC_NISIER_OFFSET 0x038
#define SDHC_NISIER_RESETVALUE _U_(0x0000)

#define SDHC_NISIER_CMDC_Pos 0
#define SDHC_NISIER_CMDC (_U_(0x1) << SDHC_NISIER_CMDC_Pos)
#define SDHC_NISIER_CMDC_MASKED_Val _U_(0x0)
#define SDHC_NISIER_CMDC_ENABLED_Val _U_(0x1)
#define SDHC_NISIER_CMDC_MASKED (SDHC_NISIER_CMDC_MASKED_Val << SDHC_NISIER_CMDC_Pos)
#define SDHC_NISIER_CMDC_ENABLED (SDHC_NISIER_CMDC_ENABLED_Val << SDHC_NISIER_CMDC_Pos)
#define SDHC_NISIER_TRFC_Pos 1
#define SDHC_NISIER_TRFC (_U_(0x1) << SDHC_NISIER_TRFC_Pos)
#define SDHC_NISIER_TRFC_MASKED_Val _U_(0x0)
#define SDHC_NISIER_TRFC_ENABLED_Val _U_(0x1)
#define SDHC_NISIER_TRFC_MASKED (SDHC_NISIER_TRFC_MASKED_Val << SDHC_NISIER_TRFC_Pos)
#define SDHC_NISIER_TRFC_ENABLED (SDHC_NISIER_TRFC_ENABLED_Val << SDHC_NISIER_TRFC_Pos)
#define SDHC_NISIER_BLKGE_Pos 2
#define SDHC_NISIER_BLKGE (_U_(0x1) << SDHC_NISIER_BLKGE_Pos)
#define SDHC_NISIER_BLKGE_MASKED_Val _U_(0x0)
#define SDHC_NISIER_BLKGE_ENABLED_Val _U_(0x1)
#define SDHC_NISIER_BLKGE_MASKED (SDHC_NISIER_BLKGE_MASKED_Val << SDHC_NISIER_BLKGE_Pos)
#define SDHC_NISIER_BLKGE_ENABLED (SDHC_NISIER_BLKGE_ENABLED_Val << SDHC_NISIER_BLKGE_Pos)
#define SDHC_NISIER_DMAINT_Pos 3
#define SDHC_NISIER_DMAINT (_U_(0x1) << SDHC_NISIER_DMAINT_Pos)
#define SDHC_NISIER_DMAINT_MASKED_Val _U_(0x0)
#define SDHC_NISIER_DMAINT_ENABLED_Val _U_(0x1)
#define SDHC_NISIER_DMAINT_MASKED (SDHC_NISIER_DMAINT_MASKED_Val << SDHC_NISIER_DMAINT_Pos)
#define SDHC_NISIER_DMAINT_ENABLED (SDHC_NISIER_DMAINT_ENABLED_Val << SDHC_NISIER_DMAINT_Pos)
#define SDHC_NISIER_BWRRDY_Pos 4
#define SDHC_NISIER_BWRRDY (_U_(0x1) << SDHC_NISIER_BWRRDY_Pos)
#define SDHC_NISIER_BWRRDY_MASKED_Val _U_(0x0)
#define SDHC_NISIER_BWRRDY_ENABLED_Val _U_(0x1)
#define SDHC_NISIER_BWRRDY_MASKED (SDHC_NISIER_BWRRDY_MASKED_Val << SDHC_NISIER_BWRRDY_Pos)
#define SDHC_NISIER_BWRRDY_ENABLED (SDHC_NISIER_BWRRDY_ENABLED_Val << SDHC_NISIER_BWRRDY_Pos)
#define SDHC_NISIER_BRDRDY_Pos 5
#define SDHC_NISIER_BRDRDY (_U_(0x1) << SDHC_NISIER_BRDRDY_Pos)
#define SDHC_NISIER_BRDRDY_MASKED_Val _U_(0x0)
#define SDHC_NISIER_BRDRDY_ENABLED_Val _U_(0x1)
#define SDHC_NISIER_BRDRDY_MASKED (SDHC_NISIER_BRDRDY_MASKED_Val << SDHC_NISIER_BRDRDY_Pos)
#define SDHC_NISIER_BRDRDY_ENABLED (SDHC_NISIER_BRDRDY_ENABLED_Val << SDHC_NISIER_BRDRDY_Pos)
#define SDHC_NISIER_CINS_Pos 6
#define SDHC_NISIER_CINS (_U_(0x1) << SDHC_NISIER_CINS_Pos)
#define SDHC_NISIER_CINS_MASKED_Val _U_(0x0)
#define SDHC_NISIER_CINS_ENABLED_Val _U_(0x1)
#define SDHC_NISIER_CINS_MASKED (SDHC_NISIER_CINS_MASKED_Val << SDHC_NISIER_CINS_Pos)
#define SDHC_NISIER_CINS_ENABLED (SDHC_NISIER_CINS_ENABLED_Val << SDHC_NISIER_CINS_Pos)
#define SDHC_NISIER_CREM_Pos 7
#define SDHC_NISIER_CREM (_U_(0x1) << SDHC_NISIER_CREM_Pos)
#define SDHC_NISIER_CREM_MASKED_Val _U_(0x0)
#define SDHC_NISIER_CREM_ENABLED_Val _U_(0x1)
#define SDHC_NISIER_CREM_MASKED (SDHC_NISIER_CREM_MASKED_Val << SDHC_NISIER_CREM_Pos)
#define SDHC_NISIER_CREM_ENABLED (SDHC_NISIER_CREM_ENABLED_Val << SDHC_NISIER_CREM_Pos)
#define SDHC_NISIER_CINT_Pos 8
#define SDHC_NISIER_CINT (_U_(0x1) << SDHC_NISIER_CINT_Pos)
#define SDHC_NISIER_CINT_MASKED_Val _U_(0x0)
#define SDHC_NISIER_CINT_ENABLED_Val _U_(0x1)
#define SDHC_NISIER_CINT_MASKED (SDHC_NISIER_CINT_MASKED_Val << SDHC_NISIER_CINT_Pos)
#define SDHC_NISIER_CINT_ENABLED (SDHC_NISIER_CINT_ENABLED_Val << SDHC_NISIER_CINT_Pos)
#define SDHC_NISIER_MASK _U_(0x01FF)


#define SDHC_NISIER_EMMC_CMDC_Pos 0
#define SDHC_NISIER_EMMC_CMDC (_U_(0x1) << SDHC_NISIER_EMMC_CMDC_Pos)
#define SDHC_NISIER_EMMC_CMDC_MASKED_Val _U_(0x0)
#define SDHC_NISIER_EMMC_CMDC_ENABLED_Val _U_(0x1)
#define SDHC_NISIER_EMMC_CMDC_MASKED (SDHC_NISIER_EMMC_CMDC_MASKED_Val << SDHC_NISIER_EMMC_CMDC_Pos)
#define SDHC_NISIER_EMMC_CMDC_ENABLED (SDHC_NISIER_EMMC_CMDC_ENABLED_Val << SDHC_NISIER_EMMC_CMDC_Pos)
#define SDHC_NISIER_EMMC_TRFC_Pos 1
#define SDHC_NISIER_EMMC_TRFC (_U_(0x1) << SDHC_NISIER_EMMC_TRFC_Pos)
#define SDHC_NISIER_EMMC_TRFC_MASKED_Val _U_(0x0)
#define SDHC_NISIER_EMMC_TRFC_ENABLED_Val _U_(0x1)
#define SDHC_NISIER_EMMC_TRFC_MASKED (SDHC_NISIER_EMMC_TRFC_MASKED_Val << SDHC_NISIER_EMMC_TRFC_Pos)
#define SDHC_NISIER_EMMC_TRFC_ENABLED (SDHC_NISIER_EMMC_TRFC_ENABLED_Val << SDHC_NISIER_EMMC_TRFC_Pos)
#define SDHC_NISIER_EMMC_BLKGE_Pos 2
#define SDHC_NISIER_EMMC_BLKGE (_U_(0x1) << SDHC_NISIER_EMMC_BLKGE_Pos)
#define SDHC_NISIER_EMMC_BLKGE_MASKED_Val _U_(0x0)
#define SDHC_NISIER_EMMC_BLKGE_ENABLED_Val _U_(0x1)
#define SDHC_NISIER_EMMC_BLKGE_MASKED (SDHC_NISIER_EMMC_BLKGE_MASKED_Val << SDHC_NISIER_EMMC_BLKGE_Pos)
#define SDHC_NISIER_EMMC_BLKGE_ENABLED (SDHC_NISIER_EMMC_BLKGE_ENABLED_Val << SDHC_NISIER_EMMC_BLKGE_Pos)
#define SDHC_NISIER_EMMC_DMAINT_Pos 3
#define SDHC_NISIER_EMMC_DMAINT (_U_(0x1) << SDHC_NISIER_EMMC_DMAINT_Pos)
#define SDHC_NISIER_EMMC_DMAINT_MASKED_Val _U_(0x0)
#define SDHC_NISIER_EMMC_DMAINT_ENABLED_Val _U_(0x1)
#define SDHC_NISIER_EMMC_DMAINT_MASKED (SDHC_NISIER_EMMC_DMAINT_MASKED_Val << SDHC_NISIER_EMMC_DMAINT_Pos)
#define SDHC_NISIER_EMMC_DMAINT_ENABLED (SDHC_NISIER_EMMC_DMAINT_ENABLED_Val << SDHC_NISIER_EMMC_DMAINT_Pos)
#define SDHC_NISIER_EMMC_BWRRDY_Pos 4
#define SDHC_NISIER_EMMC_BWRRDY (_U_(0x1) << SDHC_NISIER_EMMC_BWRRDY_Pos)
#define SDHC_NISIER_EMMC_BWRRDY_MASKED_Val _U_(0x0)
#define SDHC_NISIER_EMMC_BWRRDY_ENABLED_Val _U_(0x1)
#define SDHC_NISIER_EMMC_BWRRDY_MASKED (SDHC_NISIER_EMMC_BWRRDY_MASKED_Val << SDHC_NISIER_EMMC_BWRRDY_Pos)
#define SDHC_NISIER_EMMC_BWRRDY_ENABLED (SDHC_NISIER_EMMC_BWRRDY_ENABLED_Val << SDHC_NISIER_EMMC_BWRRDY_Pos)
#define SDHC_NISIER_EMMC_BRDRDY_Pos 5
#define SDHC_NISIER_EMMC_BRDRDY (_U_(0x1) << SDHC_NISIER_EMMC_BRDRDY_Pos)
#define SDHC_NISIER_EMMC_BRDRDY_MASKED_Val _U_(0x0)
#define SDHC_NISIER_EMMC_BRDRDY_ENABLED_Val _U_(0x1)
#define SDHC_NISIER_EMMC_BRDRDY_MASKED (SDHC_NISIER_EMMC_BRDRDY_MASKED_Val << SDHC_NISIER_EMMC_BRDRDY_Pos)
#define SDHC_NISIER_EMMC_BRDRDY_ENABLED (SDHC_NISIER_EMMC_BRDRDY_ENABLED_Val << SDHC_NISIER_EMMC_BRDRDY_Pos)
#define SDHC_NISIER_EMMC_BOOTAR_Pos 14
#define SDHC_NISIER_EMMC_BOOTAR (_U_(0x1) << SDHC_NISIER_EMMC_BOOTAR_Pos)
#define SDHC_NISIER_EMMC_MASK _U_(0x403F)



typedef union {
  struct {
    uint16_t CMDTEO:1;
    uint16_t CMDCRC:1;
    uint16_t CMDEND:1;
    uint16_t CMDIDX:1;
    uint16_t DATTEO:1;
    uint16_t DATCRC:1;
    uint16_t DATEND:1;
    uint16_t CURLIM:1;
    uint16_t ACMD:1;
    uint16_t ADMA:1;
    uint16_t :6;
  } bit;
  struct {
    uint16_t CMDTEO:1;
    uint16_t CMDCRC:1;
    uint16_t CMDEND:1;
    uint16_t CMDIDX:1;
    uint16_t DATTEO:1;
    uint16_t DATCRC:1;
    uint16_t DATEND:1;
    uint16_t CURLIM:1;
    uint16_t ACMD:1;
    uint16_t ADMA:1;
    uint16_t :2;
    uint16_t BOOTAE:1;
    uint16_t :3;
  } EMMC;
  uint16_t reg;
} SDHC_EISIER_Type;


#define SDHC_EISIER_OFFSET 0x03A
#define SDHC_EISIER_RESETVALUE _U_(0x0000)

#define SDHC_EISIER_CMDTEO_Pos 0
#define SDHC_EISIER_CMDTEO (_U_(0x1) << SDHC_EISIER_CMDTEO_Pos)
#define SDHC_EISIER_CMDTEO_MASKED_Val _U_(0x0)
#define SDHC_EISIER_CMDTEO_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_CMDTEO_MASKED (SDHC_EISIER_CMDTEO_MASKED_Val << SDHC_EISIER_CMDTEO_Pos)
#define SDHC_EISIER_CMDTEO_ENABLED (SDHC_EISIER_CMDTEO_ENABLED_Val << SDHC_EISIER_CMDTEO_Pos)
#define SDHC_EISIER_CMDCRC_Pos 1
#define SDHC_EISIER_CMDCRC (_U_(0x1) << SDHC_EISIER_CMDCRC_Pos)
#define SDHC_EISIER_CMDCRC_MASKED_Val _U_(0x0)
#define SDHC_EISIER_CMDCRC_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_CMDCRC_MASKED (SDHC_EISIER_CMDCRC_MASKED_Val << SDHC_EISIER_CMDCRC_Pos)
#define SDHC_EISIER_CMDCRC_ENABLED (SDHC_EISIER_CMDCRC_ENABLED_Val << SDHC_EISIER_CMDCRC_Pos)
#define SDHC_EISIER_CMDEND_Pos 2
#define SDHC_EISIER_CMDEND (_U_(0x1) << SDHC_EISIER_CMDEND_Pos)
#define SDHC_EISIER_CMDEND_MASKED_Val _U_(0x0)
#define SDHC_EISIER_CMDEND_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_CMDEND_MASKED (SDHC_EISIER_CMDEND_MASKED_Val << SDHC_EISIER_CMDEND_Pos)
#define SDHC_EISIER_CMDEND_ENABLED (SDHC_EISIER_CMDEND_ENABLED_Val << SDHC_EISIER_CMDEND_Pos)
#define SDHC_EISIER_CMDIDX_Pos 3
#define SDHC_EISIER_CMDIDX (_U_(0x1) << SDHC_EISIER_CMDIDX_Pos)
#define SDHC_EISIER_CMDIDX_MASKED_Val _U_(0x0)
#define SDHC_EISIER_CMDIDX_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_CMDIDX_MASKED (SDHC_EISIER_CMDIDX_MASKED_Val << SDHC_EISIER_CMDIDX_Pos)
#define SDHC_EISIER_CMDIDX_ENABLED (SDHC_EISIER_CMDIDX_ENABLED_Val << SDHC_EISIER_CMDIDX_Pos)
#define SDHC_EISIER_DATTEO_Pos 4
#define SDHC_EISIER_DATTEO (_U_(0x1) << SDHC_EISIER_DATTEO_Pos)
#define SDHC_EISIER_DATTEO_MASKED_Val _U_(0x0)
#define SDHC_EISIER_DATTEO_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_DATTEO_MASKED (SDHC_EISIER_DATTEO_MASKED_Val << SDHC_EISIER_DATTEO_Pos)
#define SDHC_EISIER_DATTEO_ENABLED (SDHC_EISIER_DATTEO_ENABLED_Val << SDHC_EISIER_DATTEO_Pos)
#define SDHC_EISIER_DATCRC_Pos 5
#define SDHC_EISIER_DATCRC (_U_(0x1) << SDHC_EISIER_DATCRC_Pos)
#define SDHC_EISIER_DATCRC_MASKED_Val _U_(0x0)
#define SDHC_EISIER_DATCRC_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_DATCRC_MASKED (SDHC_EISIER_DATCRC_MASKED_Val << SDHC_EISIER_DATCRC_Pos)
#define SDHC_EISIER_DATCRC_ENABLED (SDHC_EISIER_DATCRC_ENABLED_Val << SDHC_EISIER_DATCRC_Pos)
#define SDHC_EISIER_DATEND_Pos 6
#define SDHC_EISIER_DATEND (_U_(0x1) << SDHC_EISIER_DATEND_Pos)
#define SDHC_EISIER_DATEND_MASKED_Val _U_(0x0)
#define SDHC_EISIER_DATEND_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_DATEND_MASKED (SDHC_EISIER_DATEND_MASKED_Val << SDHC_EISIER_DATEND_Pos)
#define SDHC_EISIER_DATEND_ENABLED (SDHC_EISIER_DATEND_ENABLED_Val << SDHC_EISIER_DATEND_Pos)
#define SDHC_EISIER_CURLIM_Pos 7
#define SDHC_EISIER_CURLIM (_U_(0x1) << SDHC_EISIER_CURLIM_Pos)
#define SDHC_EISIER_CURLIM_MASKED_Val _U_(0x0)
#define SDHC_EISIER_CURLIM_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_CURLIM_MASKED (SDHC_EISIER_CURLIM_MASKED_Val << SDHC_EISIER_CURLIM_Pos)
#define SDHC_EISIER_CURLIM_ENABLED (SDHC_EISIER_CURLIM_ENABLED_Val << SDHC_EISIER_CURLIM_Pos)
#define SDHC_EISIER_ACMD_Pos 8
#define SDHC_EISIER_ACMD (_U_(0x1) << SDHC_EISIER_ACMD_Pos)
#define SDHC_EISIER_ACMD_MASKED_Val _U_(0x0)
#define SDHC_EISIER_ACMD_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_ACMD_MASKED (SDHC_EISIER_ACMD_MASKED_Val << SDHC_EISIER_ACMD_Pos)
#define SDHC_EISIER_ACMD_ENABLED (SDHC_EISIER_ACMD_ENABLED_Val << SDHC_EISIER_ACMD_Pos)
#define SDHC_EISIER_ADMA_Pos 9
#define SDHC_EISIER_ADMA (_U_(0x1) << SDHC_EISIER_ADMA_Pos)
#define SDHC_EISIER_ADMA_MASKED_Val _U_(0x0)
#define SDHC_EISIER_ADMA_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_ADMA_MASKED (SDHC_EISIER_ADMA_MASKED_Val << SDHC_EISIER_ADMA_Pos)
#define SDHC_EISIER_ADMA_ENABLED (SDHC_EISIER_ADMA_ENABLED_Val << SDHC_EISIER_ADMA_Pos)
#define SDHC_EISIER_MASK _U_(0x03FF)


#define SDHC_EISIER_EMMC_CMDTEO_Pos 0
#define SDHC_EISIER_EMMC_CMDTEO (_U_(0x1) << SDHC_EISIER_EMMC_CMDTEO_Pos)
#define SDHC_EISIER_EMMC_CMDTEO_MASKED_Val _U_(0x0)
#define SDHC_EISIER_EMMC_CMDTEO_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_EMMC_CMDTEO_MASKED (SDHC_EISIER_EMMC_CMDTEO_MASKED_Val << SDHC_EISIER_EMMC_CMDTEO_Pos)
#define SDHC_EISIER_EMMC_CMDTEO_ENABLED (SDHC_EISIER_EMMC_CMDTEO_ENABLED_Val << SDHC_EISIER_EMMC_CMDTEO_Pos)
#define SDHC_EISIER_EMMC_CMDCRC_Pos 1
#define SDHC_EISIER_EMMC_CMDCRC (_U_(0x1) << SDHC_EISIER_EMMC_CMDCRC_Pos)
#define SDHC_EISIER_EMMC_CMDCRC_MASKED_Val _U_(0x0)
#define SDHC_EISIER_EMMC_CMDCRC_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_EMMC_CMDCRC_MASKED (SDHC_EISIER_EMMC_CMDCRC_MASKED_Val << SDHC_EISIER_EMMC_CMDCRC_Pos)
#define SDHC_EISIER_EMMC_CMDCRC_ENABLED (SDHC_EISIER_EMMC_CMDCRC_ENABLED_Val << SDHC_EISIER_EMMC_CMDCRC_Pos)
#define SDHC_EISIER_EMMC_CMDEND_Pos 2
#define SDHC_EISIER_EMMC_CMDEND (_U_(0x1) << SDHC_EISIER_EMMC_CMDEND_Pos)
#define SDHC_EISIER_EMMC_CMDEND_MASKED_Val _U_(0x0)
#define SDHC_EISIER_EMMC_CMDEND_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_EMMC_CMDEND_MASKED (SDHC_EISIER_EMMC_CMDEND_MASKED_Val << SDHC_EISIER_EMMC_CMDEND_Pos)
#define SDHC_EISIER_EMMC_CMDEND_ENABLED (SDHC_EISIER_EMMC_CMDEND_ENABLED_Val << SDHC_EISIER_EMMC_CMDEND_Pos)
#define SDHC_EISIER_EMMC_CMDIDX_Pos 3
#define SDHC_EISIER_EMMC_CMDIDX (_U_(0x1) << SDHC_EISIER_EMMC_CMDIDX_Pos)
#define SDHC_EISIER_EMMC_CMDIDX_MASKED_Val _U_(0x0)
#define SDHC_EISIER_EMMC_CMDIDX_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_EMMC_CMDIDX_MASKED (SDHC_EISIER_EMMC_CMDIDX_MASKED_Val << SDHC_EISIER_EMMC_CMDIDX_Pos)
#define SDHC_EISIER_EMMC_CMDIDX_ENABLED (SDHC_EISIER_EMMC_CMDIDX_ENABLED_Val << SDHC_EISIER_EMMC_CMDIDX_Pos)
#define SDHC_EISIER_EMMC_DATTEO_Pos 4
#define SDHC_EISIER_EMMC_DATTEO (_U_(0x1) << SDHC_EISIER_EMMC_DATTEO_Pos)
#define SDHC_EISIER_EMMC_DATTEO_MASKED_Val _U_(0x0)
#define SDHC_EISIER_EMMC_DATTEO_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_EMMC_DATTEO_MASKED (SDHC_EISIER_EMMC_DATTEO_MASKED_Val << SDHC_EISIER_EMMC_DATTEO_Pos)
#define SDHC_EISIER_EMMC_DATTEO_ENABLED (SDHC_EISIER_EMMC_DATTEO_ENABLED_Val << SDHC_EISIER_EMMC_DATTEO_Pos)
#define SDHC_EISIER_EMMC_DATCRC_Pos 5
#define SDHC_EISIER_EMMC_DATCRC (_U_(0x1) << SDHC_EISIER_EMMC_DATCRC_Pos)
#define SDHC_EISIER_EMMC_DATCRC_MASKED_Val _U_(0x0)
#define SDHC_EISIER_EMMC_DATCRC_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_EMMC_DATCRC_MASKED (SDHC_EISIER_EMMC_DATCRC_MASKED_Val << SDHC_EISIER_EMMC_DATCRC_Pos)
#define SDHC_EISIER_EMMC_DATCRC_ENABLED (SDHC_EISIER_EMMC_DATCRC_ENABLED_Val << SDHC_EISIER_EMMC_DATCRC_Pos)
#define SDHC_EISIER_EMMC_DATEND_Pos 6
#define SDHC_EISIER_EMMC_DATEND (_U_(0x1) << SDHC_EISIER_EMMC_DATEND_Pos)
#define SDHC_EISIER_EMMC_DATEND_MASKED_Val _U_(0x0)
#define SDHC_EISIER_EMMC_DATEND_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_EMMC_DATEND_MASKED (SDHC_EISIER_EMMC_DATEND_MASKED_Val << SDHC_EISIER_EMMC_DATEND_Pos)
#define SDHC_EISIER_EMMC_DATEND_ENABLED (SDHC_EISIER_EMMC_DATEND_ENABLED_Val << SDHC_EISIER_EMMC_DATEND_Pos)
#define SDHC_EISIER_EMMC_CURLIM_Pos 7
#define SDHC_EISIER_EMMC_CURLIM (_U_(0x1) << SDHC_EISIER_EMMC_CURLIM_Pos)
#define SDHC_EISIER_EMMC_CURLIM_MASKED_Val _U_(0x0)
#define SDHC_EISIER_EMMC_CURLIM_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_EMMC_CURLIM_MASKED (SDHC_EISIER_EMMC_CURLIM_MASKED_Val << SDHC_EISIER_EMMC_CURLIM_Pos)
#define SDHC_EISIER_EMMC_CURLIM_ENABLED (SDHC_EISIER_EMMC_CURLIM_ENABLED_Val << SDHC_EISIER_EMMC_CURLIM_Pos)
#define SDHC_EISIER_EMMC_ACMD_Pos 8
#define SDHC_EISIER_EMMC_ACMD (_U_(0x1) << SDHC_EISIER_EMMC_ACMD_Pos)
#define SDHC_EISIER_EMMC_ACMD_MASKED_Val _U_(0x0)
#define SDHC_EISIER_EMMC_ACMD_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_EMMC_ACMD_MASKED (SDHC_EISIER_EMMC_ACMD_MASKED_Val << SDHC_EISIER_EMMC_ACMD_Pos)
#define SDHC_EISIER_EMMC_ACMD_ENABLED (SDHC_EISIER_EMMC_ACMD_ENABLED_Val << SDHC_EISIER_EMMC_ACMD_Pos)
#define SDHC_EISIER_EMMC_ADMA_Pos 9
#define SDHC_EISIER_EMMC_ADMA (_U_(0x1) << SDHC_EISIER_EMMC_ADMA_Pos)
#define SDHC_EISIER_EMMC_ADMA_MASKED_Val _U_(0x0)
#define SDHC_EISIER_EMMC_ADMA_ENABLED_Val _U_(0x1)
#define SDHC_EISIER_EMMC_ADMA_MASKED (SDHC_EISIER_EMMC_ADMA_MASKED_Val << SDHC_EISIER_EMMC_ADMA_Pos)
#define SDHC_EISIER_EMMC_ADMA_ENABLED (SDHC_EISIER_EMMC_ADMA_ENABLED_Val << SDHC_EISIER_EMMC_ADMA_Pos)
#define SDHC_EISIER_EMMC_BOOTAE_Pos 12
#define SDHC_EISIER_EMMC_BOOTAE (_U_(0x1) << SDHC_EISIER_EMMC_BOOTAE_Pos)
#define SDHC_EISIER_EMMC_MASK _U_(0x13FF)



typedef union {
  struct {
    uint16_t ACMD12NE:1;
    uint16_t ACMDTEO:1;
    uint16_t ACMDCRC:1;
    uint16_t ACMDEND:1;
    uint16_t ACMDIDX:1;
    uint16_t :2;
    uint16_t CMDNI:1;
    uint16_t :8;
  } bit;
  uint16_t reg;
} SDHC_ACESR_Type;


#define SDHC_ACESR_OFFSET 0x03C
#define SDHC_ACESR_RESETVALUE _U_(0x0000)

#define SDHC_ACESR_ACMD12NE_Pos 0
#define SDHC_ACESR_ACMD12NE (_U_(0x1) << SDHC_ACESR_ACMD12NE_Pos)
#define SDHC_ACESR_ACMD12NE_EXEC_Val _U_(0x0)
#define SDHC_ACESR_ACMD12NE_NOT_EXEC_Val _U_(0x1)
#define SDHC_ACESR_ACMD12NE_EXEC (SDHC_ACESR_ACMD12NE_EXEC_Val << SDHC_ACESR_ACMD12NE_Pos)
#define SDHC_ACESR_ACMD12NE_NOT_EXEC (SDHC_ACESR_ACMD12NE_NOT_EXEC_Val << SDHC_ACESR_ACMD12NE_Pos)
#define SDHC_ACESR_ACMDTEO_Pos 1
#define SDHC_ACESR_ACMDTEO (_U_(0x1) << SDHC_ACESR_ACMDTEO_Pos)
#define SDHC_ACESR_ACMDTEO_NO_Val _U_(0x0)
#define SDHC_ACESR_ACMDTEO_YES_Val _U_(0x1)
#define SDHC_ACESR_ACMDTEO_NO (SDHC_ACESR_ACMDTEO_NO_Val << SDHC_ACESR_ACMDTEO_Pos)
#define SDHC_ACESR_ACMDTEO_YES (SDHC_ACESR_ACMDTEO_YES_Val << SDHC_ACESR_ACMDTEO_Pos)
#define SDHC_ACESR_ACMDCRC_Pos 2
#define SDHC_ACESR_ACMDCRC (_U_(0x1) << SDHC_ACESR_ACMDCRC_Pos)
#define SDHC_ACESR_ACMDCRC_NO_Val _U_(0x0)
#define SDHC_ACESR_ACMDCRC_YES_Val _U_(0x1)
#define SDHC_ACESR_ACMDCRC_NO (SDHC_ACESR_ACMDCRC_NO_Val << SDHC_ACESR_ACMDCRC_Pos)
#define SDHC_ACESR_ACMDCRC_YES (SDHC_ACESR_ACMDCRC_YES_Val << SDHC_ACESR_ACMDCRC_Pos)
#define SDHC_ACESR_ACMDEND_Pos 3
#define SDHC_ACESR_ACMDEND (_U_(0x1) << SDHC_ACESR_ACMDEND_Pos)
#define SDHC_ACESR_ACMDEND_NO_Val _U_(0x0)
#define SDHC_ACESR_ACMDEND_YES_Val _U_(0x1)
#define SDHC_ACESR_ACMDEND_NO (SDHC_ACESR_ACMDEND_NO_Val << SDHC_ACESR_ACMDEND_Pos)
#define SDHC_ACESR_ACMDEND_YES (SDHC_ACESR_ACMDEND_YES_Val << SDHC_ACESR_ACMDEND_Pos)
#define SDHC_ACESR_ACMDIDX_Pos 4
#define SDHC_ACESR_ACMDIDX (_U_(0x1) << SDHC_ACESR_ACMDIDX_Pos)
#define SDHC_ACESR_ACMDIDX_NO_Val _U_(0x0)
#define SDHC_ACESR_ACMDIDX_YES_Val _U_(0x1)
#define SDHC_ACESR_ACMDIDX_NO (SDHC_ACESR_ACMDIDX_NO_Val << SDHC_ACESR_ACMDIDX_Pos)
#define SDHC_ACESR_ACMDIDX_YES (SDHC_ACESR_ACMDIDX_YES_Val << SDHC_ACESR_ACMDIDX_Pos)
#define SDHC_ACESR_CMDNI_Pos 7
#define SDHC_ACESR_CMDNI (_U_(0x1) << SDHC_ACESR_CMDNI_Pos)
#define SDHC_ACESR_CMDNI_OK_Val _U_(0x0)
#define SDHC_ACESR_CMDNI_NOT_ISSUED_Val _U_(0x1)
#define SDHC_ACESR_CMDNI_OK (SDHC_ACESR_CMDNI_OK_Val << SDHC_ACESR_CMDNI_Pos)
#define SDHC_ACESR_CMDNI_NOT_ISSUED (SDHC_ACESR_CMDNI_NOT_ISSUED_Val << SDHC_ACESR_CMDNI_Pos)
#define SDHC_ACESR_MASK _U_(0x009F)



typedef union {
  struct {
    uint16_t UHSMS:3;
    uint16_t VS18EN:1;
    uint16_t DRVSEL:2;
    uint16_t EXTUN:1;
    uint16_t SLCKSEL:1;
    uint16_t :6;
    uint16_t ASINTEN:1;
    uint16_t PVALEN:1;
  } bit;
  struct {
    uint16_t HS200EN:4;
    uint16_t DRVSEL:2;
    uint16_t EXTUN:1;
    uint16_t SLCKSEL:1;
    uint16_t :7;
    uint16_t PVALEN:1;
  } EMMC;
  uint16_t reg;
} SDHC_HC2R_Type;


#define SDHC_HC2R_OFFSET 0x03E
#define SDHC_HC2R_RESETVALUE _U_(0x0000)

#define SDHC_HC2R_UHSMS_Pos 0
#define SDHC_HC2R_UHSMS_Msk (_U_(0x7) << SDHC_HC2R_UHSMS_Pos)
#define SDHC_HC2R_UHSMS(value) (SDHC_HC2R_UHSMS_Msk & ((value) << SDHC_HC2R_UHSMS_Pos))
#define SDHC_HC2R_UHSMS_SDR12_Val _U_(0x0)
#define SDHC_HC2R_UHSMS_SDR25_Val _U_(0x1)
#define SDHC_HC2R_UHSMS_SDR50_Val _U_(0x2)
#define SDHC_HC2R_UHSMS_SDR104_Val _U_(0x3)
#define SDHC_HC2R_UHSMS_DDR50_Val _U_(0x4)
#define SDHC_HC2R_UHSMS_SDR12 (SDHC_HC2R_UHSMS_SDR12_Val << SDHC_HC2R_UHSMS_Pos)
#define SDHC_HC2R_UHSMS_SDR25 (SDHC_HC2R_UHSMS_SDR25_Val << SDHC_HC2R_UHSMS_Pos)
#define SDHC_HC2R_UHSMS_SDR50 (SDHC_HC2R_UHSMS_SDR50_Val << SDHC_HC2R_UHSMS_Pos)
#define SDHC_HC2R_UHSMS_SDR104 (SDHC_HC2R_UHSMS_SDR104_Val << SDHC_HC2R_UHSMS_Pos)
#define SDHC_HC2R_UHSMS_DDR50 (SDHC_HC2R_UHSMS_DDR50_Val << SDHC_HC2R_UHSMS_Pos)
#define SDHC_HC2R_VS18EN_Pos 3
#define SDHC_HC2R_VS18EN (_U_(0x1) << SDHC_HC2R_VS18EN_Pos)
#define SDHC_HC2R_VS18EN_S33V_Val _U_(0x0)
#define SDHC_HC2R_VS18EN_S18V_Val _U_(0x1)
#define SDHC_HC2R_VS18EN_S33V (SDHC_HC2R_VS18EN_S33V_Val << SDHC_HC2R_VS18EN_Pos)
#define SDHC_HC2R_VS18EN_S18V (SDHC_HC2R_VS18EN_S18V_Val << SDHC_HC2R_VS18EN_Pos)
#define SDHC_HC2R_DRVSEL_Pos 4
#define SDHC_HC2R_DRVSEL_Msk (_U_(0x3) << SDHC_HC2R_DRVSEL_Pos)
#define SDHC_HC2R_DRVSEL(value) (SDHC_HC2R_DRVSEL_Msk & ((value) << SDHC_HC2R_DRVSEL_Pos))
#define SDHC_HC2R_DRVSEL_B_Val _U_(0x0)
#define SDHC_HC2R_DRVSEL_A_Val _U_(0x1)
#define SDHC_HC2R_DRVSEL_C_Val _U_(0x2)
#define SDHC_HC2R_DRVSEL_D_Val _U_(0x3)
#define SDHC_HC2R_DRVSEL_B (SDHC_HC2R_DRVSEL_B_Val << SDHC_HC2R_DRVSEL_Pos)
#define SDHC_HC2R_DRVSEL_A (SDHC_HC2R_DRVSEL_A_Val << SDHC_HC2R_DRVSEL_Pos)
#define SDHC_HC2R_DRVSEL_C (SDHC_HC2R_DRVSEL_C_Val << SDHC_HC2R_DRVSEL_Pos)
#define SDHC_HC2R_DRVSEL_D (SDHC_HC2R_DRVSEL_D_Val << SDHC_HC2R_DRVSEL_Pos)
#define SDHC_HC2R_EXTUN_Pos 6
#define SDHC_HC2R_EXTUN (_U_(0x1) << SDHC_HC2R_EXTUN_Pos)
#define SDHC_HC2R_EXTUN_NO_Val _U_(0x0)
#define SDHC_HC2R_EXTUN_REQUESTED_Val _U_(0x1)
#define SDHC_HC2R_EXTUN_NO (SDHC_HC2R_EXTUN_NO_Val << SDHC_HC2R_EXTUN_Pos)
#define SDHC_HC2R_EXTUN_REQUESTED (SDHC_HC2R_EXTUN_REQUESTED_Val << SDHC_HC2R_EXTUN_Pos)
#define SDHC_HC2R_SLCKSEL_Pos 7
#define SDHC_HC2R_SLCKSEL (_U_(0x1) << SDHC_HC2R_SLCKSEL_Pos)
#define SDHC_HC2R_SLCKSEL_FIXED_Val _U_(0x0)
#define SDHC_HC2R_SLCKSEL_TUNED_Val _U_(0x1)
#define SDHC_HC2R_SLCKSEL_FIXED (SDHC_HC2R_SLCKSEL_FIXED_Val << SDHC_HC2R_SLCKSEL_Pos)
#define SDHC_HC2R_SLCKSEL_TUNED (SDHC_HC2R_SLCKSEL_TUNED_Val << SDHC_HC2R_SLCKSEL_Pos)
#define SDHC_HC2R_ASINTEN_Pos 14
#define SDHC_HC2R_ASINTEN (_U_(0x1) << SDHC_HC2R_ASINTEN_Pos)
#define SDHC_HC2R_ASINTEN_DISABLED_Val _U_(0x0)
#define SDHC_HC2R_ASINTEN_ENABLED_Val _U_(0x1)
#define SDHC_HC2R_ASINTEN_DISABLED (SDHC_HC2R_ASINTEN_DISABLED_Val << SDHC_HC2R_ASINTEN_Pos)
#define SDHC_HC2R_ASINTEN_ENABLED (SDHC_HC2R_ASINTEN_ENABLED_Val << SDHC_HC2R_ASINTEN_Pos)
#define SDHC_HC2R_PVALEN_Pos 15
#define SDHC_HC2R_PVALEN (_U_(0x1) << SDHC_HC2R_PVALEN_Pos)
#define SDHC_HC2R_PVALEN_HOST_Val _U_(0x0)
#define SDHC_HC2R_PVALEN_AUTO_Val _U_(0x1)
#define SDHC_HC2R_PVALEN_HOST (SDHC_HC2R_PVALEN_HOST_Val << SDHC_HC2R_PVALEN_Pos)
#define SDHC_HC2R_PVALEN_AUTO (SDHC_HC2R_PVALEN_AUTO_Val << SDHC_HC2R_PVALEN_Pos)
#define SDHC_HC2R_MASK _U_(0xC0FF)


#define SDHC_HC2R_EMMC_HS200EN_Pos 0
#define SDHC_HC2R_EMMC_HS200EN_Msk (_U_(0xF) << SDHC_HC2R_EMMC_HS200EN_Pos)
#define SDHC_HC2R_EMMC_HS200EN(value) (SDHC_HC2R_EMMC_HS200EN_Msk & ((value) << SDHC_HC2R_EMMC_HS200EN_Pos))
#define SDHC_HC2R_EMMC_HS200EN_SDR12_Val _U_(0x0)
#define SDHC_HC2R_EMMC_HS200EN_SDR25_Val _U_(0x1)
#define SDHC_HC2R_EMMC_HS200EN_SDR50_Val _U_(0x2)
#define SDHC_HC2R_EMMC_HS200EN_SDR104_Val _U_(0x3)
#define SDHC_HC2R_EMMC_HS200EN_DDR50_Val _U_(0x4)
#define SDHC_HC2R_EMMC_HS200EN_SDR12 (SDHC_HC2R_EMMC_HS200EN_SDR12_Val << SDHC_HC2R_EMMC_HS200EN_Pos)
#define SDHC_HC2R_EMMC_HS200EN_SDR25 (SDHC_HC2R_EMMC_HS200EN_SDR25_Val << SDHC_HC2R_EMMC_HS200EN_Pos)
#define SDHC_HC2R_EMMC_HS200EN_SDR50 (SDHC_HC2R_EMMC_HS200EN_SDR50_Val << SDHC_HC2R_EMMC_HS200EN_Pos)
#define SDHC_HC2R_EMMC_HS200EN_SDR104 (SDHC_HC2R_EMMC_HS200EN_SDR104_Val << SDHC_HC2R_EMMC_HS200EN_Pos)
#define SDHC_HC2R_EMMC_HS200EN_DDR50 (SDHC_HC2R_EMMC_HS200EN_DDR50_Val << SDHC_HC2R_EMMC_HS200EN_Pos)
#define SDHC_HC2R_EMMC_DRVSEL_Pos 4
#define SDHC_HC2R_EMMC_DRVSEL_Msk (_U_(0x3) << SDHC_HC2R_EMMC_DRVSEL_Pos)
#define SDHC_HC2R_EMMC_DRVSEL(value) (SDHC_HC2R_EMMC_DRVSEL_Msk & ((value) << SDHC_HC2R_EMMC_DRVSEL_Pos))
#define SDHC_HC2R_EMMC_DRVSEL_B_Val _U_(0x0)
#define SDHC_HC2R_EMMC_DRVSEL_A_Val _U_(0x1)
#define SDHC_HC2R_EMMC_DRVSEL_C_Val _U_(0x2)
#define SDHC_HC2R_EMMC_DRVSEL_D_Val _U_(0x3)
#define SDHC_HC2R_EMMC_DRVSEL_B (SDHC_HC2R_EMMC_DRVSEL_B_Val << SDHC_HC2R_EMMC_DRVSEL_Pos)
#define SDHC_HC2R_EMMC_DRVSEL_A (SDHC_HC2R_EMMC_DRVSEL_A_Val << SDHC_HC2R_EMMC_DRVSEL_Pos)
#define SDHC_HC2R_EMMC_DRVSEL_C (SDHC_HC2R_EMMC_DRVSEL_C_Val << SDHC_HC2R_EMMC_DRVSEL_Pos)
#define SDHC_HC2R_EMMC_DRVSEL_D (SDHC_HC2R_EMMC_DRVSEL_D_Val << SDHC_HC2R_EMMC_DRVSEL_Pos)
#define SDHC_HC2R_EMMC_EXTUN_Pos 6
#define SDHC_HC2R_EMMC_EXTUN (_U_(0x1) << SDHC_HC2R_EMMC_EXTUN_Pos)
#define SDHC_HC2R_EMMC_EXTUN_NO_Val _U_(0x0)
#define SDHC_HC2R_EMMC_EXTUN_REQUESTED_Val _U_(0x1)
#define SDHC_HC2R_EMMC_EXTUN_NO (SDHC_HC2R_EMMC_EXTUN_NO_Val << SDHC_HC2R_EMMC_EXTUN_Pos)
#define SDHC_HC2R_EMMC_EXTUN_REQUESTED (SDHC_HC2R_EMMC_EXTUN_REQUESTED_Val << SDHC_HC2R_EMMC_EXTUN_Pos)
#define SDHC_HC2R_EMMC_SLCKSEL_Pos 7
#define SDHC_HC2R_EMMC_SLCKSEL (_U_(0x1) << SDHC_HC2R_EMMC_SLCKSEL_Pos)
#define SDHC_HC2R_EMMC_SLCKSEL_FIXED_Val _U_(0x0)
#define SDHC_HC2R_EMMC_SLCKSEL_TUNED_Val _U_(0x1)
#define SDHC_HC2R_EMMC_SLCKSEL_FIXED (SDHC_HC2R_EMMC_SLCKSEL_FIXED_Val << SDHC_HC2R_EMMC_SLCKSEL_Pos)
#define SDHC_HC2R_EMMC_SLCKSEL_TUNED (SDHC_HC2R_EMMC_SLCKSEL_TUNED_Val << SDHC_HC2R_EMMC_SLCKSEL_Pos)
#define SDHC_HC2R_EMMC_PVALEN_Pos 15
#define SDHC_HC2R_EMMC_PVALEN (_U_(0x1) << SDHC_HC2R_EMMC_PVALEN_Pos)
#define SDHC_HC2R_EMMC_PVALEN_HOST_Val _U_(0x0)
#define SDHC_HC2R_EMMC_PVALEN_AUTO_Val _U_(0x1)
#define SDHC_HC2R_EMMC_PVALEN_HOST (SDHC_HC2R_EMMC_PVALEN_HOST_Val << SDHC_HC2R_EMMC_PVALEN_Pos)
#define SDHC_HC2R_EMMC_PVALEN_AUTO (SDHC_HC2R_EMMC_PVALEN_AUTO_Val << SDHC_HC2R_EMMC_PVALEN_Pos)
#define SDHC_HC2R_EMMC_MASK _U_(0x80FF)



typedef union {
  struct {
    uint32_t TEOCLKF:6;
    uint32_t :1;
    uint32_t TEOCLKU:1;
    uint32_t BASECLKF:8;
    uint32_t MAXBLKL:2;
    uint32_t ED8SUP:1;
    uint32_t ADMA2SUP:1;
    uint32_t :1;
    uint32_t HSSUP:1;
    uint32_t SDMASUP:1;
    uint32_t SRSUP:1;
    uint32_t V33VSUP:1;
    uint32_t V30VSUP:1;
    uint32_t V18VSUP:1;
    uint32_t :1;
    uint32_t SB64SUP:1;
    uint32_t ASINTSUP:1;
    uint32_t SLTYPE:2;
  } bit;
  uint32_t reg;
} SDHC_CA0R_Type;


#define SDHC_CA0R_OFFSET 0x040
#define SDHC_CA0R_RESETVALUE _U_(0x27E80080)

#define SDHC_CA0R_TEOCLKF_Pos 0
#define SDHC_CA0R_TEOCLKF_Msk (_U_(0x3F) << SDHC_CA0R_TEOCLKF_Pos)
#define SDHC_CA0R_TEOCLKF(value) (SDHC_CA0R_TEOCLKF_Msk & ((value) << SDHC_CA0R_TEOCLKF_Pos))
#define SDHC_CA0R_TEOCLKF_OTHER_Val _U_(0x0)
#define SDHC_CA0R_TEOCLKF_OTHER (SDHC_CA0R_TEOCLKF_OTHER_Val << SDHC_CA0R_TEOCLKF_Pos)
#define SDHC_CA0R_TEOCLKU_Pos 7
#define SDHC_CA0R_TEOCLKU (_U_(0x1) << SDHC_CA0R_TEOCLKU_Pos)
#define SDHC_CA0R_TEOCLKU_KHZ_Val _U_(0x0)
#define SDHC_CA0R_TEOCLKU_MHZ_Val _U_(0x1)
#define SDHC_CA0R_TEOCLKU_KHZ (SDHC_CA0R_TEOCLKU_KHZ_Val << SDHC_CA0R_TEOCLKU_Pos)
#define SDHC_CA0R_TEOCLKU_MHZ (SDHC_CA0R_TEOCLKU_MHZ_Val << SDHC_CA0R_TEOCLKU_Pos)
#define SDHC_CA0R_BASECLKF_Pos 8
#define SDHC_CA0R_BASECLKF_Msk (_U_(0xFF) << SDHC_CA0R_BASECLKF_Pos)
#define SDHC_CA0R_BASECLKF(value) (SDHC_CA0R_BASECLKF_Msk & ((value) << SDHC_CA0R_BASECLKF_Pos))
#define SDHC_CA0R_BASECLKF_OTHER_Val _U_(0x0)
#define SDHC_CA0R_BASECLKF_OTHER (SDHC_CA0R_BASECLKF_OTHER_Val << SDHC_CA0R_BASECLKF_Pos)
#define SDHC_CA0R_MAXBLKL_Pos 16
#define SDHC_CA0R_MAXBLKL_Msk (_U_(0x3) << SDHC_CA0R_MAXBLKL_Pos)
#define SDHC_CA0R_MAXBLKL(value) (SDHC_CA0R_MAXBLKL_Msk & ((value) << SDHC_CA0R_MAXBLKL_Pos))
#define SDHC_CA0R_MAXBLKL_512_Val _U_(0x0)
#define SDHC_CA0R_MAXBLKL_1024_Val _U_(0x1)
#define SDHC_CA0R_MAXBLKL_2048_Val _U_(0x2)
#define SDHC_CA0R_MAXBLKL_512 (SDHC_CA0R_MAXBLKL_512_Val << SDHC_CA0R_MAXBLKL_Pos)
#define SDHC_CA0R_MAXBLKL_1024 (SDHC_CA0R_MAXBLKL_1024_Val << SDHC_CA0R_MAXBLKL_Pos)
#define SDHC_CA0R_MAXBLKL_2048 (SDHC_CA0R_MAXBLKL_2048_Val << SDHC_CA0R_MAXBLKL_Pos)
#define SDHC_CA0R_ED8SUP_Pos 18
#define SDHC_CA0R_ED8SUP (_U_(0x1) << SDHC_CA0R_ED8SUP_Pos)
#define SDHC_CA0R_ED8SUP_NO_Val _U_(0x0)
#define SDHC_CA0R_ED8SUP_YES_Val _U_(0x1)
#define SDHC_CA0R_ED8SUP_NO (SDHC_CA0R_ED8SUP_NO_Val << SDHC_CA0R_ED8SUP_Pos)
#define SDHC_CA0R_ED8SUP_YES (SDHC_CA0R_ED8SUP_YES_Val << SDHC_CA0R_ED8SUP_Pos)
#define SDHC_CA0R_ADMA2SUP_Pos 19
#define SDHC_CA0R_ADMA2SUP (_U_(0x1) << SDHC_CA0R_ADMA2SUP_Pos)
#define SDHC_CA0R_ADMA2SUP_NO_Val _U_(0x0)
#define SDHC_CA0R_ADMA2SUP_YES_Val _U_(0x1)
#define SDHC_CA0R_ADMA2SUP_NO (SDHC_CA0R_ADMA2SUP_NO_Val << SDHC_CA0R_ADMA2SUP_Pos)
#define SDHC_CA0R_ADMA2SUP_YES (SDHC_CA0R_ADMA2SUP_YES_Val << SDHC_CA0R_ADMA2SUP_Pos)
#define SDHC_CA0R_HSSUP_Pos 21
#define SDHC_CA0R_HSSUP (_U_(0x1) << SDHC_CA0R_HSSUP_Pos)
#define SDHC_CA0R_HSSUP_NO_Val _U_(0x0)
#define SDHC_CA0R_HSSUP_YES_Val _U_(0x1)
#define SDHC_CA0R_HSSUP_NO (SDHC_CA0R_HSSUP_NO_Val << SDHC_CA0R_HSSUP_Pos)
#define SDHC_CA0R_HSSUP_YES (SDHC_CA0R_HSSUP_YES_Val << SDHC_CA0R_HSSUP_Pos)
#define SDHC_CA0R_SDMASUP_Pos 22
#define SDHC_CA0R_SDMASUP (_U_(0x1) << SDHC_CA0R_SDMASUP_Pos)
#define SDHC_CA0R_SDMASUP_NO_Val _U_(0x0)
#define SDHC_CA0R_SDMASUP_YES_Val _U_(0x1)
#define SDHC_CA0R_SDMASUP_NO (SDHC_CA0R_SDMASUP_NO_Val << SDHC_CA0R_SDMASUP_Pos)
#define SDHC_CA0R_SDMASUP_YES (SDHC_CA0R_SDMASUP_YES_Val << SDHC_CA0R_SDMASUP_Pos)
#define SDHC_CA0R_SRSUP_Pos 23
#define SDHC_CA0R_SRSUP (_U_(0x1) << SDHC_CA0R_SRSUP_Pos)
#define SDHC_CA0R_SRSUP_NO_Val _U_(0x0)
#define SDHC_CA0R_SRSUP_YES_Val _U_(0x1)
#define SDHC_CA0R_SRSUP_NO (SDHC_CA0R_SRSUP_NO_Val << SDHC_CA0R_SRSUP_Pos)
#define SDHC_CA0R_SRSUP_YES (SDHC_CA0R_SRSUP_YES_Val << SDHC_CA0R_SRSUP_Pos)
#define SDHC_CA0R_V33VSUP_Pos 24
#define SDHC_CA0R_V33VSUP (_U_(0x1) << SDHC_CA0R_V33VSUP_Pos)
#define SDHC_CA0R_V33VSUP_NO_Val _U_(0x0)
#define SDHC_CA0R_V33VSUP_YES_Val _U_(0x1)
#define SDHC_CA0R_V33VSUP_NO (SDHC_CA0R_V33VSUP_NO_Val << SDHC_CA0R_V33VSUP_Pos)
#define SDHC_CA0R_V33VSUP_YES (SDHC_CA0R_V33VSUP_YES_Val << SDHC_CA0R_V33VSUP_Pos)
#define SDHC_CA0R_V30VSUP_Pos 25
#define SDHC_CA0R_V30VSUP (_U_(0x1) << SDHC_CA0R_V30VSUP_Pos)
#define SDHC_CA0R_V30VSUP_NO_Val _U_(0x0)
#define SDHC_CA0R_V30VSUP_YES_Val _U_(0x1)
#define SDHC_CA0R_V30VSUP_NO (SDHC_CA0R_V30VSUP_NO_Val << SDHC_CA0R_V30VSUP_Pos)
#define SDHC_CA0R_V30VSUP_YES (SDHC_CA0R_V30VSUP_YES_Val << SDHC_CA0R_V30VSUP_Pos)
#define SDHC_CA0R_V18VSUP_Pos 26
#define SDHC_CA0R_V18VSUP (_U_(0x1) << SDHC_CA0R_V18VSUP_Pos)
#define SDHC_CA0R_V18VSUP_NO_Val _U_(0x0)
#define SDHC_CA0R_V18VSUP_YES_Val _U_(0x1)
#define SDHC_CA0R_V18VSUP_NO (SDHC_CA0R_V18VSUP_NO_Val << SDHC_CA0R_V18VSUP_Pos)
#define SDHC_CA0R_V18VSUP_YES (SDHC_CA0R_V18VSUP_YES_Val << SDHC_CA0R_V18VSUP_Pos)
#define SDHC_CA0R_SB64SUP_Pos 28
#define SDHC_CA0R_SB64SUP (_U_(0x1) << SDHC_CA0R_SB64SUP_Pos)
#define SDHC_CA0R_SB64SUP_NO_Val _U_(0x0)
#define SDHC_CA0R_SB64SUP_YES_Val _U_(0x1)
#define SDHC_CA0R_SB64SUP_NO (SDHC_CA0R_SB64SUP_NO_Val << SDHC_CA0R_SB64SUP_Pos)
#define SDHC_CA0R_SB64SUP_YES (SDHC_CA0R_SB64SUP_YES_Val << SDHC_CA0R_SB64SUP_Pos)
#define SDHC_CA0R_ASINTSUP_Pos 29
#define SDHC_CA0R_ASINTSUP (_U_(0x1) << SDHC_CA0R_ASINTSUP_Pos)
#define SDHC_CA0R_ASINTSUP_NO_Val _U_(0x0)
#define SDHC_CA0R_ASINTSUP_YES_Val _U_(0x1)
#define SDHC_CA0R_ASINTSUP_NO (SDHC_CA0R_ASINTSUP_NO_Val << SDHC_CA0R_ASINTSUP_Pos)
#define SDHC_CA0R_ASINTSUP_YES (SDHC_CA0R_ASINTSUP_YES_Val << SDHC_CA0R_ASINTSUP_Pos)
#define SDHC_CA0R_SLTYPE_Pos 30
#define SDHC_CA0R_SLTYPE_Msk (_U_(0x3) << SDHC_CA0R_SLTYPE_Pos)
#define SDHC_CA0R_SLTYPE(value) (SDHC_CA0R_SLTYPE_Msk & ((value) << SDHC_CA0R_SLTYPE_Pos))
#define SDHC_CA0R_SLTYPE_REMOVABLE_Val _U_(0x0)
#define SDHC_CA0R_SLTYPE_EMBEDDED_Val _U_(0x1)
#define SDHC_CA0R_SLTYPE_REMOVABLE (SDHC_CA0R_SLTYPE_REMOVABLE_Val << SDHC_CA0R_SLTYPE_Pos)
#define SDHC_CA0R_SLTYPE_EMBEDDED (SDHC_CA0R_SLTYPE_EMBEDDED_Val << SDHC_CA0R_SLTYPE_Pos)
#define SDHC_CA0R_MASK _U_(0xF7EFFFBF)



typedef union {
  struct {
    uint32_t SDR50SUP:1;
    uint32_t SDR104SUP:1;
    uint32_t DDR50SUP:1;
    uint32_t :1;
    uint32_t DRVASUP:1;
    uint32_t DRVCSUP:1;
    uint32_t DRVDSUP:1;
    uint32_t :1;
    uint32_t TCNTRT:4;
    uint32_t :1;
    uint32_t TSDR50:1;
    uint32_t :2;
    uint32_t CLKMULT:8;
    uint32_t :8;
  } bit;
  uint32_t reg;
} SDHC_CA1R_Type;


#define SDHC_CA1R_OFFSET 0x044
#define SDHC_CA1R_RESETVALUE _U_(0x00000070)

#define SDHC_CA1R_SDR50SUP_Pos 0
#define SDHC_CA1R_SDR50SUP (_U_(0x1) << SDHC_CA1R_SDR50SUP_Pos)
#define SDHC_CA1R_SDR50SUP_NO_Val _U_(0x0)
#define SDHC_CA1R_SDR50SUP_YES_Val _U_(0x1)
#define SDHC_CA1R_SDR50SUP_NO (SDHC_CA1R_SDR50SUP_NO_Val << SDHC_CA1R_SDR50SUP_Pos)
#define SDHC_CA1R_SDR50SUP_YES (SDHC_CA1R_SDR50SUP_YES_Val << SDHC_CA1R_SDR50SUP_Pos)
#define SDHC_CA1R_SDR104SUP_Pos 1
#define SDHC_CA1R_SDR104SUP (_U_(0x1) << SDHC_CA1R_SDR104SUP_Pos)
#define SDHC_CA1R_SDR104SUP_NO_Val _U_(0x0)
#define SDHC_CA1R_SDR104SUP_YES_Val _U_(0x1)
#define SDHC_CA1R_SDR104SUP_NO (SDHC_CA1R_SDR104SUP_NO_Val << SDHC_CA1R_SDR104SUP_Pos)
#define SDHC_CA1R_SDR104SUP_YES (SDHC_CA1R_SDR104SUP_YES_Val << SDHC_CA1R_SDR104SUP_Pos)
#define SDHC_CA1R_DDR50SUP_Pos 2
#define SDHC_CA1R_DDR50SUP (_U_(0x1) << SDHC_CA1R_DDR50SUP_Pos)
#define SDHC_CA1R_DDR50SUP_NO_Val _U_(0x0)
#define SDHC_CA1R_DDR50SUP_YES_Val _U_(0x1)
#define SDHC_CA1R_DDR50SUP_NO (SDHC_CA1R_DDR50SUP_NO_Val << SDHC_CA1R_DDR50SUP_Pos)
#define SDHC_CA1R_DDR50SUP_YES (SDHC_CA1R_DDR50SUP_YES_Val << SDHC_CA1R_DDR50SUP_Pos)
#define SDHC_CA1R_DRVASUP_Pos 4
#define SDHC_CA1R_DRVASUP (_U_(0x1) << SDHC_CA1R_DRVASUP_Pos)
#define SDHC_CA1R_DRVASUP_NO_Val _U_(0x0)
#define SDHC_CA1R_DRVASUP_YES_Val _U_(0x1)
#define SDHC_CA1R_DRVASUP_NO (SDHC_CA1R_DRVASUP_NO_Val << SDHC_CA1R_DRVASUP_Pos)
#define SDHC_CA1R_DRVASUP_YES (SDHC_CA1R_DRVASUP_YES_Val << SDHC_CA1R_DRVASUP_Pos)
#define SDHC_CA1R_DRVCSUP_Pos 5
#define SDHC_CA1R_DRVCSUP (_U_(0x1) << SDHC_CA1R_DRVCSUP_Pos)
#define SDHC_CA1R_DRVCSUP_NO_Val _U_(0x0)
#define SDHC_CA1R_DRVCSUP_YES_Val _U_(0x1)
#define SDHC_CA1R_DRVCSUP_NO (SDHC_CA1R_DRVCSUP_NO_Val << SDHC_CA1R_DRVCSUP_Pos)
#define SDHC_CA1R_DRVCSUP_YES (SDHC_CA1R_DRVCSUP_YES_Val << SDHC_CA1R_DRVCSUP_Pos)
#define SDHC_CA1R_DRVDSUP_Pos 6
#define SDHC_CA1R_DRVDSUP (_U_(0x1) << SDHC_CA1R_DRVDSUP_Pos)
#define SDHC_CA1R_DRVDSUP_NO_Val _U_(0x0)
#define SDHC_CA1R_DRVDSUP_YES_Val _U_(0x1)
#define SDHC_CA1R_DRVDSUP_NO (SDHC_CA1R_DRVDSUP_NO_Val << SDHC_CA1R_DRVDSUP_Pos)
#define SDHC_CA1R_DRVDSUP_YES (SDHC_CA1R_DRVDSUP_YES_Val << SDHC_CA1R_DRVDSUP_Pos)
#define SDHC_CA1R_TCNTRT_Pos 8
#define SDHC_CA1R_TCNTRT_Msk (_U_(0xF) << SDHC_CA1R_TCNTRT_Pos)
#define SDHC_CA1R_TCNTRT(value) (SDHC_CA1R_TCNTRT_Msk & ((value) << SDHC_CA1R_TCNTRT_Pos))
#define SDHC_CA1R_TCNTRT_DISABLED_Val _U_(0x0)
#define SDHC_CA1R_TCNTRT_1S_Val _U_(0x1)
#define SDHC_CA1R_TCNTRT_2S_Val _U_(0x2)
#define SDHC_CA1R_TCNTRT_4S_Val _U_(0x3)
#define SDHC_CA1R_TCNTRT_8S_Val _U_(0x4)
#define SDHC_CA1R_TCNTRT_16S_Val _U_(0x5)
#define SDHC_CA1R_TCNTRT_32S_Val _U_(0x6)
#define SDHC_CA1R_TCNTRT_64S_Val _U_(0x7)
#define SDHC_CA1R_TCNTRT_128S_Val _U_(0x8)
#define SDHC_CA1R_TCNTRT_256S_Val _U_(0x9)
#define SDHC_CA1R_TCNTRT_512S_Val _U_(0xA)
#define SDHC_CA1R_TCNTRT_1024S_Val _U_(0xB)
#define SDHC_CA1R_TCNTRT_OTHER_Val _U_(0xF)
#define SDHC_CA1R_TCNTRT_DISABLED (SDHC_CA1R_TCNTRT_DISABLED_Val << SDHC_CA1R_TCNTRT_Pos)
#define SDHC_CA1R_TCNTRT_1S (SDHC_CA1R_TCNTRT_1S_Val << SDHC_CA1R_TCNTRT_Pos)
#define SDHC_CA1R_TCNTRT_2S (SDHC_CA1R_TCNTRT_2S_Val << SDHC_CA1R_TCNTRT_Pos)
#define SDHC_CA1R_TCNTRT_4S (SDHC_CA1R_TCNTRT_4S_Val << SDHC_CA1R_TCNTRT_Pos)
#define SDHC_CA1R_TCNTRT_8S (SDHC_CA1R_TCNTRT_8S_Val << SDHC_CA1R_TCNTRT_Pos)
#define SDHC_CA1R_TCNTRT_16S (SDHC_CA1R_TCNTRT_16S_Val << SDHC_CA1R_TCNTRT_Pos)
#define SDHC_CA1R_TCNTRT_32S (SDHC_CA1R_TCNTRT_32S_Val << SDHC_CA1R_TCNTRT_Pos)
#define SDHC_CA1R_TCNTRT_64S (SDHC_CA1R_TCNTRT_64S_Val << SDHC_CA1R_TCNTRT_Pos)
#define SDHC_CA1R_TCNTRT_128S (SDHC_CA1R_TCNTRT_128S_Val << SDHC_CA1R_TCNTRT_Pos)
#define SDHC_CA1R_TCNTRT_256S (SDHC_CA1R_TCNTRT_256S_Val << SDHC_CA1R_TCNTRT_Pos)
#define SDHC_CA1R_TCNTRT_512S (SDHC_CA1R_TCNTRT_512S_Val << SDHC_CA1R_TCNTRT_Pos)
#define SDHC_CA1R_TCNTRT_1024S (SDHC_CA1R_TCNTRT_1024S_Val << SDHC_CA1R_TCNTRT_Pos)
#define SDHC_CA1R_TCNTRT_OTHER (SDHC_CA1R_TCNTRT_OTHER_Val << SDHC_CA1R_TCNTRT_Pos)
#define SDHC_CA1R_TSDR50_Pos 13
#define SDHC_CA1R_TSDR50 (_U_(0x1) << SDHC_CA1R_TSDR50_Pos)
#define SDHC_CA1R_TSDR50_NO_Val _U_(0x0)
#define SDHC_CA1R_TSDR50_YES_Val _U_(0x1)
#define SDHC_CA1R_TSDR50_NO (SDHC_CA1R_TSDR50_NO_Val << SDHC_CA1R_TSDR50_Pos)
#define SDHC_CA1R_TSDR50_YES (SDHC_CA1R_TSDR50_YES_Val << SDHC_CA1R_TSDR50_Pos)
#define SDHC_CA1R_CLKMULT_Pos 16
#define SDHC_CA1R_CLKMULT_Msk (_U_(0xFF) << SDHC_CA1R_CLKMULT_Pos)
#define SDHC_CA1R_CLKMULT(value) (SDHC_CA1R_CLKMULT_Msk & ((value) << SDHC_CA1R_CLKMULT_Pos))
#define SDHC_CA1R_CLKMULT_NO_Val _U_(0x0)
#define SDHC_CA1R_CLKMULT_NO (SDHC_CA1R_CLKMULT_NO_Val << SDHC_CA1R_CLKMULT_Pos)
#define SDHC_CA1R_MASK _U_(0x00FF2F77)



typedef union {
  struct {
    uint32_t MAXCUR33V:8;
    uint32_t MAXCUR30V:8;
    uint32_t MAXCUR18V:8;
    uint32_t :8;
  } bit;
  uint32_t reg;
} SDHC_MCCAR_Type;


#define SDHC_MCCAR_OFFSET 0x048
#define SDHC_MCCAR_RESETVALUE _U_(0x00000000)

#define SDHC_MCCAR_MAXCUR33V_Pos 0
#define SDHC_MCCAR_MAXCUR33V_Msk (_U_(0xFF) << SDHC_MCCAR_MAXCUR33V_Pos)
#define SDHC_MCCAR_MAXCUR33V(value) (SDHC_MCCAR_MAXCUR33V_Msk & ((value) << SDHC_MCCAR_MAXCUR33V_Pos))
#define SDHC_MCCAR_MAXCUR33V_OTHER_Val _U_(0x0)
#define SDHC_MCCAR_MAXCUR33V_4MA_Val _U_(0x1)
#define SDHC_MCCAR_MAXCUR33V_8MA_Val _U_(0x2)
#define SDHC_MCCAR_MAXCUR33V_12MA_Val _U_(0x3)
#define SDHC_MCCAR_MAXCUR33V_OTHER (SDHC_MCCAR_MAXCUR33V_OTHER_Val << SDHC_MCCAR_MAXCUR33V_Pos)
#define SDHC_MCCAR_MAXCUR33V_4MA (SDHC_MCCAR_MAXCUR33V_4MA_Val << SDHC_MCCAR_MAXCUR33V_Pos)
#define SDHC_MCCAR_MAXCUR33V_8MA (SDHC_MCCAR_MAXCUR33V_8MA_Val << SDHC_MCCAR_MAXCUR33V_Pos)
#define SDHC_MCCAR_MAXCUR33V_12MA (SDHC_MCCAR_MAXCUR33V_12MA_Val << SDHC_MCCAR_MAXCUR33V_Pos)
#define SDHC_MCCAR_MAXCUR30V_Pos 8
#define SDHC_MCCAR_MAXCUR30V_Msk (_U_(0xFF) << SDHC_MCCAR_MAXCUR30V_Pos)
#define SDHC_MCCAR_MAXCUR30V(value) (SDHC_MCCAR_MAXCUR30V_Msk & ((value) << SDHC_MCCAR_MAXCUR30V_Pos))
#define SDHC_MCCAR_MAXCUR30V_OTHER_Val _U_(0x0)
#define SDHC_MCCAR_MAXCUR30V_4MA_Val _U_(0x1)
#define SDHC_MCCAR_MAXCUR30V_8MA_Val _U_(0x2)
#define SDHC_MCCAR_MAXCUR30V_12MA_Val _U_(0x3)
#define SDHC_MCCAR_MAXCUR30V_OTHER (SDHC_MCCAR_MAXCUR30V_OTHER_Val << SDHC_MCCAR_MAXCUR30V_Pos)
#define SDHC_MCCAR_MAXCUR30V_4MA (SDHC_MCCAR_MAXCUR30V_4MA_Val << SDHC_MCCAR_MAXCUR30V_Pos)
#define SDHC_MCCAR_MAXCUR30V_8MA (SDHC_MCCAR_MAXCUR30V_8MA_Val << SDHC_MCCAR_MAXCUR30V_Pos)
#define SDHC_MCCAR_MAXCUR30V_12MA (SDHC_MCCAR_MAXCUR30V_12MA_Val << SDHC_MCCAR_MAXCUR30V_Pos)
#define SDHC_MCCAR_MAXCUR18V_Pos 16
#define SDHC_MCCAR_MAXCUR18V_Msk (_U_(0xFF) << SDHC_MCCAR_MAXCUR18V_Pos)
#define SDHC_MCCAR_MAXCUR18V(value) (SDHC_MCCAR_MAXCUR18V_Msk & ((value) << SDHC_MCCAR_MAXCUR18V_Pos))
#define SDHC_MCCAR_MAXCUR18V_OTHER_Val _U_(0x0)
#define SDHC_MCCAR_MAXCUR18V_4MA_Val _U_(0x1)
#define SDHC_MCCAR_MAXCUR18V_8MA_Val _U_(0x2)
#define SDHC_MCCAR_MAXCUR18V_12MA_Val _U_(0x3)
#define SDHC_MCCAR_MAXCUR18V_OTHER (SDHC_MCCAR_MAXCUR18V_OTHER_Val << SDHC_MCCAR_MAXCUR18V_Pos)
#define SDHC_MCCAR_MAXCUR18V_4MA (SDHC_MCCAR_MAXCUR18V_4MA_Val << SDHC_MCCAR_MAXCUR18V_Pos)
#define SDHC_MCCAR_MAXCUR18V_8MA (SDHC_MCCAR_MAXCUR18V_8MA_Val << SDHC_MCCAR_MAXCUR18V_Pos)
#define SDHC_MCCAR_MAXCUR18V_12MA (SDHC_MCCAR_MAXCUR18V_12MA_Val << SDHC_MCCAR_MAXCUR18V_Pos)
#define SDHC_MCCAR_MASK _U_(0x00FFFFFF)



typedef union {
  struct {
    uint16_t ACMD12NE:1;
    uint16_t ACMDTEO:1;
    uint16_t ACMDCRC:1;
    uint16_t ACMDEND:1;
    uint16_t ACMDIDX:1;
    uint16_t :2;
    uint16_t CMDNI:1;
    uint16_t :8;
  } bit;
  uint16_t reg;
} SDHC_FERACES_Type;


#define SDHC_FERACES_OFFSET 0x050
#define SDHC_FERACES_RESETVALUE _U_(0x0000)

#define SDHC_FERACES_ACMD12NE_Pos 0
#define SDHC_FERACES_ACMD12NE (_U_(0x1) << SDHC_FERACES_ACMD12NE_Pos)
#define SDHC_FERACES_ACMD12NE_NO_Val _U_(0x0)
#define SDHC_FERACES_ACMD12NE_YES_Val _U_(0x1)
#define SDHC_FERACES_ACMD12NE_NO (SDHC_FERACES_ACMD12NE_NO_Val << SDHC_FERACES_ACMD12NE_Pos)
#define SDHC_FERACES_ACMD12NE_YES (SDHC_FERACES_ACMD12NE_YES_Val << SDHC_FERACES_ACMD12NE_Pos)
#define SDHC_FERACES_ACMDTEO_Pos 1
#define SDHC_FERACES_ACMDTEO (_U_(0x1) << SDHC_FERACES_ACMDTEO_Pos)
#define SDHC_FERACES_ACMDTEO_NO_Val _U_(0x0)
#define SDHC_FERACES_ACMDTEO_YES_Val _U_(0x1)
#define SDHC_FERACES_ACMDTEO_NO (SDHC_FERACES_ACMDTEO_NO_Val << SDHC_FERACES_ACMDTEO_Pos)
#define SDHC_FERACES_ACMDTEO_YES (SDHC_FERACES_ACMDTEO_YES_Val << SDHC_FERACES_ACMDTEO_Pos)
#define SDHC_FERACES_ACMDCRC_Pos 2
#define SDHC_FERACES_ACMDCRC (_U_(0x1) << SDHC_FERACES_ACMDCRC_Pos)
#define SDHC_FERACES_ACMDCRC_NO_Val _U_(0x0)
#define SDHC_FERACES_ACMDCRC_YES_Val _U_(0x1)
#define SDHC_FERACES_ACMDCRC_NO (SDHC_FERACES_ACMDCRC_NO_Val << SDHC_FERACES_ACMDCRC_Pos)
#define SDHC_FERACES_ACMDCRC_YES (SDHC_FERACES_ACMDCRC_YES_Val << SDHC_FERACES_ACMDCRC_Pos)
#define SDHC_FERACES_ACMDEND_Pos 3
#define SDHC_FERACES_ACMDEND (_U_(0x1) << SDHC_FERACES_ACMDEND_Pos)
#define SDHC_FERACES_ACMDEND_NO_Val _U_(0x0)
#define SDHC_FERACES_ACMDEND_YES_Val _U_(0x1)
#define SDHC_FERACES_ACMDEND_NO (SDHC_FERACES_ACMDEND_NO_Val << SDHC_FERACES_ACMDEND_Pos)
#define SDHC_FERACES_ACMDEND_YES (SDHC_FERACES_ACMDEND_YES_Val << SDHC_FERACES_ACMDEND_Pos)
#define SDHC_FERACES_ACMDIDX_Pos 4
#define SDHC_FERACES_ACMDIDX (_U_(0x1) << SDHC_FERACES_ACMDIDX_Pos)
#define SDHC_FERACES_ACMDIDX_NO_Val _U_(0x0)
#define SDHC_FERACES_ACMDIDX_YES_Val _U_(0x1)
#define SDHC_FERACES_ACMDIDX_NO (SDHC_FERACES_ACMDIDX_NO_Val << SDHC_FERACES_ACMDIDX_Pos)
#define SDHC_FERACES_ACMDIDX_YES (SDHC_FERACES_ACMDIDX_YES_Val << SDHC_FERACES_ACMDIDX_Pos)
#define SDHC_FERACES_CMDNI_Pos 7
#define SDHC_FERACES_CMDNI (_U_(0x1) << SDHC_FERACES_CMDNI_Pos)
#define SDHC_FERACES_CMDNI_NO_Val _U_(0x0)
#define SDHC_FERACES_CMDNI_YES_Val _U_(0x1)
#define SDHC_FERACES_CMDNI_NO (SDHC_FERACES_CMDNI_NO_Val << SDHC_FERACES_CMDNI_Pos)
#define SDHC_FERACES_CMDNI_YES (SDHC_FERACES_CMDNI_YES_Val << SDHC_FERACES_CMDNI_Pos)
#define SDHC_FERACES_MASK _U_(0x009F)



typedef union {
  struct {
    uint16_t CMDTEO:1;
    uint16_t CMDCRC:1;
    uint16_t CMDEND:1;
    uint16_t CMDIDX:1;
    uint16_t DATTEO:1;
    uint16_t DATCRC:1;
    uint16_t DATEND:1;
    uint16_t CURLIM:1;
    uint16_t ACMD:1;
    uint16_t ADMA:1;
    uint16_t :2;
    uint16_t BOOTAE:1;
    uint16_t :3;
  } bit;
  uint16_t reg;
} SDHC_FEREIS_Type;


#define SDHC_FEREIS_OFFSET 0x052
#define SDHC_FEREIS_RESETVALUE _U_(0x0000)

#define SDHC_FEREIS_CMDTEO_Pos 0
#define SDHC_FEREIS_CMDTEO (_U_(0x1) << SDHC_FEREIS_CMDTEO_Pos)
#define SDHC_FEREIS_CMDTEO_NO_Val _U_(0x0)
#define SDHC_FEREIS_CMDTEO_YES_Val _U_(0x1)
#define SDHC_FEREIS_CMDTEO_NO (SDHC_FEREIS_CMDTEO_NO_Val << SDHC_FEREIS_CMDTEO_Pos)
#define SDHC_FEREIS_CMDTEO_YES (SDHC_FEREIS_CMDTEO_YES_Val << SDHC_FEREIS_CMDTEO_Pos)
#define SDHC_FEREIS_CMDCRC_Pos 1
#define SDHC_FEREIS_CMDCRC (_U_(0x1) << SDHC_FEREIS_CMDCRC_Pos)
#define SDHC_FEREIS_CMDCRC_NO_Val _U_(0x0)
#define SDHC_FEREIS_CMDCRC_YES_Val _U_(0x1)
#define SDHC_FEREIS_CMDCRC_NO (SDHC_FEREIS_CMDCRC_NO_Val << SDHC_FEREIS_CMDCRC_Pos)
#define SDHC_FEREIS_CMDCRC_YES (SDHC_FEREIS_CMDCRC_YES_Val << SDHC_FEREIS_CMDCRC_Pos)
#define SDHC_FEREIS_CMDEND_Pos 2
#define SDHC_FEREIS_CMDEND (_U_(0x1) << SDHC_FEREIS_CMDEND_Pos)
#define SDHC_FEREIS_CMDEND_NO_Val _U_(0x0)
#define SDHC_FEREIS_CMDEND_YES_Val _U_(0x1)
#define SDHC_FEREIS_CMDEND_NO (SDHC_FEREIS_CMDEND_NO_Val << SDHC_FEREIS_CMDEND_Pos)
#define SDHC_FEREIS_CMDEND_YES (SDHC_FEREIS_CMDEND_YES_Val << SDHC_FEREIS_CMDEND_Pos)
#define SDHC_FEREIS_CMDIDX_Pos 3
#define SDHC_FEREIS_CMDIDX (_U_(0x1) << SDHC_FEREIS_CMDIDX_Pos)
#define SDHC_FEREIS_CMDIDX_NO_Val _U_(0x0)
#define SDHC_FEREIS_CMDIDX_YES_Val _U_(0x1)
#define SDHC_FEREIS_CMDIDX_NO (SDHC_FEREIS_CMDIDX_NO_Val << SDHC_FEREIS_CMDIDX_Pos)
#define SDHC_FEREIS_CMDIDX_YES (SDHC_FEREIS_CMDIDX_YES_Val << SDHC_FEREIS_CMDIDX_Pos)
#define SDHC_FEREIS_DATTEO_Pos 4
#define SDHC_FEREIS_DATTEO (_U_(0x1) << SDHC_FEREIS_DATTEO_Pos)
#define SDHC_FEREIS_DATTEO_NO_Val _U_(0x0)
#define SDHC_FEREIS_DATTEO_YES_Val _U_(0x1)
#define SDHC_FEREIS_DATTEO_NO (SDHC_FEREIS_DATTEO_NO_Val << SDHC_FEREIS_DATTEO_Pos)
#define SDHC_FEREIS_DATTEO_YES (SDHC_FEREIS_DATTEO_YES_Val << SDHC_FEREIS_DATTEO_Pos)
#define SDHC_FEREIS_DATCRC_Pos 5
#define SDHC_FEREIS_DATCRC (_U_(0x1) << SDHC_FEREIS_DATCRC_Pos)
#define SDHC_FEREIS_DATCRC_NO_Val _U_(0x0)
#define SDHC_FEREIS_DATCRC_YES_Val _U_(0x1)
#define SDHC_FEREIS_DATCRC_NO (SDHC_FEREIS_DATCRC_NO_Val << SDHC_FEREIS_DATCRC_Pos)
#define SDHC_FEREIS_DATCRC_YES (SDHC_FEREIS_DATCRC_YES_Val << SDHC_FEREIS_DATCRC_Pos)
#define SDHC_FEREIS_DATEND_Pos 6
#define SDHC_FEREIS_DATEND (_U_(0x1) << SDHC_FEREIS_DATEND_Pos)
#define SDHC_FEREIS_DATEND_NO_Val _U_(0x0)
#define SDHC_FEREIS_DATEND_YES_Val _U_(0x1)
#define SDHC_FEREIS_DATEND_NO (SDHC_FEREIS_DATEND_NO_Val << SDHC_FEREIS_DATEND_Pos)
#define SDHC_FEREIS_DATEND_YES (SDHC_FEREIS_DATEND_YES_Val << SDHC_FEREIS_DATEND_Pos)
#define SDHC_FEREIS_CURLIM_Pos 7
#define SDHC_FEREIS_CURLIM (_U_(0x1) << SDHC_FEREIS_CURLIM_Pos)
#define SDHC_FEREIS_CURLIM_NO_Val _U_(0x0)
#define SDHC_FEREIS_CURLIM_YES_Val _U_(0x1)
#define SDHC_FEREIS_CURLIM_NO (SDHC_FEREIS_CURLIM_NO_Val << SDHC_FEREIS_CURLIM_Pos)
#define SDHC_FEREIS_CURLIM_YES (SDHC_FEREIS_CURLIM_YES_Val << SDHC_FEREIS_CURLIM_Pos)
#define SDHC_FEREIS_ACMD_Pos 8
#define SDHC_FEREIS_ACMD (_U_(0x1) << SDHC_FEREIS_ACMD_Pos)
#define SDHC_FEREIS_ACMD_NO_Val _U_(0x0)
#define SDHC_FEREIS_ACMD_YES_Val _U_(0x1)
#define SDHC_FEREIS_ACMD_NO (SDHC_FEREIS_ACMD_NO_Val << SDHC_FEREIS_ACMD_Pos)
#define SDHC_FEREIS_ACMD_YES (SDHC_FEREIS_ACMD_YES_Val << SDHC_FEREIS_ACMD_Pos)
#define SDHC_FEREIS_ADMA_Pos 9
#define SDHC_FEREIS_ADMA (_U_(0x1) << SDHC_FEREIS_ADMA_Pos)
#define SDHC_FEREIS_ADMA_NO_Val _U_(0x0)
#define SDHC_FEREIS_ADMA_YES_Val _U_(0x1)
#define SDHC_FEREIS_ADMA_NO (SDHC_FEREIS_ADMA_NO_Val << SDHC_FEREIS_ADMA_Pos)
#define SDHC_FEREIS_ADMA_YES (SDHC_FEREIS_ADMA_YES_Val << SDHC_FEREIS_ADMA_Pos)
#define SDHC_FEREIS_BOOTAE_Pos 12
#define SDHC_FEREIS_BOOTAE (_U_(0x1) << SDHC_FEREIS_BOOTAE_Pos)
#define SDHC_FEREIS_BOOTAE_NO_Val _U_(0x0)
#define SDHC_FEREIS_BOOTAE_YES_Val _U_(0x1)
#define SDHC_FEREIS_BOOTAE_NO (SDHC_FEREIS_BOOTAE_NO_Val << SDHC_FEREIS_BOOTAE_Pos)
#define SDHC_FEREIS_BOOTAE_YES (SDHC_FEREIS_BOOTAE_YES_Val << SDHC_FEREIS_BOOTAE_Pos)
#define SDHC_FEREIS_MASK _U_(0x13FF)



typedef union {
  struct {
    uint8_t ERRST:2;
    uint8_t LMIS:1;
    uint8_t :5;
  } bit;
  uint8_t reg;
} SDHC_AESR_Type;


#define SDHC_AESR_OFFSET 0x054
#define SDHC_AESR_RESETVALUE _U_(0x00)

#define SDHC_AESR_ERRST_Pos 0
#define SDHC_AESR_ERRST_Msk (_U_(0x3) << SDHC_AESR_ERRST_Pos)
#define SDHC_AESR_ERRST(value) (SDHC_AESR_ERRST_Msk & ((value) << SDHC_AESR_ERRST_Pos))
#define SDHC_AESR_ERRST_STOP_Val _U_(0x0)
#define SDHC_AESR_ERRST_FDS_Val _U_(0x1)
#define SDHC_AESR_ERRST_2_Val _U_(0x2)
#define SDHC_AESR_ERRST_TFR_Val _U_(0x3)
#define SDHC_AESR_ERRST_STOP (SDHC_AESR_ERRST_STOP_Val << SDHC_AESR_ERRST_Pos)
#define SDHC_AESR_ERRST_FDS (SDHC_AESR_ERRST_FDS_Val << SDHC_AESR_ERRST_Pos)
#define SDHC_AESR_ERRST_2 (SDHC_AESR_ERRST_2_Val << SDHC_AESR_ERRST_Pos)
#define SDHC_AESR_ERRST_TFR (SDHC_AESR_ERRST_TFR_Val << SDHC_AESR_ERRST_Pos)
#define SDHC_AESR_LMIS_Pos 2
#define SDHC_AESR_LMIS (_U_(0x1) << SDHC_AESR_LMIS_Pos)
#define SDHC_AESR_LMIS_NO_Val _U_(0x0)
#define SDHC_AESR_LMIS_YES_Val _U_(0x1)
#define SDHC_AESR_LMIS_NO (SDHC_AESR_LMIS_NO_Val << SDHC_AESR_LMIS_Pos)
#define SDHC_AESR_LMIS_YES (SDHC_AESR_LMIS_YES_Val << SDHC_AESR_LMIS_Pos)
#define SDHC_AESR_MASK _U_(0x07)



typedef union {
  struct {
    uint32_t ADMASA:32;
  } bit;
  uint32_t reg;
} SDHC_ASAR_Type;


#define SDHC_ASAR_OFFSET 0x058
#define SDHC_ASAR_RESETVALUE _U_(0x00000000)

#define SDHC_ASAR_ADMASA_Pos 0
#define SDHC_ASAR_ADMASA_Msk (_U_(0xFFFFFFFF) << SDHC_ASAR_ADMASA_Pos)
#define SDHC_ASAR_ADMASA(value) (SDHC_ASAR_ADMASA_Msk & ((value) << SDHC_ASAR_ADMASA_Pos))
#define SDHC_ASAR_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint16_t SDCLKFSEL:10;
    uint16_t CLKGSEL:1;
    uint16_t :3;
    uint16_t DRVSEL:2;
  } bit;
  uint16_t reg;
} SDHC_PVR_Type;


#define SDHC_PVR_OFFSET 0x060
#define SDHC_PVR_RESETVALUE _U_(0x0000)

#define SDHC_PVR_SDCLKFSEL_Pos 0
#define SDHC_PVR_SDCLKFSEL_Msk (_U_(0x3FF) << SDHC_PVR_SDCLKFSEL_Pos)
#define SDHC_PVR_SDCLKFSEL(value) (SDHC_PVR_SDCLKFSEL_Msk & ((value) << SDHC_PVR_SDCLKFSEL_Pos))
#define SDHC_PVR_CLKGSEL_Pos 10
#define SDHC_PVR_CLKGSEL (_U_(0x1) << SDHC_PVR_CLKGSEL_Pos)
#define SDHC_PVR_CLKGSEL_DIV_Val _U_(0x0)
#define SDHC_PVR_CLKGSEL_PROG_Val _U_(0x1)
#define SDHC_PVR_CLKGSEL_DIV (SDHC_PVR_CLKGSEL_DIV_Val << SDHC_PVR_CLKGSEL_Pos)
#define SDHC_PVR_CLKGSEL_PROG (SDHC_PVR_CLKGSEL_PROG_Val << SDHC_PVR_CLKGSEL_Pos)
#define SDHC_PVR_DRVSEL_Pos 14
#define SDHC_PVR_DRVSEL_Msk (_U_(0x3) << SDHC_PVR_DRVSEL_Pos)
#define SDHC_PVR_DRVSEL(value) (SDHC_PVR_DRVSEL_Msk & ((value) << SDHC_PVR_DRVSEL_Pos))
#define SDHC_PVR_DRVSEL_B_Val _U_(0x0)
#define SDHC_PVR_DRVSEL_A_Val _U_(0x1)
#define SDHC_PVR_DRVSEL_C_Val _U_(0x2)
#define SDHC_PVR_DRVSEL_D_Val _U_(0x3)
#define SDHC_PVR_DRVSEL_B (SDHC_PVR_DRVSEL_B_Val << SDHC_PVR_DRVSEL_Pos)
#define SDHC_PVR_DRVSEL_A (SDHC_PVR_DRVSEL_A_Val << SDHC_PVR_DRVSEL_Pos)
#define SDHC_PVR_DRVSEL_C (SDHC_PVR_DRVSEL_C_Val << SDHC_PVR_DRVSEL_Pos)
#define SDHC_PVR_DRVSEL_D (SDHC_PVR_DRVSEL_D_Val << SDHC_PVR_DRVSEL_Pos)
#define SDHC_PVR_MASK _U_(0xC7FF)



typedef union {
  struct {
    uint16_t INTSSL:1;
    uint16_t :15;
  } bit;
  uint16_t reg;
} SDHC_SISR_Type;


#define SDHC_SISR_OFFSET 0x0FC
#define SDHC_SISR_RESETVALUE _U_(0x20000)

#define SDHC_SISR_INTSSL_Pos 0
#define SDHC_SISR_INTSSL_Msk (_U_(0x1) << SDHC_SISR_INTSSL_Pos)
#define SDHC_SISR_INTSSL(value) (SDHC_SISR_INTSSL_Msk & ((value) << SDHC_SISR_INTSSL_Pos))
#define SDHC_SISR_MASK _U_(0x0001)



typedef union {
  struct {
    uint16_t SVER:8;
    uint16_t VVER:8;
  } bit;
  uint16_t reg;
} SDHC_HCVR_Type;


#define SDHC_HCVR_OFFSET 0x0FE
#define SDHC_HCVR_RESETVALUE _U_(0x1802)

#define SDHC_HCVR_SVER_Pos 0
#define SDHC_HCVR_SVER_Msk (_U_(0xFF) << SDHC_HCVR_SVER_Pos)
#define SDHC_HCVR_SVER(value) (SDHC_HCVR_SVER_Msk & ((value) << SDHC_HCVR_SVER_Pos))
#define SDHC_HCVR_VVER_Pos 8
#define SDHC_HCVR_VVER_Msk (_U_(0xFF) << SDHC_HCVR_VVER_Pos)
#define SDHC_HCVR_VVER(value) (SDHC_HCVR_VVER_Msk & ((value) << SDHC_HCVR_VVER_Pos))
#define SDHC_HCVR_MASK _U_(0xFFFF)



typedef union {
  struct {
    uint8_t CMDTYP:2;
    uint8_t :1;
    uint8_t DDR:1;
    uint8_t OPD:1;
    uint8_t BOOTA:1;
    uint8_t RSTN:1;
    uint8_t FCD:1;
  } bit;
  uint8_t reg;
} SDHC_MC1R_Type;


#define SDHC_MC1R_OFFSET 0x204
#define SDHC_MC1R_RESETVALUE _U_(0x00)

#define SDHC_MC1R_CMDTYP_Pos 0
#define SDHC_MC1R_CMDTYP_Msk (_U_(0x3) << SDHC_MC1R_CMDTYP_Pos)
#define SDHC_MC1R_CMDTYP(value) (SDHC_MC1R_CMDTYP_Msk & ((value) << SDHC_MC1R_CMDTYP_Pos))
#define SDHC_MC1R_CMDTYP_NORMAL_Val _U_(0x0)
#define SDHC_MC1R_CMDTYP_WAITIRQ_Val _U_(0x1)
#define SDHC_MC1R_CMDTYP_STREAM_Val _U_(0x2)
#define SDHC_MC1R_CMDTYP_BOOT_Val _U_(0x3)
#define SDHC_MC1R_CMDTYP_NORMAL (SDHC_MC1R_CMDTYP_NORMAL_Val << SDHC_MC1R_CMDTYP_Pos)
#define SDHC_MC1R_CMDTYP_WAITIRQ (SDHC_MC1R_CMDTYP_WAITIRQ_Val << SDHC_MC1R_CMDTYP_Pos)
#define SDHC_MC1R_CMDTYP_STREAM (SDHC_MC1R_CMDTYP_STREAM_Val << SDHC_MC1R_CMDTYP_Pos)
#define SDHC_MC1R_CMDTYP_BOOT (SDHC_MC1R_CMDTYP_BOOT_Val << SDHC_MC1R_CMDTYP_Pos)
#define SDHC_MC1R_DDR_Pos 3
#define SDHC_MC1R_DDR (_U_(0x1) << SDHC_MC1R_DDR_Pos)
#define SDHC_MC1R_OPD_Pos 4
#define SDHC_MC1R_OPD (_U_(0x1) << SDHC_MC1R_OPD_Pos)
#define SDHC_MC1R_BOOTA_Pos 5
#define SDHC_MC1R_BOOTA (_U_(0x1) << SDHC_MC1R_BOOTA_Pos)
#define SDHC_MC1R_RSTN_Pos 6
#define SDHC_MC1R_RSTN (_U_(0x1) << SDHC_MC1R_RSTN_Pos)
#define SDHC_MC1R_FCD_Pos 7
#define SDHC_MC1R_FCD (_U_(0x1) << SDHC_MC1R_FCD_Pos)
#define SDHC_MC1R_MASK _U_(0xFB)



typedef union {
  struct {
    uint8_t SRESP:1;
    uint8_t ABOOT:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} SDHC_MC2R_Type;


#define SDHC_MC2R_OFFSET 0x205
#define SDHC_MC2R_RESETVALUE _U_(0x00)

#define SDHC_MC2R_SRESP_Pos 0
#define SDHC_MC2R_SRESP (_U_(0x1) << SDHC_MC2R_SRESP_Pos)
#define SDHC_MC2R_ABOOT_Pos 1
#define SDHC_MC2R_ABOOT (_U_(0x1) << SDHC_MC2R_ABOOT_Pos)
#define SDHC_MC2R_MASK _U_(0x03)



typedef union {
  struct {
    uint32_t BMAX:2;
    uint32_t :30;
  } bit;
  uint32_t reg;
} SDHC_ACR_Type;


#define SDHC_ACR_OFFSET 0x208
#define SDHC_ACR_RESETVALUE _U_(0x00000000)

#define SDHC_ACR_BMAX_Pos 0
#define SDHC_ACR_BMAX_Msk (_U_(0x3) << SDHC_ACR_BMAX_Pos)
#define SDHC_ACR_BMAX(value) (SDHC_ACR_BMAX_Msk & ((value) << SDHC_ACR_BMAX_Pos))
#define SDHC_ACR_BMAX_INCR16_Val _U_(0x0)
#define SDHC_ACR_BMAX_INCR8_Val _U_(0x1)
#define SDHC_ACR_BMAX_INCR4_Val _U_(0x2)
#define SDHC_ACR_BMAX_SINGLE_Val _U_(0x3)
#define SDHC_ACR_BMAX_INCR16 (SDHC_ACR_BMAX_INCR16_Val << SDHC_ACR_BMAX_Pos)
#define SDHC_ACR_BMAX_INCR8 (SDHC_ACR_BMAX_INCR8_Val << SDHC_ACR_BMAX_Pos)
#define SDHC_ACR_BMAX_INCR4 (SDHC_ACR_BMAX_INCR4_Val << SDHC_ACR_BMAX_Pos)
#define SDHC_ACR_BMAX_SINGLE (SDHC_ACR_BMAX_SINGLE_Val << SDHC_ACR_BMAX_Pos)
#define SDHC_ACR_MASK _U_(0x00000003)



typedef union {
  struct {
    uint32_t FSDCLKD:1;
    uint32_t :31;
  } bit;
  uint32_t reg;
} SDHC_CC2R_Type;


#define SDHC_CC2R_OFFSET 0x20C
#define SDHC_CC2R_RESETVALUE _U_(0x00000000)

#define SDHC_CC2R_FSDCLKD_Pos 0
#define SDHC_CC2R_FSDCLKD (_U_(0x1) << SDHC_CC2R_FSDCLKD_Pos)
#define SDHC_CC2R_FSDCLKD_NOEFFECT_Val _U_(0x0)
#define SDHC_CC2R_FSDCLKD_DISABLE_Val _U_(0x1)
#define SDHC_CC2R_FSDCLKD_NOEFFECT (SDHC_CC2R_FSDCLKD_NOEFFECT_Val << SDHC_CC2R_FSDCLKD_Pos)
#define SDHC_CC2R_FSDCLKD_DISABLE (SDHC_CC2R_FSDCLKD_DISABLE_Val << SDHC_CC2R_FSDCLKD_Pos)
#define SDHC_CC2R_MASK _U_(0x00000001)



typedef union {
  struct {
    uint32_t CAPWREN:1;
    uint32_t :7;
    uint32_t KEY:8;
    uint32_t :16;
  } bit;
  uint32_t reg;
} SDHC_CACR_Type;


#define SDHC_CACR_OFFSET 0x230
#define SDHC_CACR_RESETVALUE _U_(0x00000000)

#define SDHC_CACR_CAPWREN_Pos 0
#define SDHC_CACR_CAPWREN (_U_(0x1) << SDHC_CACR_CAPWREN_Pos)
#define SDHC_CACR_KEY_Pos 8
#define SDHC_CACR_KEY_Msk (_U_(0xFF) << SDHC_CACR_KEY_Pos)
#define SDHC_CACR_KEY(value) (SDHC_CACR_KEY_Msk & ((value) << SDHC_CACR_KEY_Pos))
#define SDHC_CACR_MASK _U_(0x0000FF01)



typedef union {
  struct {
    uint8_t NIDBG:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} SDHC_DBGR_Type;


#define SDHC_DBGR_OFFSET 0x234
#define SDHC_DBGR_RESETVALUE _U_(0x00)

#define SDHC_DBGR_NIDBG_Pos 0
#define SDHC_DBGR_NIDBG (_U_(0x1) << SDHC_DBGR_NIDBG_Pos)
#define SDHC_DBGR_NIDBG_IDBG_Val _U_(0x0)
#define SDHC_DBGR_NIDBG_NIDBG_Val _U_(0x1)
#define SDHC_DBGR_NIDBG_IDBG (SDHC_DBGR_NIDBG_IDBG_Val << SDHC_DBGR_NIDBG_Pos)
#define SDHC_DBGR_NIDBG_NIDBG (SDHC_DBGR_NIDBG_NIDBG_Val << SDHC_DBGR_NIDBG_Pos)
#define SDHC_DBGR_MASK _U_(0x01)



typedef struct {
  volatile SDHC_SSAR_Type SSAR;
  volatile SDHC_BSR_Type BSR;
  volatile SDHC_BCR_Type BCR;
  volatile SDHC_ARG1R_Type ARG1R;
  volatile SDHC_TMR_Type TMR;
  volatile SDHC_CR_Type CR;
  volatile const SDHC_RR_Type RR[4];
  volatile SDHC_BDPR_Type BDPR;
  volatile const SDHC_PSR_Type PSR;
  volatile SDHC_HC1R_Type HC1R;
  volatile SDHC_PCR_Type PCR;
  volatile SDHC_BGCR_Type BGCR;
  volatile SDHC_WCR_Type WCR;
  volatile SDHC_CCR_Type CCR;
  volatile SDHC_TCR_Type TCR;
  volatile SDHC_SRR_Type SRR;
  volatile SDHC_NISTR_Type NISTR;
  volatile SDHC_EISTR_Type EISTR;
  volatile SDHC_NISTER_Type NISTER;
  volatile SDHC_EISTER_Type EISTER;
  volatile SDHC_NISIER_Type NISIER;
  volatile SDHC_EISIER_Type EISIER;
  volatile const SDHC_ACESR_Type ACESR;
  volatile SDHC_HC2R_Type HC2R;
  volatile const SDHC_CA0R_Type CA0R;
  volatile const SDHC_CA1R_Type CA1R;
  volatile const SDHC_MCCAR_Type MCCAR;
       RoReg8 Reserved1[0x4];
  volatile SDHC_FERACES_Type FERACES;
  volatile SDHC_FEREIS_Type FEREIS;
  volatile const SDHC_AESR_Type AESR;
       RoReg8 Reserved2[0x3];
  volatile SDHC_ASAR_Type ASAR[1];
       RoReg8 Reserved3[0x4];
  volatile SDHC_PVR_Type PVR[8];
       RoReg8 Reserved4[0x8C];
  volatile const SDHC_SISR_Type SISR;
  volatile const SDHC_HCVR_Type HCVR;
       RoReg8 Reserved5[0x104];
  volatile SDHC_MC1R_Type MC1R;
  volatile SDHC_MC2R_Type MC2R;
       RoReg8 Reserved6[0x2];
  volatile SDHC_ACR_Type ACR;
  volatile SDHC_CC2R_Type CC2R;
       RoReg8 Reserved7[0x20];
  volatile SDHC_CACR_Type CACR;
  volatile SDHC_DBGR_Type DBGR;
} Sdhc;
# 610 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/sercom.h" 1
# 31 "asf4/samd51/include/component/sercom.h"
#define _SAMD51_SERCOM_COMPONENT_ 







#define SERCOM_U2201 
#define REV_SERCOM 0x500



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t MODE:3;
    uint32_t :2;
    uint32_t RUNSTDBY:1;
    uint32_t :8;
    uint32_t PINOUT:1;
    uint32_t :3;
    uint32_t SDAHOLD:2;
    uint32_t MEXTTOEN:1;
    uint32_t SEXTTOEN:1;
    uint32_t SPEED:2;
    uint32_t :1;
    uint32_t SCLSM:1;
    uint32_t INACTOUT:2;
    uint32_t LOWTOUTEN:1;
    uint32_t :1;
  } bit;
  uint32_t reg;
} SERCOM_I2CM_CTRLA_Type;


#define SERCOM_I2CM_CTRLA_OFFSET 0x00
#define SERCOM_I2CM_CTRLA_RESETVALUE _U_(0x00000000)

#define SERCOM_I2CM_CTRLA_SWRST_Pos 0
#define SERCOM_I2CM_CTRLA_SWRST (_U_(0x1) << SERCOM_I2CM_CTRLA_SWRST_Pos)
#define SERCOM_I2CM_CTRLA_ENABLE_Pos 1
#define SERCOM_I2CM_CTRLA_ENABLE (_U_(0x1) << SERCOM_I2CM_CTRLA_ENABLE_Pos)
#define SERCOM_I2CM_CTRLA_MODE_Pos 2
#define SERCOM_I2CM_CTRLA_MODE_Msk (_U_(0x7) << SERCOM_I2CM_CTRLA_MODE_Pos)
#define SERCOM_I2CM_CTRLA_MODE(value) (SERCOM_I2CM_CTRLA_MODE_Msk & ((value) << SERCOM_I2CM_CTRLA_MODE_Pos))
#define SERCOM_I2CM_CTRLA_RUNSTDBY_Pos 7
#define SERCOM_I2CM_CTRLA_RUNSTDBY (_U_(0x1) << SERCOM_I2CM_CTRLA_RUNSTDBY_Pos)
#define SERCOM_I2CM_CTRLA_PINOUT_Pos 16
#define SERCOM_I2CM_CTRLA_PINOUT (_U_(0x1) << SERCOM_I2CM_CTRLA_PINOUT_Pos)
#define SERCOM_I2CM_CTRLA_SDAHOLD_Pos 20
#define SERCOM_I2CM_CTRLA_SDAHOLD_Msk (_U_(0x3) << SERCOM_I2CM_CTRLA_SDAHOLD_Pos)
#define SERCOM_I2CM_CTRLA_SDAHOLD(value) (SERCOM_I2CM_CTRLA_SDAHOLD_Msk & ((value) << SERCOM_I2CM_CTRLA_SDAHOLD_Pos))
#define SERCOM_I2CM_CTRLA_MEXTTOEN_Pos 22
#define SERCOM_I2CM_CTRLA_MEXTTOEN (_U_(0x1) << SERCOM_I2CM_CTRLA_MEXTTOEN_Pos)
#define SERCOM_I2CM_CTRLA_SEXTTOEN_Pos 23
#define SERCOM_I2CM_CTRLA_SEXTTOEN (_U_(0x1) << SERCOM_I2CM_CTRLA_SEXTTOEN_Pos)
#define SERCOM_I2CM_CTRLA_SPEED_Pos 24
#define SERCOM_I2CM_CTRLA_SPEED_Msk (_U_(0x3) << SERCOM_I2CM_CTRLA_SPEED_Pos)
#define SERCOM_I2CM_CTRLA_SPEED(value) (SERCOM_I2CM_CTRLA_SPEED_Msk & ((value) << SERCOM_I2CM_CTRLA_SPEED_Pos))
#define SERCOM_I2CM_CTRLA_SCLSM_Pos 27
#define SERCOM_I2CM_CTRLA_SCLSM (_U_(0x1) << SERCOM_I2CM_CTRLA_SCLSM_Pos)
#define SERCOM_I2CM_CTRLA_INACTOUT_Pos 28
#define SERCOM_I2CM_CTRLA_INACTOUT_Msk (_U_(0x3) << SERCOM_I2CM_CTRLA_INACTOUT_Pos)
#define SERCOM_I2CM_CTRLA_INACTOUT(value) (SERCOM_I2CM_CTRLA_INACTOUT_Msk & ((value) << SERCOM_I2CM_CTRLA_INACTOUT_Pos))
#define SERCOM_I2CM_CTRLA_LOWTOUTEN_Pos 30
#define SERCOM_I2CM_CTRLA_LOWTOUTEN (_U_(0x1) << SERCOM_I2CM_CTRLA_LOWTOUTEN_Pos)
#define SERCOM_I2CM_CTRLA_MASK _U_(0x7BF1009F)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t MODE:3;
    uint32_t :2;
    uint32_t RUNSTDBY:1;
    uint32_t :8;
    uint32_t PINOUT:1;
    uint32_t :3;
    uint32_t SDAHOLD:2;
    uint32_t :1;
    uint32_t SEXTTOEN:1;
    uint32_t SPEED:2;
    uint32_t :1;
    uint32_t SCLSM:1;
    uint32_t :2;
    uint32_t LOWTOUTEN:1;
    uint32_t :1;
  } bit;
  uint32_t reg;
} SERCOM_I2CS_CTRLA_Type;


#define SERCOM_I2CS_CTRLA_OFFSET 0x00
#define SERCOM_I2CS_CTRLA_RESETVALUE _U_(0x00000000)

#define SERCOM_I2CS_CTRLA_SWRST_Pos 0
#define SERCOM_I2CS_CTRLA_SWRST (_U_(0x1) << SERCOM_I2CS_CTRLA_SWRST_Pos)
#define SERCOM_I2CS_CTRLA_ENABLE_Pos 1
#define SERCOM_I2CS_CTRLA_ENABLE (_U_(0x1) << SERCOM_I2CS_CTRLA_ENABLE_Pos)
#define SERCOM_I2CS_CTRLA_MODE_Pos 2
#define SERCOM_I2CS_CTRLA_MODE_Msk (_U_(0x7) << SERCOM_I2CS_CTRLA_MODE_Pos)
#define SERCOM_I2CS_CTRLA_MODE(value) (SERCOM_I2CS_CTRLA_MODE_Msk & ((value) << SERCOM_I2CS_CTRLA_MODE_Pos))
#define SERCOM_I2CS_CTRLA_RUNSTDBY_Pos 7
#define SERCOM_I2CS_CTRLA_RUNSTDBY (_U_(0x1) << SERCOM_I2CS_CTRLA_RUNSTDBY_Pos)
#define SERCOM_I2CS_CTRLA_PINOUT_Pos 16
#define SERCOM_I2CS_CTRLA_PINOUT (_U_(0x1) << SERCOM_I2CS_CTRLA_PINOUT_Pos)
#define SERCOM_I2CS_CTRLA_SDAHOLD_Pos 20
#define SERCOM_I2CS_CTRLA_SDAHOLD_Msk (_U_(0x3) << SERCOM_I2CS_CTRLA_SDAHOLD_Pos)
#define SERCOM_I2CS_CTRLA_SDAHOLD(value) (SERCOM_I2CS_CTRLA_SDAHOLD_Msk & ((value) << SERCOM_I2CS_CTRLA_SDAHOLD_Pos))
#define SERCOM_I2CS_CTRLA_SEXTTOEN_Pos 23
#define SERCOM_I2CS_CTRLA_SEXTTOEN (_U_(0x1) << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos)
#define SERCOM_I2CS_CTRLA_SPEED_Pos 24
#define SERCOM_I2CS_CTRLA_SPEED_Msk (_U_(0x3) << SERCOM_I2CS_CTRLA_SPEED_Pos)
#define SERCOM_I2CS_CTRLA_SPEED(value) (SERCOM_I2CS_CTRLA_SPEED_Msk & ((value) << SERCOM_I2CS_CTRLA_SPEED_Pos))
#define SERCOM_I2CS_CTRLA_SCLSM_Pos 27
#define SERCOM_I2CS_CTRLA_SCLSM (_U_(0x1) << SERCOM_I2CS_CTRLA_SCLSM_Pos)
#define SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos 30
#define SERCOM_I2CS_CTRLA_LOWTOUTEN (_U_(0x1) << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos)
#define SERCOM_I2CS_CTRLA_MASK _U_(0x4BB1009F)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t MODE:3;
    uint32_t :2;
    uint32_t RUNSTDBY:1;
    uint32_t IBON:1;
    uint32_t :7;
    uint32_t DOPO:2;
    uint32_t :2;
    uint32_t DIPO:2;
    uint32_t :2;
    uint32_t FORM:4;
    uint32_t CPHA:1;
    uint32_t CPOL:1;
    uint32_t DORD:1;
    uint32_t :1;
  } bit;
  uint32_t reg;
} SERCOM_SPI_CTRLA_Type;


#define SERCOM_SPI_CTRLA_OFFSET 0x00
#define SERCOM_SPI_CTRLA_RESETVALUE _U_(0x00000000)

#define SERCOM_SPI_CTRLA_SWRST_Pos 0
#define SERCOM_SPI_CTRLA_SWRST (_U_(0x1) << SERCOM_SPI_CTRLA_SWRST_Pos)
#define SERCOM_SPI_CTRLA_ENABLE_Pos 1
#define SERCOM_SPI_CTRLA_ENABLE (_U_(0x1) << SERCOM_SPI_CTRLA_ENABLE_Pos)
#define SERCOM_SPI_CTRLA_MODE_Pos 2
#define SERCOM_SPI_CTRLA_MODE_Msk (_U_(0x7) << SERCOM_SPI_CTRLA_MODE_Pos)
#define SERCOM_SPI_CTRLA_MODE(value) (SERCOM_SPI_CTRLA_MODE_Msk & ((value) << SERCOM_SPI_CTRLA_MODE_Pos))
#define SERCOM_SPI_CTRLA_RUNSTDBY_Pos 7
#define SERCOM_SPI_CTRLA_RUNSTDBY (_U_(0x1) << SERCOM_SPI_CTRLA_RUNSTDBY_Pos)
#define SERCOM_SPI_CTRLA_IBON_Pos 8
#define SERCOM_SPI_CTRLA_IBON (_U_(0x1) << SERCOM_SPI_CTRLA_IBON_Pos)
#define SERCOM_SPI_CTRLA_DOPO_Pos 16
#define SERCOM_SPI_CTRLA_DOPO_Msk (_U_(0x3) << SERCOM_SPI_CTRLA_DOPO_Pos)
#define SERCOM_SPI_CTRLA_DOPO(value) (SERCOM_SPI_CTRLA_DOPO_Msk & ((value) << SERCOM_SPI_CTRLA_DOPO_Pos))
#define SERCOM_SPI_CTRLA_DIPO_Pos 20
#define SERCOM_SPI_CTRLA_DIPO_Msk (_U_(0x3) << SERCOM_SPI_CTRLA_DIPO_Pos)
#define SERCOM_SPI_CTRLA_DIPO(value) (SERCOM_SPI_CTRLA_DIPO_Msk & ((value) << SERCOM_SPI_CTRLA_DIPO_Pos))
#define SERCOM_SPI_CTRLA_FORM_Pos 24
#define SERCOM_SPI_CTRLA_FORM_Msk (_U_(0xF) << SERCOM_SPI_CTRLA_FORM_Pos)
#define SERCOM_SPI_CTRLA_FORM(value) (SERCOM_SPI_CTRLA_FORM_Msk & ((value) << SERCOM_SPI_CTRLA_FORM_Pos))
#define SERCOM_SPI_CTRLA_CPHA_Pos 28
#define SERCOM_SPI_CTRLA_CPHA (_U_(0x1) << SERCOM_SPI_CTRLA_CPHA_Pos)
#define SERCOM_SPI_CTRLA_CPOL_Pos 29
#define SERCOM_SPI_CTRLA_CPOL (_U_(0x1) << SERCOM_SPI_CTRLA_CPOL_Pos)
#define SERCOM_SPI_CTRLA_DORD_Pos 30
#define SERCOM_SPI_CTRLA_DORD (_U_(0x1) << SERCOM_SPI_CTRLA_DORD_Pos)
#define SERCOM_SPI_CTRLA_MASK _U_(0x7F33019F)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t MODE:3;
    uint32_t :2;
    uint32_t RUNSTDBY:1;
    uint32_t IBON:1;
    uint32_t TXINV:1;
    uint32_t RXINV:1;
    uint32_t :2;
    uint32_t SAMPR:3;
    uint32_t TXPO:2;
    uint32_t :2;
    uint32_t RXPO:2;
    uint32_t SAMPA:2;
    uint32_t FORM:4;
    uint32_t CMODE:1;
    uint32_t CPOL:1;
    uint32_t DORD:1;
    uint32_t :1;
  } bit;
  uint32_t reg;
} SERCOM_USART_CTRLA_Type;


#define SERCOM_USART_CTRLA_OFFSET 0x00
#define SERCOM_USART_CTRLA_RESETVALUE _U_(0x00000000)

#define SERCOM_USART_CTRLA_SWRST_Pos 0
#define SERCOM_USART_CTRLA_SWRST (_U_(0x1) << SERCOM_USART_CTRLA_SWRST_Pos)
#define SERCOM_USART_CTRLA_ENABLE_Pos 1
#define SERCOM_USART_CTRLA_ENABLE (_U_(0x1) << SERCOM_USART_CTRLA_ENABLE_Pos)
#define SERCOM_USART_CTRLA_MODE_Pos 2
#define SERCOM_USART_CTRLA_MODE_Msk (_U_(0x7) << SERCOM_USART_CTRLA_MODE_Pos)
#define SERCOM_USART_CTRLA_MODE(value) (SERCOM_USART_CTRLA_MODE_Msk & ((value) << SERCOM_USART_CTRLA_MODE_Pos))
#define SERCOM_USART_CTRLA_RUNSTDBY_Pos 7
#define SERCOM_USART_CTRLA_RUNSTDBY (_U_(0x1) << SERCOM_USART_CTRLA_RUNSTDBY_Pos)
#define SERCOM_USART_CTRLA_IBON_Pos 8
#define SERCOM_USART_CTRLA_IBON (_U_(0x1) << SERCOM_USART_CTRLA_IBON_Pos)
#define SERCOM_USART_CTRLA_TXINV_Pos 9
#define SERCOM_USART_CTRLA_TXINV (_U_(0x1) << SERCOM_USART_CTRLA_TXINV_Pos)
#define SERCOM_USART_CTRLA_RXINV_Pos 10
#define SERCOM_USART_CTRLA_RXINV (_U_(0x1) << SERCOM_USART_CTRLA_RXINV_Pos)
#define SERCOM_USART_CTRLA_SAMPR_Pos 13
#define SERCOM_USART_CTRLA_SAMPR_Msk (_U_(0x7) << SERCOM_USART_CTRLA_SAMPR_Pos)
#define SERCOM_USART_CTRLA_SAMPR(value) (SERCOM_USART_CTRLA_SAMPR_Msk & ((value) << SERCOM_USART_CTRLA_SAMPR_Pos))
#define SERCOM_USART_CTRLA_TXPO_Pos 16
#define SERCOM_USART_CTRLA_TXPO_Msk (_U_(0x3) << SERCOM_USART_CTRLA_TXPO_Pos)
#define SERCOM_USART_CTRLA_TXPO(value) (SERCOM_USART_CTRLA_TXPO_Msk & ((value) << SERCOM_USART_CTRLA_TXPO_Pos))
#define SERCOM_USART_CTRLA_RXPO_Pos 20
#define SERCOM_USART_CTRLA_RXPO_Msk (_U_(0x3) << SERCOM_USART_CTRLA_RXPO_Pos)
#define SERCOM_USART_CTRLA_RXPO(value) (SERCOM_USART_CTRLA_RXPO_Msk & ((value) << SERCOM_USART_CTRLA_RXPO_Pos))
#define SERCOM_USART_CTRLA_SAMPA_Pos 22
#define SERCOM_USART_CTRLA_SAMPA_Msk (_U_(0x3) << SERCOM_USART_CTRLA_SAMPA_Pos)
#define SERCOM_USART_CTRLA_SAMPA(value) (SERCOM_USART_CTRLA_SAMPA_Msk & ((value) << SERCOM_USART_CTRLA_SAMPA_Pos))
#define SERCOM_USART_CTRLA_FORM_Pos 24
#define SERCOM_USART_CTRLA_FORM_Msk (_U_(0xF) << SERCOM_USART_CTRLA_FORM_Pos)
#define SERCOM_USART_CTRLA_FORM(value) (SERCOM_USART_CTRLA_FORM_Msk & ((value) << SERCOM_USART_CTRLA_FORM_Pos))
#define SERCOM_USART_CTRLA_CMODE_Pos 28
#define SERCOM_USART_CTRLA_CMODE (_U_(0x1) << SERCOM_USART_CTRLA_CMODE_Pos)
#define SERCOM_USART_CTRLA_CPOL_Pos 29
#define SERCOM_USART_CTRLA_CPOL (_U_(0x1) << SERCOM_USART_CTRLA_CPOL_Pos)
#define SERCOM_USART_CTRLA_DORD_Pos 30
#define SERCOM_USART_CTRLA_DORD (_U_(0x1) << SERCOM_USART_CTRLA_DORD_Pos)
#define SERCOM_USART_CTRLA_MASK _U_(0x7FF3E79F)



typedef union {
  struct {
    uint32_t :8;
    uint32_t SMEN:1;
    uint32_t QCEN:1;
    uint32_t :6;
    uint32_t CMD:2;
    uint32_t ACKACT:1;
    uint32_t :13;
  } bit;
  uint32_t reg;
} SERCOM_I2CM_CTRLB_Type;


#define SERCOM_I2CM_CTRLB_OFFSET 0x04
#define SERCOM_I2CM_CTRLB_RESETVALUE _U_(0x00000000)

#define SERCOM_I2CM_CTRLB_SMEN_Pos 8
#define SERCOM_I2CM_CTRLB_SMEN (_U_(0x1) << SERCOM_I2CM_CTRLB_SMEN_Pos)
#define SERCOM_I2CM_CTRLB_QCEN_Pos 9
#define SERCOM_I2CM_CTRLB_QCEN (_U_(0x1) << SERCOM_I2CM_CTRLB_QCEN_Pos)
#define SERCOM_I2CM_CTRLB_CMD_Pos 16
#define SERCOM_I2CM_CTRLB_CMD_Msk (_U_(0x3) << SERCOM_I2CM_CTRLB_CMD_Pos)
#define SERCOM_I2CM_CTRLB_CMD(value) (SERCOM_I2CM_CTRLB_CMD_Msk & ((value) << SERCOM_I2CM_CTRLB_CMD_Pos))
#define SERCOM_I2CM_CTRLB_ACKACT_Pos 18
#define SERCOM_I2CM_CTRLB_ACKACT (_U_(0x1) << SERCOM_I2CM_CTRLB_ACKACT_Pos)
#define SERCOM_I2CM_CTRLB_MASK _U_(0x00070300)



typedef union {
  struct {
    uint32_t :8;
    uint32_t SMEN:1;
    uint32_t GCMD:1;
    uint32_t AACKEN:1;
    uint32_t :3;
    uint32_t AMODE:2;
    uint32_t CMD:2;
    uint32_t ACKACT:1;
    uint32_t :13;
  } bit;
  uint32_t reg;
} SERCOM_I2CS_CTRLB_Type;


#define SERCOM_I2CS_CTRLB_OFFSET 0x04
#define SERCOM_I2CS_CTRLB_RESETVALUE _U_(0x00000000)

#define SERCOM_I2CS_CTRLB_SMEN_Pos 8
#define SERCOM_I2CS_CTRLB_SMEN (_U_(0x1) << SERCOM_I2CS_CTRLB_SMEN_Pos)
#define SERCOM_I2CS_CTRLB_GCMD_Pos 9
#define SERCOM_I2CS_CTRLB_GCMD (_U_(0x1) << SERCOM_I2CS_CTRLB_GCMD_Pos)
#define SERCOM_I2CS_CTRLB_AACKEN_Pos 10
#define SERCOM_I2CS_CTRLB_AACKEN (_U_(0x1) << SERCOM_I2CS_CTRLB_AACKEN_Pos)
#define SERCOM_I2CS_CTRLB_AMODE_Pos 14
#define SERCOM_I2CS_CTRLB_AMODE_Msk (_U_(0x3) << SERCOM_I2CS_CTRLB_AMODE_Pos)
#define SERCOM_I2CS_CTRLB_AMODE(value) (SERCOM_I2CS_CTRLB_AMODE_Msk & ((value) << SERCOM_I2CS_CTRLB_AMODE_Pos))
#define SERCOM_I2CS_CTRLB_CMD_Pos 16
#define SERCOM_I2CS_CTRLB_CMD_Msk (_U_(0x3) << SERCOM_I2CS_CTRLB_CMD_Pos)
#define SERCOM_I2CS_CTRLB_CMD(value) (SERCOM_I2CS_CTRLB_CMD_Msk & ((value) << SERCOM_I2CS_CTRLB_CMD_Pos))
#define SERCOM_I2CS_CTRLB_ACKACT_Pos 18
#define SERCOM_I2CS_CTRLB_ACKACT (_U_(0x1) << SERCOM_I2CS_CTRLB_ACKACT_Pos)
#define SERCOM_I2CS_CTRLB_MASK _U_(0x0007C700)



typedef union {
  struct {
    uint32_t CHSIZE:3;
    uint32_t :3;
    uint32_t PLOADEN:1;
    uint32_t :2;
    uint32_t SSDE:1;
    uint32_t :3;
    uint32_t MSSEN:1;
    uint32_t AMODE:2;
    uint32_t :1;
    uint32_t RXEN:1;
    uint32_t :14;
  } bit;
  uint32_t reg;
} SERCOM_SPI_CTRLB_Type;


#define SERCOM_SPI_CTRLB_OFFSET 0x04
#define SERCOM_SPI_CTRLB_RESETVALUE _U_(0x00000000)

#define SERCOM_SPI_CTRLB_CHSIZE_Pos 0
#define SERCOM_SPI_CTRLB_CHSIZE_Msk (_U_(0x7) << SERCOM_SPI_CTRLB_CHSIZE_Pos)
#define SERCOM_SPI_CTRLB_CHSIZE(value) (SERCOM_SPI_CTRLB_CHSIZE_Msk & ((value) << SERCOM_SPI_CTRLB_CHSIZE_Pos))
#define SERCOM_SPI_CTRLB_PLOADEN_Pos 6
#define SERCOM_SPI_CTRLB_PLOADEN (_U_(0x1) << SERCOM_SPI_CTRLB_PLOADEN_Pos)
#define SERCOM_SPI_CTRLB_SSDE_Pos 9
#define SERCOM_SPI_CTRLB_SSDE (_U_(0x1) << SERCOM_SPI_CTRLB_SSDE_Pos)
#define SERCOM_SPI_CTRLB_MSSEN_Pos 13
#define SERCOM_SPI_CTRLB_MSSEN (_U_(0x1) << SERCOM_SPI_CTRLB_MSSEN_Pos)
#define SERCOM_SPI_CTRLB_AMODE_Pos 14
#define SERCOM_SPI_CTRLB_AMODE_Msk (_U_(0x3) << SERCOM_SPI_CTRLB_AMODE_Pos)
#define SERCOM_SPI_CTRLB_AMODE(value) (SERCOM_SPI_CTRLB_AMODE_Msk & ((value) << SERCOM_SPI_CTRLB_AMODE_Pos))
#define SERCOM_SPI_CTRLB_RXEN_Pos 17
#define SERCOM_SPI_CTRLB_RXEN (_U_(0x1) << SERCOM_SPI_CTRLB_RXEN_Pos)
#define SERCOM_SPI_CTRLB_MASK _U_(0x0002E247)



typedef union {
  struct {
    uint32_t CHSIZE:3;
    uint32_t :3;
    uint32_t SBMODE:1;
    uint32_t :1;
    uint32_t COLDEN:1;
    uint32_t SFDE:1;
    uint32_t ENC:1;
    uint32_t :2;
    uint32_t PMODE:1;
    uint32_t :2;
    uint32_t TXEN:1;
    uint32_t RXEN:1;
    uint32_t :6;
    uint32_t LINCMD:2;
    uint32_t :6;
  } bit;
  uint32_t reg;
} SERCOM_USART_CTRLB_Type;


#define SERCOM_USART_CTRLB_OFFSET 0x04
#define SERCOM_USART_CTRLB_RESETVALUE _U_(0x00000000)

#define SERCOM_USART_CTRLB_CHSIZE_Pos 0
#define SERCOM_USART_CTRLB_CHSIZE_Msk (_U_(0x7) << SERCOM_USART_CTRLB_CHSIZE_Pos)
#define SERCOM_USART_CTRLB_CHSIZE(value) (SERCOM_USART_CTRLB_CHSIZE_Msk & ((value) << SERCOM_USART_CTRLB_CHSIZE_Pos))
#define SERCOM_USART_CTRLB_SBMODE_Pos 6
#define SERCOM_USART_CTRLB_SBMODE (_U_(0x1) << SERCOM_USART_CTRLB_SBMODE_Pos)
#define SERCOM_USART_CTRLB_COLDEN_Pos 8
#define SERCOM_USART_CTRLB_COLDEN (_U_(0x1) << SERCOM_USART_CTRLB_COLDEN_Pos)
#define SERCOM_USART_CTRLB_SFDE_Pos 9
#define SERCOM_USART_CTRLB_SFDE (_U_(0x1) << SERCOM_USART_CTRLB_SFDE_Pos)
#define SERCOM_USART_CTRLB_ENC_Pos 10
#define SERCOM_USART_CTRLB_ENC (_U_(0x1) << SERCOM_USART_CTRLB_ENC_Pos)
#define SERCOM_USART_CTRLB_PMODE_Pos 13
#define SERCOM_USART_CTRLB_PMODE (_U_(0x1) << SERCOM_USART_CTRLB_PMODE_Pos)
#define SERCOM_USART_CTRLB_TXEN_Pos 16
#define SERCOM_USART_CTRLB_TXEN (_U_(0x1) << SERCOM_USART_CTRLB_TXEN_Pos)
#define SERCOM_USART_CTRLB_RXEN_Pos 17
#define SERCOM_USART_CTRLB_RXEN (_U_(0x1) << SERCOM_USART_CTRLB_RXEN_Pos)
#define SERCOM_USART_CTRLB_LINCMD_Pos 24
#define SERCOM_USART_CTRLB_LINCMD_Msk (_U_(0x3) << SERCOM_USART_CTRLB_LINCMD_Pos)
#define SERCOM_USART_CTRLB_LINCMD(value) (SERCOM_USART_CTRLB_LINCMD_Msk & ((value) << SERCOM_USART_CTRLB_LINCMD_Pos))
#define SERCOM_USART_CTRLB_MASK _U_(0x03032747)



typedef union {
  struct {
    uint32_t :24;
    uint32_t DATA32B:1;
    uint32_t :7;
  } bit;
  uint32_t reg;
} SERCOM_I2CM_CTRLC_Type;


#define SERCOM_I2CM_CTRLC_OFFSET 0x08
#define SERCOM_I2CM_CTRLC_RESETVALUE _U_(0x00000000)

#define SERCOM_I2CM_CTRLC_DATA32B_Pos 24
#define SERCOM_I2CM_CTRLC_DATA32B (_U_(0x1) << SERCOM_I2CM_CTRLC_DATA32B_Pos)
#define SERCOM_I2CM_CTRLC_MASK _U_(0x01000000)



typedef union {
  struct {
    uint32_t SDASETUP:4;
    uint32_t :20;
    uint32_t DATA32B:1;
    uint32_t :7;
  } bit;
  uint32_t reg;
} SERCOM_I2CS_CTRLC_Type;


#define SERCOM_I2CS_CTRLC_OFFSET 0x08
#define SERCOM_I2CS_CTRLC_RESETVALUE _U_(0x00000000)

#define SERCOM_I2CS_CTRLC_SDASETUP_Pos 0
#define SERCOM_I2CS_CTRLC_SDASETUP_Msk (_U_(0xF) << SERCOM_I2CS_CTRLC_SDASETUP_Pos)
#define SERCOM_I2CS_CTRLC_SDASETUP(value) (SERCOM_I2CS_CTRLC_SDASETUP_Msk & ((value) << SERCOM_I2CS_CTRLC_SDASETUP_Pos))
#define SERCOM_I2CS_CTRLC_DATA32B_Pos 24
#define SERCOM_I2CS_CTRLC_DATA32B (_U_(0x1) << SERCOM_I2CS_CTRLC_DATA32B_Pos)
#define SERCOM_I2CS_CTRLC_MASK _U_(0x0100000F)



typedef union {
  struct {
    uint32_t ICSPACE:6;
    uint32_t :18;
    uint32_t DATA32B:1;
    uint32_t :7;
  } bit;
  uint32_t reg;
} SERCOM_SPI_CTRLC_Type;


#define SERCOM_SPI_CTRLC_OFFSET 0x08
#define SERCOM_SPI_CTRLC_RESETVALUE _U_(0x00000000)

#define SERCOM_SPI_CTRLC_ICSPACE_Pos 0
#define SERCOM_SPI_CTRLC_ICSPACE_Msk (_U_(0x3F) << SERCOM_SPI_CTRLC_ICSPACE_Pos)
#define SERCOM_SPI_CTRLC_ICSPACE(value) (SERCOM_SPI_CTRLC_ICSPACE_Msk & ((value) << SERCOM_SPI_CTRLC_ICSPACE_Pos))
#define SERCOM_SPI_CTRLC_DATA32B_Pos 24
#define SERCOM_SPI_CTRLC_DATA32B (_U_(0x1) << SERCOM_SPI_CTRLC_DATA32B_Pos)
#define SERCOM_SPI_CTRLC_MASK _U_(0x0100003F)



typedef union {
  struct {
    uint32_t GTIME:3;
    uint32_t :5;
    uint32_t BRKLEN:2;
    uint32_t HDRDLY:2;
    uint32_t :4;
    uint32_t INACK:1;
    uint32_t DSNACK:1;
    uint32_t :2;
    uint32_t MAXITER:3;
    uint32_t :1;
    uint32_t DATA32B:2;
    uint32_t :6;
  } bit;
  uint32_t reg;
} SERCOM_USART_CTRLC_Type;


#define SERCOM_USART_CTRLC_OFFSET 0x08
#define SERCOM_USART_CTRLC_RESETVALUE _U_(0x00000000)

#define SERCOM_USART_CTRLC_GTIME_Pos 0
#define SERCOM_USART_CTRLC_GTIME_Msk (_U_(0x7) << SERCOM_USART_CTRLC_GTIME_Pos)
#define SERCOM_USART_CTRLC_GTIME(value) (SERCOM_USART_CTRLC_GTIME_Msk & ((value) << SERCOM_USART_CTRLC_GTIME_Pos))
#define SERCOM_USART_CTRLC_BRKLEN_Pos 8
#define SERCOM_USART_CTRLC_BRKLEN_Msk (_U_(0x3) << SERCOM_USART_CTRLC_BRKLEN_Pos)
#define SERCOM_USART_CTRLC_BRKLEN(value) (SERCOM_USART_CTRLC_BRKLEN_Msk & ((value) << SERCOM_USART_CTRLC_BRKLEN_Pos))
#define SERCOM_USART_CTRLC_HDRDLY_Pos 10
#define SERCOM_USART_CTRLC_HDRDLY_Msk (_U_(0x3) << SERCOM_USART_CTRLC_HDRDLY_Pos)
#define SERCOM_USART_CTRLC_HDRDLY(value) (SERCOM_USART_CTRLC_HDRDLY_Msk & ((value) << SERCOM_USART_CTRLC_HDRDLY_Pos))
#define SERCOM_USART_CTRLC_INACK_Pos 16
#define SERCOM_USART_CTRLC_INACK (_U_(0x1) << SERCOM_USART_CTRLC_INACK_Pos)
#define SERCOM_USART_CTRLC_DSNACK_Pos 17
#define SERCOM_USART_CTRLC_DSNACK (_U_(0x1) << SERCOM_USART_CTRLC_DSNACK_Pos)
#define SERCOM_USART_CTRLC_MAXITER_Pos 20
#define SERCOM_USART_CTRLC_MAXITER_Msk (_U_(0x7) << SERCOM_USART_CTRLC_MAXITER_Pos)
#define SERCOM_USART_CTRLC_MAXITER(value) (SERCOM_USART_CTRLC_MAXITER_Msk & ((value) << SERCOM_USART_CTRLC_MAXITER_Pos))
#define SERCOM_USART_CTRLC_DATA32B_Pos 24
#define SERCOM_USART_CTRLC_DATA32B_Msk (_U_(0x3) << SERCOM_USART_CTRLC_DATA32B_Pos)
#define SERCOM_USART_CTRLC_DATA32B(value) (SERCOM_USART_CTRLC_DATA32B_Msk & ((value) << SERCOM_USART_CTRLC_DATA32B_Pos))
#define SERCOM_USART_CTRLC_MASK _U_(0x03730F07)



typedef union {
  struct {
    uint32_t BAUD:8;
    uint32_t BAUDLOW:8;
    uint32_t HSBAUD:8;
    uint32_t HSBAUDLOW:8;
  } bit;
  uint32_t reg;
} SERCOM_I2CM_BAUD_Type;


#define SERCOM_I2CM_BAUD_OFFSET 0x0C
#define SERCOM_I2CM_BAUD_RESETVALUE _U_(0x00000000)

#define SERCOM_I2CM_BAUD_BAUD_Pos 0
#define SERCOM_I2CM_BAUD_BAUD_Msk (_U_(0xFF) << SERCOM_I2CM_BAUD_BAUD_Pos)
#define SERCOM_I2CM_BAUD_BAUD(value) (SERCOM_I2CM_BAUD_BAUD_Msk & ((value) << SERCOM_I2CM_BAUD_BAUD_Pos))
#define SERCOM_I2CM_BAUD_BAUDLOW_Pos 8
#define SERCOM_I2CM_BAUD_BAUDLOW_Msk (_U_(0xFF) << SERCOM_I2CM_BAUD_BAUDLOW_Pos)
#define SERCOM_I2CM_BAUD_BAUDLOW(value) (SERCOM_I2CM_BAUD_BAUDLOW_Msk & ((value) << SERCOM_I2CM_BAUD_BAUDLOW_Pos))
#define SERCOM_I2CM_BAUD_HSBAUD_Pos 16
#define SERCOM_I2CM_BAUD_HSBAUD_Msk (_U_(0xFF) << SERCOM_I2CM_BAUD_HSBAUD_Pos)
#define SERCOM_I2CM_BAUD_HSBAUD(value) (SERCOM_I2CM_BAUD_HSBAUD_Msk & ((value) << SERCOM_I2CM_BAUD_HSBAUD_Pos))
#define SERCOM_I2CM_BAUD_HSBAUDLOW_Pos 24
#define SERCOM_I2CM_BAUD_HSBAUDLOW_Msk (_U_(0xFF) << SERCOM_I2CM_BAUD_HSBAUDLOW_Pos)
#define SERCOM_I2CM_BAUD_HSBAUDLOW(value) (SERCOM_I2CM_BAUD_HSBAUDLOW_Msk & ((value) << SERCOM_I2CM_BAUD_HSBAUDLOW_Pos))
#define SERCOM_I2CM_BAUD_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint8_t BAUD:8;
  } bit;
  uint8_t reg;
} SERCOM_SPI_BAUD_Type;


#define SERCOM_SPI_BAUD_OFFSET 0x0C
#define SERCOM_SPI_BAUD_RESETVALUE _U_(0x00)

#define SERCOM_SPI_BAUD_BAUD_Pos 0
#define SERCOM_SPI_BAUD_BAUD_Msk (_U_(0xFF) << SERCOM_SPI_BAUD_BAUD_Pos)
#define SERCOM_SPI_BAUD_BAUD(value) (SERCOM_SPI_BAUD_BAUD_Msk & ((value) << SERCOM_SPI_BAUD_BAUD_Pos))
#define SERCOM_SPI_BAUD_MASK _U_(0xFF)



typedef union {
  struct {
    uint16_t BAUD:16;
  } bit;
  struct {
    uint16_t BAUD:13;
    uint16_t FP:3;
  } FRAC;
  struct {
    uint16_t BAUD:13;
    uint16_t FP:3;
  } FRACFP;
  struct {
    uint16_t BAUD:16;
  } USARTFP;
  uint16_t reg;
} SERCOM_USART_BAUD_Type;


#define SERCOM_USART_BAUD_OFFSET 0x0C
#define SERCOM_USART_BAUD_RESETVALUE _U_(0x0000)

#define SERCOM_USART_BAUD_BAUD_Pos 0
#define SERCOM_USART_BAUD_BAUD_Msk (_U_(0xFFFF) << SERCOM_USART_BAUD_BAUD_Pos)
#define SERCOM_USART_BAUD_BAUD(value) (SERCOM_USART_BAUD_BAUD_Msk & ((value) << SERCOM_USART_BAUD_BAUD_Pos))
#define SERCOM_USART_BAUD_MASK _U_(0xFFFF)


#define SERCOM_USART_BAUD_FRAC_BAUD_Pos 0
#define SERCOM_USART_BAUD_FRAC_BAUD_Msk (_U_(0x1FFF) << SERCOM_USART_BAUD_FRAC_BAUD_Pos)
#define SERCOM_USART_BAUD_FRAC_BAUD(value) (SERCOM_USART_BAUD_FRAC_BAUD_Msk & ((value) << SERCOM_USART_BAUD_FRAC_BAUD_Pos))
#define SERCOM_USART_BAUD_FRAC_FP_Pos 13
#define SERCOM_USART_BAUD_FRAC_FP_Msk (_U_(0x7) << SERCOM_USART_BAUD_FRAC_FP_Pos)
#define SERCOM_USART_BAUD_FRAC_FP(value) (SERCOM_USART_BAUD_FRAC_FP_Msk & ((value) << SERCOM_USART_BAUD_FRAC_FP_Pos))
#define SERCOM_USART_BAUD_FRAC_MASK _U_(0xFFFF)


#define SERCOM_USART_BAUD_FRACFP_BAUD_Pos 0
#define SERCOM_USART_BAUD_FRACFP_BAUD_Msk (_U_(0x1FFF) << SERCOM_USART_BAUD_FRACFP_BAUD_Pos)
#define SERCOM_USART_BAUD_FRACFP_BAUD(value) (SERCOM_USART_BAUD_FRACFP_BAUD_Msk & ((value) << SERCOM_USART_BAUD_FRACFP_BAUD_Pos))
#define SERCOM_USART_BAUD_FRACFP_FP_Pos 13
#define SERCOM_USART_BAUD_FRACFP_FP_Msk (_U_(0x7) << SERCOM_USART_BAUD_FRACFP_FP_Pos)
#define SERCOM_USART_BAUD_FRACFP_FP(value) (SERCOM_USART_BAUD_FRACFP_FP_Msk & ((value) << SERCOM_USART_BAUD_FRACFP_FP_Pos))
#define SERCOM_USART_BAUD_FRACFP_MASK _U_(0xFFFF)


#define SERCOM_USART_BAUD_USARTFP_BAUD_Pos 0
#define SERCOM_USART_BAUD_USARTFP_BAUD_Msk (_U_(0xFFFF) << SERCOM_USART_BAUD_USARTFP_BAUD_Pos)
#define SERCOM_USART_BAUD_USARTFP_BAUD(value) (SERCOM_USART_BAUD_USARTFP_BAUD_Msk & ((value) << SERCOM_USART_BAUD_USARTFP_BAUD_Pos))
#define SERCOM_USART_BAUD_USARTFP_MASK _U_(0xFFFF)



typedef union {
  struct {
    uint8_t RXPL:8;
  } bit;
  uint8_t reg;
} SERCOM_USART_RXPL_Type;


#define SERCOM_USART_RXPL_OFFSET 0x0E
#define SERCOM_USART_RXPL_RESETVALUE _U_(0x00)

#define SERCOM_USART_RXPL_RXPL_Pos 0
#define SERCOM_USART_RXPL_RXPL_Msk (_U_(0xFF) << SERCOM_USART_RXPL_RXPL_Pos)
#define SERCOM_USART_RXPL_RXPL(value) (SERCOM_USART_RXPL_RXPL_Msk & ((value) << SERCOM_USART_RXPL_RXPL_Pos))
#define SERCOM_USART_RXPL_MASK _U_(0xFF)



typedef union {
  struct {
    uint8_t MB:1;
    uint8_t SB:1;
    uint8_t :5;
    uint8_t ERROR:1;
  } bit;
  uint8_t reg;
} SERCOM_I2CM_INTENCLR_Type;


#define SERCOM_I2CM_INTENCLR_OFFSET 0x14
#define SERCOM_I2CM_INTENCLR_RESETVALUE _U_(0x00)

#define SERCOM_I2CM_INTENCLR_MB_Pos 0
#define SERCOM_I2CM_INTENCLR_MB (_U_(0x1) << SERCOM_I2CM_INTENCLR_MB_Pos)
#define SERCOM_I2CM_INTENCLR_SB_Pos 1
#define SERCOM_I2CM_INTENCLR_SB (_U_(0x1) << SERCOM_I2CM_INTENCLR_SB_Pos)
#define SERCOM_I2CM_INTENCLR_ERROR_Pos 7
#define SERCOM_I2CM_INTENCLR_ERROR (_U_(0x1) << SERCOM_I2CM_INTENCLR_ERROR_Pos)
#define SERCOM_I2CM_INTENCLR_MASK _U_(0x83)



typedef union {
  struct {
    uint8_t PREC:1;
    uint8_t AMATCH:1;
    uint8_t DRDY:1;
    uint8_t :4;
    uint8_t ERROR:1;
  } bit;
  uint8_t reg;
} SERCOM_I2CS_INTENCLR_Type;


#define SERCOM_I2CS_INTENCLR_OFFSET 0x14
#define SERCOM_I2CS_INTENCLR_RESETVALUE _U_(0x00)

#define SERCOM_I2CS_INTENCLR_PREC_Pos 0
#define SERCOM_I2CS_INTENCLR_PREC (_U_(0x1) << SERCOM_I2CS_INTENCLR_PREC_Pos)
#define SERCOM_I2CS_INTENCLR_AMATCH_Pos 1
#define SERCOM_I2CS_INTENCLR_AMATCH (_U_(0x1) << SERCOM_I2CS_INTENCLR_AMATCH_Pos)
#define SERCOM_I2CS_INTENCLR_DRDY_Pos 2
#define SERCOM_I2CS_INTENCLR_DRDY (_U_(0x1) << SERCOM_I2CS_INTENCLR_DRDY_Pos)
#define SERCOM_I2CS_INTENCLR_ERROR_Pos 7
#define SERCOM_I2CS_INTENCLR_ERROR (_U_(0x1) << SERCOM_I2CS_INTENCLR_ERROR_Pos)
#define SERCOM_I2CS_INTENCLR_MASK _U_(0x87)



typedef union {
  struct {
    uint8_t DRE:1;
    uint8_t TXC:1;
    uint8_t RXC:1;
    uint8_t SSL:1;
    uint8_t :3;
    uint8_t ERROR:1;
  } bit;
  uint8_t reg;
} SERCOM_SPI_INTENCLR_Type;


#define SERCOM_SPI_INTENCLR_OFFSET 0x14
#define SERCOM_SPI_INTENCLR_RESETVALUE _U_(0x00)

#define SERCOM_SPI_INTENCLR_DRE_Pos 0
#define SERCOM_SPI_INTENCLR_DRE (_U_(0x1) << SERCOM_SPI_INTENCLR_DRE_Pos)
#define SERCOM_SPI_INTENCLR_TXC_Pos 1
#define SERCOM_SPI_INTENCLR_TXC (_U_(0x1) << SERCOM_SPI_INTENCLR_TXC_Pos)
#define SERCOM_SPI_INTENCLR_RXC_Pos 2
#define SERCOM_SPI_INTENCLR_RXC (_U_(0x1) << SERCOM_SPI_INTENCLR_RXC_Pos)
#define SERCOM_SPI_INTENCLR_SSL_Pos 3
#define SERCOM_SPI_INTENCLR_SSL (_U_(0x1) << SERCOM_SPI_INTENCLR_SSL_Pos)
#define SERCOM_SPI_INTENCLR_ERROR_Pos 7
#define SERCOM_SPI_INTENCLR_ERROR (_U_(0x1) << SERCOM_SPI_INTENCLR_ERROR_Pos)
#define SERCOM_SPI_INTENCLR_MASK _U_(0x8F)



typedef union {
  struct {
    uint8_t DRE:1;
    uint8_t TXC:1;
    uint8_t RXC:1;
    uint8_t RXS:1;
    uint8_t CTSIC:1;
    uint8_t RXBRK:1;
    uint8_t :1;
    uint8_t ERROR:1;
  } bit;
  uint8_t reg;
} SERCOM_USART_INTENCLR_Type;


#define SERCOM_USART_INTENCLR_OFFSET 0x14
#define SERCOM_USART_INTENCLR_RESETVALUE _U_(0x00)

#define SERCOM_USART_INTENCLR_DRE_Pos 0
#define SERCOM_USART_INTENCLR_DRE (_U_(0x1) << SERCOM_USART_INTENCLR_DRE_Pos)
#define SERCOM_USART_INTENCLR_TXC_Pos 1
#define SERCOM_USART_INTENCLR_TXC (_U_(0x1) << SERCOM_USART_INTENCLR_TXC_Pos)
#define SERCOM_USART_INTENCLR_RXC_Pos 2
#define SERCOM_USART_INTENCLR_RXC (_U_(0x1) << SERCOM_USART_INTENCLR_RXC_Pos)
#define SERCOM_USART_INTENCLR_RXS_Pos 3
#define SERCOM_USART_INTENCLR_RXS (_U_(0x1) << SERCOM_USART_INTENCLR_RXS_Pos)
#define SERCOM_USART_INTENCLR_CTSIC_Pos 4
#define SERCOM_USART_INTENCLR_CTSIC (_U_(0x1) << SERCOM_USART_INTENCLR_CTSIC_Pos)
#define SERCOM_USART_INTENCLR_RXBRK_Pos 5
#define SERCOM_USART_INTENCLR_RXBRK (_U_(0x1) << SERCOM_USART_INTENCLR_RXBRK_Pos)
#define SERCOM_USART_INTENCLR_ERROR_Pos 7
#define SERCOM_USART_INTENCLR_ERROR (_U_(0x1) << SERCOM_USART_INTENCLR_ERROR_Pos)
#define SERCOM_USART_INTENCLR_MASK _U_(0xBF)



typedef union {
  struct {
    uint8_t MB:1;
    uint8_t SB:1;
    uint8_t :5;
    uint8_t ERROR:1;
  } bit;
  uint8_t reg;
} SERCOM_I2CM_INTENSET_Type;


#define SERCOM_I2CM_INTENSET_OFFSET 0x16
#define SERCOM_I2CM_INTENSET_RESETVALUE _U_(0x00)

#define SERCOM_I2CM_INTENSET_MB_Pos 0
#define SERCOM_I2CM_INTENSET_MB (_U_(0x1) << SERCOM_I2CM_INTENSET_MB_Pos)
#define SERCOM_I2CM_INTENSET_SB_Pos 1
#define SERCOM_I2CM_INTENSET_SB (_U_(0x1) << SERCOM_I2CM_INTENSET_SB_Pos)
#define SERCOM_I2CM_INTENSET_ERROR_Pos 7
#define SERCOM_I2CM_INTENSET_ERROR (_U_(0x1) << SERCOM_I2CM_INTENSET_ERROR_Pos)
#define SERCOM_I2CM_INTENSET_MASK _U_(0x83)



typedef union {
  struct {
    uint8_t PREC:1;
    uint8_t AMATCH:1;
    uint8_t DRDY:1;
    uint8_t :4;
    uint8_t ERROR:1;
  } bit;
  uint8_t reg;
} SERCOM_I2CS_INTENSET_Type;


#define SERCOM_I2CS_INTENSET_OFFSET 0x16
#define SERCOM_I2CS_INTENSET_RESETVALUE _U_(0x00)

#define SERCOM_I2CS_INTENSET_PREC_Pos 0
#define SERCOM_I2CS_INTENSET_PREC (_U_(0x1) << SERCOM_I2CS_INTENSET_PREC_Pos)
#define SERCOM_I2CS_INTENSET_AMATCH_Pos 1
#define SERCOM_I2CS_INTENSET_AMATCH (_U_(0x1) << SERCOM_I2CS_INTENSET_AMATCH_Pos)
#define SERCOM_I2CS_INTENSET_DRDY_Pos 2
#define SERCOM_I2CS_INTENSET_DRDY (_U_(0x1) << SERCOM_I2CS_INTENSET_DRDY_Pos)
#define SERCOM_I2CS_INTENSET_ERROR_Pos 7
#define SERCOM_I2CS_INTENSET_ERROR (_U_(0x1) << SERCOM_I2CS_INTENSET_ERROR_Pos)
#define SERCOM_I2CS_INTENSET_MASK _U_(0x87)



typedef union {
  struct {
    uint8_t DRE:1;
    uint8_t TXC:1;
    uint8_t RXC:1;
    uint8_t SSL:1;
    uint8_t :3;
    uint8_t ERROR:1;
  } bit;
  uint8_t reg;
} SERCOM_SPI_INTENSET_Type;


#define SERCOM_SPI_INTENSET_OFFSET 0x16
#define SERCOM_SPI_INTENSET_RESETVALUE _U_(0x00)

#define SERCOM_SPI_INTENSET_DRE_Pos 0
#define SERCOM_SPI_INTENSET_DRE (_U_(0x1) << SERCOM_SPI_INTENSET_DRE_Pos)
#define SERCOM_SPI_INTENSET_TXC_Pos 1
#define SERCOM_SPI_INTENSET_TXC (_U_(0x1) << SERCOM_SPI_INTENSET_TXC_Pos)
#define SERCOM_SPI_INTENSET_RXC_Pos 2
#define SERCOM_SPI_INTENSET_RXC (_U_(0x1) << SERCOM_SPI_INTENSET_RXC_Pos)
#define SERCOM_SPI_INTENSET_SSL_Pos 3
#define SERCOM_SPI_INTENSET_SSL (_U_(0x1) << SERCOM_SPI_INTENSET_SSL_Pos)
#define SERCOM_SPI_INTENSET_ERROR_Pos 7
#define SERCOM_SPI_INTENSET_ERROR (_U_(0x1) << SERCOM_SPI_INTENSET_ERROR_Pos)
#define SERCOM_SPI_INTENSET_MASK _U_(0x8F)



typedef union {
  struct {
    uint8_t DRE:1;
    uint8_t TXC:1;
    uint8_t RXC:1;
    uint8_t RXS:1;
    uint8_t CTSIC:1;
    uint8_t RXBRK:1;
    uint8_t :1;
    uint8_t ERROR:1;
  } bit;
  uint8_t reg;
} SERCOM_USART_INTENSET_Type;


#define SERCOM_USART_INTENSET_OFFSET 0x16
#define SERCOM_USART_INTENSET_RESETVALUE _U_(0x00)

#define SERCOM_USART_INTENSET_DRE_Pos 0
#define SERCOM_USART_INTENSET_DRE (_U_(0x1) << SERCOM_USART_INTENSET_DRE_Pos)
#define SERCOM_USART_INTENSET_TXC_Pos 1
#define SERCOM_USART_INTENSET_TXC (_U_(0x1) << SERCOM_USART_INTENSET_TXC_Pos)
#define SERCOM_USART_INTENSET_RXC_Pos 2
#define SERCOM_USART_INTENSET_RXC (_U_(0x1) << SERCOM_USART_INTENSET_RXC_Pos)
#define SERCOM_USART_INTENSET_RXS_Pos 3
#define SERCOM_USART_INTENSET_RXS (_U_(0x1) << SERCOM_USART_INTENSET_RXS_Pos)
#define SERCOM_USART_INTENSET_CTSIC_Pos 4
#define SERCOM_USART_INTENSET_CTSIC (_U_(0x1) << SERCOM_USART_INTENSET_CTSIC_Pos)
#define SERCOM_USART_INTENSET_RXBRK_Pos 5
#define SERCOM_USART_INTENSET_RXBRK (_U_(0x1) << SERCOM_USART_INTENSET_RXBRK_Pos)
#define SERCOM_USART_INTENSET_ERROR_Pos 7
#define SERCOM_USART_INTENSET_ERROR (_U_(0x1) << SERCOM_USART_INTENSET_ERROR_Pos)
#define SERCOM_USART_INTENSET_MASK _U_(0xBF)



typedef union {
  struct {
    volatile const uint8_t MB:1;
    volatile const uint8_t SB:1;
    volatile const uint8_t :5;
    volatile const uint8_t ERROR:1;
  } bit;
  uint8_t reg;
} SERCOM_I2CM_INTFLAG_Type;


#define SERCOM_I2CM_INTFLAG_OFFSET 0x18
#define SERCOM_I2CM_INTFLAG_RESETVALUE _U_(0x00)

#define SERCOM_I2CM_INTFLAG_MB_Pos 0
#define SERCOM_I2CM_INTFLAG_MB (_U_(0x1) << SERCOM_I2CM_INTFLAG_MB_Pos)
#define SERCOM_I2CM_INTFLAG_SB_Pos 1
#define SERCOM_I2CM_INTFLAG_SB (_U_(0x1) << SERCOM_I2CM_INTFLAG_SB_Pos)
#define SERCOM_I2CM_INTFLAG_ERROR_Pos 7
#define SERCOM_I2CM_INTFLAG_ERROR (_U_(0x1) << SERCOM_I2CM_INTFLAG_ERROR_Pos)
#define SERCOM_I2CM_INTFLAG_MASK _U_(0x83)



typedef union {
  struct {
    volatile const uint8_t PREC:1;
    volatile const uint8_t AMATCH:1;
    volatile const uint8_t DRDY:1;
    volatile const uint8_t :4;
    volatile const uint8_t ERROR:1;
  } bit;
  uint8_t reg;
} SERCOM_I2CS_INTFLAG_Type;


#define SERCOM_I2CS_INTFLAG_OFFSET 0x18
#define SERCOM_I2CS_INTFLAG_RESETVALUE _U_(0x00)

#define SERCOM_I2CS_INTFLAG_PREC_Pos 0
#define SERCOM_I2CS_INTFLAG_PREC (_U_(0x1) << SERCOM_I2CS_INTFLAG_PREC_Pos)
#define SERCOM_I2CS_INTFLAG_AMATCH_Pos 1
#define SERCOM_I2CS_INTFLAG_AMATCH (_U_(0x1) << SERCOM_I2CS_INTFLAG_AMATCH_Pos)
#define SERCOM_I2CS_INTFLAG_DRDY_Pos 2
#define SERCOM_I2CS_INTFLAG_DRDY (_U_(0x1) << SERCOM_I2CS_INTFLAG_DRDY_Pos)
#define SERCOM_I2CS_INTFLAG_ERROR_Pos 7
#define SERCOM_I2CS_INTFLAG_ERROR (_U_(0x1) << SERCOM_I2CS_INTFLAG_ERROR_Pos)
#define SERCOM_I2CS_INTFLAG_MASK _U_(0x87)



typedef union {
  struct {
    volatile const uint8_t DRE:1;
    volatile const uint8_t TXC:1;
    volatile const uint8_t RXC:1;
    volatile const uint8_t SSL:1;
    volatile const uint8_t :3;
    volatile const uint8_t ERROR:1;
  } bit;
  uint8_t reg;
} SERCOM_SPI_INTFLAG_Type;


#define SERCOM_SPI_INTFLAG_OFFSET 0x18
#define SERCOM_SPI_INTFLAG_RESETVALUE _U_(0x00)

#define SERCOM_SPI_INTFLAG_DRE_Pos 0
#define SERCOM_SPI_INTFLAG_DRE (_U_(0x1) << SERCOM_SPI_INTFLAG_DRE_Pos)
#define SERCOM_SPI_INTFLAG_TXC_Pos 1
#define SERCOM_SPI_INTFLAG_TXC (_U_(0x1) << SERCOM_SPI_INTFLAG_TXC_Pos)
#define SERCOM_SPI_INTFLAG_RXC_Pos 2
#define SERCOM_SPI_INTFLAG_RXC (_U_(0x1) << SERCOM_SPI_INTFLAG_RXC_Pos)
#define SERCOM_SPI_INTFLAG_SSL_Pos 3
#define SERCOM_SPI_INTFLAG_SSL (_U_(0x1) << SERCOM_SPI_INTFLAG_SSL_Pos)
#define SERCOM_SPI_INTFLAG_ERROR_Pos 7
#define SERCOM_SPI_INTFLAG_ERROR (_U_(0x1) << SERCOM_SPI_INTFLAG_ERROR_Pos)
#define SERCOM_SPI_INTFLAG_MASK _U_(0x8F)



typedef union {
  struct {
    volatile const uint8_t DRE:1;
    volatile const uint8_t TXC:1;
    volatile const uint8_t RXC:1;
    volatile const uint8_t RXS:1;
    volatile const uint8_t CTSIC:1;
    volatile const uint8_t RXBRK:1;
    volatile const uint8_t :1;
    volatile const uint8_t ERROR:1;
  } bit;
  uint8_t reg;
} SERCOM_USART_INTFLAG_Type;


#define SERCOM_USART_INTFLAG_OFFSET 0x18
#define SERCOM_USART_INTFLAG_RESETVALUE _U_(0x00)

#define SERCOM_USART_INTFLAG_DRE_Pos 0
#define SERCOM_USART_INTFLAG_DRE (_U_(0x1) << SERCOM_USART_INTFLAG_DRE_Pos)
#define SERCOM_USART_INTFLAG_TXC_Pos 1
#define SERCOM_USART_INTFLAG_TXC (_U_(0x1) << SERCOM_USART_INTFLAG_TXC_Pos)
#define SERCOM_USART_INTFLAG_RXC_Pos 2
#define SERCOM_USART_INTFLAG_RXC (_U_(0x1) << SERCOM_USART_INTFLAG_RXC_Pos)
#define SERCOM_USART_INTFLAG_RXS_Pos 3
#define SERCOM_USART_INTFLAG_RXS (_U_(0x1) << SERCOM_USART_INTFLAG_RXS_Pos)
#define SERCOM_USART_INTFLAG_CTSIC_Pos 4
#define SERCOM_USART_INTFLAG_CTSIC (_U_(0x1) << SERCOM_USART_INTFLAG_CTSIC_Pos)
#define SERCOM_USART_INTFLAG_RXBRK_Pos 5
#define SERCOM_USART_INTFLAG_RXBRK (_U_(0x1) << SERCOM_USART_INTFLAG_RXBRK_Pos)
#define SERCOM_USART_INTFLAG_ERROR_Pos 7
#define SERCOM_USART_INTFLAG_ERROR (_U_(0x1) << SERCOM_USART_INTFLAG_ERROR_Pos)
#define SERCOM_USART_INTFLAG_MASK _U_(0xBF)



typedef union {
  struct {
    uint16_t BUSERR:1;
    uint16_t ARBLOST:1;
    uint16_t RXNACK:1;
    uint16_t :1;
    uint16_t BUSSTATE:2;
    uint16_t LOWTOUT:1;
    uint16_t CLKHOLD:1;
    uint16_t MEXTTOUT:1;
    uint16_t SEXTTOUT:1;
    uint16_t LENERR:1;
    uint16_t :5;
  } bit;
  uint16_t reg;
} SERCOM_I2CM_STATUS_Type;


#define SERCOM_I2CM_STATUS_OFFSET 0x1A
#define SERCOM_I2CM_STATUS_RESETVALUE _U_(0x0000)

#define SERCOM_I2CM_STATUS_BUSERR_Pos 0
#define SERCOM_I2CM_STATUS_BUSERR (_U_(0x1) << SERCOM_I2CM_STATUS_BUSERR_Pos)
#define SERCOM_I2CM_STATUS_ARBLOST_Pos 1
#define SERCOM_I2CM_STATUS_ARBLOST (_U_(0x1) << SERCOM_I2CM_STATUS_ARBLOST_Pos)
#define SERCOM_I2CM_STATUS_RXNACK_Pos 2
#define SERCOM_I2CM_STATUS_RXNACK (_U_(0x1) << SERCOM_I2CM_STATUS_RXNACK_Pos)
#define SERCOM_I2CM_STATUS_BUSSTATE_Pos 4
#define SERCOM_I2CM_STATUS_BUSSTATE_Msk (_U_(0x3) << SERCOM_I2CM_STATUS_BUSSTATE_Pos)
#define SERCOM_I2CM_STATUS_BUSSTATE(value) (SERCOM_I2CM_STATUS_BUSSTATE_Msk & ((value) << SERCOM_I2CM_STATUS_BUSSTATE_Pos))
#define SERCOM_I2CM_STATUS_LOWTOUT_Pos 6
#define SERCOM_I2CM_STATUS_LOWTOUT (_U_(0x1) << SERCOM_I2CM_STATUS_LOWTOUT_Pos)
#define SERCOM_I2CM_STATUS_CLKHOLD_Pos 7
#define SERCOM_I2CM_STATUS_CLKHOLD (_U_(0x1) << SERCOM_I2CM_STATUS_CLKHOLD_Pos)
#define SERCOM_I2CM_STATUS_MEXTTOUT_Pos 8
#define SERCOM_I2CM_STATUS_MEXTTOUT (_U_(0x1) << SERCOM_I2CM_STATUS_MEXTTOUT_Pos)
#define SERCOM_I2CM_STATUS_SEXTTOUT_Pos 9
#define SERCOM_I2CM_STATUS_SEXTTOUT (_U_(0x1) << SERCOM_I2CM_STATUS_SEXTTOUT_Pos)
#define SERCOM_I2CM_STATUS_LENERR_Pos 10
#define SERCOM_I2CM_STATUS_LENERR (_U_(0x1) << SERCOM_I2CM_STATUS_LENERR_Pos)
#define SERCOM_I2CM_STATUS_MASK _U_(0x07F7)



typedef union {
  struct {
    uint16_t BUSERR:1;
    uint16_t COLL:1;
    uint16_t RXNACK:1;
    uint16_t DIR:1;
    uint16_t SR:1;
    uint16_t :1;
    uint16_t LOWTOUT:1;
    uint16_t CLKHOLD:1;
    uint16_t :1;
    uint16_t SEXTTOUT:1;
    uint16_t HS:1;
    uint16_t LENERR:1;
    uint16_t :4;
  } bit;
  uint16_t reg;
} SERCOM_I2CS_STATUS_Type;


#define SERCOM_I2CS_STATUS_OFFSET 0x1A
#define SERCOM_I2CS_STATUS_RESETVALUE _U_(0x0000)

#define SERCOM_I2CS_STATUS_BUSERR_Pos 0
#define SERCOM_I2CS_STATUS_BUSERR (_U_(0x1) << SERCOM_I2CS_STATUS_BUSERR_Pos)
#define SERCOM_I2CS_STATUS_COLL_Pos 1
#define SERCOM_I2CS_STATUS_COLL (_U_(0x1) << SERCOM_I2CS_STATUS_COLL_Pos)
#define SERCOM_I2CS_STATUS_RXNACK_Pos 2
#define SERCOM_I2CS_STATUS_RXNACK (_U_(0x1) << SERCOM_I2CS_STATUS_RXNACK_Pos)
#define SERCOM_I2CS_STATUS_DIR_Pos 3
#define SERCOM_I2CS_STATUS_DIR (_U_(0x1) << SERCOM_I2CS_STATUS_DIR_Pos)
#define SERCOM_I2CS_STATUS_SR_Pos 4
#define SERCOM_I2CS_STATUS_SR (_U_(0x1) << SERCOM_I2CS_STATUS_SR_Pos)
#define SERCOM_I2CS_STATUS_LOWTOUT_Pos 6
#define SERCOM_I2CS_STATUS_LOWTOUT (_U_(0x1) << SERCOM_I2CS_STATUS_LOWTOUT_Pos)
#define SERCOM_I2CS_STATUS_CLKHOLD_Pos 7
#define SERCOM_I2CS_STATUS_CLKHOLD (_U_(0x1) << SERCOM_I2CS_STATUS_CLKHOLD_Pos)
#define SERCOM_I2CS_STATUS_SEXTTOUT_Pos 9
#define SERCOM_I2CS_STATUS_SEXTTOUT (_U_(0x1) << SERCOM_I2CS_STATUS_SEXTTOUT_Pos)
#define SERCOM_I2CS_STATUS_HS_Pos 10
#define SERCOM_I2CS_STATUS_HS (_U_(0x1) << SERCOM_I2CS_STATUS_HS_Pos)
#define SERCOM_I2CS_STATUS_LENERR_Pos 11
#define SERCOM_I2CS_STATUS_LENERR (_U_(0x1) << SERCOM_I2CS_STATUS_LENERR_Pos)
#define SERCOM_I2CS_STATUS_MASK _U_(0x0EDF)



typedef union {
  struct {
    uint16_t :2;
    uint16_t BUFOVF:1;
    uint16_t :8;
    uint16_t LENERR:1;
    uint16_t :4;
  } bit;
  uint16_t reg;
} SERCOM_SPI_STATUS_Type;


#define SERCOM_SPI_STATUS_OFFSET 0x1A
#define SERCOM_SPI_STATUS_RESETVALUE _U_(0x0000)

#define SERCOM_SPI_STATUS_BUFOVF_Pos 2
#define SERCOM_SPI_STATUS_BUFOVF (_U_(0x1) << SERCOM_SPI_STATUS_BUFOVF_Pos)
#define SERCOM_SPI_STATUS_LENERR_Pos 11
#define SERCOM_SPI_STATUS_LENERR (_U_(0x1) << SERCOM_SPI_STATUS_LENERR_Pos)
#define SERCOM_SPI_STATUS_MASK _U_(0x0804)



typedef union {
  struct {
    uint16_t PERR:1;
    uint16_t FERR:1;
    uint16_t BUFOVF:1;
    uint16_t CTS:1;
    uint16_t ISF:1;
    uint16_t COLL:1;
    uint16_t TXE:1;
    uint16_t ITER:1;
    uint16_t :8;
  } bit;
  uint16_t reg;
} SERCOM_USART_STATUS_Type;


#define SERCOM_USART_STATUS_OFFSET 0x1A
#define SERCOM_USART_STATUS_RESETVALUE _U_(0x0000)

#define SERCOM_USART_STATUS_PERR_Pos 0
#define SERCOM_USART_STATUS_PERR (_U_(0x1) << SERCOM_USART_STATUS_PERR_Pos)
#define SERCOM_USART_STATUS_FERR_Pos 1
#define SERCOM_USART_STATUS_FERR (_U_(0x1) << SERCOM_USART_STATUS_FERR_Pos)
#define SERCOM_USART_STATUS_BUFOVF_Pos 2
#define SERCOM_USART_STATUS_BUFOVF (_U_(0x1) << SERCOM_USART_STATUS_BUFOVF_Pos)
#define SERCOM_USART_STATUS_CTS_Pos 3
#define SERCOM_USART_STATUS_CTS (_U_(0x1) << SERCOM_USART_STATUS_CTS_Pos)
#define SERCOM_USART_STATUS_ISF_Pos 4
#define SERCOM_USART_STATUS_ISF (_U_(0x1) << SERCOM_USART_STATUS_ISF_Pos)
#define SERCOM_USART_STATUS_COLL_Pos 5
#define SERCOM_USART_STATUS_COLL (_U_(0x1) << SERCOM_USART_STATUS_COLL_Pos)
#define SERCOM_USART_STATUS_TXE_Pos 6
#define SERCOM_USART_STATUS_TXE (_U_(0x1) << SERCOM_USART_STATUS_TXE_Pos)
#define SERCOM_USART_STATUS_ITER_Pos 7
#define SERCOM_USART_STATUS_ITER (_U_(0x1) << SERCOM_USART_STATUS_ITER_Pos)
#define SERCOM_USART_STATUS_MASK _U_(0x00FF)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t SYSOP:1;
    uint32_t :1;
    uint32_t LENGTH:1;
    uint32_t :27;
  } bit;
  uint32_t reg;
} SERCOM_I2CM_SYNCBUSY_Type;


#define SERCOM_I2CM_SYNCBUSY_OFFSET 0x1C
#define SERCOM_I2CM_SYNCBUSY_RESETVALUE _U_(0x00000000)

#define SERCOM_I2CM_SYNCBUSY_SWRST_Pos 0
#define SERCOM_I2CM_SYNCBUSY_SWRST (_U_(0x1) << SERCOM_I2CM_SYNCBUSY_SWRST_Pos)
#define SERCOM_I2CM_SYNCBUSY_ENABLE_Pos 1
#define SERCOM_I2CM_SYNCBUSY_ENABLE (_U_(0x1) << SERCOM_I2CM_SYNCBUSY_ENABLE_Pos)
#define SERCOM_I2CM_SYNCBUSY_SYSOP_Pos 2
#define SERCOM_I2CM_SYNCBUSY_SYSOP (_U_(0x1) << SERCOM_I2CM_SYNCBUSY_SYSOP_Pos)
#define SERCOM_I2CM_SYNCBUSY_LENGTH_Pos 4
#define SERCOM_I2CM_SYNCBUSY_LENGTH (_U_(0x1) << SERCOM_I2CM_SYNCBUSY_LENGTH_Pos)
#define SERCOM_I2CM_SYNCBUSY_MASK _U_(0x00000017)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t :2;
    uint32_t LENGTH:1;
    uint32_t :27;
  } bit;
  uint32_t reg;
} SERCOM_I2CS_SYNCBUSY_Type;


#define SERCOM_I2CS_SYNCBUSY_OFFSET 0x1C
#define SERCOM_I2CS_SYNCBUSY_RESETVALUE _U_(0x00000000)

#define SERCOM_I2CS_SYNCBUSY_SWRST_Pos 0
#define SERCOM_I2CS_SYNCBUSY_SWRST (_U_(0x1) << SERCOM_I2CS_SYNCBUSY_SWRST_Pos)
#define SERCOM_I2CS_SYNCBUSY_ENABLE_Pos 1
#define SERCOM_I2CS_SYNCBUSY_ENABLE (_U_(0x1) << SERCOM_I2CS_SYNCBUSY_ENABLE_Pos)
#define SERCOM_I2CS_SYNCBUSY_LENGTH_Pos 4
#define SERCOM_I2CS_SYNCBUSY_LENGTH (_U_(0x1) << SERCOM_I2CS_SYNCBUSY_LENGTH_Pos)
#define SERCOM_I2CS_SYNCBUSY_MASK _U_(0x00000013)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t CTRLB:1;
    uint32_t :1;
    uint32_t LENGTH:1;
    uint32_t :27;
  } bit;
  uint32_t reg;
} SERCOM_SPI_SYNCBUSY_Type;


#define SERCOM_SPI_SYNCBUSY_OFFSET 0x1C
#define SERCOM_SPI_SYNCBUSY_RESETVALUE _U_(0x00000000)

#define SERCOM_SPI_SYNCBUSY_SWRST_Pos 0
#define SERCOM_SPI_SYNCBUSY_SWRST (_U_(0x1) << SERCOM_SPI_SYNCBUSY_SWRST_Pos)
#define SERCOM_SPI_SYNCBUSY_ENABLE_Pos 1
#define SERCOM_SPI_SYNCBUSY_ENABLE (_U_(0x1) << SERCOM_SPI_SYNCBUSY_ENABLE_Pos)
#define SERCOM_SPI_SYNCBUSY_CTRLB_Pos 2
#define SERCOM_SPI_SYNCBUSY_CTRLB (_U_(0x1) << SERCOM_SPI_SYNCBUSY_CTRLB_Pos)
#define SERCOM_SPI_SYNCBUSY_LENGTH_Pos 4
#define SERCOM_SPI_SYNCBUSY_LENGTH (_U_(0x1) << SERCOM_SPI_SYNCBUSY_LENGTH_Pos)
#define SERCOM_SPI_SYNCBUSY_MASK _U_(0x00000017)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t CTRLB:1;
    uint32_t RXERRCNT:1;
    uint32_t LENGTH:1;
    uint32_t :27;
  } bit;
  uint32_t reg;
} SERCOM_USART_SYNCBUSY_Type;


#define SERCOM_USART_SYNCBUSY_OFFSET 0x1C
#define SERCOM_USART_SYNCBUSY_RESETVALUE _U_(0x00000000)

#define SERCOM_USART_SYNCBUSY_SWRST_Pos 0
#define SERCOM_USART_SYNCBUSY_SWRST (_U_(0x1) << SERCOM_USART_SYNCBUSY_SWRST_Pos)
#define SERCOM_USART_SYNCBUSY_ENABLE_Pos 1
#define SERCOM_USART_SYNCBUSY_ENABLE (_U_(0x1) << SERCOM_USART_SYNCBUSY_ENABLE_Pos)
#define SERCOM_USART_SYNCBUSY_CTRLB_Pos 2
#define SERCOM_USART_SYNCBUSY_CTRLB (_U_(0x1) << SERCOM_USART_SYNCBUSY_CTRLB_Pos)
#define SERCOM_USART_SYNCBUSY_RXERRCNT_Pos 3
#define SERCOM_USART_SYNCBUSY_RXERRCNT (_U_(0x1) << SERCOM_USART_SYNCBUSY_RXERRCNT_Pos)
#define SERCOM_USART_SYNCBUSY_LENGTH_Pos 4
#define SERCOM_USART_SYNCBUSY_LENGTH (_U_(0x1) << SERCOM_USART_SYNCBUSY_LENGTH_Pos)
#define SERCOM_USART_SYNCBUSY_MASK _U_(0x0000001F)



typedef union {
  uint8_t reg;
} SERCOM_USART_RXERRCNT_Type;


#define SERCOM_USART_RXERRCNT_OFFSET 0x20
#define SERCOM_USART_RXERRCNT_RESETVALUE _U_(0x00)
#define SERCOM_USART_RXERRCNT_MASK _U_(0xFF)



typedef union {
  struct {
    uint16_t LEN:8;
    uint16_t LENEN:1;
    uint16_t :7;
  } bit;
  uint16_t reg;
} SERCOM_I2CS_LENGTH_Type;


#define SERCOM_I2CS_LENGTH_OFFSET 0x22
#define SERCOM_I2CS_LENGTH_RESETVALUE _U_(0x0000)

#define SERCOM_I2CS_LENGTH_LEN_Pos 0
#define SERCOM_I2CS_LENGTH_LEN_Msk (_U_(0xFF) << SERCOM_I2CS_LENGTH_LEN_Pos)
#define SERCOM_I2CS_LENGTH_LEN(value) (SERCOM_I2CS_LENGTH_LEN_Msk & ((value) << SERCOM_I2CS_LENGTH_LEN_Pos))
#define SERCOM_I2CS_LENGTH_LENEN_Pos 8
#define SERCOM_I2CS_LENGTH_LENEN (_U_(0x1) << SERCOM_I2CS_LENGTH_LENEN_Pos)
#define SERCOM_I2CS_LENGTH_MASK _U_(0x01FF)



typedef union {
  struct {
    uint16_t LEN:8;
    uint16_t LENEN:1;
    uint16_t :7;
  } bit;
  uint16_t reg;
} SERCOM_SPI_LENGTH_Type;


#define SERCOM_SPI_LENGTH_OFFSET 0x22
#define SERCOM_SPI_LENGTH_RESETVALUE _U_(0x0000)

#define SERCOM_SPI_LENGTH_LEN_Pos 0
#define SERCOM_SPI_LENGTH_LEN_Msk (_U_(0xFF) << SERCOM_SPI_LENGTH_LEN_Pos)
#define SERCOM_SPI_LENGTH_LEN(value) (SERCOM_SPI_LENGTH_LEN_Msk & ((value) << SERCOM_SPI_LENGTH_LEN_Pos))
#define SERCOM_SPI_LENGTH_LENEN_Pos 8
#define SERCOM_SPI_LENGTH_LENEN (_U_(0x1) << SERCOM_SPI_LENGTH_LENEN_Pos)
#define SERCOM_SPI_LENGTH_MASK _U_(0x01FF)



typedef union {
  struct {
    uint16_t LEN:8;
    uint16_t LENEN:2;
    uint16_t :6;
  } bit;
  uint16_t reg;
} SERCOM_USART_LENGTH_Type;


#define SERCOM_USART_LENGTH_OFFSET 0x22
#define SERCOM_USART_LENGTH_RESETVALUE _U_(0x0000)

#define SERCOM_USART_LENGTH_LEN_Pos 0
#define SERCOM_USART_LENGTH_LEN_Msk (_U_(0xFF) << SERCOM_USART_LENGTH_LEN_Pos)
#define SERCOM_USART_LENGTH_LEN(value) (SERCOM_USART_LENGTH_LEN_Msk & ((value) << SERCOM_USART_LENGTH_LEN_Pos))
#define SERCOM_USART_LENGTH_LENEN_Pos 8
#define SERCOM_USART_LENGTH_LENEN_Msk (_U_(0x3) << SERCOM_USART_LENGTH_LENEN_Pos)
#define SERCOM_USART_LENGTH_LENEN(value) (SERCOM_USART_LENGTH_LENEN_Msk & ((value) << SERCOM_USART_LENGTH_LENEN_Pos))
#define SERCOM_USART_LENGTH_MASK _U_(0x03FF)



typedef union {
  struct {
    uint32_t ADDR:11;
    uint32_t :2;
    uint32_t LENEN:1;
    uint32_t HS:1;
    uint32_t TENBITEN:1;
    uint32_t LEN:8;
    uint32_t :8;
  } bit;
  uint32_t reg;
} SERCOM_I2CM_ADDR_Type;


#define SERCOM_I2CM_ADDR_OFFSET 0x24
#define SERCOM_I2CM_ADDR_RESETVALUE _U_(0x00000000)

#define SERCOM_I2CM_ADDR_ADDR_Pos 0
#define SERCOM_I2CM_ADDR_ADDR_Msk (_U_(0x7FF) << SERCOM_I2CM_ADDR_ADDR_Pos)
#define SERCOM_I2CM_ADDR_ADDR(value) (SERCOM_I2CM_ADDR_ADDR_Msk & ((value) << SERCOM_I2CM_ADDR_ADDR_Pos))
#define SERCOM_I2CM_ADDR_LENEN_Pos 13
#define SERCOM_I2CM_ADDR_LENEN (_U_(0x1) << SERCOM_I2CM_ADDR_LENEN_Pos)
#define SERCOM_I2CM_ADDR_HS_Pos 14
#define SERCOM_I2CM_ADDR_HS (_U_(0x1) << SERCOM_I2CM_ADDR_HS_Pos)
#define SERCOM_I2CM_ADDR_TENBITEN_Pos 15
#define SERCOM_I2CM_ADDR_TENBITEN (_U_(0x1) << SERCOM_I2CM_ADDR_TENBITEN_Pos)
#define SERCOM_I2CM_ADDR_LEN_Pos 16
#define SERCOM_I2CM_ADDR_LEN_Msk (_U_(0xFF) << SERCOM_I2CM_ADDR_LEN_Pos)
#define SERCOM_I2CM_ADDR_LEN(value) (SERCOM_I2CM_ADDR_LEN_Msk & ((value) << SERCOM_I2CM_ADDR_LEN_Pos))
#define SERCOM_I2CM_ADDR_MASK _U_(0x00FFE7FF)



typedef union {
  struct {
    uint32_t GENCEN:1;
    uint32_t ADDR:10;
    uint32_t :4;
    uint32_t TENBITEN:1;
    uint32_t :1;
    uint32_t ADDRMASK:10;
    uint32_t :5;
  } bit;
  uint32_t reg;
} SERCOM_I2CS_ADDR_Type;


#define SERCOM_I2CS_ADDR_OFFSET 0x24
#define SERCOM_I2CS_ADDR_RESETVALUE _U_(0x00000000)

#define SERCOM_I2CS_ADDR_GENCEN_Pos 0
#define SERCOM_I2CS_ADDR_GENCEN (_U_(0x1) << SERCOM_I2CS_ADDR_GENCEN_Pos)
#define SERCOM_I2CS_ADDR_ADDR_Pos 1
#define SERCOM_I2CS_ADDR_ADDR_Msk (_U_(0x3FF) << SERCOM_I2CS_ADDR_ADDR_Pos)
#define SERCOM_I2CS_ADDR_ADDR(value) (SERCOM_I2CS_ADDR_ADDR_Msk & ((value) << SERCOM_I2CS_ADDR_ADDR_Pos))
#define SERCOM_I2CS_ADDR_TENBITEN_Pos 15
#define SERCOM_I2CS_ADDR_TENBITEN (_U_(0x1) << SERCOM_I2CS_ADDR_TENBITEN_Pos)
#define SERCOM_I2CS_ADDR_ADDRMASK_Pos 17
#define SERCOM_I2CS_ADDR_ADDRMASK_Msk (_U_(0x3FF) << SERCOM_I2CS_ADDR_ADDRMASK_Pos)
#define SERCOM_I2CS_ADDR_ADDRMASK(value) (SERCOM_I2CS_ADDR_ADDRMASK_Msk & ((value) << SERCOM_I2CS_ADDR_ADDRMASK_Pos))
#define SERCOM_I2CS_ADDR_MASK _U_(0x07FE87FF)



typedef union {
  struct {
    uint32_t ADDR:8;
    uint32_t :8;
    uint32_t ADDRMASK:8;
    uint32_t :8;
  } bit;
  uint32_t reg;
} SERCOM_SPI_ADDR_Type;


#define SERCOM_SPI_ADDR_OFFSET 0x24
#define SERCOM_SPI_ADDR_RESETVALUE _U_(0x00000000)

#define SERCOM_SPI_ADDR_ADDR_Pos 0
#define SERCOM_SPI_ADDR_ADDR_Msk (_U_(0xFF) << SERCOM_SPI_ADDR_ADDR_Pos)
#define SERCOM_SPI_ADDR_ADDR(value) (SERCOM_SPI_ADDR_ADDR_Msk & ((value) << SERCOM_SPI_ADDR_ADDR_Pos))
#define SERCOM_SPI_ADDR_ADDRMASK_Pos 16
#define SERCOM_SPI_ADDR_ADDRMASK_Msk (_U_(0xFF) << SERCOM_SPI_ADDR_ADDRMASK_Pos)
#define SERCOM_SPI_ADDR_ADDRMASK(value) (SERCOM_SPI_ADDR_ADDRMASK_Msk & ((value) << SERCOM_SPI_ADDR_ADDRMASK_Pos))
#define SERCOM_SPI_ADDR_MASK _U_(0x00FF00FF)



typedef union {
  struct {
    uint32_t DATA:32;
  } bit;
  uint32_t reg;
} SERCOM_I2CM_DATA_Type;


#define SERCOM_I2CM_DATA_OFFSET 0x28
#define SERCOM_I2CM_DATA_RESETVALUE _U_(0x00000000)

#define SERCOM_I2CM_DATA_DATA_Pos 0
#define SERCOM_I2CM_DATA_DATA_Msk (_U_(0xFFFFFFFF) << SERCOM_I2CM_DATA_DATA_Pos)
#define SERCOM_I2CM_DATA_DATA(value) (SERCOM_I2CM_DATA_DATA_Msk & ((value) << SERCOM_I2CM_DATA_DATA_Pos))
#define SERCOM_I2CM_DATA_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t DATA:32;
  } bit;
  uint32_t reg;
} SERCOM_I2CS_DATA_Type;


#define SERCOM_I2CS_DATA_OFFSET 0x28
#define SERCOM_I2CS_DATA_RESETVALUE _U_(0x00000000)

#define SERCOM_I2CS_DATA_DATA_Pos 0
#define SERCOM_I2CS_DATA_DATA_Msk (_U_(0xFFFFFFFF) << SERCOM_I2CS_DATA_DATA_Pos)
#define SERCOM_I2CS_DATA_DATA(value) (SERCOM_I2CS_DATA_DATA_Msk & ((value) << SERCOM_I2CS_DATA_DATA_Pos))
#define SERCOM_I2CS_DATA_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t DATA:32;
  } bit;
  uint32_t reg;
} SERCOM_SPI_DATA_Type;


#define SERCOM_SPI_DATA_OFFSET 0x28
#define SERCOM_SPI_DATA_RESETVALUE _U_(0x00000000)

#define SERCOM_SPI_DATA_DATA_Pos 0
#define SERCOM_SPI_DATA_DATA_Msk (_U_(0xFFFFFFFF) << SERCOM_SPI_DATA_DATA_Pos)
#define SERCOM_SPI_DATA_DATA(value) (SERCOM_SPI_DATA_DATA_Msk & ((value) << SERCOM_SPI_DATA_DATA_Pos))
#define SERCOM_SPI_DATA_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t DATA:32;
  } bit;
  uint32_t reg;
} SERCOM_USART_DATA_Type;


#define SERCOM_USART_DATA_OFFSET 0x28
#define SERCOM_USART_DATA_RESETVALUE _U_(0x00000000)

#define SERCOM_USART_DATA_DATA_Pos 0
#define SERCOM_USART_DATA_DATA_Msk (_U_(0xFFFFFFFF) << SERCOM_USART_DATA_DATA_Pos)
#define SERCOM_USART_DATA_DATA(value) (SERCOM_USART_DATA_DATA_Msk & ((value) << SERCOM_USART_DATA_DATA_Pos))
#define SERCOM_USART_DATA_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint8_t DBGSTOP:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} SERCOM_I2CM_DBGCTRL_Type;


#define SERCOM_I2CM_DBGCTRL_OFFSET 0x30
#define SERCOM_I2CM_DBGCTRL_RESETVALUE _U_(0x00)

#define SERCOM_I2CM_DBGCTRL_DBGSTOP_Pos 0
#define SERCOM_I2CM_DBGCTRL_DBGSTOP (_U_(0x1) << SERCOM_I2CM_DBGCTRL_DBGSTOP_Pos)
#define SERCOM_I2CM_DBGCTRL_MASK _U_(0x01)



typedef union {
  struct {
    uint8_t DBGSTOP:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} SERCOM_SPI_DBGCTRL_Type;


#define SERCOM_SPI_DBGCTRL_OFFSET 0x30
#define SERCOM_SPI_DBGCTRL_RESETVALUE _U_(0x00)

#define SERCOM_SPI_DBGCTRL_DBGSTOP_Pos 0
#define SERCOM_SPI_DBGCTRL_DBGSTOP (_U_(0x1) << SERCOM_SPI_DBGCTRL_DBGSTOP_Pos)
#define SERCOM_SPI_DBGCTRL_MASK _U_(0x01)



typedef union {
  struct {
    uint8_t DBGSTOP:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} SERCOM_USART_DBGCTRL_Type;


#define SERCOM_USART_DBGCTRL_OFFSET 0x30
#define SERCOM_USART_DBGCTRL_RESETVALUE _U_(0x00)

#define SERCOM_USART_DBGCTRL_DBGSTOP_Pos 0
#define SERCOM_USART_DBGCTRL_DBGSTOP (_U_(0x1) << SERCOM_USART_DBGCTRL_DBGSTOP_Pos)
#define SERCOM_USART_DBGCTRL_MASK _U_(0x01)



typedef struct {
  volatile SERCOM_I2CM_CTRLA_Type CTRLA;
  volatile SERCOM_I2CM_CTRLB_Type CTRLB;
  volatile SERCOM_I2CM_CTRLC_Type CTRLC;
  volatile SERCOM_I2CM_BAUD_Type BAUD;
       RoReg8 Reserved1[0x4];
  volatile SERCOM_I2CM_INTENCLR_Type INTENCLR;
       RoReg8 Reserved2[0x1];
  volatile SERCOM_I2CM_INTENSET_Type INTENSET;
       RoReg8 Reserved3[0x1];
  volatile SERCOM_I2CM_INTFLAG_Type INTFLAG;
       RoReg8 Reserved4[0x1];
  volatile SERCOM_I2CM_STATUS_Type STATUS;
  volatile const SERCOM_I2CM_SYNCBUSY_Type SYNCBUSY;
       RoReg8 Reserved5[0x4];
  volatile SERCOM_I2CM_ADDR_Type ADDR;
  volatile SERCOM_I2CM_DATA_Type DATA;
       RoReg8 Reserved6[0x4];
  volatile SERCOM_I2CM_DBGCTRL_Type DBGCTRL;
} SercomI2cm;




typedef struct {
  volatile SERCOM_I2CS_CTRLA_Type CTRLA;
  volatile SERCOM_I2CS_CTRLB_Type CTRLB;
  volatile SERCOM_I2CS_CTRLC_Type CTRLC;
       RoReg8 Reserved1[0x8];
  volatile SERCOM_I2CS_INTENCLR_Type INTENCLR;
       RoReg8 Reserved2[0x1];
  volatile SERCOM_I2CS_INTENSET_Type INTENSET;
       RoReg8 Reserved3[0x1];
  volatile SERCOM_I2CS_INTFLAG_Type INTFLAG;
       RoReg8 Reserved4[0x1];
  volatile SERCOM_I2CS_STATUS_Type STATUS;
  volatile const SERCOM_I2CS_SYNCBUSY_Type SYNCBUSY;
       RoReg8 Reserved5[0x2];
  volatile SERCOM_I2CS_LENGTH_Type LENGTH;
  volatile SERCOM_I2CS_ADDR_Type ADDR;
  volatile SERCOM_I2CS_DATA_Type DATA;
} SercomI2cs;




typedef struct {
  volatile SERCOM_SPI_CTRLA_Type CTRLA;
  volatile SERCOM_SPI_CTRLB_Type CTRLB;
  volatile SERCOM_SPI_CTRLC_Type CTRLC;
  volatile SERCOM_SPI_BAUD_Type BAUD;
       RoReg8 Reserved1[0x7];
  volatile SERCOM_SPI_INTENCLR_Type INTENCLR;
       RoReg8 Reserved2[0x1];
  volatile SERCOM_SPI_INTENSET_Type INTENSET;
       RoReg8 Reserved3[0x1];
  volatile SERCOM_SPI_INTFLAG_Type INTFLAG;
       RoReg8 Reserved4[0x1];
  volatile SERCOM_SPI_STATUS_Type STATUS;
  volatile const SERCOM_SPI_SYNCBUSY_Type SYNCBUSY;
       RoReg8 Reserved5[0x2];
  volatile SERCOM_SPI_LENGTH_Type LENGTH;
  volatile SERCOM_SPI_ADDR_Type ADDR;
  volatile SERCOM_SPI_DATA_Type DATA;
       RoReg8 Reserved6[0x4];
  volatile SERCOM_SPI_DBGCTRL_Type DBGCTRL;
} SercomSpi;




typedef struct {
  volatile SERCOM_USART_CTRLA_Type CTRLA;
  volatile SERCOM_USART_CTRLB_Type CTRLB;
  volatile SERCOM_USART_CTRLC_Type CTRLC;
  volatile SERCOM_USART_BAUD_Type BAUD;
  volatile SERCOM_USART_RXPL_Type RXPL;
       RoReg8 Reserved1[0x5];
  volatile SERCOM_USART_INTENCLR_Type INTENCLR;
       RoReg8 Reserved2[0x1];
  volatile SERCOM_USART_INTENSET_Type INTENSET;
       RoReg8 Reserved3[0x1];
  volatile SERCOM_USART_INTFLAG_Type INTFLAG;
       RoReg8 Reserved4[0x1];
  volatile SERCOM_USART_STATUS_Type STATUS;
  volatile const SERCOM_USART_SYNCBUSY_Type SYNCBUSY;
  volatile const SERCOM_USART_RXERRCNT_Type RXERRCNT;
       RoReg8 Reserved5[0x1];
  volatile SERCOM_USART_LENGTH_Type LENGTH;
       RoReg8 Reserved6[0x4];
  volatile SERCOM_USART_DATA_Type DATA;
       RoReg8 Reserved7[0x4];
  volatile SERCOM_USART_DBGCTRL_Type DBGCTRL;
} SercomUsart;



typedef union {
       SercomI2cm I2CM;
       SercomI2cs I2CS;
       SercomSpi SPI;
       SercomUsart USART;
} Sercom;
# 611 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/supc.h" 1
# 31 "asf4/samd51/include/component/supc.h"
#define _SAMD51_SUPC_COMPONENT_ 







#define SUPC_U2407 
#define REV_SUPC 0x100



typedef union {
  struct {
    uint32_t BOD33RDY:1;
    uint32_t BOD33DET:1;
    uint32_t B33SRDY:1;
    uint32_t BOD12RDY:1;
    uint32_t BOD12DET:1;
    uint32_t B12SRDY:1;
    uint32_t :2;
    uint32_t VREGRDY:1;
    uint32_t :1;
    uint32_t VCORERDY:1;
    uint32_t :21;
  } bit;
  uint32_t reg;
} SUPC_INTENCLR_Type;


#define SUPC_INTENCLR_OFFSET 0x00
#define SUPC_INTENCLR_RESETVALUE _U_(0x00000000)

#define SUPC_INTENCLR_BOD33RDY_Pos 0
#define SUPC_INTENCLR_BOD33RDY (_U_(0x1) << SUPC_INTENCLR_BOD33RDY_Pos)
#define SUPC_INTENCLR_BOD33DET_Pos 1
#define SUPC_INTENCLR_BOD33DET (_U_(0x1) << SUPC_INTENCLR_BOD33DET_Pos)
#define SUPC_INTENCLR_B33SRDY_Pos 2
#define SUPC_INTENCLR_B33SRDY (_U_(0x1) << SUPC_INTENCLR_B33SRDY_Pos)
#define SUPC_INTENCLR_BOD12RDY_Pos 3
#define SUPC_INTENCLR_BOD12RDY (_U_(0x1) << SUPC_INTENCLR_BOD12RDY_Pos)
#define SUPC_INTENCLR_BOD12DET_Pos 4
#define SUPC_INTENCLR_BOD12DET (_U_(0x1) << SUPC_INTENCLR_BOD12DET_Pos)
#define SUPC_INTENCLR_B12SRDY_Pos 5
#define SUPC_INTENCLR_B12SRDY (_U_(0x1) << SUPC_INTENCLR_B12SRDY_Pos)
#define SUPC_INTENCLR_VREGRDY_Pos 8
#define SUPC_INTENCLR_VREGRDY (_U_(0x1) << SUPC_INTENCLR_VREGRDY_Pos)
#define SUPC_INTENCLR_VCORERDY_Pos 10
#define SUPC_INTENCLR_VCORERDY (_U_(0x1) << SUPC_INTENCLR_VCORERDY_Pos)
#define SUPC_INTENCLR_MASK _U_(0x0000053F)



typedef union {
  struct {
    uint32_t BOD33RDY:1;
    uint32_t BOD33DET:1;
    uint32_t B33SRDY:1;
    uint32_t BOD12RDY:1;
    uint32_t BOD12DET:1;
    uint32_t B12SRDY:1;
    uint32_t :2;
    uint32_t VREGRDY:1;
    uint32_t :1;
    uint32_t VCORERDY:1;
    uint32_t :21;
  } bit;
  uint32_t reg;
} SUPC_INTENSET_Type;


#define SUPC_INTENSET_OFFSET 0x04
#define SUPC_INTENSET_RESETVALUE _U_(0x00000000)

#define SUPC_INTENSET_BOD33RDY_Pos 0
#define SUPC_INTENSET_BOD33RDY (_U_(0x1) << SUPC_INTENSET_BOD33RDY_Pos)
#define SUPC_INTENSET_BOD33DET_Pos 1
#define SUPC_INTENSET_BOD33DET (_U_(0x1) << SUPC_INTENSET_BOD33DET_Pos)
#define SUPC_INTENSET_B33SRDY_Pos 2
#define SUPC_INTENSET_B33SRDY (_U_(0x1) << SUPC_INTENSET_B33SRDY_Pos)
#define SUPC_INTENSET_BOD12RDY_Pos 3
#define SUPC_INTENSET_BOD12RDY (_U_(0x1) << SUPC_INTENSET_BOD12RDY_Pos)
#define SUPC_INTENSET_BOD12DET_Pos 4
#define SUPC_INTENSET_BOD12DET (_U_(0x1) << SUPC_INTENSET_BOD12DET_Pos)
#define SUPC_INTENSET_B12SRDY_Pos 5
#define SUPC_INTENSET_B12SRDY (_U_(0x1) << SUPC_INTENSET_B12SRDY_Pos)
#define SUPC_INTENSET_VREGRDY_Pos 8
#define SUPC_INTENSET_VREGRDY (_U_(0x1) << SUPC_INTENSET_VREGRDY_Pos)
#define SUPC_INTENSET_VCORERDY_Pos 10
#define SUPC_INTENSET_VCORERDY (_U_(0x1) << SUPC_INTENSET_VCORERDY_Pos)
#define SUPC_INTENSET_MASK _U_(0x0000053F)



typedef union {
  struct {
    volatile const uint32_t BOD33RDY:1;
    volatile const uint32_t BOD33DET:1;
    volatile const uint32_t B33SRDY:1;
    volatile const uint32_t BOD12RDY:1;
    volatile const uint32_t BOD12DET:1;
    volatile const uint32_t B12SRDY:1;
    volatile const uint32_t :2;
    volatile const uint32_t VREGRDY:1;
    volatile const uint32_t :1;
    volatile const uint32_t VCORERDY:1;
    volatile const uint32_t :21;
  } bit;
  uint32_t reg;
} SUPC_INTFLAG_Type;


#define SUPC_INTFLAG_OFFSET 0x08
#define SUPC_INTFLAG_RESETVALUE _U_(0x00000000)

#define SUPC_INTFLAG_BOD33RDY_Pos 0
#define SUPC_INTFLAG_BOD33RDY (_U_(0x1) << SUPC_INTFLAG_BOD33RDY_Pos)
#define SUPC_INTFLAG_BOD33DET_Pos 1
#define SUPC_INTFLAG_BOD33DET (_U_(0x1) << SUPC_INTFLAG_BOD33DET_Pos)
#define SUPC_INTFLAG_B33SRDY_Pos 2
#define SUPC_INTFLAG_B33SRDY (_U_(0x1) << SUPC_INTFLAG_B33SRDY_Pos)
#define SUPC_INTFLAG_BOD12RDY_Pos 3
#define SUPC_INTFLAG_BOD12RDY (_U_(0x1) << SUPC_INTFLAG_BOD12RDY_Pos)
#define SUPC_INTFLAG_BOD12DET_Pos 4
#define SUPC_INTFLAG_BOD12DET (_U_(0x1) << SUPC_INTFLAG_BOD12DET_Pos)
#define SUPC_INTFLAG_B12SRDY_Pos 5
#define SUPC_INTFLAG_B12SRDY (_U_(0x1) << SUPC_INTFLAG_B12SRDY_Pos)
#define SUPC_INTFLAG_VREGRDY_Pos 8
#define SUPC_INTFLAG_VREGRDY (_U_(0x1) << SUPC_INTFLAG_VREGRDY_Pos)
#define SUPC_INTFLAG_VCORERDY_Pos 10
#define SUPC_INTFLAG_VCORERDY (_U_(0x1) << SUPC_INTFLAG_VCORERDY_Pos)
#define SUPC_INTFLAG_MASK _U_(0x0000053F)



typedef union {
  struct {
    uint32_t BOD33RDY:1;
    uint32_t BOD33DET:1;
    uint32_t B33SRDY:1;
    uint32_t BOD12RDY:1;
    uint32_t BOD12DET:1;
    uint32_t B12SRDY:1;
    uint32_t :2;
    uint32_t VREGRDY:1;
    uint32_t :1;
    uint32_t VCORERDY:1;
    uint32_t :21;
  } bit;
  uint32_t reg;
} SUPC_STATUS_Type;


#define SUPC_STATUS_OFFSET 0x0C
#define SUPC_STATUS_RESETVALUE _U_(0x00000000)

#define SUPC_STATUS_BOD33RDY_Pos 0
#define SUPC_STATUS_BOD33RDY (_U_(0x1) << SUPC_STATUS_BOD33RDY_Pos)
#define SUPC_STATUS_BOD33DET_Pos 1
#define SUPC_STATUS_BOD33DET (_U_(0x1) << SUPC_STATUS_BOD33DET_Pos)
#define SUPC_STATUS_B33SRDY_Pos 2
#define SUPC_STATUS_B33SRDY (_U_(0x1) << SUPC_STATUS_B33SRDY_Pos)
#define SUPC_STATUS_BOD12RDY_Pos 3
#define SUPC_STATUS_BOD12RDY (_U_(0x1) << SUPC_STATUS_BOD12RDY_Pos)
#define SUPC_STATUS_BOD12DET_Pos 4
#define SUPC_STATUS_BOD12DET (_U_(0x1) << SUPC_STATUS_BOD12DET_Pos)
#define SUPC_STATUS_B12SRDY_Pos 5
#define SUPC_STATUS_B12SRDY (_U_(0x1) << SUPC_STATUS_B12SRDY_Pos)
#define SUPC_STATUS_VREGRDY_Pos 8
#define SUPC_STATUS_VREGRDY (_U_(0x1) << SUPC_STATUS_VREGRDY_Pos)
#define SUPC_STATUS_VCORERDY_Pos 10
#define SUPC_STATUS_VCORERDY (_U_(0x1) << SUPC_STATUS_VCORERDY_Pos)
#define SUPC_STATUS_MASK _U_(0x0000053F)



typedef union {
  struct {
    uint32_t :1;
    uint32_t ENABLE:1;
    uint32_t ACTION:2;
    uint32_t STDBYCFG:1;
    uint32_t RUNSTDBY:1;
    uint32_t RUNHIB:1;
    uint32_t RUNBKUP:1;
    uint32_t HYST:4;
    uint32_t PSEL:3;
    uint32_t :1;
    uint32_t LEVEL:8;
    uint32_t VBATLEVEL:8;
  } bit;
  uint32_t reg;
} SUPC_BOD33_Type;


#define SUPC_BOD33_OFFSET 0x10
#define SUPC_BOD33_RESETVALUE _U_(0x00000000)

#define SUPC_BOD33_ENABLE_Pos 1
#define SUPC_BOD33_ENABLE (_U_(0x1) << SUPC_BOD33_ENABLE_Pos)
#define SUPC_BOD33_ACTION_Pos 2
#define SUPC_BOD33_ACTION_Msk (_U_(0x3) << SUPC_BOD33_ACTION_Pos)
#define SUPC_BOD33_ACTION(value) (SUPC_BOD33_ACTION_Msk & ((value) << SUPC_BOD33_ACTION_Pos))
#define SUPC_BOD33_ACTION_NONE_Val _U_(0x0)
#define SUPC_BOD33_ACTION_RESET_Val _U_(0x1)
#define SUPC_BOD33_ACTION_INT_Val _U_(0x2)
#define SUPC_BOD33_ACTION_BKUP_Val _U_(0x3)
#define SUPC_BOD33_ACTION_NONE (SUPC_BOD33_ACTION_NONE_Val << SUPC_BOD33_ACTION_Pos)
#define SUPC_BOD33_ACTION_RESET (SUPC_BOD33_ACTION_RESET_Val << SUPC_BOD33_ACTION_Pos)
#define SUPC_BOD33_ACTION_INT (SUPC_BOD33_ACTION_INT_Val << SUPC_BOD33_ACTION_Pos)
#define SUPC_BOD33_ACTION_BKUP (SUPC_BOD33_ACTION_BKUP_Val << SUPC_BOD33_ACTION_Pos)
#define SUPC_BOD33_STDBYCFG_Pos 4
#define SUPC_BOD33_STDBYCFG (_U_(0x1) << SUPC_BOD33_STDBYCFG_Pos)
#define SUPC_BOD33_RUNSTDBY_Pos 5
#define SUPC_BOD33_RUNSTDBY (_U_(0x1) << SUPC_BOD33_RUNSTDBY_Pos)
#define SUPC_BOD33_RUNHIB_Pos 6
#define SUPC_BOD33_RUNHIB (_U_(0x1) << SUPC_BOD33_RUNHIB_Pos)
#define SUPC_BOD33_RUNBKUP_Pos 7
#define SUPC_BOD33_RUNBKUP (_U_(0x1) << SUPC_BOD33_RUNBKUP_Pos)
#define SUPC_BOD33_HYST_Pos 8
#define SUPC_BOD33_HYST_Msk (_U_(0xF) << SUPC_BOD33_HYST_Pos)
#define SUPC_BOD33_HYST(value) (SUPC_BOD33_HYST_Msk & ((value) << SUPC_BOD33_HYST_Pos))
#define SUPC_BOD33_PSEL_Pos 12
#define SUPC_BOD33_PSEL_Msk (_U_(0x7) << SUPC_BOD33_PSEL_Pos)
#define SUPC_BOD33_PSEL(value) (SUPC_BOD33_PSEL_Msk & ((value) << SUPC_BOD33_PSEL_Pos))
#define SUPC_BOD33_PSEL_NODIV_Val _U_(0x0)
#define SUPC_BOD33_PSEL_DIV4_Val _U_(0x1)
#define SUPC_BOD33_PSEL_DIV8_Val _U_(0x2)
#define SUPC_BOD33_PSEL_DIV16_Val _U_(0x3)
#define SUPC_BOD33_PSEL_DIV32_Val _U_(0x4)
#define SUPC_BOD33_PSEL_DIV64_Val _U_(0x5)
#define SUPC_BOD33_PSEL_DIV128_Val _U_(0x6)
#define SUPC_BOD33_PSEL_DIV256_Val _U_(0x7)
#define SUPC_BOD33_PSEL_NODIV (SUPC_BOD33_PSEL_NODIV_Val << SUPC_BOD33_PSEL_Pos)
#define SUPC_BOD33_PSEL_DIV4 (SUPC_BOD33_PSEL_DIV4_Val << SUPC_BOD33_PSEL_Pos)
#define SUPC_BOD33_PSEL_DIV8 (SUPC_BOD33_PSEL_DIV8_Val << SUPC_BOD33_PSEL_Pos)
#define SUPC_BOD33_PSEL_DIV16 (SUPC_BOD33_PSEL_DIV16_Val << SUPC_BOD33_PSEL_Pos)
#define SUPC_BOD33_PSEL_DIV32 (SUPC_BOD33_PSEL_DIV32_Val << SUPC_BOD33_PSEL_Pos)
#define SUPC_BOD33_PSEL_DIV64 (SUPC_BOD33_PSEL_DIV64_Val << SUPC_BOD33_PSEL_Pos)
#define SUPC_BOD33_PSEL_DIV128 (SUPC_BOD33_PSEL_DIV128_Val << SUPC_BOD33_PSEL_Pos)
#define SUPC_BOD33_PSEL_DIV256 (SUPC_BOD33_PSEL_DIV256_Val << SUPC_BOD33_PSEL_Pos)
#define SUPC_BOD33_LEVEL_Pos 16
#define SUPC_BOD33_LEVEL_Msk (_U_(0xFF) << SUPC_BOD33_LEVEL_Pos)
#define SUPC_BOD33_LEVEL(value) (SUPC_BOD33_LEVEL_Msk & ((value) << SUPC_BOD33_LEVEL_Pos))
#define SUPC_BOD33_VBATLEVEL_Pos 24
#define SUPC_BOD33_VBATLEVEL_Msk (_U_(0xFF) << SUPC_BOD33_VBATLEVEL_Pos)
#define SUPC_BOD33_VBATLEVEL(value) (SUPC_BOD33_VBATLEVEL_Msk & ((value) << SUPC_BOD33_VBATLEVEL_Pos))
#define SUPC_BOD33_MASK _U_(0xFFFF7FFE)



typedef union {
  struct {
    uint32_t :1;
    uint32_t ENABLE:1;
    uint32_t HYST:1;
    uint32_t ACTION:2;
    uint32_t STDBYCFG:1;
    uint32_t RUNSTDBY:1;
    uint32_t :1;
    uint32_t ACTCFG:1;
    uint32_t :3;
    uint32_t PSEL:4;
    uint32_t LEVEL:6;
    uint32_t :10;
  } bit;
  uint32_t reg;
} SUPC_BOD12_Type;


#define SUPC_BOD12_OFFSET 0x14
#define SUPC_BOD12_RESETVALUE _U_(0x00000000)

#define SUPC_BOD12_ENABLE_Pos 1
#define SUPC_BOD12_ENABLE (_U_(0x1) << SUPC_BOD12_ENABLE_Pos)
#define SUPC_BOD12_HYST_Pos 2
#define SUPC_BOD12_HYST (_U_(0x1) << SUPC_BOD12_HYST_Pos)
#define SUPC_BOD12_ACTION_Pos 3
#define SUPC_BOD12_ACTION_Msk (_U_(0x3) << SUPC_BOD12_ACTION_Pos)
#define SUPC_BOD12_ACTION(value) (SUPC_BOD12_ACTION_Msk & ((value) << SUPC_BOD12_ACTION_Pos))
#define SUPC_BOD12_ACTION_NONE_Val _U_(0x0)
#define SUPC_BOD12_ACTION_RESET_Val _U_(0x1)
#define SUPC_BOD12_ACTION_INT_Val _U_(0x2)
#define SUPC_BOD12_ACTION_NONE (SUPC_BOD12_ACTION_NONE_Val << SUPC_BOD12_ACTION_Pos)
#define SUPC_BOD12_ACTION_RESET (SUPC_BOD12_ACTION_RESET_Val << SUPC_BOD12_ACTION_Pos)
#define SUPC_BOD12_ACTION_INT (SUPC_BOD12_ACTION_INT_Val << SUPC_BOD12_ACTION_Pos)
#define SUPC_BOD12_STDBYCFG_Pos 5
#define SUPC_BOD12_STDBYCFG (_U_(0x1) << SUPC_BOD12_STDBYCFG_Pos)
#define SUPC_BOD12_RUNSTDBY_Pos 6
#define SUPC_BOD12_RUNSTDBY (_U_(0x1) << SUPC_BOD12_RUNSTDBY_Pos)
#define SUPC_BOD12_ACTCFG_Pos 8
#define SUPC_BOD12_ACTCFG (_U_(0x1) << SUPC_BOD12_ACTCFG_Pos)
#define SUPC_BOD12_PSEL_Pos 12
#define SUPC_BOD12_PSEL_Msk (_U_(0xF) << SUPC_BOD12_PSEL_Pos)
#define SUPC_BOD12_PSEL(value) (SUPC_BOD12_PSEL_Msk & ((value) << SUPC_BOD12_PSEL_Pos))
#define SUPC_BOD12_PSEL_DIV2_Val _U_(0x0)
#define SUPC_BOD12_PSEL_DIV4_Val _U_(0x1)
#define SUPC_BOD12_PSEL_DIV8_Val _U_(0x2)
#define SUPC_BOD12_PSEL_DIV16_Val _U_(0x3)
#define SUPC_BOD12_PSEL_DIV32_Val _U_(0x4)
#define SUPC_BOD12_PSEL_DIV64_Val _U_(0x5)
#define SUPC_BOD12_PSEL_DIV128_Val _U_(0x6)
#define SUPC_BOD12_PSEL_DIV256_Val _U_(0x7)
#define SUPC_BOD12_PSEL_DIV512_Val _U_(0x8)
#define SUPC_BOD12_PSEL_DIV1024_Val _U_(0x9)
#define SUPC_BOD12_PSEL_DIV2048_Val _U_(0xA)
#define SUPC_BOD12_PSEL_DIV4096_Val _U_(0xB)
#define SUPC_BOD12_PSEL_DIV8192_Val _U_(0xC)
#define SUPC_BOD12_PSEL_DIV16384_Val _U_(0xD)
#define SUPC_BOD12_PSEL_DIV32768_Val _U_(0xE)
#define SUPC_BOD12_PSEL_DIV65536_Val _U_(0xF)
#define SUPC_BOD12_PSEL_DIV2 (SUPC_BOD12_PSEL_DIV2_Val << SUPC_BOD12_PSEL_Pos)
#define SUPC_BOD12_PSEL_DIV4 (SUPC_BOD12_PSEL_DIV4_Val << SUPC_BOD12_PSEL_Pos)
#define SUPC_BOD12_PSEL_DIV8 (SUPC_BOD12_PSEL_DIV8_Val << SUPC_BOD12_PSEL_Pos)
#define SUPC_BOD12_PSEL_DIV16 (SUPC_BOD12_PSEL_DIV16_Val << SUPC_BOD12_PSEL_Pos)
#define SUPC_BOD12_PSEL_DIV32 (SUPC_BOD12_PSEL_DIV32_Val << SUPC_BOD12_PSEL_Pos)
#define SUPC_BOD12_PSEL_DIV64 (SUPC_BOD12_PSEL_DIV64_Val << SUPC_BOD12_PSEL_Pos)
#define SUPC_BOD12_PSEL_DIV128 (SUPC_BOD12_PSEL_DIV128_Val << SUPC_BOD12_PSEL_Pos)
#define SUPC_BOD12_PSEL_DIV256 (SUPC_BOD12_PSEL_DIV256_Val << SUPC_BOD12_PSEL_Pos)
#define SUPC_BOD12_PSEL_DIV512 (SUPC_BOD12_PSEL_DIV512_Val << SUPC_BOD12_PSEL_Pos)
#define SUPC_BOD12_PSEL_DIV1024 (SUPC_BOD12_PSEL_DIV1024_Val << SUPC_BOD12_PSEL_Pos)
#define SUPC_BOD12_PSEL_DIV2048 (SUPC_BOD12_PSEL_DIV2048_Val << SUPC_BOD12_PSEL_Pos)
#define SUPC_BOD12_PSEL_DIV4096 (SUPC_BOD12_PSEL_DIV4096_Val << SUPC_BOD12_PSEL_Pos)
#define SUPC_BOD12_PSEL_DIV8192 (SUPC_BOD12_PSEL_DIV8192_Val << SUPC_BOD12_PSEL_Pos)
#define SUPC_BOD12_PSEL_DIV16384 (SUPC_BOD12_PSEL_DIV16384_Val << SUPC_BOD12_PSEL_Pos)
#define SUPC_BOD12_PSEL_DIV32768 (SUPC_BOD12_PSEL_DIV32768_Val << SUPC_BOD12_PSEL_Pos)
#define SUPC_BOD12_PSEL_DIV65536 (SUPC_BOD12_PSEL_DIV65536_Val << SUPC_BOD12_PSEL_Pos)
#define SUPC_BOD12_LEVEL_Pos 16
#define SUPC_BOD12_LEVEL_Msk (_U_(0x3F) << SUPC_BOD12_LEVEL_Pos)
#define SUPC_BOD12_LEVEL(value) (SUPC_BOD12_LEVEL_Msk & ((value) << SUPC_BOD12_LEVEL_Pos))
#define SUPC_BOD12_MASK _U_(0x003FF17E)



typedef union {
  struct {
    uint32_t :1;
    uint32_t ENABLE:1;
    uint32_t SEL:1;
    uint32_t :4;
    uint32_t RUNBKUP:1;
    uint32_t :8;
    uint32_t VSEN:1;
    uint32_t :7;
    uint32_t VSPER:3;
    uint32_t :5;
  } bit;
  uint32_t reg;
} SUPC_VREG_Type;


#define SUPC_VREG_OFFSET 0x18
#define SUPC_VREG_RESETVALUE _U_(0x00000002)

#define SUPC_VREG_ENABLE_Pos 1
#define SUPC_VREG_ENABLE (_U_(0x1) << SUPC_VREG_ENABLE_Pos)
#define SUPC_VREG_SEL_Pos 2
#define SUPC_VREG_SEL (_U_(0x1) << SUPC_VREG_SEL_Pos)
#define SUPC_VREG_SEL_LDO_Val _U_(0x0)
#define SUPC_VREG_SEL_BUCK_Val _U_(0x1)
#define SUPC_VREG_SEL_LDO (SUPC_VREG_SEL_LDO_Val << SUPC_VREG_SEL_Pos)
#define SUPC_VREG_SEL_BUCK (SUPC_VREG_SEL_BUCK_Val << SUPC_VREG_SEL_Pos)
#define SUPC_VREG_RUNBKUP_Pos 7
#define SUPC_VREG_RUNBKUP (_U_(0x1) << SUPC_VREG_RUNBKUP_Pos)
#define SUPC_VREG_VSEN_Pos 16
#define SUPC_VREG_VSEN (_U_(0x1) << SUPC_VREG_VSEN_Pos)
#define SUPC_VREG_VSPER_Pos 24
#define SUPC_VREG_VSPER_Msk (_U_(0x7) << SUPC_VREG_VSPER_Pos)
#define SUPC_VREG_VSPER(value) (SUPC_VREG_VSPER_Msk & ((value) << SUPC_VREG_VSPER_Pos))
#define SUPC_VREG_MASK _U_(0x07010086)



typedef union {
  struct {
    uint32_t :1;
    uint32_t TSEN:1;
    uint32_t VREFOE:1;
    uint32_t TSSEL:1;
    uint32_t :2;
    uint32_t RUNSTDBY:1;
    uint32_t ONDEMAND:1;
    uint32_t :8;
    uint32_t SEL:4;
    uint32_t :12;
  } bit;
  uint32_t reg;
} SUPC_VREF_Type;


#define SUPC_VREF_OFFSET 0x1C
#define SUPC_VREF_RESETVALUE _U_(0x00000000)

#define SUPC_VREF_TSEN_Pos 1
#define SUPC_VREF_TSEN (_U_(0x1) << SUPC_VREF_TSEN_Pos)
#define SUPC_VREF_VREFOE_Pos 2
#define SUPC_VREF_VREFOE (_U_(0x1) << SUPC_VREF_VREFOE_Pos)
#define SUPC_VREF_TSSEL_Pos 3
#define SUPC_VREF_TSSEL (_U_(0x1) << SUPC_VREF_TSSEL_Pos)
#define SUPC_VREF_RUNSTDBY_Pos 6
#define SUPC_VREF_RUNSTDBY (_U_(0x1) << SUPC_VREF_RUNSTDBY_Pos)
#define SUPC_VREF_ONDEMAND_Pos 7
#define SUPC_VREF_ONDEMAND (_U_(0x1) << SUPC_VREF_ONDEMAND_Pos)
#define SUPC_VREF_SEL_Pos 16
#define SUPC_VREF_SEL_Msk (_U_(0xF) << SUPC_VREF_SEL_Pos)
#define SUPC_VREF_SEL(value) (SUPC_VREF_SEL_Msk & ((value) << SUPC_VREF_SEL_Pos))
#define SUPC_VREF_SEL_1V0_Val _U_(0x0)
#define SUPC_VREF_SEL_1V1_Val _U_(0x1)
#define SUPC_VREF_SEL_1V2_Val _U_(0x2)
#define SUPC_VREF_SEL_1V25_Val _U_(0x3)
#define SUPC_VREF_SEL_2V0_Val _U_(0x4)
#define SUPC_VREF_SEL_2V2_Val _U_(0x5)
#define SUPC_VREF_SEL_2V4_Val _U_(0x6)
#define SUPC_VREF_SEL_2V5_Val _U_(0x7)
#define SUPC_VREF_SEL_1V0 (SUPC_VREF_SEL_1V0_Val << SUPC_VREF_SEL_Pos)
#define SUPC_VREF_SEL_1V1 (SUPC_VREF_SEL_1V1_Val << SUPC_VREF_SEL_Pos)
#define SUPC_VREF_SEL_1V2 (SUPC_VREF_SEL_1V2_Val << SUPC_VREF_SEL_Pos)
#define SUPC_VREF_SEL_1V25 (SUPC_VREF_SEL_1V25_Val << SUPC_VREF_SEL_Pos)
#define SUPC_VREF_SEL_2V0 (SUPC_VREF_SEL_2V0_Val << SUPC_VREF_SEL_Pos)
#define SUPC_VREF_SEL_2V2 (SUPC_VREF_SEL_2V2_Val << SUPC_VREF_SEL_Pos)
#define SUPC_VREF_SEL_2V4 (SUPC_VREF_SEL_2V4_Val << SUPC_VREF_SEL_Pos)
#define SUPC_VREF_SEL_2V5 (SUPC_VREF_SEL_2V5_Val << SUPC_VREF_SEL_Pos)
#define SUPC_VREF_MASK _U_(0x000F00CE)



typedef union {
  struct {
    uint32_t CONF:1;
    uint32_t :1;
    uint32_t WAKEEN:1;
    uint32_t :29;
  } bit;
  uint32_t reg;
} SUPC_BBPS_Type;


#define SUPC_BBPS_OFFSET 0x20
#define SUPC_BBPS_RESETVALUE _U_(0x00000000)

#define SUPC_BBPS_CONF_Pos 0
#define SUPC_BBPS_CONF (_U_(0x1) << SUPC_BBPS_CONF_Pos)
#define SUPC_BBPS_CONF_BOD33_Val _U_(0x0)
#define SUPC_BBPS_CONF_FORCED_Val _U_(0x1)
#define SUPC_BBPS_CONF_BOD33 (SUPC_BBPS_CONF_BOD33_Val << SUPC_BBPS_CONF_Pos)
#define SUPC_BBPS_CONF_FORCED (SUPC_BBPS_CONF_FORCED_Val << SUPC_BBPS_CONF_Pos)
#define SUPC_BBPS_WAKEEN_Pos 2
#define SUPC_BBPS_WAKEEN (_U_(0x1) << SUPC_BBPS_WAKEEN_Pos)
#define SUPC_BBPS_MASK _U_(0x00000005)



typedef union {
  struct {
    uint32_t EN:2;
    uint32_t :6;
    uint32_t CLR:2;
    uint32_t :6;
    uint32_t SET:2;
    uint32_t :6;
    uint32_t RTCTGL:2;
    uint32_t :6;
  } bit;
  uint32_t reg;
} SUPC_BKOUT_Type;


#define SUPC_BKOUT_OFFSET 0x24
#define SUPC_BKOUT_RESETVALUE _U_(0x00000000)

#define SUPC_BKOUT_EN_Pos 0
#define SUPC_BKOUT_EN_Msk (_U_(0x3) << SUPC_BKOUT_EN_Pos)
#define SUPC_BKOUT_EN(value) (SUPC_BKOUT_EN_Msk & ((value) << SUPC_BKOUT_EN_Pos))
#define SUPC_BKOUT_CLR_Pos 8
#define SUPC_BKOUT_CLR_Msk (_U_(0x3) << SUPC_BKOUT_CLR_Pos)
#define SUPC_BKOUT_CLR(value) (SUPC_BKOUT_CLR_Msk & ((value) << SUPC_BKOUT_CLR_Pos))
#define SUPC_BKOUT_SET_Pos 16
#define SUPC_BKOUT_SET_Msk (_U_(0x3) << SUPC_BKOUT_SET_Pos)
#define SUPC_BKOUT_SET(value) (SUPC_BKOUT_SET_Msk & ((value) << SUPC_BKOUT_SET_Pos))
#define SUPC_BKOUT_RTCTGL_Pos 24
#define SUPC_BKOUT_RTCTGL_Msk (_U_(0x3) << SUPC_BKOUT_RTCTGL_Pos)
#define SUPC_BKOUT_RTCTGL(value) (SUPC_BKOUT_RTCTGL_Msk & ((value) << SUPC_BKOUT_RTCTGL_Pos))
#define SUPC_BKOUT_MASK _U_(0x03030303)



typedef union {
  struct {
    uint32_t BKIN:8;
    uint32_t :24;
  } bit;
  uint32_t reg;
} SUPC_BKIN_Type;


#define SUPC_BKIN_OFFSET 0x28
#define SUPC_BKIN_RESETVALUE _U_(0x00000000)

#define SUPC_BKIN_BKIN_Pos 0
#define SUPC_BKIN_BKIN_Msk (_U_(0xFF) << SUPC_BKIN_BKIN_Pos)
#define SUPC_BKIN_BKIN(value) (SUPC_BKIN_BKIN_Msk & ((value) << SUPC_BKIN_BKIN_Pos))
#define SUPC_BKIN_MASK _U_(0x000000FF)



typedef struct {
  volatile SUPC_INTENCLR_Type INTENCLR;
  volatile SUPC_INTENSET_Type INTENSET;
  volatile SUPC_INTFLAG_Type INTFLAG;
  volatile const SUPC_STATUS_Type STATUS;
  volatile SUPC_BOD33_Type BOD33;
  volatile SUPC_BOD12_Type BOD12;
  volatile SUPC_VREG_Type VREG;
  volatile SUPC_VREF_Type VREF;
  volatile SUPC_BBPS_Type BBPS;
  volatile SUPC_BKOUT_Type BKOUT;
  volatile const SUPC_BKIN_Type BKIN;
} Supc;
# 612 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/tal.h" 1
# 31 "asf4/samd51/include/component/tal.h"
#define _SAMD51_TAL_COMPONENT_ 







#define TAL_U2253 
#define REV_TAL 0x200



typedef union {
  struct {
    uint8_t SWRST:1;
    uint8_t ENABLE:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} TAL_CTRLA_Type;


#define TAL_CTRLA_OFFSET 0x000
#define TAL_CTRLA_RESETVALUE _U_(0x00)

#define TAL_CTRLA_SWRST_Pos 0
#define TAL_CTRLA_SWRST (_U_(0x1) << TAL_CTRLA_SWRST_Pos)
#define TAL_CTRLA_ENABLE_Pos 1
#define TAL_CTRLA_ENABLE (_U_(0x1) << TAL_CTRLA_ENABLE_Pos)
#define TAL_CTRLA_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t ENABLE:1;
    uint8_t INV:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} TAL_EXTCTRL_Type;


#define TAL_EXTCTRL_OFFSET 0x001
#define TAL_EXTCTRL_RESETVALUE _U_(0x00)

#define TAL_EXTCTRL_ENABLE_Pos 0
#define TAL_EXTCTRL_ENABLE (_U_(0x1) << TAL_EXTCTRL_ENABLE_Pos)
#define TAL_EXTCTRL_INV_Pos 1
#define TAL_EXTCTRL_INV (_U_(0x1) << TAL_EXTCTRL_INV_Pos)
#define TAL_EXTCTRL_MASK _U_(0x03)



typedef union {
  struct {
    uint16_t BRKEI:1;
    uint16_t BRKEO:1;
    uint16_t IRQMONEO0:1;
    uint16_t :13;
  } bit;
  struct {
    uint16_t :2;
    uint16_t IRQMONEO:1;
    uint16_t :13;
  } vec;
  uint16_t reg;
} TAL_EVCTRL_Type;


#define TAL_EVCTRL_OFFSET 0x004
#define TAL_EVCTRL_RESETVALUE _U_(0x0000)

#define TAL_EVCTRL_BRKEI_Pos 0
#define TAL_EVCTRL_BRKEI (_U_(0x1) << TAL_EVCTRL_BRKEI_Pos)
#define TAL_EVCTRL_BRKEO_Pos 1
#define TAL_EVCTRL_BRKEO (_U_(0x1) << TAL_EVCTRL_BRKEO_Pos)
#define TAL_EVCTRL_IRQMONEO0_Pos 2
#define TAL_EVCTRL_IRQMONEO0 (_U_(1) << TAL_EVCTRL_IRQMONEO0_Pos)
#define TAL_EVCTRL_IRQMONEO_Pos 2
#define TAL_EVCTRL_IRQMONEO_Msk (_U_(0x1) << TAL_EVCTRL_IRQMONEO_Pos)
#define TAL_EVCTRL_IRQMONEO(value) (TAL_EVCTRL_IRQMONEO_Msk & ((value) << TAL_EVCTRL_IRQMONEO_Pos))
#define TAL_EVCTRL_MASK _U_(0x0007)



typedef union {
  struct {
    uint8_t BRK:1;
    uint8_t IPS0:1;
    uint8_t IPS1:1;
    uint8_t :5;
  } bit;
  struct {
    uint8_t :1;
    uint8_t IPS:2;
    uint8_t :5;
  } vec;
  uint8_t reg;
} TAL_INTENCLR_Type;


#define TAL_INTENCLR_OFFSET 0x008
#define TAL_INTENCLR_RESETVALUE _U_(0x00)

#define TAL_INTENCLR_BRK_Pos 0
#define TAL_INTENCLR_BRK (_U_(0x1) << TAL_INTENCLR_BRK_Pos)
#define TAL_INTENCLR_IPS0_Pos 1
#define TAL_INTENCLR_IPS0 (_U_(1) << TAL_INTENCLR_IPS0_Pos)
#define TAL_INTENCLR_IPS1_Pos 2
#define TAL_INTENCLR_IPS1 (_U_(1) << TAL_INTENCLR_IPS1_Pos)
#define TAL_INTENCLR_IPS_Pos 1
#define TAL_INTENCLR_IPS_Msk (_U_(0x3) << TAL_INTENCLR_IPS_Pos)
#define TAL_INTENCLR_IPS(value) (TAL_INTENCLR_IPS_Msk & ((value) << TAL_INTENCLR_IPS_Pos))
#define TAL_INTENCLR_MASK _U_(0x07)



typedef union {
  struct {
    uint8_t BRK:1;
    uint8_t IPS0:1;
    uint8_t IPS1:1;
    uint8_t :5;
  } bit;
  struct {
    uint8_t :1;
    uint8_t IPS:2;
    uint8_t :5;
  } vec;
  uint8_t reg;
} TAL_INTENSET_Type;


#define TAL_INTENSET_OFFSET 0x009
#define TAL_INTENSET_RESETVALUE _U_(0x00)

#define TAL_INTENSET_BRK_Pos 0
#define TAL_INTENSET_BRK (_U_(0x1) << TAL_INTENSET_BRK_Pos)
#define TAL_INTENSET_IPS0_Pos 1
#define TAL_INTENSET_IPS0 (_U_(1) << TAL_INTENSET_IPS0_Pos)
#define TAL_INTENSET_IPS1_Pos 2
#define TAL_INTENSET_IPS1 (_U_(1) << TAL_INTENSET_IPS1_Pos)
#define TAL_INTENSET_IPS_Pos 1
#define TAL_INTENSET_IPS_Msk (_U_(0x3) << TAL_INTENSET_IPS_Pos)
#define TAL_INTENSET_IPS(value) (TAL_INTENSET_IPS_Msk & ((value) << TAL_INTENSET_IPS_Pos))
#define TAL_INTENSET_MASK _U_(0x07)



typedef union {
  struct {
    volatile const uint8_t BRK:1;
    volatile const uint8_t IPS0:1;
    volatile const uint8_t IPS1:1;
    volatile const uint8_t :5;
  } bit;
  struct {
    volatile const uint8_t :1;
    volatile const uint8_t IPS:2;
    volatile const uint8_t :5;
  } vec;
  uint8_t reg;
} TAL_INTFLAG_Type;


#define TAL_INTFLAG_OFFSET 0x00A
#define TAL_INTFLAG_RESETVALUE _U_(0x00)

#define TAL_INTFLAG_BRK_Pos 0
#define TAL_INTFLAG_BRK (_U_(0x1) << TAL_INTFLAG_BRK_Pos)
#define TAL_INTFLAG_IPS0_Pos 1
#define TAL_INTFLAG_IPS0 (_U_(1) << TAL_INTFLAG_IPS0_Pos)
#define TAL_INTFLAG_IPS1_Pos 2
#define TAL_INTFLAG_IPS1 (_U_(1) << TAL_INTFLAG_IPS1_Pos)
#define TAL_INTFLAG_IPS_Pos 1
#define TAL_INTFLAG_IPS_Msk (_U_(0x3) << TAL_INTFLAG_IPS_Pos)
#define TAL_INTFLAG_IPS(value) (TAL_INTFLAG_IPS_Msk & ((value) << TAL_INTFLAG_IPS_Pos))
#define TAL_INTFLAG_MASK _U_(0x07)



typedef union {
  struct {
    uint8_t CPU0:1;
    uint8_t CPU1:1;
    uint8_t :4;
    uint8_t EVBRK:1;
    uint8_t EXTBRK:1;
  } bit;
  struct {
    uint8_t CPU:2;
    uint8_t :6;
  } vec;
  uint8_t reg;
} TAL_GLOBMASK_Type;


#define TAL_GLOBMASK_OFFSET 0x00B
#define TAL_GLOBMASK_RESETVALUE _U_(0x00)

#define TAL_GLOBMASK_CPU0_Pos 0
#define TAL_GLOBMASK_CPU0 (_U_(1) << TAL_GLOBMASK_CPU0_Pos)
#define TAL_GLOBMASK_CPU1_Pos 1
#define TAL_GLOBMASK_CPU1 (_U_(1) << TAL_GLOBMASK_CPU1_Pos)
#define TAL_GLOBMASK_CPU_Pos 0
#define TAL_GLOBMASK_CPU_Msk (_U_(0x3) << TAL_GLOBMASK_CPU_Pos)
#define TAL_GLOBMASK_CPU(value) (TAL_GLOBMASK_CPU_Msk & ((value) << TAL_GLOBMASK_CPU_Pos))
#define TAL_GLOBMASK_EVBRK_Pos 6
#define TAL_GLOBMASK_EVBRK (_U_(0x1) << TAL_GLOBMASK_EVBRK_Pos)
#define TAL_GLOBMASK_EXTBRK_Pos 7
#define TAL_GLOBMASK_EXTBRK (_U_(0x1) << TAL_GLOBMASK_EXTBRK_Pos)
#define TAL_GLOBMASK_MASK _U_(0xC3)



typedef union {
  struct {
    uint8_t CPU0:1;
    uint8_t CPU1:1;
    uint8_t :4;
    uint8_t EVBRK:1;
    uint8_t EXTBRK:1;
  } bit;
  struct {
    uint8_t CPU:2;
    uint8_t :6;
  } vec;
  uint8_t reg;
} TAL_HALT_Type;


#define TAL_HALT_OFFSET 0x00C
#define TAL_HALT_RESETVALUE _U_(0x00)

#define TAL_HALT_CPU0_Pos 0
#define TAL_HALT_CPU0 (_U_(1) << TAL_HALT_CPU0_Pos)
#define TAL_HALT_CPU1_Pos 1
#define TAL_HALT_CPU1 (_U_(1) << TAL_HALT_CPU1_Pos)
#define TAL_HALT_CPU_Pos 0
#define TAL_HALT_CPU_Msk (_U_(0x3) << TAL_HALT_CPU_Pos)
#define TAL_HALT_CPU(value) (TAL_HALT_CPU_Msk & ((value) << TAL_HALT_CPU_Pos))
#define TAL_HALT_EVBRK_Pos 6
#define TAL_HALT_EVBRK (_U_(0x1) << TAL_HALT_EVBRK_Pos)
#define TAL_HALT_EXTBRK_Pos 7
#define TAL_HALT_EXTBRK (_U_(0x1) << TAL_HALT_EXTBRK_Pos)
#define TAL_HALT_MASK _U_(0xC3)



typedef union {
  struct {
    uint8_t CPU0:1;
    uint8_t CPU1:1;
    uint8_t :5;
    uint8_t EXTBRK:1;
  } bit;
  struct {
    uint8_t CPU:2;
    uint8_t :6;
  } vec;
  uint8_t reg;
} TAL_RESTART_Type;


#define TAL_RESTART_OFFSET 0x00D
#define TAL_RESTART_RESETVALUE _U_(0x00)

#define TAL_RESTART_CPU0_Pos 0
#define TAL_RESTART_CPU0 (_U_(1) << TAL_RESTART_CPU0_Pos)
#define TAL_RESTART_CPU1_Pos 1
#define TAL_RESTART_CPU1 (_U_(1) << TAL_RESTART_CPU1_Pos)
#define TAL_RESTART_CPU_Pos 0
#define TAL_RESTART_CPU_Msk (_U_(0x3) << TAL_RESTART_CPU_Pos)
#define TAL_RESTART_CPU(value) (TAL_RESTART_CPU_Msk & ((value) << TAL_RESTART_CPU_Pos))
#define TAL_RESTART_EXTBRK_Pos 7
#define TAL_RESTART_EXTBRK (_U_(0x1) << TAL_RESTART_EXTBRK_Pos)
#define TAL_RESTART_MASK _U_(0x83)



typedef union {
  struct {
    uint16_t CPU0:2;
    uint16_t CPU1:2;
    uint16_t :8;
    uint16_t EVBRK:2;
    uint16_t EXTBRK:2;
  } bit;
  uint16_t reg;
} TAL_BRKSTATUS_Type;


#define TAL_BRKSTATUS_OFFSET 0x00E
#define TAL_BRKSTATUS_RESETVALUE _U_(0x0000)

#define TAL_BRKSTATUS_CPU0_Pos 0
#define TAL_BRKSTATUS_CPU0_Msk (_U_(0x3) << TAL_BRKSTATUS_CPU0_Pos)
#define TAL_BRKSTATUS_CPU0(value) (TAL_BRKSTATUS_CPU0_Msk & ((value) << TAL_BRKSTATUS_CPU0_Pos))
#define TAL_BRKSTATUS_CPU1_Pos 2
#define TAL_BRKSTATUS_CPU1_Msk (_U_(0x3) << TAL_BRKSTATUS_CPU1_Pos)
#define TAL_BRKSTATUS_CPU1(value) (TAL_BRKSTATUS_CPU1_Msk & ((value) << TAL_BRKSTATUS_CPU1_Pos))
#define TAL_BRKSTATUS_EVBRK_Pos 12
#define TAL_BRKSTATUS_EVBRK_Msk (_U_(0x3) << TAL_BRKSTATUS_EVBRK_Pos)
#define TAL_BRKSTATUS_EVBRK(value) (TAL_BRKSTATUS_EVBRK_Msk & ((value) << TAL_BRKSTATUS_EVBRK_Pos))
#define TAL_BRKSTATUS_EXTBRK_Pos 14
#define TAL_BRKSTATUS_EXTBRK_Msk (_U_(0x3) << TAL_BRKSTATUS_EXTBRK_Pos)
#define TAL_BRKSTATUS_EXTBRK(value) (TAL_BRKSTATUS_EXTBRK_Msk & ((value) << TAL_BRKSTATUS_EXTBRK_Pos))
#define TAL_BRKSTATUS_MASK _U_(0xF00F)



typedef union {
  struct {
    uint8_t BRK:2;
    uint8_t RESTART:1;
    uint8_t IPS:1;
    uint8_t :4;
  } bit;
  uint8_t reg;
} TAL_CTICTRLA_Type;


#define TAL_CTICTRLA_OFFSET 0x010
#define TAL_CTICTRLA_RESETVALUE _U_(0x00)

#define TAL_CTICTRLA_BRK_Pos 0
#define TAL_CTICTRLA_BRK_Msk (_U_(0x3) << TAL_CTICTRLA_BRK_Pos)
#define TAL_CTICTRLA_BRK(value) (TAL_CTICTRLA_BRK_Msk & ((value) << TAL_CTICTRLA_BRK_Pos))
#define TAL_CTICTRLA_BRK_BREAK_Val _U_(0x0)
#define TAL_CTICTRLA_BRK_INTERRUPT_Val _U_(0x1)
#define TAL_CTICTRLA_BRK_IGNORE_Val _U_(0x2)
#define TAL_CTICTRLA_BRK_BREAK (TAL_CTICTRLA_BRK_BREAK_Val << TAL_CTICTRLA_BRK_Pos)
#define TAL_CTICTRLA_BRK_INTERRUPT (TAL_CTICTRLA_BRK_INTERRUPT_Val << TAL_CTICTRLA_BRK_Pos)
#define TAL_CTICTRLA_BRK_IGNORE (TAL_CTICTRLA_BRK_IGNORE_Val << TAL_CTICTRLA_BRK_Pos)
#define TAL_CTICTRLA_RESTART_Pos 2
#define TAL_CTICTRLA_RESTART (_U_(0x1) << TAL_CTICTRLA_RESTART_Pos)
#define TAL_CTICTRLA_RESTART_RESTART_Val _U_(0x0)
#define TAL_CTICTRLA_RESTART_IGNORE_Val _U_(0x1)
#define TAL_CTICTRLA_RESTART_RESTART (TAL_CTICTRLA_RESTART_RESTART_Val << TAL_CTICTRLA_RESTART_Pos)
#define TAL_CTICTRLA_RESTART_IGNORE (TAL_CTICTRLA_RESTART_IGNORE_Val << TAL_CTICTRLA_RESTART_Pos)
#define TAL_CTICTRLA_IPS_Pos 3
#define TAL_CTICTRLA_IPS (_U_(0x1) << TAL_CTICTRLA_IPS_Pos)
#define TAL_CTICTRLA_IPS_EVENT_Val _U_(0x0)
#define TAL_CTICTRLA_IPS_INTERRUPT_Val _U_(0x1)
#define TAL_CTICTRLA_IPS_EVENT (TAL_CTICTRLA_IPS_EVENT_Val << TAL_CTICTRLA_IPS_Pos)
#define TAL_CTICTRLA_IPS_INTERRUPT (TAL_CTICTRLA_IPS_INTERRUPT_Val << TAL_CTICTRLA_IPS_Pos)
#define TAL_CTICTRLA_MASK _U_(0x0F)



typedef union {
  struct {
    uint8_t CPU0:1;
    uint8_t CPU1:1;
    uint8_t :4;
    uint8_t EVBRK:1;
    uint8_t EXTBRK:1;
  } bit;
  struct {
    uint8_t CPU:2;
    uint8_t :6;
  } vec;
  uint8_t reg;
} TAL_CTIMASK_Type;


#define TAL_CTIMASK_OFFSET 0x011
#define TAL_CTIMASK_RESETVALUE _U_(0x00)

#define TAL_CTIMASK_CPU0_Pos 0
#define TAL_CTIMASK_CPU0 (_U_(1) << TAL_CTIMASK_CPU0_Pos)
#define TAL_CTIMASK_CPU1_Pos 1
#define TAL_CTIMASK_CPU1 (_U_(1) << TAL_CTIMASK_CPU1_Pos)
#define TAL_CTIMASK_CPU_Pos 0
#define TAL_CTIMASK_CPU_Msk (_U_(0x3) << TAL_CTIMASK_CPU_Pos)
#define TAL_CTIMASK_CPU(value) (TAL_CTIMASK_CPU_Msk & ((value) << TAL_CTIMASK_CPU_Pos))
#define TAL_CTIMASK_EVBRK_Pos 6
#define TAL_CTIMASK_EVBRK (_U_(0x1) << TAL_CTIMASK_EVBRK_Pos)
#define TAL_CTIMASK_EXTBRK_Pos 7
#define TAL_CTIMASK_EXTBRK (_U_(0x1) << TAL_CTIMASK_EXTBRK_Pos)
#define TAL_CTIMASK_MASK _U_(0xC3)



typedef union {
  struct {
    uint8_t IRQ0:1;
    uint8_t IRQ1:1;
    uint8_t IRQ2:1;
    uint8_t IRQ3:1;
    uint8_t IRQ4:1;
    uint8_t IRQ5:1;
    uint8_t IRQ6:1;
    uint8_t IRQ7:1;
  } bit;
  struct {
    uint8_t IRQ:8;
  } vec;
  uint8_t reg;
} TAL_INTSTATUS_Type;


#define TAL_INTSTATUS_OFFSET 0x020
#define TAL_INTSTATUS_RESETVALUE _U_(0x00)

#define TAL_INTSTATUS_IRQ0_Pos 0
#define TAL_INTSTATUS_IRQ0 (_U_(1) << TAL_INTSTATUS_IRQ0_Pos)
#define TAL_INTSTATUS_IRQ1_Pos 1
#define TAL_INTSTATUS_IRQ1 (_U_(1) << TAL_INTSTATUS_IRQ1_Pos)
#define TAL_INTSTATUS_IRQ2_Pos 2
#define TAL_INTSTATUS_IRQ2 (_U_(1) << TAL_INTSTATUS_IRQ2_Pos)
#define TAL_INTSTATUS_IRQ3_Pos 3
#define TAL_INTSTATUS_IRQ3 (_U_(1) << TAL_INTSTATUS_IRQ3_Pos)
#define TAL_INTSTATUS_IRQ4_Pos 4
#define TAL_INTSTATUS_IRQ4 (_U_(1) << TAL_INTSTATUS_IRQ4_Pos)
#define TAL_INTSTATUS_IRQ5_Pos 5
#define TAL_INTSTATUS_IRQ5 (_U_(1) << TAL_INTSTATUS_IRQ5_Pos)
#define TAL_INTSTATUS_IRQ6_Pos 6
#define TAL_INTSTATUS_IRQ6 (_U_(1) << TAL_INTSTATUS_IRQ6_Pos)
#define TAL_INTSTATUS_IRQ7_Pos 7
#define TAL_INTSTATUS_IRQ7 (_U_(1) << TAL_INTSTATUS_IRQ7_Pos)
#define TAL_INTSTATUS_IRQ_Pos 0
#define TAL_INTSTATUS_IRQ_Msk (_U_(0xFF) << TAL_INTSTATUS_IRQ_Pos)
#define TAL_INTSTATUS_IRQ(value) (TAL_INTSTATUS_IRQ_Msk & ((value) << TAL_INTSTATUS_IRQ_Pos))
#define TAL_INTSTATUS_MASK _U_(0xFF)



typedef union {
  struct {
    uint32_t CH0:1;
    uint32_t :1;
    uint32_t CH1:1;
    uint32_t :1;
    uint32_t CH2:1;
    uint32_t :1;
    uint32_t CH3:1;
    uint32_t :1;
    uint32_t CH4:1;
    uint32_t :1;
    uint32_t CH5:1;
    uint32_t :1;
    uint32_t CH6:1;
    uint32_t :1;
    uint32_t CH7:1;
    uint32_t :1;
    uint32_t CH8:1;
    uint32_t :1;
    uint32_t CH9:1;
    uint32_t :1;
    uint32_t CH10:1;
    uint32_t :1;
    uint32_t CH11:1;
    uint32_t :1;
    uint32_t CH12:1;
    uint32_t :1;
    uint32_t CH13:1;
    uint32_t :1;
    uint32_t CH14:1;
    uint32_t :1;
    uint32_t CH15:1;
    uint32_t :1;
  } bit;
  uint32_t reg;
} TAL_DMACPUSEL0_Type;


#define TAL_DMACPUSEL0_OFFSET 0x110
#define TAL_DMACPUSEL0_RESETVALUE _U_(0x00000000)

#define TAL_DMACPUSEL0_CH0_Pos 0
#define TAL_DMACPUSEL0_CH0_Msk (_U_(0x1) << TAL_DMACPUSEL0_CH0_Pos)
#define TAL_DMACPUSEL0_CH0(value) (TAL_DMACPUSEL0_CH0_Msk & ((value) << TAL_DMACPUSEL0_CH0_Pos))
#define TAL_DMACPUSEL0_CH1_Pos 2
#define TAL_DMACPUSEL0_CH1_Msk (_U_(0x1) << TAL_DMACPUSEL0_CH1_Pos)
#define TAL_DMACPUSEL0_CH1(value) (TAL_DMACPUSEL0_CH1_Msk & ((value) << TAL_DMACPUSEL0_CH1_Pos))
#define TAL_DMACPUSEL0_CH2_Pos 4
#define TAL_DMACPUSEL0_CH2_Msk (_U_(0x1) << TAL_DMACPUSEL0_CH2_Pos)
#define TAL_DMACPUSEL0_CH2(value) (TAL_DMACPUSEL0_CH2_Msk & ((value) << TAL_DMACPUSEL0_CH2_Pos))
#define TAL_DMACPUSEL0_CH3_Pos 6
#define TAL_DMACPUSEL0_CH3_Msk (_U_(0x1) << TAL_DMACPUSEL0_CH3_Pos)
#define TAL_DMACPUSEL0_CH3(value) (TAL_DMACPUSEL0_CH3_Msk & ((value) << TAL_DMACPUSEL0_CH3_Pos))
#define TAL_DMACPUSEL0_CH4_Pos 8
#define TAL_DMACPUSEL0_CH4_Msk (_U_(0x1) << TAL_DMACPUSEL0_CH4_Pos)
#define TAL_DMACPUSEL0_CH4(value) (TAL_DMACPUSEL0_CH4_Msk & ((value) << TAL_DMACPUSEL0_CH4_Pos))
#define TAL_DMACPUSEL0_CH5_Pos 10
#define TAL_DMACPUSEL0_CH5_Msk (_U_(0x1) << TAL_DMACPUSEL0_CH5_Pos)
#define TAL_DMACPUSEL0_CH5(value) (TAL_DMACPUSEL0_CH5_Msk & ((value) << TAL_DMACPUSEL0_CH5_Pos))
#define TAL_DMACPUSEL0_CH6_Pos 12
#define TAL_DMACPUSEL0_CH6_Msk (_U_(0x1) << TAL_DMACPUSEL0_CH6_Pos)
#define TAL_DMACPUSEL0_CH6(value) (TAL_DMACPUSEL0_CH6_Msk & ((value) << TAL_DMACPUSEL0_CH6_Pos))
#define TAL_DMACPUSEL0_CH7_Pos 14
#define TAL_DMACPUSEL0_CH7_Msk (_U_(0x1) << TAL_DMACPUSEL0_CH7_Pos)
#define TAL_DMACPUSEL0_CH7(value) (TAL_DMACPUSEL0_CH7_Msk & ((value) << TAL_DMACPUSEL0_CH7_Pos))
#define TAL_DMACPUSEL0_CH8_Pos 16
#define TAL_DMACPUSEL0_CH8_Msk (_U_(0x1) << TAL_DMACPUSEL0_CH8_Pos)
#define TAL_DMACPUSEL0_CH8(value) (TAL_DMACPUSEL0_CH8_Msk & ((value) << TAL_DMACPUSEL0_CH8_Pos))
#define TAL_DMACPUSEL0_CH9_Pos 18
#define TAL_DMACPUSEL0_CH9_Msk (_U_(0x1) << TAL_DMACPUSEL0_CH9_Pos)
#define TAL_DMACPUSEL0_CH9(value) (TAL_DMACPUSEL0_CH9_Msk & ((value) << TAL_DMACPUSEL0_CH9_Pos))
#define TAL_DMACPUSEL0_CH10_Pos 20
#define TAL_DMACPUSEL0_CH10_Msk (_U_(0x1) << TAL_DMACPUSEL0_CH10_Pos)
#define TAL_DMACPUSEL0_CH10(value) (TAL_DMACPUSEL0_CH10_Msk & ((value) << TAL_DMACPUSEL0_CH10_Pos))
#define TAL_DMACPUSEL0_CH11_Pos 22
#define TAL_DMACPUSEL0_CH11_Msk (_U_(0x1) << TAL_DMACPUSEL0_CH11_Pos)
#define TAL_DMACPUSEL0_CH11(value) (TAL_DMACPUSEL0_CH11_Msk & ((value) << TAL_DMACPUSEL0_CH11_Pos))
#define TAL_DMACPUSEL0_CH12_Pos 24
#define TAL_DMACPUSEL0_CH12_Msk (_U_(0x1) << TAL_DMACPUSEL0_CH12_Pos)
#define TAL_DMACPUSEL0_CH12(value) (TAL_DMACPUSEL0_CH12_Msk & ((value) << TAL_DMACPUSEL0_CH12_Pos))
#define TAL_DMACPUSEL0_CH13_Pos 26
#define TAL_DMACPUSEL0_CH13_Msk (_U_(0x1) << TAL_DMACPUSEL0_CH13_Pos)
#define TAL_DMACPUSEL0_CH13(value) (TAL_DMACPUSEL0_CH13_Msk & ((value) << TAL_DMACPUSEL0_CH13_Pos))
#define TAL_DMACPUSEL0_CH14_Pos 28
#define TAL_DMACPUSEL0_CH14_Msk (_U_(0x1) << TAL_DMACPUSEL0_CH14_Pos)
#define TAL_DMACPUSEL0_CH14(value) (TAL_DMACPUSEL0_CH14_Msk & ((value) << TAL_DMACPUSEL0_CH14_Pos))
#define TAL_DMACPUSEL0_CH15_Pos 30
#define TAL_DMACPUSEL0_CH15_Msk (_U_(0x1) << TAL_DMACPUSEL0_CH15_Pos)
#define TAL_DMACPUSEL0_CH15(value) (TAL_DMACPUSEL0_CH15_Msk & ((value) << TAL_DMACPUSEL0_CH15_Pos))
#define TAL_DMACPUSEL0_MASK _U_(0x55555555)



typedef union {
  struct {
    uint32_t CH16:1;
    uint32_t :1;
    uint32_t CH17:1;
    uint32_t :1;
    uint32_t CH18:1;
    uint32_t :1;
    uint32_t CH19:1;
    uint32_t :1;
    uint32_t CH20:1;
    uint32_t :1;
    uint32_t CH21:1;
    uint32_t :1;
    uint32_t CH22:1;
    uint32_t :1;
    uint32_t CH23:1;
    uint32_t :1;
    uint32_t CH24:1;
    uint32_t :1;
    uint32_t CH25:1;
    uint32_t :1;
    uint32_t CH26:1;
    uint32_t :1;
    uint32_t CH27:1;
    uint32_t :1;
    uint32_t CH28:1;
    uint32_t :1;
    uint32_t CH29:1;
    uint32_t :1;
    uint32_t CH30:1;
    uint32_t :1;
    uint32_t CH31:1;
    uint32_t :1;
  } bit;
  uint32_t reg;
} TAL_DMACPUSEL1_Type;


#define TAL_DMACPUSEL1_OFFSET 0x114
#define TAL_DMACPUSEL1_RESETVALUE _U_(0x00000000)

#define TAL_DMACPUSEL1_CH16_Pos 0
#define TAL_DMACPUSEL1_CH16_Msk (_U_(0x1) << TAL_DMACPUSEL1_CH16_Pos)
#define TAL_DMACPUSEL1_CH16(value) (TAL_DMACPUSEL1_CH16_Msk & ((value) << TAL_DMACPUSEL1_CH16_Pos))
#define TAL_DMACPUSEL1_CH17_Pos 2
#define TAL_DMACPUSEL1_CH17_Msk (_U_(0x1) << TAL_DMACPUSEL1_CH17_Pos)
#define TAL_DMACPUSEL1_CH17(value) (TAL_DMACPUSEL1_CH17_Msk & ((value) << TAL_DMACPUSEL1_CH17_Pos))
#define TAL_DMACPUSEL1_CH18_Pos 4
#define TAL_DMACPUSEL1_CH18_Msk (_U_(0x1) << TAL_DMACPUSEL1_CH18_Pos)
#define TAL_DMACPUSEL1_CH18(value) (TAL_DMACPUSEL1_CH18_Msk & ((value) << TAL_DMACPUSEL1_CH18_Pos))
#define TAL_DMACPUSEL1_CH19_Pos 6
#define TAL_DMACPUSEL1_CH19_Msk (_U_(0x1) << TAL_DMACPUSEL1_CH19_Pos)
#define TAL_DMACPUSEL1_CH19(value) (TAL_DMACPUSEL1_CH19_Msk & ((value) << TAL_DMACPUSEL1_CH19_Pos))
#define TAL_DMACPUSEL1_CH20_Pos 8
#define TAL_DMACPUSEL1_CH20_Msk (_U_(0x1) << TAL_DMACPUSEL1_CH20_Pos)
#define TAL_DMACPUSEL1_CH20(value) (TAL_DMACPUSEL1_CH20_Msk & ((value) << TAL_DMACPUSEL1_CH20_Pos))
#define TAL_DMACPUSEL1_CH21_Pos 10
#define TAL_DMACPUSEL1_CH21_Msk (_U_(0x1) << TAL_DMACPUSEL1_CH21_Pos)
#define TAL_DMACPUSEL1_CH21(value) (TAL_DMACPUSEL1_CH21_Msk & ((value) << TAL_DMACPUSEL1_CH21_Pos))
#define TAL_DMACPUSEL1_CH22_Pos 12
#define TAL_DMACPUSEL1_CH22_Msk (_U_(0x1) << TAL_DMACPUSEL1_CH22_Pos)
#define TAL_DMACPUSEL1_CH22(value) (TAL_DMACPUSEL1_CH22_Msk & ((value) << TAL_DMACPUSEL1_CH22_Pos))
#define TAL_DMACPUSEL1_CH23_Pos 14
#define TAL_DMACPUSEL1_CH23_Msk (_U_(0x1) << TAL_DMACPUSEL1_CH23_Pos)
#define TAL_DMACPUSEL1_CH23(value) (TAL_DMACPUSEL1_CH23_Msk & ((value) << TAL_DMACPUSEL1_CH23_Pos))
#define TAL_DMACPUSEL1_CH24_Pos 16
#define TAL_DMACPUSEL1_CH24_Msk (_U_(0x1) << TAL_DMACPUSEL1_CH24_Pos)
#define TAL_DMACPUSEL1_CH24(value) (TAL_DMACPUSEL1_CH24_Msk & ((value) << TAL_DMACPUSEL1_CH24_Pos))
#define TAL_DMACPUSEL1_CH25_Pos 18
#define TAL_DMACPUSEL1_CH25_Msk (_U_(0x1) << TAL_DMACPUSEL1_CH25_Pos)
#define TAL_DMACPUSEL1_CH25(value) (TAL_DMACPUSEL1_CH25_Msk & ((value) << TAL_DMACPUSEL1_CH25_Pos))
#define TAL_DMACPUSEL1_CH26_Pos 20
#define TAL_DMACPUSEL1_CH26_Msk (_U_(0x1) << TAL_DMACPUSEL1_CH26_Pos)
#define TAL_DMACPUSEL1_CH26(value) (TAL_DMACPUSEL1_CH26_Msk & ((value) << TAL_DMACPUSEL1_CH26_Pos))
#define TAL_DMACPUSEL1_CH27_Pos 22
#define TAL_DMACPUSEL1_CH27_Msk (_U_(0x1) << TAL_DMACPUSEL1_CH27_Pos)
#define TAL_DMACPUSEL1_CH27(value) (TAL_DMACPUSEL1_CH27_Msk & ((value) << TAL_DMACPUSEL1_CH27_Pos))
#define TAL_DMACPUSEL1_CH28_Pos 24
#define TAL_DMACPUSEL1_CH28_Msk (_U_(0x1) << TAL_DMACPUSEL1_CH28_Pos)
#define TAL_DMACPUSEL1_CH28(value) (TAL_DMACPUSEL1_CH28_Msk & ((value) << TAL_DMACPUSEL1_CH28_Pos))
#define TAL_DMACPUSEL1_CH29_Pos 26
#define TAL_DMACPUSEL1_CH29_Msk (_U_(0x1) << TAL_DMACPUSEL1_CH29_Pos)
#define TAL_DMACPUSEL1_CH29(value) (TAL_DMACPUSEL1_CH29_Msk & ((value) << TAL_DMACPUSEL1_CH29_Pos))
#define TAL_DMACPUSEL1_CH30_Pos 28
#define TAL_DMACPUSEL1_CH30_Msk (_U_(0x1) << TAL_DMACPUSEL1_CH30_Pos)
#define TAL_DMACPUSEL1_CH30(value) (TAL_DMACPUSEL1_CH30_Msk & ((value) << TAL_DMACPUSEL1_CH30_Pos))
#define TAL_DMACPUSEL1_CH31_Pos 30
#define TAL_DMACPUSEL1_CH31_Msk (_U_(0x1) << TAL_DMACPUSEL1_CH31_Pos)
#define TAL_DMACPUSEL1_CH31(value) (TAL_DMACPUSEL1_CH31_Msk & ((value) << TAL_DMACPUSEL1_CH31_Pos))
#define TAL_DMACPUSEL1_MASK _U_(0x55555555)



typedef union {
  struct {
    uint32_t CH0:1;
    uint32_t :1;
    uint32_t CH1:1;
    uint32_t :1;
    uint32_t CH2:1;
    uint32_t :1;
    uint32_t CH3:1;
    uint32_t :1;
    uint32_t CH4:1;
    uint32_t :1;
    uint32_t CH5:1;
    uint32_t :1;
    uint32_t CH6:1;
    uint32_t :1;
    uint32_t CH7:1;
    uint32_t :1;
    uint32_t CH8:1;
    uint32_t :1;
    uint32_t CH9:1;
    uint32_t :1;
    uint32_t CH10:1;
    uint32_t :1;
    uint32_t CH11:1;
    uint32_t :9;
  } bit;
  uint32_t reg;
} TAL_EVCPUSEL0_Type;


#define TAL_EVCPUSEL0_OFFSET 0x118
#define TAL_EVCPUSEL0_RESETVALUE _U_(0x00000000)

#define TAL_EVCPUSEL0_CH0_Pos 0
#define TAL_EVCPUSEL0_CH0_Msk (_U_(0x1) << TAL_EVCPUSEL0_CH0_Pos)
#define TAL_EVCPUSEL0_CH0(value) (TAL_EVCPUSEL0_CH0_Msk & ((value) << TAL_EVCPUSEL0_CH0_Pos))
#define TAL_EVCPUSEL0_CH1_Pos 2
#define TAL_EVCPUSEL0_CH1_Msk (_U_(0x1) << TAL_EVCPUSEL0_CH1_Pos)
#define TAL_EVCPUSEL0_CH1(value) (TAL_EVCPUSEL0_CH1_Msk & ((value) << TAL_EVCPUSEL0_CH1_Pos))
#define TAL_EVCPUSEL0_CH2_Pos 4
#define TAL_EVCPUSEL0_CH2_Msk (_U_(0x1) << TAL_EVCPUSEL0_CH2_Pos)
#define TAL_EVCPUSEL0_CH2(value) (TAL_EVCPUSEL0_CH2_Msk & ((value) << TAL_EVCPUSEL0_CH2_Pos))
#define TAL_EVCPUSEL0_CH3_Pos 6
#define TAL_EVCPUSEL0_CH3_Msk (_U_(0x1) << TAL_EVCPUSEL0_CH3_Pos)
#define TAL_EVCPUSEL0_CH3(value) (TAL_EVCPUSEL0_CH3_Msk & ((value) << TAL_EVCPUSEL0_CH3_Pos))
#define TAL_EVCPUSEL0_CH4_Pos 8
#define TAL_EVCPUSEL0_CH4_Msk (_U_(0x1) << TAL_EVCPUSEL0_CH4_Pos)
#define TAL_EVCPUSEL0_CH4(value) (TAL_EVCPUSEL0_CH4_Msk & ((value) << TAL_EVCPUSEL0_CH4_Pos))
#define TAL_EVCPUSEL0_CH5_Pos 10
#define TAL_EVCPUSEL0_CH5_Msk (_U_(0x1) << TAL_EVCPUSEL0_CH5_Pos)
#define TAL_EVCPUSEL0_CH5(value) (TAL_EVCPUSEL0_CH5_Msk & ((value) << TAL_EVCPUSEL0_CH5_Pos))
#define TAL_EVCPUSEL0_CH6_Pos 12
#define TAL_EVCPUSEL0_CH6_Msk (_U_(0x1) << TAL_EVCPUSEL0_CH6_Pos)
#define TAL_EVCPUSEL0_CH6(value) (TAL_EVCPUSEL0_CH6_Msk & ((value) << TAL_EVCPUSEL0_CH6_Pos))
#define TAL_EVCPUSEL0_CH7_Pos 14
#define TAL_EVCPUSEL0_CH7_Msk (_U_(0x1) << TAL_EVCPUSEL0_CH7_Pos)
#define TAL_EVCPUSEL0_CH7(value) (TAL_EVCPUSEL0_CH7_Msk & ((value) << TAL_EVCPUSEL0_CH7_Pos))
#define TAL_EVCPUSEL0_CH8_Pos 16
#define TAL_EVCPUSEL0_CH8_Msk (_U_(0x1) << TAL_EVCPUSEL0_CH8_Pos)
#define TAL_EVCPUSEL0_CH8(value) (TAL_EVCPUSEL0_CH8_Msk & ((value) << TAL_EVCPUSEL0_CH8_Pos))
#define TAL_EVCPUSEL0_CH9_Pos 18
#define TAL_EVCPUSEL0_CH9_Msk (_U_(0x1) << TAL_EVCPUSEL0_CH9_Pos)
#define TAL_EVCPUSEL0_CH9(value) (TAL_EVCPUSEL0_CH9_Msk & ((value) << TAL_EVCPUSEL0_CH9_Pos))
#define TAL_EVCPUSEL0_CH10_Pos 20
#define TAL_EVCPUSEL0_CH10_Msk (_U_(0x1) << TAL_EVCPUSEL0_CH10_Pos)
#define TAL_EVCPUSEL0_CH10(value) (TAL_EVCPUSEL0_CH10_Msk & ((value) << TAL_EVCPUSEL0_CH10_Pos))
#define TAL_EVCPUSEL0_CH11_Pos 22
#define TAL_EVCPUSEL0_CH11_Msk (_U_(0x1) << TAL_EVCPUSEL0_CH11_Pos)
#define TAL_EVCPUSEL0_CH11(value) (TAL_EVCPUSEL0_CH11_Msk & ((value) << TAL_EVCPUSEL0_CH11_Pos))
#define TAL_EVCPUSEL0_MASK _U_(0x00555555)



typedef union {
  struct {
    uint32_t EXTINT0:1;
    uint32_t :1;
    uint32_t EXTINT1:1;
    uint32_t :1;
    uint32_t EXTINT2:1;
    uint32_t :1;
    uint32_t EXTINT3:1;
    uint32_t :1;
    uint32_t EXTINT4:1;
    uint32_t :1;
    uint32_t EXTINT5:1;
    uint32_t :1;
    uint32_t EXTINT6:1;
    uint32_t :1;
    uint32_t EXTINT7:1;
    uint32_t :1;
    uint32_t EXTINT8:1;
    uint32_t :1;
    uint32_t EXTINT9:1;
    uint32_t :1;
    uint32_t EXTINT10:1;
    uint32_t :1;
    uint32_t EXTINT11:1;
    uint32_t :1;
    uint32_t EXTINT12:1;
    uint32_t :1;
    uint32_t EXTINT13:1;
    uint32_t :1;
    uint32_t EXTINT14:1;
    uint32_t :1;
    uint32_t EXTINT15:1;
    uint32_t :1;
  } bit;
  uint32_t reg;
} TAL_EICCPUSEL0_Type;


#define TAL_EICCPUSEL0_OFFSET 0x120
#define TAL_EICCPUSEL0_RESETVALUE _U_(0x00000000)

#define TAL_EICCPUSEL0_EXTINT0_Pos 0
#define TAL_EICCPUSEL0_EXTINT0_Msk (_U_(0x1) << TAL_EICCPUSEL0_EXTINT0_Pos)
#define TAL_EICCPUSEL0_EXTINT0(value) (TAL_EICCPUSEL0_EXTINT0_Msk & ((value) << TAL_EICCPUSEL0_EXTINT0_Pos))
#define TAL_EICCPUSEL0_EXTINT1_Pos 2
#define TAL_EICCPUSEL0_EXTINT1_Msk (_U_(0x1) << TAL_EICCPUSEL0_EXTINT1_Pos)
#define TAL_EICCPUSEL0_EXTINT1(value) (TAL_EICCPUSEL0_EXTINT1_Msk & ((value) << TAL_EICCPUSEL0_EXTINT1_Pos))
#define TAL_EICCPUSEL0_EXTINT2_Pos 4
#define TAL_EICCPUSEL0_EXTINT2_Msk (_U_(0x1) << TAL_EICCPUSEL0_EXTINT2_Pos)
#define TAL_EICCPUSEL0_EXTINT2(value) (TAL_EICCPUSEL0_EXTINT2_Msk & ((value) << TAL_EICCPUSEL0_EXTINT2_Pos))
#define TAL_EICCPUSEL0_EXTINT3_Pos 6
#define TAL_EICCPUSEL0_EXTINT3_Msk (_U_(0x1) << TAL_EICCPUSEL0_EXTINT3_Pos)
#define TAL_EICCPUSEL0_EXTINT3(value) (TAL_EICCPUSEL0_EXTINT3_Msk & ((value) << TAL_EICCPUSEL0_EXTINT3_Pos))
#define TAL_EICCPUSEL0_EXTINT4_Pos 8
#define TAL_EICCPUSEL0_EXTINT4_Msk (_U_(0x1) << TAL_EICCPUSEL0_EXTINT4_Pos)
#define TAL_EICCPUSEL0_EXTINT4(value) (TAL_EICCPUSEL0_EXTINT4_Msk & ((value) << TAL_EICCPUSEL0_EXTINT4_Pos))
#define TAL_EICCPUSEL0_EXTINT5_Pos 10
#define TAL_EICCPUSEL0_EXTINT5_Msk (_U_(0x1) << TAL_EICCPUSEL0_EXTINT5_Pos)
#define TAL_EICCPUSEL0_EXTINT5(value) (TAL_EICCPUSEL0_EXTINT5_Msk & ((value) << TAL_EICCPUSEL0_EXTINT5_Pos))
#define TAL_EICCPUSEL0_EXTINT6_Pos 12
#define TAL_EICCPUSEL0_EXTINT6_Msk (_U_(0x1) << TAL_EICCPUSEL0_EXTINT6_Pos)
#define TAL_EICCPUSEL0_EXTINT6(value) (TAL_EICCPUSEL0_EXTINT6_Msk & ((value) << TAL_EICCPUSEL0_EXTINT6_Pos))
#define TAL_EICCPUSEL0_EXTINT7_Pos 14
#define TAL_EICCPUSEL0_EXTINT7_Msk (_U_(0x1) << TAL_EICCPUSEL0_EXTINT7_Pos)
#define TAL_EICCPUSEL0_EXTINT7(value) (TAL_EICCPUSEL0_EXTINT7_Msk & ((value) << TAL_EICCPUSEL0_EXTINT7_Pos))
#define TAL_EICCPUSEL0_EXTINT8_Pos 16
#define TAL_EICCPUSEL0_EXTINT8_Msk (_U_(0x1) << TAL_EICCPUSEL0_EXTINT8_Pos)
#define TAL_EICCPUSEL0_EXTINT8(value) (TAL_EICCPUSEL0_EXTINT8_Msk & ((value) << TAL_EICCPUSEL0_EXTINT8_Pos))
#define TAL_EICCPUSEL0_EXTINT9_Pos 18
#define TAL_EICCPUSEL0_EXTINT9_Msk (_U_(0x1) << TAL_EICCPUSEL0_EXTINT9_Pos)
#define TAL_EICCPUSEL0_EXTINT9(value) (TAL_EICCPUSEL0_EXTINT9_Msk & ((value) << TAL_EICCPUSEL0_EXTINT9_Pos))
#define TAL_EICCPUSEL0_EXTINT10_Pos 20
#define TAL_EICCPUSEL0_EXTINT10_Msk (_U_(0x1) << TAL_EICCPUSEL0_EXTINT10_Pos)
#define TAL_EICCPUSEL0_EXTINT10(value) (TAL_EICCPUSEL0_EXTINT10_Msk & ((value) << TAL_EICCPUSEL0_EXTINT10_Pos))
#define TAL_EICCPUSEL0_EXTINT11_Pos 22
#define TAL_EICCPUSEL0_EXTINT11_Msk (_U_(0x1) << TAL_EICCPUSEL0_EXTINT11_Pos)
#define TAL_EICCPUSEL0_EXTINT11(value) (TAL_EICCPUSEL0_EXTINT11_Msk & ((value) << TAL_EICCPUSEL0_EXTINT11_Pos))
#define TAL_EICCPUSEL0_EXTINT12_Pos 24
#define TAL_EICCPUSEL0_EXTINT12_Msk (_U_(0x1) << TAL_EICCPUSEL0_EXTINT12_Pos)
#define TAL_EICCPUSEL0_EXTINT12(value) (TAL_EICCPUSEL0_EXTINT12_Msk & ((value) << TAL_EICCPUSEL0_EXTINT12_Pos))
#define TAL_EICCPUSEL0_EXTINT13_Pos 26
#define TAL_EICCPUSEL0_EXTINT13_Msk (_U_(0x1) << TAL_EICCPUSEL0_EXTINT13_Pos)
#define TAL_EICCPUSEL0_EXTINT13(value) (TAL_EICCPUSEL0_EXTINT13_Msk & ((value) << TAL_EICCPUSEL0_EXTINT13_Pos))
#define TAL_EICCPUSEL0_EXTINT14_Pos 28
#define TAL_EICCPUSEL0_EXTINT14_Msk (_U_(0x1) << TAL_EICCPUSEL0_EXTINT14_Pos)
#define TAL_EICCPUSEL0_EXTINT14(value) (TAL_EICCPUSEL0_EXTINT14_Msk & ((value) << TAL_EICCPUSEL0_EXTINT14_Pos))
#define TAL_EICCPUSEL0_EXTINT15_Pos 30
#define TAL_EICCPUSEL0_EXTINT15_Msk (_U_(0x1) << TAL_EICCPUSEL0_EXTINT15_Pos)
#define TAL_EICCPUSEL0_EXTINT15(value) (TAL_EICCPUSEL0_EXTINT15_Msk & ((value) << TAL_EICCPUSEL0_EXTINT15_Pos))
#define TAL_EICCPUSEL0_MASK _U_(0x55555555)



typedef union {
  struct {
    uint32_t PAC:1;
    uint32_t :1;
    uint32_t PM:1;
    uint32_t :1;
    uint32_t MCLK:1;
    uint32_t :3;
    uint32_t OSCCTRL:1;
    uint32_t :1;
    uint32_t OSC32KCTRL:1;
    uint32_t :1;
    uint32_t SUPC:1;
    uint32_t :3;
    uint32_t WDT:1;
    uint32_t :1;
    uint32_t RTC:1;
    uint32_t :1;
    uint32_t EIC:1;
    uint32_t :1;
    uint32_t FREQM:1;
    uint32_t :1;
    uint32_t SERCOM0:1;
    uint32_t :1;
    uint32_t SERCOM1:1;
    uint32_t :1;
    uint32_t TC0:1;
    uint32_t :1;
    uint32_t TC1:1;
    uint32_t :1;
  } bit;
  uint32_t reg;
} TAL_INTCPUSEL0_Type;


#define TAL_INTCPUSEL0_OFFSET 0x128
#define TAL_INTCPUSEL0_RESETVALUE _U_(0x00000000)

#define TAL_INTCPUSEL0_PAC_Pos 0
#define TAL_INTCPUSEL0_PAC_Msk (_U_(0x1) << TAL_INTCPUSEL0_PAC_Pos)
#define TAL_INTCPUSEL0_PAC(value) (TAL_INTCPUSEL0_PAC_Msk & ((value) << TAL_INTCPUSEL0_PAC_Pos))
#define TAL_INTCPUSEL0_PM_Pos 2
#define TAL_INTCPUSEL0_PM_Msk (_U_(0x1) << TAL_INTCPUSEL0_PM_Pos)
#define TAL_INTCPUSEL0_PM(value) (TAL_INTCPUSEL0_PM_Msk & ((value) << TAL_INTCPUSEL0_PM_Pos))
#define TAL_INTCPUSEL0_MCLK_Pos 4
#define TAL_INTCPUSEL0_MCLK_Msk (_U_(0x1) << TAL_INTCPUSEL0_MCLK_Pos)
#define TAL_INTCPUSEL0_MCLK(value) (TAL_INTCPUSEL0_MCLK_Msk & ((value) << TAL_INTCPUSEL0_MCLK_Pos))
#define TAL_INTCPUSEL0_OSCCTRL_Pos 8
#define TAL_INTCPUSEL0_OSCCTRL_Msk (_U_(0x1) << TAL_INTCPUSEL0_OSCCTRL_Pos)
#define TAL_INTCPUSEL0_OSCCTRL(value) (TAL_INTCPUSEL0_OSCCTRL_Msk & ((value) << TAL_INTCPUSEL0_OSCCTRL_Pos))
#define TAL_INTCPUSEL0_OSC32KCTRL_Pos 10
#define TAL_INTCPUSEL0_OSC32KCTRL_Msk (_U_(0x1) << TAL_INTCPUSEL0_OSC32KCTRL_Pos)
#define TAL_INTCPUSEL0_OSC32KCTRL(value) (TAL_INTCPUSEL0_OSC32KCTRL_Msk & ((value) << TAL_INTCPUSEL0_OSC32KCTRL_Pos))
#define TAL_INTCPUSEL0_SUPC_Pos 12
#define TAL_INTCPUSEL0_SUPC_Msk (_U_(0x1) << TAL_INTCPUSEL0_SUPC_Pos)
#define TAL_INTCPUSEL0_SUPC(value) (TAL_INTCPUSEL0_SUPC_Msk & ((value) << TAL_INTCPUSEL0_SUPC_Pos))
#define TAL_INTCPUSEL0_WDT_Pos 16
#define TAL_INTCPUSEL0_WDT_Msk (_U_(0x1) << TAL_INTCPUSEL0_WDT_Pos)
#define TAL_INTCPUSEL0_WDT(value) (TAL_INTCPUSEL0_WDT_Msk & ((value) << TAL_INTCPUSEL0_WDT_Pos))
#define TAL_INTCPUSEL0_RTC_Pos 18
#define TAL_INTCPUSEL0_RTC_Msk (_U_(0x1) << TAL_INTCPUSEL0_RTC_Pos)
#define TAL_INTCPUSEL0_RTC(value) (TAL_INTCPUSEL0_RTC_Msk & ((value) << TAL_INTCPUSEL0_RTC_Pos))
#define TAL_INTCPUSEL0_EIC_Pos 20
#define TAL_INTCPUSEL0_EIC_Msk (_U_(0x1) << TAL_INTCPUSEL0_EIC_Pos)
#define TAL_INTCPUSEL0_EIC(value) (TAL_INTCPUSEL0_EIC_Msk & ((value) << TAL_INTCPUSEL0_EIC_Pos))
#define TAL_INTCPUSEL0_FREQM_Pos 22
#define TAL_INTCPUSEL0_FREQM_Msk (_U_(0x1) << TAL_INTCPUSEL0_FREQM_Pos)
#define TAL_INTCPUSEL0_FREQM(value) (TAL_INTCPUSEL0_FREQM_Msk & ((value) << TAL_INTCPUSEL0_FREQM_Pos))
#define TAL_INTCPUSEL0_SERCOM0_Pos 24
#define TAL_INTCPUSEL0_SERCOM0_Msk (_U_(0x1) << TAL_INTCPUSEL0_SERCOM0_Pos)
#define TAL_INTCPUSEL0_SERCOM0(value) (TAL_INTCPUSEL0_SERCOM0_Msk & ((value) << TAL_INTCPUSEL0_SERCOM0_Pos))
#define TAL_INTCPUSEL0_SERCOM1_Pos 26
#define TAL_INTCPUSEL0_SERCOM1_Msk (_U_(0x1) << TAL_INTCPUSEL0_SERCOM1_Pos)
#define TAL_INTCPUSEL0_SERCOM1(value) (TAL_INTCPUSEL0_SERCOM1_Msk & ((value) << TAL_INTCPUSEL0_SERCOM1_Pos))
#define TAL_INTCPUSEL0_TC0_Pos 28
#define TAL_INTCPUSEL0_TC0_Msk (_U_(0x1) << TAL_INTCPUSEL0_TC0_Pos)
#define TAL_INTCPUSEL0_TC0(value) (TAL_INTCPUSEL0_TC0_Msk & ((value) << TAL_INTCPUSEL0_TC0_Pos))
#define TAL_INTCPUSEL0_TC1_Pos 30
#define TAL_INTCPUSEL0_TC1_Msk (_U_(0x1) << TAL_INTCPUSEL0_TC1_Pos)
#define TAL_INTCPUSEL0_TC1(value) (TAL_INTCPUSEL0_TC1_Msk & ((value) << TAL_INTCPUSEL0_TC1_Pos))
#define TAL_INTCPUSEL0_MASK _U_(0x55551515)



typedef union {
  uint32_t reg;
} TAL_INTCPUSEL1_Type;


#define TAL_INTCPUSEL1_OFFSET 0x12C
#define TAL_INTCPUSEL1_RESETVALUE _U_(0x00000000)
#define TAL_INTCPUSEL1_MASK _U_(0x00000000)



typedef union {
  struct {
    uint32_t USB:1;
    uint32_t :3;
    uint32_t NVMCTRL:1;
    uint32_t :5;
    uint32_t DMAC:1;
    uint32_t :3;
    uint32_t EVSYS:1;
    uint32_t :1;
    uint32_t PICOP:1;
    uint32_t :1;
    uint32_t SERCOM2:1;
    uint32_t :1;
    uint32_t SERCOM3:1;
    uint32_t :1;
    uint32_t TCC0:1;
    uint32_t :1;
    uint32_t TCC1:1;
    uint32_t :1;
    uint32_t TC2:1;
    uint32_t :1;
    uint32_t TC3:1;
    uint32_t :1;
    uint32_t TAL:1;
    uint32_t :1;
  } bit;
  uint32_t reg;
} TAL_INTCPUSEL2_Type;


#define TAL_INTCPUSEL2_OFFSET 0x130
#define TAL_INTCPUSEL2_RESETVALUE _U_(0x00000000)

#define TAL_INTCPUSEL2_USB_Pos 0
#define TAL_INTCPUSEL2_USB_Msk (_U_(0x1) << TAL_INTCPUSEL2_USB_Pos)
#define TAL_INTCPUSEL2_USB(value) (TAL_INTCPUSEL2_USB_Msk & ((value) << TAL_INTCPUSEL2_USB_Pos))
#define TAL_INTCPUSEL2_NVMCTRL_Pos 4
#define TAL_INTCPUSEL2_NVMCTRL_Msk (_U_(0x1) << TAL_INTCPUSEL2_NVMCTRL_Pos)
#define TAL_INTCPUSEL2_NVMCTRL(value) (TAL_INTCPUSEL2_NVMCTRL_Msk & ((value) << TAL_INTCPUSEL2_NVMCTRL_Pos))
#define TAL_INTCPUSEL2_DMAC_Pos 10
#define TAL_INTCPUSEL2_DMAC_Msk (_U_(0x1) << TAL_INTCPUSEL2_DMAC_Pos)
#define TAL_INTCPUSEL2_DMAC(value) (TAL_INTCPUSEL2_DMAC_Msk & ((value) << TAL_INTCPUSEL2_DMAC_Pos))
#define TAL_INTCPUSEL2_EVSYS_Pos 14
#define TAL_INTCPUSEL2_EVSYS_Msk (_U_(0x1) << TAL_INTCPUSEL2_EVSYS_Pos)
#define TAL_INTCPUSEL2_EVSYS(value) (TAL_INTCPUSEL2_EVSYS_Msk & ((value) << TAL_INTCPUSEL2_EVSYS_Pos))
#define TAL_INTCPUSEL2_PICOP_Pos 16
#define TAL_INTCPUSEL2_PICOP_Msk (_U_(0x1) << TAL_INTCPUSEL2_PICOP_Pos)
#define TAL_INTCPUSEL2_PICOP(value) (TAL_INTCPUSEL2_PICOP_Msk & ((value) << TAL_INTCPUSEL2_PICOP_Pos))
#define TAL_INTCPUSEL2_SERCOM2_Pos 18
#define TAL_INTCPUSEL2_SERCOM2_Msk (_U_(0x1) << TAL_INTCPUSEL2_SERCOM2_Pos)
#define TAL_INTCPUSEL2_SERCOM2(value) (TAL_INTCPUSEL2_SERCOM2_Msk & ((value) << TAL_INTCPUSEL2_SERCOM2_Pos))
#define TAL_INTCPUSEL2_SERCOM3_Pos 20
#define TAL_INTCPUSEL2_SERCOM3_Msk (_U_(0x1) << TAL_INTCPUSEL2_SERCOM3_Pos)
#define TAL_INTCPUSEL2_SERCOM3(value) (TAL_INTCPUSEL2_SERCOM3_Msk & ((value) << TAL_INTCPUSEL2_SERCOM3_Pos))
#define TAL_INTCPUSEL2_TCC0_Pos 22
#define TAL_INTCPUSEL2_TCC0_Msk (_U_(0x1) << TAL_INTCPUSEL2_TCC0_Pos)
#define TAL_INTCPUSEL2_TCC0(value) (TAL_INTCPUSEL2_TCC0_Msk & ((value) << TAL_INTCPUSEL2_TCC0_Pos))
#define TAL_INTCPUSEL2_TCC1_Pos 24
#define TAL_INTCPUSEL2_TCC1_Msk (_U_(0x1) << TAL_INTCPUSEL2_TCC1_Pos)
#define TAL_INTCPUSEL2_TCC1(value) (TAL_INTCPUSEL2_TCC1_Msk & ((value) << TAL_INTCPUSEL2_TCC1_Pos))
#define TAL_INTCPUSEL2_TC2_Pos 26
#define TAL_INTCPUSEL2_TC2_Msk (_U_(0x1) << TAL_INTCPUSEL2_TC2_Pos)
#define TAL_INTCPUSEL2_TC2(value) (TAL_INTCPUSEL2_TC2_Msk & ((value) << TAL_INTCPUSEL2_TC2_Pos))
#define TAL_INTCPUSEL2_TC3_Pos 28
#define TAL_INTCPUSEL2_TC3_Msk (_U_(0x1) << TAL_INTCPUSEL2_TC3_Pos)
#define TAL_INTCPUSEL2_TC3(value) (TAL_INTCPUSEL2_TC3_Msk & ((value) << TAL_INTCPUSEL2_TC3_Pos))
#define TAL_INTCPUSEL2_TAL_Pos 30
#define TAL_INTCPUSEL2_TAL_Msk (_U_(0x1) << TAL_INTCPUSEL2_TAL_Pos)
#define TAL_INTCPUSEL2_TAL(value) (TAL_INTCPUSEL2_TAL_Msk & ((value) << TAL_INTCPUSEL2_TAL_Pos))
#define TAL_INTCPUSEL2_MASK _U_(0x55554411)



typedef union {
  struct {
    uint32_t RAMECC:1;
    uint32_t :31;
  } bit;
  uint32_t reg;
} TAL_INTCPUSEL3_Type;


#define TAL_INTCPUSEL3_OFFSET 0x134
#define TAL_INTCPUSEL3_RESETVALUE _U_(0x00000000)

#define TAL_INTCPUSEL3_RAMECC_Pos 0
#define TAL_INTCPUSEL3_RAMECC_Msk (_U_(0x1) << TAL_INTCPUSEL3_RAMECC_Pos)
#define TAL_INTCPUSEL3_RAMECC(value) (TAL_INTCPUSEL3_RAMECC_Msk & ((value) << TAL_INTCPUSEL3_RAMECC_Pos))
#define TAL_INTCPUSEL3_MASK _U_(0x00000001)



typedef union {
  struct {
    uint32_t CAN0:1;
    uint32_t :1;
    uint32_t CAN1:1;
    uint32_t :1;
    uint32_t GMAC:1;
    uint32_t :1;
    uint32_t TCC2:1;
    uint32_t :1;
    uint32_t TCC3:1;
    uint32_t :1;
    uint32_t TC4:1;
    uint32_t :1;
    uint32_t TC5:1;
    uint32_t :1;
    uint32_t PDEC:1;
    uint32_t :1;
    uint32_t AC:1;
    uint32_t :1;
    uint32_t AES:1;
    uint32_t :1;
    uint32_t TRNG:1;
    uint32_t :1;
    uint32_t ICM:1;
    uint32_t :1;
    uint32_t PUKCC:1;
    uint32_t :1;
    uint32_t QSPI:1;
    uint32_t :5;
  } bit;
  uint32_t reg;
} TAL_INTCPUSEL4_Type;


#define TAL_INTCPUSEL4_OFFSET 0x138
#define TAL_INTCPUSEL4_RESETVALUE _U_(0x00000000)

#define TAL_INTCPUSEL4_CAN0_Pos 0
#define TAL_INTCPUSEL4_CAN0_Msk (_U_(0x1) << TAL_INTCPUSEL4_CAN0_Pos)
#define TAL_INTCPUSEL4_CAN0(value) (TAL_INTCPUSEL4_CAN0_Msk & ((value) << TAL_INTCPUSEL4_CAN0_Pos))
#define TAL_INTCPUSEL4_CAN1_Pos 2
#define TAL_INTCPUSEL4_CAN1_Msk (_U_(0x1) << TAL_INTCPUSEL4_CAN1_Pos)
#define TAL_INTCPUSEL4_CAN1(value) (TAL_INTCPUSEL4_CAN1_Msk & ((value) << TAL_INTCPUSEL4_CAN1_Pos))
#define TAL_INTCPUSEL4_GMAC_Pos 4
#define TAL_INTCPUSEL4_GMAC_Msk (_U_(0x1) << TAL_INTCPUSEL4_GMAC_Pos)
#define TAL_INTCPUSEL4_GMAC(value) (TAL_INTCPUSEL4_GMAC_Msk & ((value) << TAL_INTCPUSEL4_GMAC_Pos))
#define TAL_INTCPUSEL4_TCC2_Pos 6
#define TAL_INTCPUSEL4_TCC2_Msk (_U_(0x1) << TAL_INTCPUSEL4_TCC2_Pos)
#define TAL_INTCPUSEL4_TCC2(value) (TAL_INTCPUSEL4_TCC2_Msk & ((value) << TAL_INTCPUSEL4_TCC2_Pos))
#define TAL_INTCPUSEL4_TCC3_Pos 8
#define TAL_INTCPUSEL4_TCC3_Msk (_U_(0x1) << TAL_INTCPUSEL4_TCC3_Pos)
#define TAL_INTCPUSEL4_TCC3(value) (TAL_INTCPUSEL4_TCC3_Msk & ((value) << TAL_INTCPUSEL4_TCC3_Pos))
#define TAL_INTCPUSEL4_TC4_Pos 10
#define TAL_INTCPUSEL4_TC4_Msk (_U_(0x1) << TAL_INTCPUSEL4_TC4_Pos)
#define TAL_INTCPUSEL4_TC4(value) (TAL_INTCPUSEL4_TC4_Msk & ((value) << TAL_INTCPUSEL4_TC4_Pos))
#define TAL_INTCPUSEL4_TC5_Pos 12
#define TAL_INTCPUSEL4_TC5_Msk (_U_(0x1) << TAL_INTCPUSEL4_TC5_Pos)
#define TAL_INTCPUSEL4_TC5(value) (TAL_INTCPUSEL4_TC5_Msk & ((value) << TAL_INTCPUSEL4_TC5_Pos))
#define TAL_INTCPUSEL4_PDEC_Pos 14
#define TAL_INTCPUSEL4_PDEC_Msk (_U_(0x1) << TAL_INTCPUSEL4_PDEC_Pos)
#define TAL_INTCPUSEL4_PDEC(value) (TAL_INTCPUSEL4_PDEC_Msk & ((value) << TAL_INTCPUSEL4_PDEC_Pos))
#define TAL_INTCPUSEL4_AC_Pos 16
#define TAL_INTCPUSEL4_AC_Msk (_U_(0x1) << TAL_INTCPUSEL4_AC_Pos)
#define TAL_INTCPUSEL4_AC(value) (TAL_INTCPUSEL4_AC_Msk & ((value) << TAL_INTCPUSEL4_AC_Pos))
#define TAL_INTCPUSEL4_AES_Pos 18
#define TAL_INTCPUSEL4_AES_Msk (_U_(0x1) << TAL_INTCPUSEL4_AES_Pos)
#define TAL_INTCPUSEL4_AES(value) (TAL_INTCPUSEL4_AES_Msk & ((value) << TAL_INTCPUSEL4_AES_Pos))
#define TAL_INTCPUSEL4_TRNG_Pos 20
#define TAL_INTCPUSEL4_TRNG_Msk (_U_(0x1) << TAL_INTCPUSEL4_TRNG_Pos)
#define TAL_INTCPUSEL4_TRNG(value) (TAL_INTCPUSEL4_TRNG_Msk & ((value) << TAL_INTCPUSEL4_TRNG_Pos))
#define TAL_INTCPUSEL4_ICM_Pos 22
#define TAL_INTCPUSEL4_ICM_Msk (_U_(0x1) << TAL_INTCPUSEL4_ICM_Pos)
#define TAL_INTCPUSEL4_ICM(value) (TAL_INTCPUSEL4_ICM_Msk & ((value) << TAL_INTCPUSEL4_ICM_Pos))
#define TAL_INTCPUSEL4_PUKCC_Pos 24
#define TAL_INTCPUSEL4_PUKCC_Msk (_U_(0x1) << TAL_INTCPUSEL4_PUKCC_Pos)
#define TAL_INTCPUSEL4_PUKCC(value) (TAL_INTCPUSEL4_PUKCC_Msk & ((value) << TAL_INTCPUSEL4_PUKCC_Pos))
#define TAL_INTCPUSEL4_QSPI_Pos 26
#define TAL_INTCPUSEL4_QSPI_Msk (_U_(0x1) << TAL_INTCPUSEL4_QSPI_Pos)
#define TAL_INTCPUSEL4_QSPI(value) (TAL_INTCPUSEL4_QSPI_Msk & ((value) << TAL_INTCPUSEL4_QSPI_Pos))
#define TAL_INTCPUSEL4_MASK _U_(0x05555555)



typedef union {
  uint32_t reg;
} TAL_INTCPUSEL5_Type;


#define TAL_INTCPUSEL5_OFFSET 0x13C
#define TAL_INTCPUSEL5_RESETVALUE _U_(0x00000000)
#define TAL_INTCPUSEL5_MASK _U_(0x00000000)



typedef union {
  struct {
    uint32_t SERCOM4:1;
    uint32_t :1;
    uint32_t SERCOM5:1;
    uint32_t :1;
    uint32_t SERCOM6:1;
    uint32_t :1;
    uint32_t SERCOM7:1;
    uint32_t :1;
    uint32_t TCC4:1;
    uint32_t :1;
    uint32_t TC6:1;
    uint32_t :1;
    uint32_t TC7:1;
    uint32_t :1;
    uint32_t ADC0:1;
    uint32_t :1;
    uint32_t ADC1:1;
    uint32_t :1;
    uint32_t DAC:1;
    uint32_t :1;
    uint32_t I2S:1;
    uint32_t :1;
    uint32_t PCC:1;
    uint32_t :9;
  } bit;
  uint32_t reg;
} TAL_INTCPUSEL6_Type;


#define TAL_INTCPUSEL6_OFFSET 0x140
#define TAL_INTCPUSEL6_RESETVALUE _U_(0x00000000)

#define TAL_INTCPUSEL6_SERCOM4_Pos 0
#define TAL_INTCPUSEL6_SERCOM4_Msk (_U_(0x1) << TAL_INTCPUSEL6_SERCOM4_Pos)
#define TAL_INTCPUSEL6_SERCOM4(value) (TAL_INTCPUSEL6_SERCOM4_Msk & ((value) << TAL_INTCPUSEL6_SERCOM4_Pos))
#define TAL_INTCPUSEL6_SERCOM5_Pos 2
#define TAL_INTCPUSEL6_SERCOM5_Msk (_U_(0x1) << TAL_INTCPUSEL6_SERCOM5_Pos)
#define TAL_INTCPUSEL6_SERCOM5(value) (TAL_INTCPUSEL6_SERCOM5_Msk & ((value) << TAL_INTCPUSEL6_SERCOM5_Pos))
#define TAL_INTCPUSEL6_SERCOM6_Pos 4
#define TAL_INTCPUSEL6_SERCOM6_Msk (_U_(0x1) << TAL_INTCPUSEL6_SERCOM6_Pos)
#define TAL_INTCPUSEL6_SERCOM6(value) (TAL_INTCPUSEL6_SERCOM6_Msk & ((value) << TAL_INTCPUSEL6_SERCOM6_Pos))
#define TAL_INTCPUSEL6_SERCOM7_Pos 6
#define TAL_INTCPUSEL6_SERCOM7_Msk (_U_(0x1) << TAL_INTCPUSEL6_SERCOM7_Pos)
#define TAL_INTCPUSEL6_SERCOM7(value) (TAL_INTCPUSEL6_SERCOM7_Msk & ((value) << TAL_INTCPUSEL6_SERCOM7_Pos))
#define TAL_INTCPUSEL6_TCC4_Pos 8
#define TAL_INTCPUSEL6_TCC4_Msk (_U_(0x1) << TAL_INTCPUSEL6_TCC4_Pos)
#define TAL_INTCPUSEL6_TCC4(value) (TAL_INTCPUSEL6_TCC4_Msk & ((value) << TAL_INTCPUSEL6_TCC4_Pos))
#define TAL_INTCPUSEL6_TC6_Pos 10
#define TAL_INTCPUSEL6_TC6_Msk (_U_(0x1) << TAL_INTCPUSEL6_TC6_Pos)
#define TAL_INTCPUSEL6_TC6(value) (TAL_INTCPUSEL6_TC6_Msk & ((value) << TAL_INTCPUSEL6_TC6_Pos))
#define TAL_INTCPUSEL6_TC7_Pos 12
#define TAL_INTCPUSEL6_TC7_Msk (_U_(0x1) << TAL_INTCPUSEL6_TC7_Pos)
#define TAL_INTCPUSEL6_TC7(value) (TAL_INTCPUSEL6_TC7_Msk & ((value) << TAL_INTCPUSEL6_TC7_Pos))
#define TAL_INTCPUSEL6_ADC0_Pos 14
#define TAL_INTCPUSEL6_ADC0_Msk (_U_(0x1) << TAL_INTCPUSEL6_ADC0_Pos)
#define TAL_INTCPUSEL6_ADC0(value) (TAL_INTCPUSEL6_ADC0_Msk & ((value) << TAL_INTCPUSEL6_ADC0_Pos))
#define TAL_INTCPUSEL6_ADC1_Pos 16
#define TAL_INTCPUSEL6_ADC1_Msk (_U_(0x1) << TAL_INTCPUSEL6_ADC1_Pos)
#define TAL_INTCPUSEL6_ADC1(value) (TAL_INTCPUSEL6_ADC1_Msk & ((value) << TAL_INTCPUSEL6_ADC1_Pos))
#define TAL_INTCPUSEL6_DAC_Pos 18
#define TAL_INTCPUSEL6_DAC_Msk (_U_(0x1) << TAL_INTCPUSEL6_DAC_Pos)
#define TAL_INTCPUSEL6_DAC(value) (TAL_INTCPUSEL6_DAC_Msk & ((value) << TAL_INTCPUSEL6_DAC_Pos))
#define TAL_INTCPUSEL6_I2S_Pos 20
#define TAL_INTCPUSEL6_I2S_Msk (_U_(0x1) << TAL_INTCPUSEL6_I2S_Pos)
#define TAL_INTCPUSEL6_I2S(value) (TAL_INTCPUSEL6_I2S_Msk & ((value) << TAL_INTCPUSEL6_I2S_Pos))
#define TAL_INTCPUSEL6_PCC_Pos 22
#define TAL_INTCPUSEL6_PCC_Msk (_U_(0x1) << TAL_INTCPUSEL6_PCC_Pos)
#define TAL_INTCPUSEL6_PCC(value) (TAL_INTCPUSEL6_PCC_Msk & ((value) << TAL_INTCPUSEL6_PCC_Pos))
#define TAL_INTCPUSEL6_MASK _U_(0x00555555)



typedef union {
  uint32_t reg;
} TAL_INTCPUSEL7_Type;


#define TAL_INTCPUSEL7_OFFSET 0x144
#define TAL_INTCPUSEL7_RESETVALUE _U_(0x00000000)
#define TAL_INTCPUSEL7_MASK _U_(0x00000000)



typedef union {
  struct {
    uint32_t SDHC0:1;
    uint32_t :1;
    uint32_t SDHC1:1;
    uint32_t :29;
  } bit;
  uint32_t reg;
} TAL_INTCPUSEL8_Type;


#define TAL_INTCPUSEL8_OFFSET 0x148
#define TAL_INTCPUSEL8_RESETVALUE _U_(0x00000000)

#define TAL_INTCPUSEL8_SDHC0_Pos 0
#define TAL_INTCPUSEL8_SDHC0_Msk (_U_(0x1) << TAL_INTCPUSEL8_SDHC0_Pos)
#define TAL_INTCPUSEL8_SDHC0(value) (TAL_INTCPUSEL8_SDHC0_Msk & ((value) << TAL_INTCPUSEL8_SDHC0_Pos))
#define TAL_INTCPUSEL8_SDHC1_Pos 2
#define TAL_INTCPUSEL8_SDHC1_Msk (_U_(0x1) << TAL_INTCPUSEL8_SDHC1_Pos)
#define TAL_INTCPUSEL8_SDHC1(value) (TAL_INTCPUSEL8_SDHC1_Msk & ((value) << TAL_INTCPUSEL8_SDHC1_Pos))
#define TAL_INTCPUSEL8_MASK _U_(0x00000005)



typedef union {
  struct {
    uint32_t ENABLE:1;
    uint32_t :7;
    uint32_t IRQNUM:8;
    uint32_t OVERRIDE:8;
    uint32_t :8;
  } bit;
  uint32_t reg;
} TAL_IRQTRIG_Type;


#define TAL_IRQTRIG_OFFSET 0x164
#define TAL_IRQTRIG_RESETVALUE _U_(0x00000000)

#define TAL_IRQTRIG_ENABLE_Pos 0
#define TAL_IRQTRIG_ENABLE (_U_(0x1) << TAL_IRQTRIG_ENABLE_Pos)
#define TAL_IRQTRIG_IRQNUM_Pos 8
#define TAL_IRQTRIG_IRQNUM_Msk (_U_(0xFF) << TAL_IRQTRIG_IRQNUM_Pos)
#define TAL_IRQTRIG_IRQNUM(value) (TAL_IRQTRIG_IRQNUM_Msk & ((value) << TAL_IRQTRIG_IRQNUM_Pos))
#define TAL_IRQTRIG_OVERRIDE_Pos 16
#define TAL_IRQTRIG_OVERRIDE_Msk (_U_(0xFF) << TAL_IRQTRIG_OVERRIDE_Pos)
#define TAL_IRQTRIG_OVERRIDE(value) (TAL_IRQTRIG_OVERRIDE_Msk & ((value) << TAL_IRQTRIG_OVERRIDE_Pos))
#define TAL_IRQTRIG_MASK _U_(0x00FFFF01)



typedef union {
  struct {
    uint16_t EXTEND:1;
    uint16_t DROP:1;
    uint16_t CPUID:1;
    uint16_t :5;
    uint16_t IRQNUM:8;
  } bit;
  uint16_t reg;
} TAL_IRQMON_Type;


#define TAL_IRQMON_OFFSET 0x168
#define TAL_IRQMON_RESETVALUE _U_(0x0000)

#define TAL_IRQMON_EXTEND_Pos 0
#define TAL_IRQMON_EXTEND (_U_(0x1) << TAL_IRQMON_EXTEND_Pos)
#define TAL_IRQMON_EXTEND_NO_Val _U_(0x0)
#define TAL_IRQMON_EXTEND_YES_Val _U_(0x1)
#define TAL_IRQMON_EXTEND_NO (TAL_IRQMON_EXTEND_NO_Val << TAL_IRQMON_EXTEND_Pos)
#define TAL_IRQMON_EXTEND_YES (TAL_IRQMON_EXTEND_YES_Val << TAL_IRQMON_EXTEND_Pos)
#define TAL_IRQMON_DROP_Pos 1
#define TAL_IRQMON_DROP (_U_(0x1) << TAL_IRQMON_DROP_Pos)
#define TAL_IRQMON_CPUID_Pos 2
#define TAL_IRQMON_CPUID_Msk (_U_(0x1) << TAL_IRQMON_CPUID_Pos)
#define TAL_IRQMON_CPUID(value) (TAL_IRQMON_CPUID_Msk & ((value) << TAL_IRQMON_CPUID_Pos))
#define TAL_IRQMON_IRQNUM_Pos 8
#define TAL_IRQMON_IRQNUM_Msk (_U_(0xFF) << TAL_IRQMON_IRQNUM_Pos)
#define TAL_IRQMON_IRQNUM(value) (TAL_IRQMON_IRQNUM_Msk & ((value) << TAL_IRQMON_IRQNUM_Pos))
#define TAL_IRQMON_MASK _U_(0xFF07)



typedef union {
  struct {
    uint32_t CPUIRQS:32;
  } bit;
  uint32_t reg;
} TAL_CPUIRQS_Type;


#define TAL_CPUIRQS_OFFSET 0x180
#define TAL_CPUIRQS_RESETVALUE _U_(0x00000000)

#define TAL_CPUIRQS_CPUIRQS_Pos 0
#define TAL_CPUIRQS_CPUIRQS_Msk (_U_(0xFFFFFFFF) << TAL_CPUIRQS_CPUIRQS_Pos)
#define TAL_CPUIRQS_CPUIRQS(value) (TAL_CPUIRQS_CPUIRQS_Msk & ((value) << TAL_CPUIRQS_CPUIRQS_Pos))
#define TAL_CPUIRQS_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t IPS0:1;
    uint32_t IPS1:1;
    uint32_t IPS2:1;
    uint32_t IPS3:1;
    uint32_t IPS4:1;
    uint32_t IPS5:1;
    uint32_t IPS6:1;
    uint32_t IPS7:1;
    uint32_t IPS8:1;
    uint32_t IPS9:1;
    uint32_t IPS10:1;
    uint32_t IPS11:1;
    uint32_t IPS12:1;
    uint32_t IPS13:1;
    uint32_t IPS14:1;
    uint32_t IPS15:1;
    uint32_t IPS16:1;
    uint32_t IPS17:1;
    uint32_t IPS18:1;
    uint32_t IPS19:1;
    uint32_t IPS20:1;
    uint32_t IPS21:1;
    uint32_t IPS22:1;
    uint32_t IPS23:1;
    uint32_t IPS24:1;
    uint32_t IPS25:1;
    uint32_t IPS26:1;
    uint32_t IPS27:1;
    uint32_t IPS28:1;
    uint32_t IPS29:1;
    uint32_t IPS30:1;
    uint32_t IPS31:1;
  } bit;
  struct {
    uint32_t IPS:32;
  } vec;
  uint32_t reg;
} TAL_SMASK_Type;


#define TAL_SMASK_OFFSET 0x200
#define TAL_SMASK_RESETVALUE _U_(0x00000000)

#define TAL_SMASK_IPS0_Pos 0
#define TAL_SMASK_IPS0 (_U_(1) << TAL_SMASK_IPS0_Pos)
#define TAL_SMASK_IPS1_Pos 1
#define TAL_SMASK_IPS1 (_U_(1) << TAL_SMASK_IPS1_Pos)
#define TAL_SMASK_IPS2_Pos 2
#define TAL_SMASK_IPS2 (_U_(1) << TAL_SMASK_IPS2_Pos)
#define TAL_SMASK_IPS3_Pos 3
#define TAL_SMASK_IPS3 (_U_(1) << TAL_SMASK_IPS3_Pos)
#define TAL_SMASK_IPS4_Pos 4
#define TAL_SMASK_IPS4 (_U_(1) << TAL_SMASK_IPS4_Pos)
#define TAL_SMASK_IPS5_Pos 5
#define TAL_SMASK_IPS5 (_U_(1) << TAL_SMASK_IPS5_Pos)
#define TAL_SMASK_IPS6_Pos 6
#define TAL_SMASK_IPS6 (_U_(1) << TAL_SMASK_IPS6_Pos)
#define TAL_SMASK_IPS7_Pos 7
#define TAL_SMASK_IPS7 (_U_(1) << TAL_SMASK_IPS7_Pos)
#define TAL_SMASK_IPS8_Pos 8
#define TAL_SMASK_IPS8 (_U_(1) << TAL_SMASK_IPS8_Pos)
#define TAL_SMASK_IPS9_Pos 9
#define TAL_SMASK_IPS9 (_U_(1) << TAL_SMASK_IPS9_Pos)
#define TAL_SMASK_IPS10_Pos 10
#define TAL_SMASK_IPS10 (_U_(1) << TAL_SMASK_IPS10_Pos)
#define TAL_SMASK_IPS11_Pos 11
#define TAL_SMASK_IPS11 (_U_(1) << TAL_SMASK_IPS11_Pos)
#define TAL_SMASK_IPS12_Pos 12
#define TAL_SMASK_IPS12 (_U_(1) << TAL_SMASK_IPS12_Pos)
#define TAL_SMASK_IPS13_Pos 13
#define TAL_SMASK_IPS13 (_U_(1) << TAL_SMASK_IPS13_Pos)
#define TAL_SMASK_IPS14_Pos 14
#define TAL_SMASK_IPS14 (_U_(1) << TAL_SMASK_IPS14_Pos)
#define TAL_SMASK_IPS15_Pos 15
#define TAL_SMASK_IPS15 (_U_(1) << TAL_SMASK_IPS15_Pos)
#define TAL_SMASK_IPS16_Pos 16
#define TAL_SMASK_IPS16 (_U_(1) << TAL_SMASK_IPS16_Pos)
#define TAL_SMASK_IPS17_Pos 17
#define TAL_SMASK_IPS17 (_U_(1) << TAL_SMASK_IPS17_Pos)
#define TAL_SMASK_IPS18_Pos 18
#define TAL_SMASK_IPS18 (_U_(1) << TAL_SMASK_IPS18_Pos)
#define TAL_SMASK_IPS19_Pos 19
#define TAL_SMASK_IPS19 (_U_(1) << TAL_SMASK_IPS19_Pos)
#define TAL_SMASK_IPS20_Pos 20
#define TAL_SMASK_IPS20 (_U_(1) << TAL_SMASK_IPS20_Pos)
#define TAL_SMASK_IPS21_Pos 21
#define TAL_SMASK_IPS21 (_U_(1) << TAL_SMASK_IPS21_Pos)
#define TAL_SMASK_IPS22_Pos 22
#define TAL_SMASK_IPS22 (_U_(1) << TAL_SMASK_IPS22_Pos)
#define TAL_SMASK_IPS23_Pos 23
#define TAL_SMASK_IPS23 (_U_(1) << TAL_SMASK_IPS23_Pos)
#define TAL_SMASK_IPS24_Pos 24
#define TAL_SMASK_IPS24 (_U_(1) << TAL_SMASK_IPS24_Pos)
#define TAL_SMASK_IPS25_Pos 25
#define TAL_SMASK_IPS25 (_U_(1) << TAL_SMASK_IPS25_Pos)
#define TAL_SMASK_IPS26_Pos 26
#define TAL_SMASK_IPS26 (_U_(1) << TAL_SMASK_IPS26_Pos)
#define TAL_SMASK_IPS27_Pos 27
#define TAL_SMASK_IPS27 (_U_(1) << TAL_SMASK_IPS27_Pos)
#define TAL_SMASK_IPS28_Pos 28
#define TAL_SMASK_IPS28 (_U_(1) << TAL_SMASK_IPS28_Pos)
#define TAL_SMASK_IPS29_Pos 29
#define TAL_SMASK_IPS29 (_U_(1) << TAL_SMASK_IPS29_Pos)
#define TAL_SMASK_IPS30_Pos 30
#define TAL_SMASK_IPS30 (_U_(1) << TAL_SMASK_IPS30_Pos)
#define TAL_SMASK_IPS31_Pos 31
#define TAL_SMASK_IPS31 (_U_(1) << TAL_SMASK_IPS31_Pos)
#define TAL_SMASK_IPS_Pos 0
#define TAL_SMASK_IPS_Msk (_U_(0xFFFFFFFF) << TAL_SMASK_IPS_Pos)
#define TAL_SMASK_IPS(value) (TAL_SMASK_IPS_Msk & ((value) << TAL_SMASK_IPS_Pos))
#define TAL_SMASK_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t IPS0:1;
    uint32_t IPS1:1;
    uint32_t IPS2:1;
    uint32_t IPS3:1;
    uint32_t IPS4:1;
    uint32_t IPS5:1;
    uint32_t IPS6:1;
    uint32_t IPS7:1;
    uint32_t IPS8:1;
    uint32_t IPS9:1;
    uint32_t IPS10:1;
    uint32_t IPS11:1;
    uint32_t IPS12:1;
    uint32_t IPS13:1;
    uint32_t IPS14:1;
    uint32_t IPS15:1;
    uint32_t IPS16:1;
    uint32_t IPS17:1;
    uint32_t IPS18:1;
    uint32_t IPS19:1;
    uint32_t IPS20:1;
    uint32_t IPS21:1;
    uint32_t IPS22:1;
    uint32_t IPS23:1;
    uint32_t IPS24:1;
    uint32_t IPS25:1;
    uint32_t IPS26:1;
    uint32_t IPS27:1;
    uint32_t IPS28:1;
    uint32_t IPS29:1;
    uint32_t IPS30:1;
    uint32_t IPS31:1;
  } bit;
  struct {
    uint32_t IPS:32;
  } vec;
  uint32_t reg;
} TAL_SFLAGCLR_Type;


#define TAL_SFLAGCLR_OFFSET 0x220
#define TAL_SFLAGCLR_RESETVALUE _U_(0x00000000)

#define TAL_SFLAGCLR_IPS0_Pos 0
#define TAL_SFLAGCLR_IPS0 (_U_(1) << TAL_SFLAGCLR_IPS0_Pos)
#define TAL_SFLAGCLR_IPS1_Pos 1
#define TAL_SFLAGCLR_IPS1 (_U_(1) << TAL_SFLAGCLR_IPS1_Pos)
#define TAL_SFLAGCLR_IPS2_Pos 2
#define TAL_SFLAGCLR_IPS2 (_U_(1) << TAL_SFLAGCLR_IPS2_Pos)
#define TAL_SFLAGCLR_IPS3_Pos 3
#define TAL_SFLAGCLR_IPS3 (_U_(1) << TAL_SFLAGCLR_IPS3_Pos)
#define TAL_SFLAGCLR_IPS4_Pos 4
#define TAL_SFLAGCLR_IPS4 (_U_(1) << TAL_SFLAGCLR_IPS4_Pos)
#define TAL_SFLAGCLR_IPS5_Pos 5
#define TAL_SFLAGCLR_IPS5 (_U_(1) << TAL_SFLAGCLR_IPS5_Pos)
#define TAL_SFLAGCLR_IPS6_Pos 6
#define TAL_SFLAGCLR_IPS6 (_U_(1) << TAL_SFLAGCLR_IPS6_Pos)
#define TAL_SFLAGCLR_IPS7_Pos 7
#define TAL_SFLAGCLR_IPS7 (_U_(1) << TAL_SFLAGCLR_IPS7_Pos)
#define TAL_SFLAGCLR_IPS8_Pos 8
#define TAL_SFLAGCLR_IPS8 (_U_(1) << TAL_SFLAGCLR_IPS8_Pos)
#define TAL_SFLAGCLR_IPS9_Pos 9
#define TAL_SFLAGCLR_IPS9 (_U_(1) << TAL_SFLAGCLR_IPS9_Pos)
#define TAL_SFLAGCLR_IPS10_Pos 10
#define TAL_SFLAGCLR_IPS10 (_U_(1) << TAL_SFLAGCLR_IPS10_Pos)
#define TAL_SFLAGCLR_IPS11_Pos 11
#define TAL_SFLAGCLR_IPS11 (_U_(1) << TAL_SFLAGCLR_IPS11_Pos)
#define TAL_SFLAGCLR_IPS12_Pos 12
#define TAL_SFLAGCLR_IPS12 (_U_(1) << TAL_SFLAGCLR_IPS12_Pos)
#define TAL_SFLAGCLR_IPS13_Pos 13
#define TAL_SFLAGCLR_IPS13 (_U_(1) << TAL_SFLAGCLR_IPS13_Pos)
#define TAL_SFLAGCLR_IPS14_Pos 14
#define TAL_SFLAGCLR_IPS14 (_U_(1) << TAL_SFLAGCLR_IPS14_Pos)
#define TAL_SFLAGCLR_IPS15_Pos 15
#define TAL_SFLAGCLR_IPS15 (_U_(1) << TAL_SFLAGCLR_IPS15_Pos)
#define TAL_SFLAGCLR_IPS16_Pos 16
#define TAL_SFLAGCLR_IPS16 (_U_(1) << TAL_SFLAGCLR_IPS16_Pos)
#define TAL_SFLAGCLR_IPS17_Pos 17
#define TAL_SFLAGCLR_IPS17 (_U_(1) << TAL_SFLAGCLR_IPS17_Pos)
#define TAL_SFLAGCLR_IPS18_Pos 18
#define TAL_SFLAGCLR_IPS18 (_U_(1) << TAL_SFLAGCLR_IPS18_Pos)
#define TAL_SFLAGCLR_IPS19_Pos 19
#define TAL_SFLAGCLR_IPS19 (_U_(1) << TAL_SFLAGCLR_IPS19_Pos)
#define TAL_SFLAGCLR_IPS20_Pos 20
#define TAL_SFLAGCLR_IPS20 (_U_(1) << TAL_SFLAGCLR_IPS20_Pos)
#define TAL_SFLAGCLR_IPS21_Pos 21
#define TAL_SFLAGCLR_IPS21 (_U_(1) << TAL_SFLAGCLR_IPS21_Pos)
#define TAL_SFLAGCLR_IPS22_Pos 22
#define TAL_SFLAGCLR_IPS22 (_U_(1) << TAL_SFLAGCLR_IPS22_Pos)
#define TAL_SFLAGCLR_IPS23_Pos 23
#define TAL_SFLAGCLR_IPS23 (_U_(1) << TAL_SFLAGCLR_IPS23_Pos)
#define TAL_SFLAGCLR_IPS24_Pos 24
#define TAL_SFLAGCLR_IPS24 (_U_(1) << TAL_SFLAGCLR_IPS24_Pos)
#define TAL_SFLAGCLR_IPS25_Pos 25
#define TAL_SFLAGCLR_IPS25 (_U_(1) << TAL_SFLAGCLR_IPS25_Pos)
#define TAL_SFLAGCLR_IPS26_Pos 26
#define TAL_SFLAGCLR_IPS26 (_U_(1) << TAL_SFLAGCLR_IPS26_Pos)
#define TAL_SFLAGCLR_IPS27_Pos 27
#define TAL_SFLAGCLR_IPS27 (_U_(1) << TAL_SFLAGCLR_IPS27_Pos)
#define TAL_SFLAGCLR_IPS28_Pos 28
#define TAL_SFLAGCLR_IPS28 (_U_(1) << TAL_SFLAGCLR_IPS28_Pos)
#define TAL_SFLAGCLR_IPS29_Pos 29
#define TAL_SFLAGCLR_IPS29 (_U_(1) << TAL_SFLAGCLR_IPS29_Pos)
#define TAL_SFLAGCLR_IPS30_Pos 30
#define TAL_SFLAGCLR_IPS30 (_U_(1) << TAL_SFLAGCLR_IPS30_Pos)
#define TAL_SFLAGCLR_IPS31_Pos 31
#define TAL_SFLAGCLR_IPS31 (_U_(1) << TAL_SFLAGCLR_IPS31_Pos)
#define TAL_SFLAGCLR_IPS_Pos 0
#define TAL_SFLAGCLR_IPS_Msk (_U_(0xFFFFFFFF) << TAL_SFLAGCLR_IPS_Pos)
#define TAL_SFLAGCLR_IPS(value) (TAL_SFLAGCLR_IPS_Msk & ((value) << TAL_SFLAGCLR_IPS_Pos))
#define TAL_SFLAGCLR_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t IPS0:1;
    uint32_t IPS1:1;
    uint32_t IPS2:1;
    uint32_t IPS3:1;
    uint32_t IPS4:1;
    uint32_t IPS5:1;
    uint32_t IPS6:1;
    uint32_t IPS7:1;
    uint32_t IPS8:1;
    uint32_t IPS9:1;
    uint32_t IPS10:1;
    uint32_t IPS11:1;
    uint32_t IPS12:1;
    uint32_t IPS13:1;
    uint32_t IPS14:1;
    uint32_t IPS15:1;
    uint32_t IPS16:1;
    uint32_t IPS17:1;
    uint32_t IPS18:1;
    uint32_t IPS19:1;
    uint32_t IPS20:1;
    uint32_t IPS21:1;
    uint32_t IPS22:1;
    uint32_t IPS23:1;
    uint32_t IPS24:1;
    uint32_t IPS25:1;
    uint32_t IPS26:1;
    uint32_t IPS27:1;
    uint32_t IPS28:1;
    uint32_t IPS29:1;
    uint32_t IPS30:1;
    uint32_t IPS31:1;
  } bit;
  struct {
    uint32_t IPS:32;
  } vec;
  uint32_t reg;
} TAL_SFLAGSET_Type;


#define TAL_SFLAGSET_OFFSET 0x228
#define TAL_SFLAGSET_RESETVALUE _U_(0x00000000)

#define TAL_SFLAGSET_IPS0_Pos 0
#define TAL_SFLAGSET_IPS0 (_U_(1) << TAL_SFLAGSET_IPS0_Pos)
#define TAL_SFLAGSET_IPS1_Pos 1
#define TAL_SFLAGSET_IPS1 (_U_(1) << TAL_SFLAGSET_IPS1_Pos)
#define TAL_SFLAGSET_IPS2_Pos 2
#define TAL_SFLAGSET_IPS2 (_U_(1) << TAL_SFLAGSET_IPS2_Pos)
#define TAL_SFLAGSET_IPS3_Pos 3
#define TAL_SFLAGSET_IPS3 (_U_(1) << TAL_SFLAGSET_IPS3_Pos)
#define TAL_SFLAGSET_IPS4_Pos 4
#define TAL_SFLAGSET_IPS4 (_U_(1) << TAL_SFLAGSET_IPS4_Pos)
#define TAL_SFLAGSET_IPS5_Pos 5
#define TAL_SFLAGSET_IPS5 (_U_(1) << TAL_SFLAGSET_IPS5_Pos)
#define TAL_SFLAGSET_IPS6_Pos 6
#define TAL_SFLAGSET_IPS6 (_U_(1) << TAL_SFLAGSET_IPS6_Pos)
#define TAL_SFLAGSET_IPS7_Pos 7
#define TAL_SFLAGSET_IPS7 (_U_(1) << TAL_SFLAGSET_IPS7_Pos)
#define TAL_SFLAGSET_IPS8_Pos 8
#define TAL_SFLAGSET_IPS8 (_U_(1) << TAL_SFLAGSET_IPS8_Pos)
#define TAL_SFLAGSET_IPS9_Pos 9
#define TAL_SFLAGSET_IPS9 (_U_(1) << TAL_SFLAGSET_IPS9_Pos)
#define TAL_SFLAGSET_IPS10_Pos 10
#define TAL_SFLAGSET_IPS10 (_U_(1) << TAL_SFLAGSET_IPS10_Pos)
#define TAL_SFLAGSET_IPS11_Pos 11
#define TAL_SFLAGSET_IPS11 (_U_(1) << TAL_SFLAGSET_IPS11_Pos)
#define TAL_SFLAGSET_IPS12_Pos 12
#define TAL_SFLAGSET_IPS12 (_U_(1) << TAL_SFLAGSET_IPS12_Pos)
#define TAL_SFLAGSET_IPS13_Pos 13
#define TAL_SFLAGSET_IPS13 (_U_(1) << TAL_SFLAGSET_IPS13_Pos)
#define TAL_SFLAGSET_IPS14_Pos 14
#define TAL_SFLAGSET_IPS14 (_U_(1) << TAL_SFLAGSET_IPS14_Pos)
#define TAL_SFLAGSET_IPS15_Pos 15
#define TAL_SFLAGSET_IPS15 (_U_(1) << TAL_SFLAGSET_IPS15_Pos)
#define TAL_SFLAGSET_IPS16_Pos 16
#define TAL_SFLAGSET_IPS16 (_U_(1) << TAL_SFLAGSET_IPS16_Pos)
#define TAL_SFLAGSET_IPS17_Pos 17
#define TAL_SFLAGSET_IPS17 (_U_(1) << TAL_SFLAGSET_IPS17_Pos)
#define TAL_SFLAGSET_IPS18_Pos 18
#define TAL_SFLAGSET_IPS18 (_U_(1) << TAL_SFLAGSET_IPS18_Pos)
#define TAL_SFLAGSET_IPS19_Pos 19
#define TAL_SFLAGSET_IPS19 (_U_(1) << TAL_SFLAGSET_IPS19_Pos)
#define TAL_SFLAGSET_IPS20_Pos 20
#define TAL_SFLAGSET_IPS20 (_U_(1) << TAL_SFLAGSET_IPS20_Pos)
#define TAL_SFLAGSET_IPS21_Pos 21
#define TAL_SFLAGSET_IPS21 (_U_(1) << TAL_SFLAGSET_IPS21_Pos)
#define TAL_SFLAGSET_IPS22_Pos 22
#define TAL_SFLAGSET_IPS22 (_U_(1) << TAL_SFLAGSET_IPS22_Pos)
#define TAL_SFLAGSET_IPS23_Pos 23
#define TAL_SFLAGSET_IPS23 (_U_(1) << TAL_SFLAGSET_IPS23_Pos)
#define TAL_SFLAGSET_IPS24_Pos 24
#define TAL_SFLAGSET_IPS24 (_U_(1) << TAL_SFLAGSET_IPS24_Pos)
#define TAL_SFLAGSET_IPS25_Pos 25
#define TAL_SFLAGSET_IPS25 (_U_(1) << TAL_SFLAGSET_IPS25_Pos)
#define TAL_SFLAGSET_IPS26_Pos 26
#define TAL_SFLAGSET_IPS26 (_U_(1) << TAL_SFLAGSET_IPS26_Pos)
#define TAL_SFLAGSET_IPS27_Pos 27
#define TAL_SFLAGSET_IPS27 (_U_(1) << TAL_SFLAGSET_IPS27_Pos)
#define TAL_SFLAGSET_IPS28_Pos 28
#define TAL_SFLAGSET_IPS28 (_U_(1) << TAL_SFLAGSET_IPS28_Pos)
#define TAL_SFLAGSET_IPS29_Pos 29
#define TAL_SFLAGSET_IPS29 (_U_(1) << TAL_SFLAGSET_IPS29_Pos)
#define TAL_SFLAGSET_IPS30_Pos 30
#define TAL_SFLAGSET_IPS30 (_U_(1) << TAL_SFLAGSET_IPS30_Pos)
#define TAL_SFLAGSET_IPS31_Pos 31
#define TAL_SFLAGSET_IPS31 (_U_(1) << TAL_SFLAGSET_IPS31_Pos)
#define TAL_SFLAGSET_IPS_Pos 0
#define TAL_SFLAGSET_IPS_Msk (_U_(0xFFFFFFFF) << TAL_SFLAGSET_IPS_Pos)
#define TAL_SFLAGSET_IPS(value) (TAL_SFLAGSET_IPS_Msk & ((value) << TAL_SFLAGSET_IPS_Pos))
#define TAL_SFLAGSET_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t IPS0:1;
    uint32_t IPS1:1;
    uint32_t IPS2:1;
    uint32_t IPS3:1;
    uint32_t IPS4:1;
    uint32_t IPS5:1;
    uint32_t IPS6:1;
    uint32_t IPS7:1;
    uint32_t IPS8:1;
    uint32_t IPS9:1;
    uint32_t IPS10:1;
    uint32_t IPS11:1;
    uint32_t IPS12:1;
    uint32_t IPS13:1;
    uint32_t IPS14:1;
    uint32_t IPS15:1;
    uint32_t IPS16:1;
    uint32_t IPS17:1;
    uint32_t IPS18:1;
    uint32_t IPS19:1;
    uint32_t IPS20:1;
    uint32_t IPS21:1;
    uint32_t IPS22:1;
    uint32_t IPS23:1;
    uint32_t IPS24:1;
    uint32_t IPS25:1;
    uint32_t IPS26:1;
    uint32_t IPS27:1;
    uint32_t IPS28:1;
    uint32_t IPS29:1;
    uint32_t IPS30:1;
    uint32_t IPS31:1;
  } bit;
  struct {
    uint32_t IPS:32;
  } vec;
  uint32_t reg;
} TAL_SFLAG_Type;


#define TAL_SFLAG_OFFSET 0x230
#define TAL_SFLAG_RESETVALUE _U_(0x00000000)

#define TAL_SFLAG_IPS0_Pos 0
#define TAL_SFLAG_IPS0 (_U_(1) << TAL_SFLAG_IPS0_Pos)
#define TAL_SFLAG_IPS1_Pos 1
#define TAL_SFLAG_IPS1 (_U_(1) << TAL_SFLAG_IPS1_Pos)
#define TAL_SFLAG_IPS2_Pos 2
#define TAL_SFLAG_IPS2 (_U_(1) << TAL_SFLAG_IPS2_Pos)
#define TAL_SFLAG_IPS3_Pos 3
#define TAL_SFLAG_IPS3 (_U_(1) << TAL_SFLAG_IPS3_Pos)
#define TAL_SFLAG_IPS4_Pos 4
#define TAL_SFLAG_IPS4 (_U_(1) << TAL_SFLAG_IPS4_Pos)
#define TAL_SFLAG_IPS5_Pos 5
#define TAL_SFLAG_IPS5 (_U_(1) << TAL_SFLAG_IPS5_Pos)
#define TAL_SFLAG_IPS6_Pos 6
#define TAL_SFLAG_IPS6 (_U_(1) << TAL_SFLAG_IPS6_Pos)
#define TAL_SFLAG_IPS7_Pos 7
#define TAL_SFLAG_IPS7 (_U_(1) << TAL_SFLAG_IPS7_Pos)
#define TAL_SFLAG_IPS8_Pos 8
#define TAL_SFLAG_IPS8 (_U_(1) << TAL_SFLAG_IPS8_Pos)
#define TAL_SFLAG_IPS9_Pos 9
#define TAL_SFLAG_IPS9 (_U_(1) << TAL_SFLAG_IPS9_Pos)
#define TAL_SFLAG_IPS10_Pos 10
#define TAL_SFLAG_IPS10 (_U_(1) << TAL_SFLAG_IPS10_Pos)
#define TAL_SFLAG_IPS11_Pos 11
#define TAL_SFLAG_IPS11 (_U_(1) << TAL_SFLAG_IPS11_Pos)
#define TAL_SFLAG_IPS12_Pos 12
#define TAL_SFLAG_IPS12 (_U_(1) << TAL_SFLAG_IPS12_Pos)
#define TAL_SFLAG_IPS13_Pos 13
#define TAL_SFLAG_IPS13 (_U_(1) << TAL_SFLAG_IPS13_Pos)
#define TAL_SFLAG_IPS14_Pos 14
#define TAL_SFLAG_IPS14 (_U_(1) << TAL_SFLAG_IPS14_Pos)
#define TAL_SFLAG_IPS15_Pos 15
#define TAL_SFLAG_IPS15 (_U_(1) << TAL_SFLAG_IPS15_Pos)
#define TAL_SFLAG_IPS16_Pos 16
#define TAL_SFLAG_IPS16 (_U_(1) << TAL_SFLAG_IPS16_Pos)
#define TAL_SFLAG_IPS17_Pos 17
#define TAL_SFLAG_IPS17 (_U_(1) << TAL_SFLAG_IPS17_Pos)
#define TAL_SFLAG_IPS18_Pos 18
#define TAL_SFLAG_IPS18 (_U_(1) << TAL_SFLAG_IPS18_Pos)
#define TAL_SFLAG_IPS19_Pos 19
#define TAL_SFLAG_IPS19 (_U_(1) << TAL_SFLAG_IPS19_Pos)
#define TAL_SFLAG_IPS20_Pos 20
#define TAL_SFLAG_IPS20 (_U_(1) << TAL_SFLAG_IPS20_Pos)
#define TAL_SFLAG_IPS21_Pos 21
#define TAL_SFLAG_IPS21 (_U_(1) << TAL_SFLAG_IPS21_Pos)
#define TAL_SFLAG_IPS22_Pos 22
#define TAL_SFLAG_IPS22 (_U_(1) << TAL_SFLAG_IPS22_Pos)
#define TAL_SFLAG_IPS23_Pos 23
#define TAL_SFLAG_IPS23 (_U_(1) << TAL_SFLAG_IPS23_Pos)
#define TAL_SFLAG_IPS24_Pos 24
#define TAL_SFLAG_IPS24 (_U_(1) << TAL_SFLAG_IPS24_Pos)
#define TAL_SFLAG_IPS25_Pos 25
#define TAL_SFLAG_IPS25 (_U_(1) << TAL_SFLAG_IPS25_Pos)
#define TAL_SFLAG_IPS26_Pos 26
#define TAL_SFLAG_IPS26 (_U_(1) << TAL_SFLAG_IPS26_Pos)
#define TAL_SFLAG_IPS27_Pos 27
#define TAL_SFLAG_IPS27 (_U_(1) << TAL_SFLAG_IPS27_Pos)
#define TAL_SFLAG_IPS28_Pos 28
#define TAL_SFLAG_IPS28 (_U_(1) << TAL_SFLAG_IPS28_Pos)
#define TAL_SFLAG_IPS29_Pos 29
#define TAL_SFLAG_IPS29 (_U_(1) << TAL_SFLAG_IPS29_Pos)
#define TAL_SFLAG_IPS30_Pos 30
#define TAL_SFLAG_IPS30 (_U_(1) << TAL_SFLAG_IPS30_Pos)
#define TAL_SFLAG_IPS31_Pos 31
#define TAL_SFLAG_IPS31 (_U_(1) << TAL_SFLAG_IPS31_Pos)
#define TAL_SFLAG_IPS_Pos 0
#define TAL_SFLAG_IPS_Msk (_U_(0xFFFFFFFF) << TAL_SFLAG_IPS_Pos)
#define TAL_SFLAG_IPS(value) (TAL_SFLAG_IPS_Msk & ((value) << TAL_SFLAG_IPS_Pos))
#define TAL_SFLAG_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint8_t IPS:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} TAL_SFLAGCLRR_Type;


#define TAL_SFLAGCLRR_OFFSET 0x300
#define TAL_SFLAGCLRR_RESETVALUE _U_(0x00)

#define TAL_SFLAGCLRR_IPS_Pos 0
#define TAL_SFLAGCLRR_IPS (_U_(0x1) << TAL_SFLAGCLRR_IPS_Pos)
#define TAL_SFLAGCLRR_MASK _U_(0x01)



typedef struct {
  volatile const TAL_CPUIRQS_Type CPUIRQS[5];
       RoReg8 Reserved1[0xC];
} TalCpuirqs;




typedef struct {
  volatile TAL_CTICTRLA_Type CTICTRLA;
  volatile TAL_CTIMASK_Type CTIMASK;
} TalCtis;




typedef struct {
  volatile TAL_SMASK_Type SMASK[2];
} TalSmasks;




typedef struct {
  volatile TAL_CTRLA_Type CTRLA;
  volatile TAL_EXTCTRL_Type EXTCTRL;
       RoReg8 Reserved1[0x2];
  volatile TAL_EVCTRL_Type EVCTRL;
       RoReg8 Reserved2[0x2];
  volatile TAL_INTENCLR_Type INTENCLR;
  volatile TAL_INTENSET_Type INTENSET;
  volatile TAL_INTFLAG_Type INTFLAG;
  volatile TAL_GLOBMASK_Type GLOBMASK;
  volatile TAL_HALT_Type HALT;
  volatile TAL_RESTART_Type RESTART;
  volatile const TAL_BRKSTATUS_Type BRKSTATUS;
       TalCtis Ctis[4];
       RoReg8 Reserved3[0x8];
  volatile const TAL_INTSTATUS_Type INTSTATUS[137];
       RoReg8 Reserved4[0x67];
  volatile TAL_DMACPUSEL0_Type DMACPUSEL0;
  volatile TAL_DMACPUSEL1_Type DMACPUSEL1;
  volatile TAL_EVCPUSEL0_Type EVCPUSEL0;
       RoReg8 Reserved5[0x4];
  volatile TAL_EICCPUSEL0_Type EICCPUSEL0;
       RoReg8 Reserved6[0x4];
  volatile TAL_INTCPUSEL0_Type INTCPUSEL0;
  volatile TAL_INTCPUSEL1_Type INTCPUSEL1;
  volatile TAL_INTCPUSEL2_Type INTCPUSEL2;
  volatile TAL_INTCPUSEL3_Type INTCPUSEL3;
  volatile TAL_INTCPUSEL4_Type INTCPUSEL4;
  volatile TAL_INTCPUSEL5_Type INTCPUSEL5;
  volatile TAL_INTCPUSEL6_Type INTCPUSEL6;
  volatile TAL_INTCPUSEL7_Type INTCPUSEL7;
  volatile TAL_INTCPUSEL8_Type INTCPUSEL8;
       RoReg8 Reserved7[0x18];
  volatile TAL_IRQTRIG_Type IRQTRIG;
  volatile TAL_IRQMON_Type IRQMON[1];
       RoReg8 Reserved8[0x16];
       TalCpuirqs Cpuirqs[2];
       RoReg8 Reserved9[0x40];
       TalSmasks Smasks[2];
       RoReg8 Reserved10[0x10];
  volatile TAL_SFLAGCLR_Type SFLAGCLR[2];
  volatile TAL_SFLAGSET_Type SFLAGSET[2];
  volatile const TAL_SFLAG_Type SFLAG[2];
       RoReg8 Reserved11[0xC8];
  volatile TAL_SFLAGCLRR_Type SFLAGCLRR[64];
} Tal;
# 613 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/tc.h" 1
# 31 "asf4/samd51/include/component/tc.h"
#define _SAMD51_TC_COMPONENT_ 







#define TC_U2249 
#define REV_TC 0x300



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t MODE:2;
    uint32_t PRESCSYNC:2;
    uint32_t RUNSTDBY:1;
    uint32_t ONDEMAND:1;
    uint32_t PRESCALER:3;
    uint32_t ALOCK:1;
    uint32_t :4;
    uint32_t CAPTEN0:1;
    uint32_t CAPTEN1:1;
    uint32_t :2;
    uint32_t COPEN0:1;
    uint32_t COPEN1:1;
    uint32_t :2;
    uint32_t CAPTMODE0:2;
    uint32_t :1;
    uint32_t CAPTMODE1:2;
    uint32_t :3;
  } bit;
  struct {
    uint32_t :16;
    uint32_t CAPTEN:2;
    uint32_t :2;
    uint32_t COPEN:2;
    uint32_t :10;
  } vec;
  uint32_t reg;
} TC_CTRLA_Type;


#define TC_CTRLA_OFFSET 0x00
#define TC_CTRLA_RESETVALUE _U_(0x00000000)

#define TC_CTRLA_SWRST_Pos 0
#define TC_CTRLA_SWRST (_U_(0x1) << TC_CTRLA_SWRST_Pos)
#define TC_CTRLA_ENABLE_Pos 1
#define TC_CTRLA_ENABLE (_U_(0x1) << TC_CTRLA_ENABLE_Pos)
#define TC_CTRLA_MODE_Pos 2
#define TC_CTRLA_MODE_Msk (_U_(0x3) << TC_CTRLA_MODE_Pos)
#define TC_CTRLA_MODE(value) (TC_CTRLA_MODE_Msk & ((value) << TC_CTRLA_MODE_Pos))
#define TC_CTRLA_MODE_COUNT16_Val _U_(0x0)
#define TC_CTRLA_MODE_COUNT8_Val _U_(0x1)
#define TC_CTRLA_MODE_COUNT32_Val _U_(0x2)
#define TC_CTRLA_MODE_COUNT16 (TC_CTRLA_MODE_COUNT16_Val << TC_CTRLA_MODE_Pos)
#define TC_CTRLA_MODE_COUNT8 (TC_CTRLA_MODE_COUNT8_Val << TC_CTRLA_MODE_Pos)
#define TC_CTRLA_MODE_COUNT32 (TC_CTRLA_MODE_COUNT32_Val << TC_CTRLA_MODE_Pos)
#define TC_CTRLA_PRESCSYNC_Pos 4
#define TC_CTRLA_PRESCSYNC_Msk (_U_(0x3) << TC_CTRLA_PRESCSYNC_Pos)
#define TC_CTRLA_PRESCSYNC(value) (TC_CTRLA_PRESCSYNC_Msk & ((value) << TC_CTRLA_PRESCSYNC_Pos))
#define TC_CTRLA_PRESCSYNC_GCLK_Val _U_(0x0)
#define TC_CTRLA_PRESCSYNC_PRESC_Val _U_(0x1)
#define TC_CTRLA_PRESCSYNC_RESYNC_Val _U_(0x2)
#define TC_CTRLA_PRESCSYNC_GCLK (TC_CTRLA_PRESCSYNC_GCLK_Val << TC_CTRLA_PRESCSYNC_Pos)
#define TC_CTRLA_PRESCSYNC_PRESC (TC_CTRLA_PRESCSYNC_PRESC_Val << TC_CTRLA_PRESCSYNC_Pos)
#define TC_CTRLA_PRESCSYNC_RESYNC (TC_CTRLA_PRESCSYNC_RESYNC_Val << TC_CTRLA_PRESCSYNC_Pos)
#define TC_CTRLA_RUNSTDBY_Pos 6
#define TC_CTRLA_RUNSTDBY (_U_(0x1) << TC_CTRLA_RUNSTDBY_Pos)
#define TC_CTRLA_ONDEMAND_Pos 7
#define TC_CTRLA_ONDEMAND (_U_(0x1) << TC_CTRLA_ONDEMAND_Pos)
#define TC_CTRLA_PRESCALER_Pos 8
#define TC_CTRLA_PRESCALER_Msk (_U_(0x7) << TC_CTRLA_PRESCALER_Pos)
#define TC_CTRLA_PRESCALER(value) (TC_CTRLA_PRESCALER_Msk & ((value) << TC_CTRLA_PRESCALER_Pos))
#define TC_CTRLA_PRESCALER_DIV1_Val _U_(0x0)
#define TC_CTRLA_PRESCALER_DIV2_Val _U_(0x1)
#define TC_CTRLA_PRESCALER_DIV4_Val _U_(0x2)
#define TC_CTRLA_PRESCALER_DIV8_Val _U_(0x3)
#define TC_CTRLA_PRESCALER_DIV16_Val _U_(0x4)
#define TC_CTRLA_PRESCALER_DIV64_Val _U_(0x5)
#define TC_CTRLA_PRESCALER_DIV256_Val _U_(0x6)
#define TC_CTRLA_PRESCALER_DIV1024_Val _U_(0x7)
#define TC_CTRLA_PRESCALER_DIV1 (TC_CTRLA_PRESCALER_DIV1_Val << TC_CTRLA_PRESCALER_Pos)
#define TC_CTRLA_PRESCALER_DIV2 (TC_CTRLA_PRESCALER_DIV2_Val << TC_CTRLA_PRESCALER_Pos)
#define TC_CTRLA_PRESCALER_DIV4 (TC_CTRLA_PRESCALER_DIV4_Val << TC_CTRLA_PRESCALER_Pos)
#define TC_CTRLA_PRESCALER_DIV8 (TC_CTRLA_PRESCALER_DIV8_Val << TC_CTRLA_PRESCALER_Pos)
#define TC_CTRLA_PRESCALER_DIV16 (TC_CTRLA_PRESCALER_DIV16_Val << TC_CTRLA_PRESCALER_Pos)
#define TC_CTRLA_PRESCALER_DIV64 (TC_CTRLA_PRESCALER_DIV64_Val << TC_CTRLA_PRESCALER_Pos)
#define TC_CTRLA_PRESCALER_DIV256 (TC_CTRLA_PRESCALER_DIV256_Val << TC_CTRLA_PRESCALER_Pos)
#define TC_CTRLA_PRESCALER_DIV1024 (TC_CTRLA_PRESCALER_DIV1024_Val << TC_CTRLA_PRESCALER_Pos)
#define TC_CTRLA_ALOCK_Pos 11
#define TC_CTRLA_ALOCK (_U_(0x1) << TC_CTRLA_ALOCK_Pos)
#define TC_CTRLA_CAPTEN0_Pos 16
#define TC_CTRLA_CAPTEN0 (_U_(1) << TC_CTRLA_CAPTEN0_Pos)
#define TC_CTRLA_CAPTEN1_Pos 17
#define TC_CTRLA_CAPTEN1 (_U_(1) << TC_CTRLA_CAPTEN1_Pos)
#define TC_CTRLA_CAPTEN_Pos 16
#define TC_CTRLA_CAPTEN_Msk (_U_(0x3) << TC_CTRLA_CAPTEN_Pos)
#define TC_CTRLA_CAPTEN(value) (TC_CTRLA_CAPTEN_Msk & ((value) << TC_CTRLA_CAPTEN_Pos))
#define TC_CTRLA_COPEN0_Pos 20
#define TC_CTRLA_COPEN0 (_U_(1) << TC_CTRLA_COPEN0_Pos)
#define TC_CTRLA_COPEN1_Pos 21
#define TC_CTRLA_COPEN1 (_U_(1) << TC_CTRLA_COPEN1_Pos)
#define TC_CTRLA_COPEN_Pos 20
#define TC_CTRLA_COPEN_Msk (_U_(0x3) << TC_CTRLA_COPEN_Pos)
#define TC_CTRLA_COPEN(value) (TC_CTRLA_COPEN_Msk & ((value) << TC_CTRLA_COPEN_Pos))
#define TC_CTRLA_CAPTMODE0_Pos 24
#define TC_CTRLA_CAPTMODE0_Msk (_U_(0x3) << TC_CTRLA_CAPTMODE0_Pos)
#define TC_CTRLA_CAPTMODE0(value) (TC_CTRLA_CAPTMODE0_Msk & ((value) << TC_CTRLA_CAPTMODE0_Pos))
#define TC_CTRLA_CAPTMODE0_DEFAULT_Val _U_(0x0)
#define TC_CTRLA_CAPTMODE0_CAPTMIN_Val _U_(0x1)
#define TC_CTRLA_CAPTMODE0_CAPTMAX_Val _U_(0x2)
#define TC_CTRLA_CAPTMODE0_DEFAULT (TC_CTRLA_CAPTMODE0_DEFAULT_Val << TC_CTRLA_CAPTMODE0_Pos)
#define TC_CTRLA_CAPTMODE0_CAPTMIN (TC_CTRLA_CAPTMODE0_CAPTMIN_Val << TC_CTRLA_CAPTMODE0_Pos)
#define TC_CTRLA_CAPTMODE0_CAPTMAX (TC_CTRLA_CAPTMODE0_CAPTMAX_Val << TC_CTRLA_CAPTMODE0_Pos)
#define TC_CTRLA_CAPTMODE1_Pos 27
#define TC_CTRLA_CAPTMODE1_Msk (_U_(0x3) << TC_CTRLA_CAPTMODE1_Pos)
#define TC_CTRLA_CAPTMODE1(value) (TC_CTRLA_CAPTMODE1_Msk & ((value) << TC_CTRLA_CAPTMODE1_Pos))
#define TC_CTRLA_CAPTMODE1_DEFAULT_Val _U_(0x0)
#define TC_CTRLA_CAPTMODE1_CAPTMIN_Val _U_(0x1)
#define TC_CTRLA_CAPTMODE1_CAPTMAX_Val _U_(0x2)
#define TC_CTRLA_CAPTMODE1_DEFAULT (TC_CTRLA_CAPTMODE1_DEFAULT_Val << TC_CTRLA_CAPTMODE1_Pos)
#define TC_CTRLA_CAPTMODE1_CAPTMIN (TC_CTRLA_CAPTMODE1_CAPTMIN_Val << TC_CTRLA_CAPTMODE1_Pos)
#define TC_CTRLA_CAPTMODE1_CAPTMAX (TC_CTRLA_CAPTMODE1_CAPTMAX_Val << TC_CTRLA_CAPTMODE1_Pos)
#define TC_CTRLA_MASK _U_(0x1B330FFF)



typedef union {
  struct {
    uint8_t DIR:1;
    uint8_t LUPD:1;
    uint8_t ONESHOT:1;
    uint8_t :2;
    uint8_t CMD:3;
  } bit;
  uint8_t reg;
} TC_CTRLBCLR_Type;


#define TC_CTRLBCLR_OFFSET 0x04
#define TC_CTRLBCLR_RESETVALUE _U_(0x00)

#define TC_CTRLBCLR_DIR_Pos 0
#define TC_CTRLBCLR_DIR (_U_(0x1) << TC_CTRLBCLR_DIR_Pos)
#define TC_CTRLBCLR_LUPD_Pos 1
#define TC_CTRLBCLR_LUPD (_U_(0x1) << TC_CTRLBCLR_LUPD_Pos)
#define TC_CTRLBCLR_ONESHOT_Pos 2
#define TC_CTRLBCLR_ONESHOT (_U_(0x1) << TC_CTRLBCLR_ONESHOT_Pos)
#define TC_CTRLBCLR_CMD_Pos 5
#define TC_CTRLBCLR_CMD_Msk (_U_(0x7) << TC_CTRLBCLR_CMD_Pos)
#define TC_CTRLBCLR_CMD(value) (TC_CTRLBCLR_CMD_Msk & ((value) << TC_CTRLBCLR_CMD_Pos))
#define TC_CTRLBCLR_CMD_NONE_Val _U_(0x0)
#define TC_CTRLBCLR_CMD_RETRIGGER_Val _U_(0x1)
#define TC_CTRLBCLR_CMD_STOP_Val _U_(0x2)
#define TC_CTRLBCLR_CMD_UPDATE_Val _U_(0x3)
#define TC_CTRLBCLR_CMD_READSYNC_Val _U_(0x4)
#define TC_CTRLBCLR_CMD_DMAOS_Val _U_(0x5)
#define TC_CTRLBCLR_CMD_NONE (TC_CTRLBCLR_CMD_NONE_Val << TC_CTRLBCLR_CMD_Pos)
#define TC_CTRLBCLR_CMD_RETRIGGER (TC_CTRLBCLR_CMD_RETRIGGER_Val << TC_CTRLBCLR_CMD_Pos)
#define TC_CTRLBCLR_CMD_STOP (TC_CTRLBCLR_CMD_STOP_Val << TC_CTRLBCLR_CMD_Pos)
#define TC_CTRLBCLR_CMD_UPDATE (TC_CTRLBCLR_CMD_UPDATE_Val << TC_CTRLBCLR_CMD_Pos)
#define TC_CTRLBCLR_CMD_READSYNC (TC_CTRLBCLR_CMD_READSYNC_Val << TC_CTRLBCLR_CMD_Pos)
#define TC_CTRLBCLR_CMD_DMAOS (TC_CTRLBCLR_CMD_DMAOS_Val << TC_CTRLBCLR_CMD_Pos)
#define TC_CTRLBCLR_MASK _U_(0xE7)



typedef union {
  struct {
    uint8_t DIR:1;
    uint8_t LUPD:1;
    uint8_t ONESHOT:1;
    uint8_t :2;
    uint8_t CMD:3;
  } bit;
  uint8_t reg;
} TC_CTRLBSET_Type;


#define TC_CTRLBSET_OFFSET 0x05
#define TC_CTRLBSET_RESETVALUE _U_(0x00)

#define TC_CTRLBSET_DIR_Pos 0
#define TC_CTRLBSET_DIR (_U_(0x1) << TC_CTRLBSET_DIR_Pos)
#define TC_CTRLBSET_LUPD_Pos 1
#define TC_CTRLBSET_LUPD (_U_(0x1) << TC_CTRLBSET_LUPD_Pos)
#define TC_CTRLBSET_ONESHOT_Pos 2
#define TC_CTRLBSET_ONESHOT (_U_(0x1) << TC_CTRLBSET_ONESHOT_Pos)
#define TC_CTRLBSET_CMD_Pos 5
#define TC_CTRLBSET_CMD_Msk (_U_(0x7) << TC_CTRLBSET_CMD_Pos)
#define TC_CTRLBSET_CMD(value) (TC_CTRLBSET_CMD_Msk & ((value) << TC_CTRLBSET_CMD_Pos))
#define TC_CTRLBSET_CMD_NONE_Val _U_(0x0)
#define TC_CTRLBSET_CMD_RETRIGGER_Val _U_(0x1)
#define TC_CTRLBSET_CMD_STOP_Val _U_(0x2)
#define TC_CTRLBSET_CMD_UPDATE_Val _U_(0x3)
#define TC_CTRLBSET_CMD_READSYNC_Val _U_(0x4)
#define TC_CTRLBSET_CMD_DMAOS_Val _U_(0x5)
#define TC_CTRLBSET_CMD_NONE (TC_CTRLBSET_CMD_NONE_Val << TC_CTRLBSET_CMD_Pos)
#define TC_CTRLBSET_CMD_RETRIGGER (TC_CTRLBSET_CMD_RETRIGGER_Val << TC_CTRLBSET_CMD_Pos)
#define TC_CTRLBSET_CMD_STOP (TC_CTRLBSET_CMD_STOP_Val << TC_CTRLBSET_CMD_Pos)
#define TC_CTRLBSET_CMD_UPDATE (TC_CTRLBSET_CMD_UPDATE_Val << TC_CTRLBSET_CMD_Pos)
#define TC_CTRLBSET_CMD_READSYNC (TC_CTRLBSET_CMD_READSYNC_Val << TC_CTRLBSET_CMD_Pos)
#define TC_CTRLBSET_CMD_DMAOS (TC_CTRLBSET_CMD_DMAOS_Val << TC_CTRLBSET_CMD_Pos)
#define TC_CTRLBSET_MASK _U_(0xE7)



typedef union {
  struct {
    uint16_t EVACT:3;
    uint16_t :1;
    uint16_t TCINV:1;
    uint16_t TCEI:1;
    uint16_t :2;
    uint16_t OVFEO:1;
    uint16_t :3;
    uint16_t MCEO0:1;
    uint16_t MCEO1:1;
    uint16_t :2;
  } bit;
  struct {
    uint16_t :12;
    uint16_t MCEO:2;
    uint16_t :2;
  } vec;
  uint16_t reg;
} TC_EVCTRL_Type;


#define TC_EVCTRL_OFFSET 0x06
#define TC_EVCTRL_RESETVALUE _U_(0x0000)

#define TC_EVCTRL_EVACT_Pos 0
#define TC_EVCTRL_EVACT_Msk (_U_(0x7) << TC_EVCTRL_EVACT_Pos)
#define TC_EVCTRL_EVACT(value) (TC_EVCTRL_EVACT_Msk & ((value) << TC_EVCTRL_EVACT_Pos))
#define TC_EVCTRL_EVACT_OFF_Val _U_(0x0)
#define TC_EVCTRL_EVACT_RETRIGGER_Val _U_(0x1)
#define TC_EVCTRL_EVACT_COUNT_Val _U_(0x2)
#define TC_EVCTRL_EVACT_START_Val _U_(0x3)
#define TC_EVCTRL_EVACT_STAMP_Val _U_(0x4)
#define TC_EVCTRL_EVACT_PPW_Val _U_(0x5)
#define TC_EVCTRL_EVACT_PWP_Val _U_(0x6)
#define TC_EVCTRL_EVACT_PW_Val _U_(0x7)
#define TC_EVCTRL_EVACT_OFF (TC_EVCTRL_EVACT_OFF_Val << TC_EVCTRL_EVACT_Pos)
#define TC_EVCTRL_EVACT_RETRIGGER (TC_EVCTRL_EVACT_RETRIGGER_Val << TC_EVCTRL_EVACT_Pos)
#define TC_EVCTRL_EVACT_COUNT (TC_EVCTRL_EVACT_COUNT_Val << TC_EVCTRL_EVACT_Pos)
#define TC_EVCTRL_EVACT_START (TC_EVCTRL_EVACT_START_Val << TC_EVCTRL_EVACT_Pos)
#define TC_EVCTRL_EVACT_STAMP (TC_EVCTRL_EVACT_STAMP_Val << TC_EVCTRL_EVACT_Pos)
#define TC_EVCTRL_EVACT_PPW (TC_EVCTRL_EVACT_PPW_Val << TC_EVCTRL_EVACT_Pos)
#define TC_EVCTRL_EVACT_PWP (TC_EVCTRL_EVACT_PWP_Val << TC_EVCTRL_EVACT_Pos)
#define TC_EVCTRL_EVACT_PW (TC_EVCTRL_EVACT_PW_Val << TC_EVCTRL_EVACT_Pos)
#define TC_EVCTRL_TCINV_Pos 4
#define TC_EVCTRL_TCINV (_U_(0x1) << TC_EVCTRL_TCINV_Pos)
#define TC_EVCTRL_TCEI_Pos 5
#define TC_EVCTRL_TCEI (_U_(0x1) << TC_EVCTRL_TCEI_Pos)
#define TC_EVCTRL_OVFEO_Pos 8
#define TC_EVCTRL_OVFEO (_U_(0x1) << TC_EVCTRL_OVFEO_Pos)
#define TC_EVCTRL_MCEO0_Pos 12
#define TC_EVCTRL_MCEO0 (_U_(1) << TC_EVCTRL_MCEO0_Pos)
#define TC_EVCTRL_MCEO1_Pos 13
#define TC_EVCTRL_MCEO1 (_U_(1) << TC_EVCTRL_MCEO1_Pos)
#define TC_EVCTRL_MCEO_Pos 12
#define TC_EVCTRL_MCEO_Msk (_U_(0x3) << TC_EVCTRL_MCEO_Pos)
#define TC_EVCTRL_MCEO(value) (TC_EVCTRL_MCEO_Msk & ((value) << TC_EVCTRL_MCEO_Pos))
#define TC_EVCTRL_MASK _U_(0x3137)



typedef union {
  struct {
    uint8_t OVF:1;
    uint8_t ERR:1;
    uint8_t :2;
    uint8_t MC0:1;
    uint8_t MC1:1;
    uint8_t :2;
  } bit;
  struct {
    uint8_t :4;
    uint8_t MC:2;
    uint8_t :2;
  } vec;
  uint8_t reg;
} TC_INTENCLR_Type;


#define TC_INTENCLR_OFFSET 0x08
#define TC_INTENCLR_RESETVALUE _U_(0x00)

#define TC_INTENCLR_OVF_Pos 0
#define TC_INTENCLR_OVF (_U_(0x1) << TC_INTENCLR_OVF_Pos)
#define TC_INTENCLR_ERR_Pos 1
#define TC_INTENCLR_ERR (_U_(0x1) << TC_INTENCLR_ERR_Pos)
#define TC_INTENCLR_MC0_Pos 4
#define TC_INTENCLR_MC0 (_U_(1) << TC_INTENCLR_MC0_Pos)
#define TC_INTENCLR_MC1_Pos 5
#define TC_INTENCLR_MC1 (_U_(1) << TC_INTENCLR_MC1_Pos)
#define TC_INTENCLR_MC_Pos 4
#define TC_INTENCLR_MC_Msk (_U_(0x3) << TC_INTENCLR_MC_Pos)
#define TC_INTENCLR_MC(value) (TC_INTENCLR_MC_Msk & ((value) << TC_INTENCLR_MC_Pos))
#define TC_INTENCLR_MASK _U_(0x33)



typedef union {
  struct {
    uint8_t OVF:1;
    uint8_t ERR:1;
    uint8_t :2;
    uint8_t MC0:1;
    uint8_t MC1:1;
    uint8_t :2;
  } bit;
  struct {
    uint8_t :4;
    uint8_t MC:2;
    uint8_t :2;
  } vec;
  uint8_t reg;
} TC_INTENSET_Type;


#define TC_INTENSET_OFFSET 0x09
#define TC_INTENSET_RESETVALUE _U_(0x00)

#define TC_INTENSET_OVF_Pos 0
#define TC_INTENSET_OVF (_U_(0x1) << TC_INTENSET_OVF_Pos)
#define TC_INTENSET_ERR_Pos 1
#define TC_INTENSET_ERR (_U_(0x1) << TC_INTENSET_ERR_Pos)
#define TC_INTENSET_MC0_Pos 4
#define TC_INTENSET_MC0 (_U_(1) << TC_INTENSET_MC0_Pos)
#define TC_INTENSET_MC1_Pos 5
#define TC_INTENSET_MC1 (_U_(1) << TC_INTENSET_MC1_Pos)
#define TC_INTENSET_MC_Pos 4
#define TC_INTENSET_MC_Msk (_U_(0x3) << TC_INTENSET_MC_Pos)
#define TC_INTENSET_MC(value) (TC_INTENSET_MC_Msk & ((value) << TC_INTENSET_MC_Pos))
#define TC_INTENSET_MASK _U_(0x33)



typedef union {
  struct {
    volatile const uint8_t OVF:1;
    volatile const uint8_t ERR:1;
    volatile const uint8_t :2;
    volatile const uint8_t MC0:1;
    volatile const uint8_t MC1:1;
    volatile const uint8_t :2;
  } bit;
  struct {
    volatile const uint8_t :4;
    volatile const uint8_t MC:2;
    volatile const uint8_t :2;
  } vec;
  uint8_t reg;
} TC_INTFLAG_Type;


#define TC_INTFLAG_OFFSET 0x0A
#define TC_INTFLAG_RESETVALUE _U_(0x00)

#define TC_INTFLAG_OVF_Pos 0
#define TC_INTFLAG_OVF (_U_(0x1) << TC_INTFLAG_OVF_Pos)
#define TC_INTFLAG_ERR_Pos 1
#define TC_INTFLAG_ERR (_U_(0x1) << TC_INTFLAG_ERR_Pos)
#define TC_INTFLAG_MC0_Pos 4
#define TC_INTFLAG_MC0 (_U_(1) << TC_INTFLAG_MC0_Pos)
#define TC_INTFLAG_MC1_Pos 5
#define TC_INTFLAG_MC1 (_U_(1) << TC_INTFLAG_MC1_Pos)
#define TC_INTFLAG_MC_Pos 4
#define TC_INTFLAG_MC_Msk (_U_(0x3) << TC_INTFLAG_MC_Pos)
#define TC_INTFLAG_MC(value) (TC_INTFLAG_MC_Msk & ((value) << TC_INTFLAG_MC_Pos))
#define TC_INTFLAG_MASK _U_(0x33)



typedef union {
  struct {
    uint8_t STOP:1;
    uint8_t SLAVE:1;
    uint8_t :1;
    uint8_t PERBUFV:1;
    uint8_t CCBUFV0:1;
    uint8_t CCBUFV1:1;
    uint8_t :2;
  } bit;
  struct {
    uint8_t :4;
    uint8_t CCBUFV:2;
    uint8_t :2;
  } vec;
  uint8_t reg;
} TC_STATUS_Type;


#define TC_STATUS_OFFSET 0x0B
#define TC_STATUS_RESETVALUE _U_(0x01)

#define TC_STATUS_STOP_Pos 0
#define TC_STATUS_STOP (_U_(0x1) << TC_STATUS_STOP_Pos)
#define TC_STATUS_SLAVE_Pos 1
#define TC_STATUS_SLAVE (_U_(0x1) << TC_STATUS_SLAVE_Pos)
#define TC_STATUS_PERBUFV_Pos 3
#define TC_STATUS_PERBUFV (_U_(0x1) << TC_STATUS_PERBUFV_Pos)
#define TC_STATUS_CCBUFV0_Pos 4
#define TC_STATUS_CCBUFV0 (_U_(1) << TC_STATUS_CCBUFV0_Pos)
#define TC_STATUS_CCBUFV1_Pos 5
#define TC_STATUS_CCBUFV1 (_U_(1) << TC_STATUS_CCBUFV1_Pos)
#define TC_STATUS_CCBUFV_Pos 4
#define TC_STATUS_CCBUFV_Msk (_U_(0x3) << TC_STATUS_CCBUFV_Pos)
#define TC_STATUS_CCBUFV(value) (TC_STATUS_CCBUFV_Msk & ((value) << TC_STATUS_CCBUFV_Pos))
#define TC_STATUS_MASK _U_(0x3B)



typedef union {
  struct {
    uint8_t WAVEGEN:2;
    uint8_t :6;
  } bit;
  uint8_t reg;
} TC_WAVE_Type;


#define TC_WAVE_OFFSET 0x0C
#define TC_WAVE_RESETVALUE _U_(0x00)

#define TC_WAVE_WAVEGEN_Pos 0
#define TC_WAVE_WAVEGEN_Msk (_U_(0x3) << TC_WAVE_WAVEGEN_Pos)
#define TC_WAVE_WAVEGEN(value) (TC_WAVE_WAVEGEN_Msk & ((value) << TC_WAVE_WAVEGEN_Pos))
#define TC_WAVE_WAVEGEN_NFRQ_Val _U_(0x0)
#define TC_WAVE_WAVEGEN_MFRQ_Val _U_(0x1)
#define TC_WAVE_WAVEGEN_NPWM_Val _U_(0x2)
#define TC_WAVE_WAVEGEN_MPWM_Val _U_(0x3)
#define TC_WAVE_WAVEGEN_NFRQ (TC_WAVE_WAVEGEN_NFRQ_Val << TC_WAVE_WAVEGEN_Pos)
#define TC_WAVE_WAVEGEN_MFRQ (TC_WAVE_WAVEGEN_MFRQ_Val << TC_WAVE_WAVEGEN_Pos)
#define TC_WAVE_WAVEGEN_NPWM (TC_WAVE_WAVEGEN_NPWM_Val << TC_WAVE_WAVEGEN_Pos)
#define TC_WAVE_WAVEGEN_MPWM (TC_WAVE_WAVEGEN_MPWM_Val << TC_WAVE_WAVEGEN_Pos)
#define TC_WAVE_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t INVEN0:1;
    uint8_t INVEN1:1;
    uint8_t :6;
  } bit;
  struct {
    uint8_t INVEN:2;
    uint8_t :6;
  } vec;
  uint8_t reg;
} TC_DRVCTRL_Type;


#define TC_DRVCTRL_OFFSET 0x0D
#define TC_DRVCTRL_RESETVALUE _U_(0x00)

#define TC_DRVCTRL_INVEN0_Pos 0
#define TC_DRVCTRL_INVEN0 (_U_(1) << TC_DRVCTRL_INVEN0_Pos)
#define TC_DRVCTRL_INVEN1_Pos 1
#define TC_DRVCTRL_INVEN1 (_U_(1) << TC_DRVCTRL_INVEN1_Pos)
#define TC_DRVCTRL_INVEN_Pos 0
#define TC_DRVCTRL_INVEN_Msk (_U_(0x3) << TC_DRVCTRL_INVEN_Pos)
#define TC_DRVCTRL_INVEN(value) (TC_DRVCTRL_INVEN_Msk & ((value) << TC_DRVCTRL_INVEN_Pos))
#define TC_DRVCTRL_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t DBGRUN:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} TC_DBGCTRL_Type;


#define TC_DBGCTRL_OFFSET 0x0F
#define TC_DBGCTRL_RESETVALUE _U_(0x00)

#define TC_DBGCTRL_DBGRUN_Pos 0
#define TC_DBGCTRL_DBGRUN (_U_(0x1) << TC_DBGCTRL_DBGRUN_Pos)
#define TC_DBGCTRL_MASK _U_(0x01)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t CTRLB:1;
    uint32_t STATUS:1;
    uint32_t COUNT:1;
    uint32_t PER:1;
    uint32_t CC0:1;
    uint32_t CC1:1;
    uint32_t :24;
  } bit;
  struct {
    uint32_t :6;
    uint32_t CC:2;
    uint32_t :24;
  } vec;
  uint32_t reg;
} TC_SYNCBUSY_Type;


#define TC_SYNCBUSY_OFFSET 0x10
#define TC_SYNCBUSY_RESETVALUE _U_(0x00000000)

#define TC_SYNCBUSY_SWRST_Pos 0
#define TC_SYNCBUSY_SWRST (_U_(0x1) << TC_SYNCBUSY_SWRST_Pos)
#define TC_SYNCBUSY_ENABLE_Pos 1
#define TC_SYNCBUSY_ENABLE (_U_(0x1) << TC_SYNCBUSY_ENABLE_Pos)
#define TC_SYNCBUSY_CTRLB_Pos 2
#define TC_SYNCBUSY_CTRLB (_U_(0x1) << TC_SYNCBUSY_CTRLB_Pos)
#define TC_SYNCBUSY_STATUS_Pos 3
#define TC_SYNCBUSY_STATUS (_U_(0x1) << TC_SYNCBUSY_STATUS_Pos)
#define TC_SYNCBUSY_COUNT_Pos 4
#define TC_SYNCBUSY_COUNT (_U_(0x1) << TC_SYNCBUSY_COUNT_Pos)
#define TC_SYNCBUSY_PER_Pos 5
#define TC_SYNCBUSY_PER (_U_(0x1) << TC_SYNCBUSY_PER_Pos)
#define TC_SYNCBUSY_CC0_Pos 6
#define TC_SYNCBUSY_CC0 (_U_(1) << TC_SYNCBUSY_CC0_Pos)
#define TC_SYNCBUSY_CC1_Pos 7
#define TC_SYNCBUSY_CC1 (_U_(1) << TC_SYNCBUSY_CC1_Pos)
#define TC_SYNCBUSY_CC_Pos 6
#define TC_SYNCBUSY_CC_Msk (_U_(0x3) << TC_SYNCBUSY_CC_Pos)
#define TC_SYNCBUSY_CC(value) (TC_SYNCBUSY_CC_Msk & ((value) << TC_SYNCBUSY_CC_Pos))
#define TC_SYNCBUSY_MASK _U_(0x000000FF)



typedef union {
  struct {
    uint16_t COUNT:16;
  } bit;
  uint16_t reg;
} TC_COUNT16_COUNT_Type;


#define TC_COUNT16_COUNT_OFFSET 0x14
#define TC_COUNT16_COUNT_RESETVALUE _U_(0x0000)

#define TC_COUNT16_COUNT_COUNT_Pos 0
#define TC_COUNT16_COUNT_COUNT_Msk (_U_(0xFFFF) << TC_COUNT16_COUNT_COUNT_Pos)
#define TC_COUNT16_COUNT_COUNT(value) (TC_COUNT16_COUNT_COUNT_Msk & ((value) << TC_COUNT16_COUNT_COUNT_Pos))
#define TC_COUNT16_COUNT_MASK _U_(0xFFFF)



typedef union {
  struct {
    uint32_t COUNT:32;
  } bit;
  uint32_t reg;
} TC_COUNT32_COUNT_Type;


#define TC_COUNT32_COUNT_OFFSET 0x14
#define TC_COUNT32_COUNT_RESETVALUE _U_(0x00000000)

#define TC_COUNT32_COUNT_COUNT_Pos 0
#define TC_COUNT32_COUNT_COUNT_Msk (_U_(0xFFFFFFFF) << TC_COUNT32_COUNT_COUNT_Pos)
#define TC_COUNT32_COUNT_COUNT(value) (TC_COUNT32_COUNT_COUNT_Msk & ((value) << TC_COUNT32_COUNT_COUNT_Pos))
#define TC_COUNT32_COUNT_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint8_t COUNT:8;
  } bit;
  uint8_t reg;
} TC_COUNT8_COUNT_Type;


#define TC_COUNT8_COUNT_OFFSET 0x14
#define TC_COUNT8_COUNT_RESETVALUE _U_(0x00)

#define TC_COUNT8_COUNT_COUNT_Pos 0
#define TC_COUNT8_COUNT_COUNT_Msk (_U_(0xFF) << TC_COUNT8_COUNT_COUNT_Pos)
#define TC_COUNT8_COUNT_COUNT(value) (TC_COUNT8_COUNT_COUNT_Msk & ((value) << TC_COUNT8_COUNT_COUNT_Pos))
#define TC_COUNT8_COUNT_MASK _U_(0xFF)



typedef union {
  struct {
    uint8_t PER:8;
  } bit;
  uint8_t reg;
} TC_COUNT8_PER_Type;


#define TC_COUNT8_PER_OFFSET 0x1B
#define TC_COUNT8_PER_RESETVALUE _U_(0xFF)

#define TC_COUNT8_PER_PER_Pos 0
#define TC_COUNT8_PER_PER_Msk (_U_(0xFF) << TC_COUNT8_PER_PER_Pos)
#define TC_COUNT8_PER_PER(value) (TC_COUNT8_PER_PER_Msk & ((value) << TC_COUNT8_PER_PER_Pos))
#define TC_COUNT8_PER_MASK _U_(0xFF)



typedef union {
  struct {
    uint16_t CC:16;
  } bit;
  uint16_t reg;
} TC_COUNT16_CC_Type;


#define TC_COUNT16_CC_OFFSET 0x1C
#define TC_COUNT16_CC_RESETVALUE _U_(0x0000)

#define TC_COUNT16_CC_CC_Pos 0
#define TC_COUNT16_CC_CC_Msk (_U_(0xFFFF) << TC_COUNT16_CC_CC_Pos)
#define TC_COUNT16_CC_CC(value) (TC_COUNT16_CC_CC_Msk & ((value) << TC_COUNT16_CC_CC_Pos))
#define TC_COUNT16_CC_MASK _U_(0xFFFF)



typedef union {
  struct {
    uint32_t CC:32;
  } bit;
  uint32_t reg;
} TC_COUNT32_CC_Type;


#define TC_COUNT32_CC_OFFSET 0x1C
#define TC_COUNT32_CC_RESETVALUE _U_(0x00000000)

#define TC_COUNT32_CC_CC_Pos 0
#define TC_COUNT32_CC_CC_Msk (_U_(0xFFFFFFFF) << TC_COUNT32_CC_CC_Pos)
#define TC_COUNT32_CC_CC(value) (TC_COUNT32_CC_CC_Msk & ((value) << TC_COUNT32_CC_CC_Pos))
#define TC_COUNT32_CC_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint8_t CC:8;
  } bit;
  uint8_t reg;
} TC_COUNT8_CC_Type;


#define TC_COUNT8_CC_OFFSET 0x1C
#define TC_COUNT8_CC_RESETVALUE _U_(0x00)

#define TC_COUNT8_CC_CC_Pos 0
#define TC_COUNT8_CC_CC_Msk (_U_(0xFF) << TC_COUNT8_CC_CC_Pos)
#define TC_COUNT8_CC_CC(value) (TC_COUNT8_CC_CC_Msk & ((value) << TC_COUNT8_CC_CC_Pos))
#define TC_COUNT8_CC_MASK _U_(0xFF)



typedef union {
  struct {
    uint8_t PERBUF:8;
  } bit;
  uint8_t reg;
} TC_COUNT8_PERBUF_Type;


#define TC_COUNT8_PERBUF_OFFSET 0x2F
#define TC_COUNT8_PERBUF_RESETVALUE _U_(0xFF)

#define TC_COUNT8_PERBUF_PERBUF_Pos 0
#define TC_COUNT8_PERBUF_PERBUF_Msk (_U_(0xFF) << TC_COUNT8_PERBUF_PERBUF_Pos)
#define TC_COUNT8_PERBUF_PERBUF(value) (TC_COUNT8_PERBUF_PERBUF_Msk & ((value) << TC_COUNT8_PERBUF_PERBUF_Pos))
#define TC_COUNT8_PERBUF_MASK _U_(0xFF)



typedef union {
  struct {
    uint16_t CCBUF:16;
  } bit;
  uint16_t reg;
} TC_COUNT16_CCBUF_Type;


#define TC_COUNT16_CCBUF_OFFSET 0x30
#define TC_COUNT16_CCBUF_RESETVALUE _U_(0x0000)

#define TC_COUNT16_CCBUF_CCBUF_Pos 0
#define TC_COUNT16_CCBUF_CCBUF_Msk (_U_(0xFFFF) << TC_COUNT16_CCBUF_CCBUF_Pos)
#define TC_COUNT16_CCBUF_CCBUF(value) (TC_COUNT16_CCBUF_CCBUF_Msk & ((value) << TC_COUNT16_CCBUF_CCBUF_Pos))
#define TC_COUNT16_CCBUF_MASK _U_(0xFFFF)



typedef union {
  struct {
    uint32_t CCBUF:32;
  } bit;
  uint32_t reg;
} TC_COUNT32_CCBUF_Type;


#define TC_COUNT32_CCBUF_OFFSET 0x30
#define TC_COUNT32_CCBUF_RESETVALUE _U_(0x00000000)

#define TC_COUNT32_CCBUF_CCBUF_Pos 0
#define TC_COUNT32_CCBUF_CCBUF_Msk (_U_(0xFFFFFFFF) << TC_COUNT32_CCBUF_CCBUF_Pos)
#define TC_COUNT32_CCBUF_CCBUF(value) (TC_COUNT32_CCBUF_CCBUF_Msk & ((value) << TC_COUNT32_CCBUF_CCBUF_Pos))
#define TC_COUNT32_CCBUF_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint8_t CCBUF:8;
  } bit;
  uint8_t reg;
} TC_COUNT8_CCBUF_Type;


#define TC_COUNT8_CCBUF_OFFSET 0x30
#define TC_COUNT8_CCBUF_RESETVALUE _U_(0x00)

#define TC_COUNT8_CCBUF_CCBUF_Pos 0
#define TC_COUNT8_CCBUF_CCBUF_Msk (_U_(0xFF) << TC_COUNT8_CCBUF_CCBUF_Pos)
#define TC_COUNT8_CCBUF_CCBUF(value) (TC_COUNT8_CCBUF_CCBUF_Msk & ((value) << TC_COUNT8_CCBUF_CCBUF_Pos))
#define TC_COUNT8_CCBUF_MASK _U_(0xFF)



typedef struct {
  volatile TC_CTRLA_Type CTRLA;
  volatile TC_CTRLBCLR_Type CTRLBCLR;
  volatile TC_CTRLBSET_Type CTRLBSET;
  volatile TC_EVCTRL_Type EVCTRL;
  volatile TC_INTENCLR_Type INTENCLR;
  volatile TC_INTENSET_Type INTENSET;
  volatile TC_INTFLAG_Type INTFLAG;
  volatile TC_STATUS_Type STATUS;
  volatile TC_WAVE_Type WAVE;
  volatile TC_DRVCTRL_Type DRVCTRL;
       RoReg8 Reserved1[0x1];
  volatile TC_DBGCTRL_Type DBGCTRL;
  volatile const TC_SYNCBUSY_Type SYNCBUSY;
  volatile TC_COUNT8_COUNT_Type COUNT;
       RoReg8 Reserved2[0x6];
  volatile TC_COUNT8_PER_Type PER;
  volatile TC_COUNT8_CC_Type CC[2];
       RoReg8 Reserved3[0x11];
  volatile TC_COUNT8_PERBUF_Type PERBUF;
  volatile TC_COUNT8_CCBUF_Type CCBUF[2];
} TcCount8;




typedef struct {
  volatile TC_CTRLA_Type CTRLA;
  volatile TC_CTRLBCLR_Type CTRLBCLR;
  volatile TC_CTRLBSET_Type CTRLBSET;
  volatile TC_EVCTRL_Type EVCTRL;
  volatile TC_INTENCLR_Type INTENCLR;
  volatile TC_INTENSET_Type INTENSET;
  volatile TC_INTFLAG_Type INTFLAG;
  volatile TC_STATUS_Type STATUS;
  volatile TC_WAVE_Type WAVE;
  volatile TC_DRVCTRL_Type DRVCTRL;
       RoReg8 Reserved1[0x1];
  volatile TC_DBGCTRL_Type DBGCTRL;
  volatile const TC_SYNCBUSY_Type SYNCBUSY;
  volatile TC_COUNT16_COUNT_Type COUNT;
       RoReg8 Reserved2[0x6];
  volatile TC_COUNT16_CC_Type CC[2];
       RoReg8 Reserved3[0x10];
  volatile TC_COUNT16_CCBUF_Type CCBUF[2];
} TcCount16;




typedef struct {
  volatile TC_CTRLA_Type CTRLA;
  volatile TC_CTRLBCLR_Type CTRLBCLR;
  volatile TC_CTRLBSET_Type CTRLBSET;
  volatile TC_EVCTRL_Type EVCTRL;
  volatile TC_INTENCLR_Type INTENCLR;
  volatile TC_INTENSET_Type INTENSET;
  volatile TC_INTFLAG_Type INTFLAG;
  volatile TC_STATUS_Type STATUS;
  volatile TC_WAVE_Type WAVE;
  volatile TC_DRVCTRL_Type DRVCTRL;
       RoReg8 Reserved1[0x1];
  volatile TC_DBGCTRL_Type DBGCTRL;
  volatile const TC_SYNCBUSY_Type SYNCBUSY;
  volatile TC_COUNT32_COUNT_Type COUNT;
       RoReg8 Reserved2[0x4];
  volatile TC_COUNT32_CC_Type CC[2];
       RoReg8 Reserved3[0xC];
  volatile TC_COUNT32_CCBUF_Type CCBUF[2];
} TcCount32;



typedef union {
       TcCount8 COUNT8;
       TcCount16 COUNT16;
       TcCount32 COUNT32;
} Tc;
# 614 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/tcc.h" 1
# 31 "asf4/samd51/include/component/tcc.h"
#define _SAMD51_TCC_COMPONENT_ 







#define TCC_U2213 
#define REV_TCC 0x310



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t :3;
    uint32_t RESOLUTION:2;
    uint32_t :1;
    uint32_t PRESCALER:3;
    uint32_t RUNSTDBY:1;
    uint32_t PRESCSYNC:2;
    uint32_t ALOCK:1;
    uint32_t MSYNC:1;
    uint32_t :7;
    uint32_t DMAOS:1;
    uint32_t CPTEN0:1;
    uint32_t CPTEN1:1;
    uint32_t CPTEN2:1;
    uint32_t CPTEN3:1;
    uint32_t CPTEN4:1;
    uint32_t CPTEN5:1;
    uint32_t :2;
  } bit;
  struct {
    uint32_t :24;
    uint32_t CPTEN:6;
    uint32_t :2;
  } vec;
  uint32_t reg;
} TCC_CTRLA_Type;


#define TCC_CTRLA_OFFSET 0x00
#define TCC_CTRLA_RESETVALUE _U_(0x00000000)

#define TCC_CTRLA_SWRST_Pos 0
#define TCC_CTRLA_SWRST (_U_(0x1) << TCC_CTRLA_SWRST_Pos)
#define TCC_CTRLA_ENABLE_Pos 1
#define TCC_CTRLA_ENABLE (_U_(0x1) << TCC_CTRLA_ENABLE_Pos)
#define TCC_CTRLA_RESOLUTION_Pos 5
#define TCC_CTRLA_RESOLUTION_Msk (_U_(0x3) << TCC_CTRLA_RESOLUTION_Pos)
#define TCC_CTRLA_RESOLUTION(value) (TCC_CTRLA_RESOLUTION_Msk & ((value) << TCC_CTRLA_RESOLUTION_Pos))
#define TCC_CTRLA_RESOLUTION_NONE_Val _U_(0x0)
#define TCC_CTRLA_RESOLUTION_DITH4_Val _U_(0x1)
#define TCC_CTRLA_RESOLUTION_DITH5_Val _U_(0x2)
#define TCC_CTRLA_RESOLUTION_DITH6_Val _U_(0x3)
#define TCC_CTRLA_RESOLUTION_NONE (TCC_CTRLA_RESOLUTION_NONE_Val << TCC_CTRLA_RESOLUTION_Pos)
#define TCC_CTRLA_RESOLUTION_DITH4 (TCC_CTRLA_RESOLUTION_DITH4_Val << TCC_CTRLA_RESOLUTION_Pos)
#define TCC_CTRLA_RESOLUTION_DITH5 (TCC_CTRLA_RESOLUTION_DITH5_Val << TCC_CTRLA_RESOLUTION_Pos)
#define TCC_CTRLA_RESOLUTION_DITH6 (TCC_CTRLA_RESOLUTION_DITH6_Val << TCC_CTRLA_RESOLUTION_Pos)
#define TCC_CTRLA_PRESCALER_Pos 8
#define TCC_CTRLA_PRESCALER_Msk (_U_(0x7) << TCC_CTRLA_PRESCALER_Pos)
#define TCC_CTRLA_PRESCALER(value) (TCC_CTRLA_PRESCALER_Msk & ((value) << TCC_CTRLA_PRESCALER_Pos))
#define TCC_CTRLA_PRESCALER_DIV1_Val _U_(0x0)
#define TCC_CTRLA_PRESCALER_DIV2_Val _U_(0x1)
#define TCC_CTRLA_PRESCALER_DIV4_Val _U_(0x2)
#define TCC_CTRLA_PRESCALER_DIV8_Val _U_(0x3)
#define TCC_CTRLA_PRESCALER_DIV16_Val _U_(0x4)
#define TCC_CTRLA_PRESCALER_DIV64_Val _U_(0x5)
#define TCC_CTRLA_PRESCALER_DIV256_Val _U_(0x6)
#define TCC_CTRLA_PRESCALER_DIV1024_Val _U_(0x7)
#define TCC_CTRLA_PRESCALER_DIV1 (TCC_CTRLA_PRESCALER_DIV1_Val << TCC_CTRLA_PRESCALER_Pos)
#define TCC_CTRLA_PRESCALER_DIV2 (TCC_CTRLA_PRESCALER_DIV2_Val << TCC_CTRLA_PRESCALER_Pos)
#define TCC_CTRLA_PRESCALER_DIV4 (TCC_CTRLA_PRESCALER_DIV4_Val << TCC_CTRLA_PRESCALER_Pos)
#define TCC_CTRLA_PRESCALER_DIV8 (TCC_CTRLA_PRESCALER_DIV8_Val << TCC_CTRLA_PRESCALER_Pos)
#define TCC_CTRLA_PRESCALER_DIV16 (TCC_CTRLA_PRESCALER_DIV16_Val << TCC_CTRLA_PRESCALER_Pos)
#define TCC_CTRLA_PRESCALER_DIV64 (TCC_CTRLA_PRESCALER_DIV64_Val << TCC_CTRLA_PRESCALER_Pos)
#define TCC_CTRLA_PRESCALER_DIV256 (TCC_CTRLA_PRESCALER_DIV256_Val << TCC_CTRLA_PRESCALER_Pos)
#define TCC_CTRLA_PRESCALER_DIV1024 (TCC_CTRLA_PRESCALER_DIV1024_Val << TCC_CTRLA_PRESCALER_Pos)
#define TCC_CTRLA_RUNSTDBY_Pos 11
#define TCC_CTRLA_RUNSTDBY (_U_(0x1) << TCC_CTRLA_RUNSTDBY_Pos)
#define TCC_CTRLA_PRESCSYNC_Pos 12
#define TCC_CTRLA_PRESCSYNC_Msk (_U_(0x3) << TCC_CTRLA_PRESCSYNC_Pos)
#define TCC_CTRLA_PRESCSYNC(value) (TCC_CTRLA_PRESCSYNC_Msk & ((value) << TCC_CTRLA_PRESCSYNC_Pos))
#define TCC_CTRLA_PRESCSYNC_GCLK_Val _U_(0x0)
#define TCC_CTRLA_PRESCSYNC_PRESC_Val _U_(0x1)
#define TCC_CTRLA_PRESCSYNC_RESYNC_Val _U_(0x2)
#define TCC_CTRLA_PRESCSYNC_GCLK (TCC_CTRLA_PRESCSYNC_GCLK_Val << TCC_CTRLA_PRESCSYNC_Pos)
#define TCC_CTRLA_PRESCSYNC_PRESC (TCC_CTRLA_PRESCSYNC_PRESC_Val << TCC_CTRLA_PRESCSYNC_Pos)
#define TCC_CTRLA_PRESCSYNC_RESYNC (TCC_CTRLA_PRESCSYNC_RESYNC_Val << TCC_CTRLA_PRESCSYNC_Pos)
#define TCC_CTRLA_ALOCK_Pos 14
#define TCC_CTRLA_ALOCK (_U_(0x1) << TCC_CTRLA_ALOCK_Pos)
#define TCC_CTRLA_MSYNC_Pos 15
#define TCC_CTRLA_MSYNC (_U_(0x1) << TCC_CTRLA_MSYNC_Pos)
#define TCC_CTRLA_DMAOS_Pos 23
#define TCC_CTRLA_DMAOS (_U_(0x1) << TCC_CTRLA_DMAOS_Pos)
#define TCC_CTRLA_CPTEN0_Pos 24
#define TCC_CTRLA_CPTEN0 (_U_(1) << TCC_CTRLA_CPTEN0_Pos)
#define TCC_CTRLA_CPTEN1_Pos 25
#define TCC_CTRLA_CPTEN1 (_U_(1) << TCC_CTRLA_CPTEN1_Pos)
#define TCC_CTRLA_CPTEN2_Pos 26
#define TCC_CTRLA_CPTEN2 (_U_(1) << TCC_CTRLA_CPTEN2_Pos)
#define TCC_CTRLA_CPTEN3_Pos 27
#define TCC_CTRLA_CPTEN3 (_U_(1) << TCC_CTRLA_CPTEN3_Pos)
#define TCC_CTRLA_CPTEN4_Pos 28
#define TCC_CTRLA_CPTEN4 (_U_(1) << TCC_CTRLA_CPTEN4_Pos)
#define TCC_CTRLA_CPTEN5_Pos 29
#define TCC_CTRLA_CPTEN5 (_U_(1) << TCC_CTRLA_CPTEN5_Pos)
#define TCC_CTRLA_CPTEN_Pos 24
#define TCC_CTRLA_CPTEN_Msk (_U_(0x3F) << TCC_CTRLA_CPTEN_Pos)
#define TCC_CTRLA_CPTEN(value) (TCC_CTRLA_CPTEN_Msk & ((value) << TCC_CTRLA_CPTEN_Pos))
#define TCC_CTRLA_MASK _U_(0x3F80FF63)



typedef union {
  struct {
    uint8_t DIR:1;
    uint8_t LUPD:1;
    uint8_t ONESHOT:1;
    uint8_t IDXCMD:2;
    uint8_t CMD:3;
  } bit;
  uint8_t reg;
} TCC_CTRLBCLR_Type;


#define TCC_CTRLBCLR_OFFSET 0x04
#define TCC_CTRLBCLR_RESETVALUE _U_(0x00)

#define TCC_CTRLBCLR_DIR_Pos 0
#define TCC_CTRLBCLR_DIR (_U_(0x1) << TCC_CTRLBCLR_DIR_Pos)
#define TCC_CTRLBCLR_LUPD_Pos 1
#define TCC_CTRLBCLR_LUPD (_U_(0x1) << TCC_CTRLBCLR_LUPD_Pos)
#define TCC_CTRLBCLR_ONESHOT_Pos 2
#define TCC_CTRLBCLR_ONESHOT (_U_(0x1) << TCC_CTRLBCLR_ONESHOT_Pos)
#define TCC_CTRLBCLR_IDXCMD_Pos 3
#define TCC_CTRLBCLR_IDXCMD_Msk (_U_(0x3) << TCC_CTRLBCLR_IDXCMD_Pos)
#define TCC_CTRLBCLR_IDXCMD(value) (TCC_CTRLBCLR_IDXCMD_Msk & ((value) << TCC_CTRLBCLR_IDXCMD_Pos))
#define TCC_CTRLBCLR_IDXCMD_DISABLE_Val _U_(0x0)
#define TCC_CTRLBCLR_IDXCMD_SET_Val _U_(0x1)
#define TCC_CTRLBCLR_IDXCMD_CLEAR_Val _U_(0x2)
#define TCC_CTRLBCLR_IDXCMD_HOLD_Val _U_(0x3)
#define TCC_CTRLBCLR_IDXCMD_DISABLE (TCC_CTRLBCLR_IDXCMD_DISABLE_Val << TCC_CTRLBCLR_IDXCMD_Pos)
#define TCC_CTRLBCLR_IDXCMD_SET (TCC_CTRLBCLR_IDXCMD_SET_Val << TCC_CTRLBCLR_IDXCMD_Pos)
#define TCC_CTRLBCLR_IDXCMD_CLEAR (TCC_CTRLBCLR_IDXCMD_CLEAR_Val << TCC_CTRLBCLR_IDXCMD_Pos)
#define TCC_CTRLBCLR_IDXCMD_HOLD (TCC_CTRLBCLR_IDXCMD_HOLD_Val << TCC_CTRLBCLR_IDXCMD_Pos)
#define TCC_CTRLBCLR_CMD_Pos 5
#define TCC_CTRLBCLR_CMD_Msk (_U_(0x7) << TCC_CTRLBCLR_CMD_Pos)
#define TCC_CTRLBCLR_CMD(value) (TCC_CTRLBCLR_CMD_Msk & ((value) << TCC_CTRLBCLR_CMD_Pos))
#define TCC_CTRLBCLR_CMD_NONE_Val _U_(0x0)
#define TCC_CTRLBCLR_CMD_RETRIGGER_Val _U_(0x1)
#define TCC_CTRLBCLR_CMD_STOP_Val _U_(0x2)
#define TCC_CTRLBCLR_CMD_UPDATE_Val _U_(0x3)
#define TCC_CTRLBCLR_CMD_READSYNC_Val _U_(0x4)
#define TCC_CTRLBCLR_CMD_DMAOS_Val _U_(0x5)
#define TCC_CTRLBCLR_CMD_NONE (TCC_CTRLBCLR_CMD_NONE_Val << TCC_CTRLBCLR_CMD_Pos)
#define TCC_CTRLBCLR_CMD_RETRIGGER (TCC_CTRLBCLR_CMD_RETRIGGER_Val << TCC_CTRLBCLR_CMD_Pos)
#define TCC_CTRLBCLR_CMD_STOP (TCC_CTRLBCLR_CMD_STOP_Val << TCC_CTRLBCLR_CMD_Pos)
#define TCC_CTRLBCLR_CMD_UPDATE (TCC_CTRLBCLR_CMD_UPDATE_Val << TCC_CTRLBCLR_CMD_Pos)
#define TCC_CTRLBCLR_CMD_READSYNC (TCC_CTRLBCLR_CMD_READSYNC_Val << TCC_CTRLBCLR_CMD_Pos)
#define TCC_CTRLBCLR_CMD_DMAOS (TCC_CTRLBCLR_CMD_DMAOS_Val << TCC_CTRLBCLR_CMD_Pos)
#define TCC_CTRLBCLR_MASK _U_(0xFF)



typedef union {
  struct {
    uint8_t DIR:1;
    uint8_t LUPD:1;
    uint8_t ONESHOT:1;
    uint8_t IDXCMD:2;
    uint8_t CMD:3;
  } bit;
  uint8_t reg;
} TCC_CTRLBSET_Type;


#define TCC_CTRLBSET_OFFSET 0x05
#define TCC_CTRLBSET_RESETVALUE _U_(0x00)

#define TCC_CTRLBSET_DIR_Pos 0
#define TCC_CTRLBSET_DIR (_U_(0x1) << TCC_CTRLBSET_DIR_Pos)
#define TCC_CTRLBSET_LUPD_Pos 1
#define TCC_CTRLBSET_LUPD (_U_(0x1) << TCC_CTRLBSET_LUPD_Pos)
#define TCC_CTRLBSET_ONESHOT_Pos 2
#define TCC_CTRLBSET_ONESHOT (_U_(0x1) << TCC_CTRLBSET_ONESHOT_Pos)
#define TCC_CTRLBSET_IDXCMD_Pos 3
#define TCC_CTRLBSET_IDXCMD_Msk (_U_(0x3) << TCC_CTRLBSET_IDXCMD_Pos)
#define TCC_CTRLBSET_IDXCMD(value) (TCC_CTRLBSET_IDXCMD_Msk & ((value) << TCC_CTRLBSET_IDXCMD_Pos))
#define TCC_CTRLBSET_IDXCMD_DISABLE_Val _U_(0x0)
#define TCC_CTRLBSET_IDXCMD_SET_Val _U_(0x1)
#define TCC_CTRLBSET_IDXCMD_CLEAR_Val _U_(0x2)
#define TCC_CTRLBSET_IDXCMD_HOLD_Val _U_(0x3)
#define TCC_CTRLBSET_IDXCMD_DISABLE (TCC_CTRLBSET_IDXCMD_DISABLE_Val << TCC_CTRLBSET_IDXCMD_Pos)
#define TCC_CTRLBSET_IDXCMD_SET (TCC_CTRLBSET_IDXCMD_SET_Val << TCC_CTRLBSET_IDXCMD_Pos)
#define TCC_CTRLBSET_IDXCMD_CLEAR (TCC_CTRLBSET_IDXCMD_CLEAR_Val << TCC_CTRLBSET_IDXCMD_Pos)
#define TCC_CTRLBSET_IDXCMD_HOLD (TCC_CTRLBSET_IDXCMD_HOLD_Val << TCC_CTRLBSET_IDXCMD_Pos)
#define TCC_CTRLBSET_CMD_Pos 5
#define TCC_CTRLBSET_CMD_Msk (_U_(0x7) << TCC_CTRLBSET_CMD_Pos)
#define TCC_CTRLBSET_CMD(value) (TCC_CTRLBSET_CMD_Msk & ((value) << TCC_CTRLBSET_CMD_Pos))
#define TCC_CTRLBSET_CMD_NONE_Val _U_(0x0)
#define TCC_CTRLBSET_CMD_RETRIGGER_Val _U_(0x1)
#define TCC_CTRLBSET_CMD_STOP_Val _U_(0x2)
#define TCC_CTRLBSET_CMD_UPDATE_Val _U_(0x3)
#define TCC_CTRLBSET_CMD_READSYNC_Val _U_(0x4)
#define TCC_CTRLBSET_CMD_DMAOS_Val _U_(0x5)
#define TCC_CTRLBSET_CMD_NONE (TCC_CTRLBSET_CMD_NONE_Val << TCC_CTRLBSET_CMD_Pos)
#define TCC_CTRLBSET_CMD_RETRIGGER (TCC_CTRLBSET_CMD_RETRIGGER_Val << TCC_CTRLBSET_CMD_Pos)
#define TCC_CTRLBSET_CMD_STOP (TCC_CTRLBSET_CMD_STOP_Val << TCC_CTRLBSET_CMD_Pos)
#define TCC_CTRLBSET_CMD_UPDATE (TCC_CTRLBSET_CMD_UPDATE_Val << TCC_CTRLBSET_CMD_Pos)
#define TCC_CTRLBSET_CMD_READSYNC (TCC_CTRLBSET_CMD_READSYNC_Val << TCC_CTRLBSET_CMD_Pos)
#define TCC_CTRLBSET_CMD_DMAOS (TCC_CTRLBSET_CMD_DMAOS_Val << TCC_CTRLBSET_CMD_Pos)
#define TCC_CTRLBSET_MASK _U_(0xFF)



typedef union {
  struct {
    uint32_t SWRST:1;
    uint32_t ENABLE:1;
    uint32_t CTRLB:1;
    uint32_t STATUS:1;
    uint32_t COUNT:1;
    uint32_t PATT:1;
    uint32_t WAVE:1;
    uint32_t PER:1;
    uint32_t CC0:1;
    uint32_t CC1:1;
    uint32_t CC2:1;
    uint32_t CC3:1;
    uint32_t CC4:1;
    uint32_t CC5:1;
    uint32_t :18;
  } bit;
  struct {
    uint32_t :8;
    uint32_t CC:6;
    uint32_t :18;
  } vec;
  uint32_t reg;
} TCC_SYNCBUSY_Type;


#define TCC_SYNCBUSY_OFFSET 0x08
#define TCC_SYNCBUSY_RESETVALUE _U_(0x00000000)

#define TCC_SYNCBUSY_SWRST_Pos 0
#define TCC_SYNCBUSY_SWRST (_U_(0x1) << TCC_SYNCBUSY_SWRST_Pos)
#define TCC_SYNCBUSY_ENABLE_Pos 1
#define TCC_SYNCBUSY_ENABLE (_U_(0x1) << TCC_SYNCBUSY_ENABLE_Pos)
#define TCC_SYNCBUSY_CTRLB_Pos 2
#define TCC_SYNCBUSY_CTRLB (_U_(0x1) << TCC_SYNCBUSY_CTRLB_Pos)
#define TCC_SYNCBUSY_STATUS_Pos 3
#define TCC_SYNCBUSY_STATUS (_U_(0x1) << TCC_SYNCBUSY_STATUS_Pos)
#define TCC_SYNCBUSY_COUNT_Pos 4
#define TCC_SYNCBUSY_COUNT (_U_(0x1) << TCC_SYNCBUSY_COUNT_Pos)
#define TCC_SYNCBUSY_PATT_Pos 5
#define TCC_SYNCBUSY_PATT (_U_(0x1) << TCC_SYNCBUSY_PATT_Pos)
#define TCC_SYNCBUSY_WAVE_Pos 6
#define TCC_SYNCBUSY_WAVE (_U_(0x1) << TCC_SYNCBUSY_WAVE_Pos)
#define TCC_SYNCBUSY_PER_Pos 7
#define TCC_SYNCBUSY_PER (_U_(0x1) << TCC_SYNCBUSY_PER_Pos)
#define TCC_SYNCBUSY_CC0_Pos 8
#define TCC_SYNCBUSY_CC0 (_U_(1) << TCC_SYNCBUSY_CC0_Pos)
#define TCC_SYNCBUSY_CC1_Pos 9
#define TCC_SYNCBUSY_CC1 (_U_(1) << TCC_SYNCBUSY_CC1_Pos)
#define TCC_SYNCBUSY_CC2_Pos 10
#define TCC_SYNCBUSY_CC2 (_U_(1) << TCC_SYNCBUSY_CC2_Pos)
#define TCC_SYNCBUSY_CC3_Pos 11
#define TCC_SYNCBUSY_CC3 (_U_(1) << TCC_SYNCBUSY_CC3_Pos)
#define TCC_SYNCBUSY_CC4_Pos 12
#define TCC_SYNCBUSY_CC4 (_U_(1) << TCC_SYNCBUSY_CC4_Pos)
#define TCC_SYNCBUSY_CC5_Pos 13
#define TCC_SYNCBUSY_CC5 (_U_(1) << TCC_SYNCBUSY_CC5_Pos)
#define TCC_SYNCBUSY_CC_Pos 8
#define TCC_SYNCBUSY_CC_Msk (_U_(0x3F) << TCC_SYNCBUSY_CC_Pos)
#define TCC_SYNCBUSY_CC(value) (TCC_SYNCBUSY_CC_Msk & ((value) << TCC_SYNCBUSY_CC_Pos))
#define TCC_SYNCBUSY_MASK _U_(0x00003FFF)



typedef union {
  struct {
    uint32_t SRC:2;
    uint32_t :1;
    uint32_t KEEP:1;
    uint32_t QUAL:1;
    uint32_t BLANK:2;
    uint32_t RESTART:1;
    uint32_t HALT:2;
    uint32_t CHSEL:2;
    uint32_t CAPTURE:3;
    uint32_t BLANKPRESC:1;
    uint32_t BLANKVAL:8;
    uint32_t FILTERVAL:4;
    uint32_t :4;
  } bit;
  uint32_t reg;
} TCC_FCTRLA_Type;


#define TCC_FCTRLA_OFFSET 0x0C
#define TCC_FCTRLA_RESETVALUE _U_(0x00000000)

#define TCC_FCTRLA_SRC_Pos 0
#define TCC_FCTRLA_SRC_Msk (_U_(0x3) << TCC_FCTRLA_SRC_Pos)
#define TCC_FCTRLA_SRC(value) (TCC_FCTRLA_SRC_Msk & ((value) << TCC_FCTRLA_SRC_Pos))
#define TCC_FCTRLA_SRC_DISABLE_Val _U_(0x0)
#define TCC_FCTRLA_SRC_ENABLE_Val _U_(0x1)
#define TCC_FCTRLA_SRC_INVERT_Val _U_(0x2)
#define TCC_FCTRLA_SRC_ALTFAULT_Val _U_(0x3)
#define TCC_FCTRLA_SRC_DISABLE (TCC_FCTRLA_SRC_DISABLE_Val << TCC_FCTRLA_SRC_Pos)
#define TCC_FCTRLA_SRC_ENABLE (TCC_FCTRLA_SRC_ENABLE_Val << TCC_FCTRLA_SRC_Pos)
#define TCC_FCTRLA_SRC_INVERT (TCC_FCTRLA_SRC_INVERT_Val << TCC_FCTRLA_SRC_Pos)
#define TCC_FCTRLA_SRC_ALTFAULT (TCC_FCTRLA_SRC_ALTFAULT_Val << TCC_FCTRLA_SRC_Pos)
#define TCC_FCTRLA_KEEP_Pos 3
#define TCC_FCTRLA_KEEP (_U_(0x1) << TCC_FCTRLA_KEEP_Pos)
#define TCC_FCTRLA_QUAL_Pos 4
#define TCC_FCTRLA_QUAL (_U_(0x1) << TCC_FCTRLA_QUAL_Pos)
#define TCC_FCTRLA_BLANK_Pos 5
#define TCC_FCTRLA_BLANK_Msk (_U_(0x3) << TCC_FCTRLA_BLANK_Pos)
#define TCC_FCTRLA_BLANK(value) (TCC_FCTRLA_BLANK_Msk & ((value) << TCC_FCTRLA_BLANK_Pos))
#define TCC_FCTRLA_BLANK_START_Val _U_(0x0)
#define TCC_FCTRLA_BLANK_RISE_Val _U_(0x1)
#define TCC_FCTRLA_BLANK_FALL_Val _U_(0x2)
#define TCC_FCTRLA_BLANK_BOTH_Val _U_(0x3)
#define TCC_FCTRLA_BLANK_START (TCC_FCTRLA_BLANK_START_Val << TCC_FCTRLA_BLANK_Pos)
#define TCC_FCTRLA_BLANK_RISE (TCC_FCTRLA_BLANK_RISE_Val << TCC_FCTRLA_BLANK_Pos)
#define TCC_FCTRLA_BLANK_FALL (TCC_FCTRLA_BLANK_FALL_Val << TCC_FCTRLA_BLANK_Pos)
#define TCC_FCTRLA_BLANK_BOTH (TCC_FCTRLA_BLANK_BOTH_Val << TCC_FCTRLA_BLANK_Pos)
#define TCC_FCTRLA_RESTART_Pos 7
#define TCC_FCTRLA_RESTART (_U_(0x1) << TCC_FCTRLA_RESTART_Pos)
#define TCC_FCTRLA_HALT_Pos 8
#define TCC_FCTRLA_HALT_Msk (_U_(0x3) << TCC_FCTRLA_HALT_Pos)
#define TCC_FCTRLA_HALT(value) (TCC_FCTRLA_HALT_Msk & ((value) << TCC_FCTRLA_HALT_Pos))
#define TCC_FCTRLA_HALT_DISABLE_Val _U_(0x0)
#define TCC_FCTRLA_HALT_HW_Val _U_(0x1)
#define TCC_FCTRLA_HALT_SW_Val _U_(0x2)
#define TCC_FCTRLA_HALT_NR_Val _U_(0x3)
#define TCC_FCTRLA_HALT_DISABLE (TCC_FCTRLA_HALT_DISABLE_Val << TCC_FCTRLA_HALT_Pos)
#define TCC_FCTRLA_HALT_HW (TCC_FCTRLA_HALT_HW_Val << TCC_FCTRLA_HALT_Pos)
#define TCC_FCTRLA_HALT_SW (TCC_FCTRLA_HALT_SW_Val << TCC_FCTRLA_HALT_Pos)
#define TCC_FCTRLA_HALT_NR (TCC_FCTRLA_HALT_NR_Val << TCC_FCTRLA_HALT_Pos)
#define TCC_FCTRLA_CHSEL_Pos 10
#define TCC_FCTRLA_CHSEL_Msk (_U_(0x3) << TCC_FCTRLA_CHSEL_Pos)
#define TCC_FCTRLA_CHSEL(value) (TCC_FCTRLA_CHSEL_Msk & ((value) << TCC_FCTRLA_CHSEL_Pos))
#define TCC_FCTRLA_CHSEL_CC0_Val _U_(0x0)
#define TCC_FCTRLA_CHSEL_CC1_Val _U_(0x1)
#define TCC_FCTRLA_CHSEL_CC2_Val _U_(0x2)
#define TCC_FCTRLA_CHSEL_CC3_Val _U_(0x3)
#define TCC_FCTRLA_CHSEL_CC0 (TCC_FCTRLA_CHSEL_CC0_Val << TCC_FCTRLA_CHSEL_Pos)
#define TCC_FCTRLA_CHSEL_CC1 (TCC_FCTRLA_CHSEL_CC1_Val << TCC_FCTRLA_CHSEL_Pos)
#define TCC_FCTRLA_CHSEL_CC2 (TCC_FCTRLA_CHSEL_CC2_Val << TCC_FCTRLA_CHSEL_Pos)
#define TCC_FCTRLA_CHSEL_CC3 (TCC_FCTRLA_CHSEL_CC3_Val << TCC_FCTRLA_CHSEL_Pos)
#define TCC_FCTRLA_CAPTURE_Pos 12
#define TCC_FCTRLA_CAPTURE_Msk (_U_(0x7) << TCC_FCTRLA_CAPTURE_Pos)
#define TCC_FCTRLA_CAPTURE(value) (TCC_FCTRLA_CAPTURE_Msk & ((value) << TCC_FCTRLA_CAPTURE_Pos))
#define TCC_FCTRLA_CAPTURE_DISABLE_Val _U_(0x0)
#define TCC_FCTRLA_CAPTURE_CAPT_Val _U_(0x1)
#define TCC_FCTRLA_CAPTURE_CAPTMIN_Val _U_(0x2)
#define TCC_FCTRLA_CAPTURE_CAPTMAX_Val _U_(0x3)
#define TCC_FCTRLA_CAPTURE_LOCMIN_Val _U_(0x4)
#define TCC_FCTRLA_CAPTURE_LOCMAX_Val _U_(0x5)
#define TCC_FCTRLA_CAPTURE_DERIV0_Val _U_(0x6)
#define TCC_FCTRLA_CAPTURE_CAPTMARK_Val _U_(0x7)
#define TCC_FCTRLA_CAPTURE_DISABLE (TCC_FCTRLA_CAPTURE_DISABLE_Val << TCC_FCTRLA_CAPTURE_Pos)
#define TCC_FCTRLA_CAPTURE_CAPT (TCC_FCTRLA_CAPTURE_CAPT_Val << TCC_FCTRLA_CAPTURE_Pos)
#define TCC_FCTRLA_CAPTURE_CAPTMIN (TCC_FCTRLA_CAPTURE_CAPTMIN_Val << TCC_FCTRLA_CAPTURE_Pos)
#define TCC_FCTRLA_CAPTURE_CAPTMAX (TCC_FCTRLA_CAPTURE_CAPTMAX_Val << TCC_FCTRLA_CAPTURE_Pos)
#define TCC_FCTRLA_CAPTURE_LOCMIN (TCC_FCTRLA_CAPTURE_LOCMIN_Val << TCC_FCTRLA_CAPTURE_Pos)
#define TCC_FCTRLA_CAPTURE_LOCMAX (TCC_FCTRLA_CAPTURE_LOCMAX_Val << TCC_FCTRLA_CAPTURE_Pos)
#define TCC_FCTRLA_CAPTURE_DERIV0 (TCC_FCTRLA_CAPTURE_DERIV0_Val << TCC_FCTRLA_CAPTURE_Pos)
#define TCC_FCTRLA_CAPTURE_CAPTMARK (TCC_FCTRLA_CAPTURE_CAPTMARK_Val << TCC_FCTRLA_CAPTURE_Pos)
#define TCC_FCTRLA_BLANKPRESC_Pos 15
#define TCC_FCTRLA_BLANKPRESC (_U_(0x1) << TCC_FCTRLA_BLANKPRESC_Pos)
#define TCC_FCTRLA_BLANKVAL_Pos 16
#define TCC_FCTRLA_BLANKVAL_Msk (_U_(0xFF) << TCC_FCTRLA_BLANKVAL_Pos)
#define TCC_FCTRLA_BLANKVAL(value) (TCC_FCTRLA_BLANKVAL_Msk & ((value) << TCC_FCTRLA_BLANKVAL_Pos))
#define TCC_FCTRLA_FILTERVAL_Pos 24
#define TCC_FCTRLA_FILTERVAL_Msk (_U_(0xF) << TCC_FCTRLA_FILTERVAL_Pos)
#define TCC_FCTRLA_FILTERVAL(value) (TCC_FCTRLA_FILTERVAL_Msk & ((value) << TCC_FCTRLA_FILTERVAL_Pos))
#define TCC_FCTRLA_MASK _U_(0x0FFFFFFB)



typedef union {
  struct {
    uint32_t SRC:2;
    uint32_t :1;
    uint32_t KEEP:1;
    uint32_t QUAL:1;
    uint32_t BLANK:2;
    uint32_t RESTART:1;
    uint32_t HALT:2;
    uint32_t CHSEL:2;
    uint32_t CAPTURE:3;
    uint32_t BLANKPRESC:1;
    uint32_t BLANKVAL:8;
    uint32_t FILTERVAL:4;
    uint32_t :4;
  } bit;
  uint32_t reg;
} TCC_FCTRLB_Type;


#define TCC_FCTRLB_OFFSET 0x10
#define TCC_FCTRLB_RESETVALUE _U_(0x00000000)

#define TCC_FCTRLB_SRC_Pos 0
#define TCC_FCTRLB_SRC_Msk (_U_(0x3) << TCC_FCTRLB_SRC_Pos)
#define TCC_FCTRLB_SRC(value) (TCC_FCTRLB_SRC_Msk & ((value) << TCC_FCTRLB_SRC_Pos))
#define TCC_FCTRLB_SRC_DISABLE_Val _U_(0x0)
#define TCC_FCTRLB_SRC_ENABLE_Val _U_(0x1)
#define TCC_FCTRLB_SRC_INVERT_Val _U_(0x2)
#define TCC_FCTRLB_SRC_ALTFAULT_Val _U_(0x3)
#define TCC_FCTRLB_SRC_DISABLE (TCC_FCTRLB_SRC_DISABLE_Val << TCC_FCTRLB_SRC_Pos)
#define TCC_FCTRLB_SRC_ENABLE (TCC_FCTRLB_SRC_ENABLE_Val << TCC_FCTRLB_SRC_Pos)
#define TCC_FCTRLB_SRC_INVERT (TCC_FCTRLB_SRC_INVERT_Val << TCC_FCTRLB_SRC_Pos)
#define TCC_FCTRLB_SRC_ALTFAULT (TCC_FCTRLB_SRC_ALTFAULT_Val << TCC_FCTRLB_SRC_Pos)
#define TCC_FCTRLB_KEEP_Pos 3
#define TCC_FCTRLB_KEEP (_U_(0x1) << TCC_FCTRLB_KEEP_Pos)
#define TCC_FCTRLB_QUAL_Pos 4
#define TCC_FCTRLB_QUAL (_U_(0x1) << TCC_FCTRLB_QUAL_Pos)
#define TCC_FCTRLB_BLANK_Pos 5
#define TCC_FCTRLB_BLANK_Msk (_U_(0x3) << TCC_FCTRLB_BLANK_Pos)
#define TCC_FCTRLB_BLANK(value) (TCC_FCTRLB_BLANK_Msk & ((value) << TCC_FCTRLB_BLANK_Pos))
#define TCC_FCTRLB_BLANK_START_Val _U_(0x0)
#define TCC_FCTRLB_BLANK_RISE_Val _U_(0x1)
#define TCC_FCTRLB_BLANK_FALL_Val _U_(0x2)
#define TCC_FCTRLB_BLANK_BOTH_Val _U_(0x3)
#define TCC_FCTRLB_BLANK_START (TCC_FCTRLB_BLANK_START_Val << TCC_FCTRLB_BLANK_Pos)
#define TCC_FCTRLB_BLANK_RISE (TCC_FCTRLB_BLANK_RISE_Val << TCC_FCTRLB_BLANK_Pos)
#define TCC_FCTRLB_BLANK_FALL (TCC_FCTRLB_BLANK_FALL_Val << TCC_FCTRLB_BLANK_Pos)
#define TCC_FCTRLB_BLANK_BOTH (TCC_FCTRLB_BLANK_BOTH_Val << TCC_FCTRLB_BLANK_Pos)
#define TCC_FCTRLB_RESTART_Pos 7
#define TCC_FCTRLB_RESTART (_U_(0x1) << TCC_FCTRLB_RESTART_Pos)
#define TCC_FCTRLB_HALT_Pos 8
#define TCC_FCTRLB_HALT_Msk (_U_(0x3) << TCC_FCTRLB_HALT_Pos)
#define TCC_FCTRLB_HALT(value) (TCC_FCTRLB_HALT_Msk & ((value) << TCC_FCTRLB_HALT_Pos))
#define TCC_FCTRLB_HALT_DISABLE_Val _U_(0x0)
#define TCC_FCTRLB_HALT_HW_Val _U_(0x1)
#define TCC_FCTRLB_HALT_SW_Val _U_(0x2)
#define TCC_FCTRLB_HALT_NR_Val _U_(0x3)
#define TCC_FCTRLB_HALT_DISABLE (TCC_FCTRLB_HALT_DISABLE_Val << TCC_FCTRLB_HALT_Pos)
#define TCC_FCTRLB_HALT_HW (TCC_FCTRLB_HALT_HW_Val << TCC_FCTRLB_HALT_Pos)
#define TCC_FCTRLB_HALT_SW (TCC_FCTRLB_HALT_SW_Val << TCC_FCTRLB_HALT_Pos)
#define TCC_FCTRLB_HALT_NR (TCC_FCTRLB_HALT_NR_Val << TCC_FCTRLB_HALT_Pos)
#define TCC_FCTRLB_CHSEL_Pos 10
#define TCC_FCTRLB_CHSEL_Msk (_U_(0x3) << TCC_FCTRLB_CHSEL_Pos)
#define TCC_FCTRLB_CHSEL(value) (TCC_FCTRLB_CHSEL_Msk & ((value) << TCC_FCTRLB_CHSEL_Pos))
#define TCC_FCTRLB_CHSEL_CC0_Val _U_(0x0)
#define TCC_FCTRLB_CHSEL_CC1_Val _U_(0x1)
#define TCC_FCTRLB_CHSEL_CC2_Val _U_(0x2)
#define TCC_FCTRLB_CHSEL_CC3_Val _U_(0x3)
#define TCC_FCTRLB_CHSEL_CC0 (TCC_FCTRLB_CHSEL_CC0_Val << TCC_FCTRLB_CHSEL_Pos)
#define TCC_FCTRLB_CHSEL_CC1 (TCC_FCTRLB_CHSEL_CC1_Val << TCC_FCTRLB_CHSEL_Pos)
#define TCC_FCTRLB_CHSEL_CC2 (TCC_FCTRLB_CHSEL_CC2_Val << TCC_FCTRLB_CHSEL_Pos)
#define TCC_FCTRLB_CHSEL_CC3 (TCC_FCTRLB_CHSEL_CC3_Val << TCC_FCTRLB_CHSEL_Pos)
#define TCC_FCTRLB_CAPTURE_Pos 12
#define TCC_FCTRLB_CAPTURE_Msk (_U_(0x7) << TCC_FCTRLB_CAPTURE_Pos)
#define TCC_FCTRLB_CAPTURE(value) (TCC_FCTRLB_CAPTURE_Msk & ((value) << TCC_FCTRLB_CAPTURE_Pos))
#define TCC_FCTRLB_CAPTURE_DISABLE_Val _U_(0x0)
#define TCC_FCTRLB_CAPTURE_CAPT_Val _U_(0x1)
#define TCC_FCTRLB_CAPTURE_CAPTMIN_Val _U_(0x2)
#define TCC_FCTRLB_CAPTURE_CAPTMAX_Val _U_(0x3)
#define TCC_FCTRLB_CAPTURE_LOCMIN_Val _U_(0x4)
#define TCC_FCTRLB_CAPTURE_LOCMAX_Val _U_(0x5)
#define TCC_FCTRLB_CAPTURE_DERIV0_Val _U_(0x6)
#define TCC_FCTRLB_CAPTURE_CAPTMARK_Val _U_(0x7)
#define TCC_FCTRLB_CAPTURE_DISABLE (TCC_FCTRLB_CAPTURE_DISABLE_Val << TCC_FCTRLB_CAPTURE_Pos)
#define TCC_FCTRLB_CAPTURE_CAPT (TCC_FCTRLB_CAPTURE_CAPT_Val << TCC_FCTRLB_CAPTURE_Pos)
#define TCC_FCTRLB_CAPTURE_CAPTMIN (TCC_FCTRLB_CAPTURE_CAPTMIN_Val << TCC_FCTRLB_CAPTURE_Pos)
#define TCC_FCTRLB_CAPTURE_CAPTMAX (TCC_FCTRLB_CAPTURE_CAPTMAX_Val << TCC_FCTRLB_CAPTURE_Pos)
#define TCC_FCTRLB_CAPTURE_LOCMIN (TCC_FCTRLB_CAPTURE_LOCMIN_Val << TCC_FCTRLB_CAPTURE_Pos)
#define TCC_FCTRLB_CAPTURE_LOCMAX (TCC_FCTRLB_CAPTURE_LOCMAX_Val << TCC_FCTRLB_CAPTURE_Pos)
#define TCC_FCTRLB_CAPTURE_DERIV0 (TCC_FCTRLB_CAPTURE_DERIV0_Val << TCC_FCTRLB_CAPTURE_Pos)
#define TCC_FCTRLB_CAPTURE_CAPTMARK (TCC_FCTRLB_CAPTURE_CAPTMARK_Val << TCC_FCTRLB_CAPTURE_Pos)
#define TCC_FCTRLB_BLANKPRESC_Pos 15
#define TCC_FCTRLB_BLANKPRESC (_U_(0x1) << TCC_FCTRLB_BLANKPRESC_Pos)
#define TCC_FCTRLB_BLANKVAL_Pos 16
#define TCC_FCTRLB_BLANKVAL_Msk (_U_(0xFF) << TCC_FCTRLB_BLANKVAL_Pos)
#define TCC_FCTRLB_BLANKVAL(value) (TCC_FCTRLB_BLANKVAL_Msk & ((value) << TCC_FCTRLB_BLANKVAL_Pos))
#define TCC_FCTRLB_FILTERVAL_Pos 24
#define TCC_FCTRLB_FILTERVAL_Msk (_U_(0xF) << TCC_FCTRLB_FILTERVAL_Pos)
#define TCC_FCTRLB_FILTERVAL(value) (TCC_FCTRLB_FILTERVAL_Msk & ((value) << TCC_FCTRLB_FILTERVAL_Pos))
#define TCC_FCTRLB_MASK _U_(0x0FFFFFFB)



typedef union {
  struct {
    uint32_t OTMX:2;
    uint32_t :6;
    uint32_t DTIEN0:1;
    uint32_t DTIEN1:1;
    uint32_t DTIEN2:1;
    uint32_t DTIEN3:1;
    uint32_t :4;
    uint32_t DTLS:8;
    uint32_t DTHS:8;
  } bit;
  struct {
    uint32_t :8;
    uint32_t DTIEN:4;
    uint32_t :20;
  } vec;
  uint32_t reg;
} TCC_WEXCTRL_Type;


#define TCC_WEXCTRL_OFFSET 0x14
#define TCC_WEXCTRL_RESETVALUE _U_(0x00000000)

#define TCC_WEXCTRL_OTMX_Pos 0
#define TCC_WEXCTRL_OTMX_Msk (_U_(0x3) << TCC_WEXCTRL_OTMX_Pos)
#define TCC_WEXCTRL_OTMX(value) (TCC_WEXCTRL_OTMX_Msk & ((value) << TCC_WEXCTRL_OTMX_Pos))
#define TCC_WEXCTRL_DTIEN0_Pos 8
#define TCC_WEXCTRL_DTIEN0 (_U_(1) << TCC_WEXCTRL_DTIEN0_Pos)
#define TCC_WEXCTRL_DTIEN1_Pos 9
#define TCC_WEXCTRL_DTIEN1 (_U_(1) << TCC_WEXCTRL_DTIEN1_Pos)
#define TCC_WEXCTRL_DTIEN2_Pos 10
#define TCC_WEXCTRL_DTIEN2 (_U_(1) << TCC_WEXCTRL_DTIEN2_Pos)
#define TCC_WEXCTRL_DTIEN3_Pos 11
#define TCC_WEXCTRL_DTIEN3 (_U_(1) << TCC_WEXCTRL_DTIEN3_Pos)
#define TCC_WEXCTRL_DTIEN_Pos 8
#define TCC_WEXCTRL_DTIEN_Msk (_U_(0xF) << TCC_WEXCTRL_DTIEN_Pos)
#define TCC_WEXCTRL_DTIEN(value) (TCC_WEXCTRL_DTIEN_Msk & ((value) << TCC_WEXCTRL_DTIEN_Pos))
#define TCC_WEXCTRL_DTLS_Pos 16
#define TCC_WEXCTRL_DTLS_Msk (_U_(0xFF) << TCC_WEXCTRL_DTLS_Pos)
#define TCC_WEXCTRL_DTLS(value) (TCC_WEXCTRL_DTLS_Msk & ((value) << TCC_WEXCTRL_DTLS_Pos))
#define TCC_WEXCTRL_DTHS_Pos 24
#define TCC_WEXCTRL_DTHS_Msk (_U_(0xFF) << TCC_WEXCTRL_DTHS_Pos)
#define TCC_WEXCTRL_DTHS(value) (TCC_WEXCTRL_DTHS_Msk & ((value) << TCC_WEXCTRL_DTHS_Pos))
#define TCC_WEXCTRL_MASK _U_(0xFFFF0F03)



typedef union {
  struct {
    uint32_t NRE0:1;
    uint32_t NRE1:1;
    uint32_t NRE2:1;
    uint32_t NRE3:1;
    uint32_t NRE4:1;
    uint32_t NRE5:1;
    uint32_t NRE6:1;
    uint32_t NRE7:1;
    uint32_t NRV0:1;
    uint32_t NRV1:1;
    uint32_t NRV2:1;
    uint32_t NRV3:1;
    uint32_t NRV4:1;
    uint32_t NRV5:1;
    uint32_t NRV6:1;
    uint32_t NRV7:1;
    uint32_t INVEN0:1;
    uint32_t INVEN1:1;
    uint32_t INVEN2:1;
    uint32_t INVEN3:1;
    uint32_t INVEN4:1;
    uint32_t INVEN5:1;
    uint32_t INVEN6:1;
    uint32_t INVEN7:1;
    uint32_t FILTERVAL0:4;
    uint32_t FILTERVAL1:4;
  } bit;
  struct {
    uint32_t NRE:8;
    uint32_t NRV:8;
    uint32_t INVEN:8;
    uint32_t :8;
  } vec;
  uint32_t reg;
} TCC_DRVCTRL_Type;


#define TCC_DRVCTRL_OFFSET 0x18
#define TCC_DRVCTRL_RESETVALUE _U_(0x00000000)

#define TCC_DRVCTRL_NRE0_Pos 0
#define TCC_DRVCTRL_NRE0 (_U_(1) << TCC_DRVCTRL_NRE0_Pos)
#define TCC_DRVCTRL_NRE1_Pos 1
#define TCC_DRVCTRL_NRE1 (_U_(1) << TCC_DRVCTRL_NRE1_Pos)
#define TCC_DRVCTRL_NRE2_Pos 2
#define TCC_DRVCTRL_NRE2 (_U_(1) << TCC_DRVCTRL_NRE2_Pos)
#define TCC_DRVCTRL_NRE3_Pos 3
#define TCC_DRVCTRL_NRE3 (_U_(1) << TCC_DRVCTRL_NRE3_Pos)
#define TCC_DRVCTRL_NRE4_Pos 4
#define TCC_DRVCTRL_NRE4 (_U_(1) << TCC_DRVCTRL_NRE4_Pos)
#define TCC_DRVCTRL_NRE5_Pos 5
#define TCC_DRVCTRL_NRE5 (_U_(1) << TCC_DRVCTRL_NRE5_Pos)
#define TCC_DRVCTRL_NRE6_Pos 6
#define TCC_DRVCTRL_NRE6 (_U_(1) << TCC_DRVCTRL_NRE6_Pos)
#define TCC_DRVCTRL_NRE7_Pos 7
#define TCC_DRVCTRL_NRE7 (_U_(1) << TCC_DRVCTRL_NRE7_Pos)
#define TCC_DRVCTRL_NRE_Pos 0
#define TCC_DRVCTRL_NRE_Msk (_U_(0xFF) << TCC_DRVCTRL_NRE_Pos)
#define TCC_DRVCTRL_NRE(value) (TCC_DRVCTRL_NRE_Msk & ((value) << TCC_DRVCTRL_NRE_Pos))
#define TCC_DRVCTRL_NRV0_Pos 8
#define TCC_DRVCTRL_NRV0 (_U_(1) << TCC_DRVCTRL_NRV0_Pos)
#define TCC_DRVCTRL_NRV1_Pos 9
#define TCC_DRVCTRL_NRV1 (_U_(1) << TCC_DRVCTRL_NRV1_Pos)
#define TCC_DRVCTRL_NRV2_Pos 10
#define TCC_DRVCTRL_NRV2 (_U_(1) << TCC_DRVCTRL_NRV2_Pos)
#define TCC_DRVCTRL_NRV3_Pos 11
#define TCC_DRVCTRL_NRV3 (_U_(1) << TCC_DRVCTRL_NRV3_Pos)
#define TCC_DRVCTRL_NRV4_Pos 12
#define TCC_DRVCTRL_NRV4 (_U_(1) << TCC_DRVCTRL_NRV4_Pos)
#define TCC_DRVCTRL_NRV5_Pos 13
#define TCC_DRVCTRL_NRV5 (_U_(1) << TCC_DRVCTRL_NRV5_Pos)
#define TCC_DRVCTRL_NRV6_Pos 14
#define TCC_DRVCTRL_NRV6 (_U_(1) << TCC_DRVCTRL_NRV6_Pos)
#define TCC_DRVCTRL_NRV7_Pos 15
#define TCC_DRVCTRL_NRV7 (_U_(1) << TCC_DRVCTRL_NRV7_Pos)
#define TCC_DRVCTRL_NRV_Pos 8
#define TCC_DRVCTRL_NRV_Msk (_U_(0xFF) << TCC_DRVCTRL_NRV_Pos)
#define TCC_DRVCTRL_NRV(value) (TCC_DRVCTRL_NRV_Msk & ((value) << TCC_DRVCTRL_NRV_Pos))
#define TCC_DRVCTRL_INVEN0_Pos 16
#define TCC_DRVCTRL_INVEN0 (_U_(1) << TCC_DRVCTRL_INVEN0_Pos)
#define TCC_DRVCTRL_INVEN1_Pos 17
#define TCC_DRVCTRL_INVEN1 (_U_(1) << TCC_DRVCTRL_INVEN1_Pos)
#define TCC_DRVCTRL_INVEN2_Pos 18
#define TCC_DRVCTRL_INVEN2 (_U_(1) << TCC_DRVCTRL_INVEN2_Pos)
#define TCC_DRVCTRL_INVEN3_Pos 19
#define TCC_DRVCTRL_INVEN3 (_U_(1) << TCC_DRVCTRL_INVEN3_Pos)
#define TCC_DRVCTRL_INVEN4_Pos 20
#define TCC_DRVCTRL_INVEN4 (_U_(1) << TCC_DRVCTRL_INVEN4_Pos)
#define TCC_DRVCTRL_INVEN5_Pos 21
#define TCC_DRVCTRL_INVEN5 (_U_(1) << TCC_DRVCTRL_INVEN5_Pos)
#define TCC_DRVCTRL_INVEN6_Pos 22
#define TCC_DRVCTRL_INVEN6 (_U_(1) << TCC_DRVCTRL_INVEN6_Pos)
#define TCC_DRVCTRL_INVEN7_Pos 23
#define TCC_DRVCTRL_INVEN7 (_U_(1) << TCC_DRVCTRL_INVEN7_Pos)
#define TCC_DRVCTRL_INVEN_Pos 16
#define TCC_DRVCTRL_INVEN_Msk (_U_(0xFF) << TCC_DRVCTRL_INVEN_Pos)
#define TCC_DRVCTRL_INVEN(value) (TCC_DRVCTRL_INVEN_Msk & ((value) << TCC_DRVCTRL_INVEN_Pos))
#define TCC_DRVCTRL_FILTERVAL0_Pos 24
#define TCC_DRVCTRL_FILTERVAL0_Msk (_U_(0xF) << TCC_DRVCTRL_FILTERVAL0_Pos)
#define TCC_DRVCTRL_FILTERVAL0(value) (TCC_DRVCTRL_FILTERVAL0_Msk & ((value) << TCC_DRVCTRL_FILTERVAL0_Pos))
#define TCC_DRVCTRL_FILTERVAL1_Pos 28
#define TCC_DRVCTRL_FILTERVAL1_Msk (_U_(0xF) << TCC_DRVCTRL_FILTERVAL1_Pos)
#define TCC_DRVCTRL_FILTERVAL1(value) (TCC_DRVCTRL_FILTERVAL1_Msk & ((value) << TCC_DRVCTRL_FILTERVAL1_Pos))
#define TCC_DRVCTRL_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint8_t DBGRUN:1;
    uint8_t :1;
    uint8_t FDDBD:1;
    uint8_t :5;
  } bit;
  uint8_t reg;
} TCC_DBGCTRL_Type;


#define TCC_DBGCTRL_OFFSET 0x1E
#define TCC_DBGCTRL_RESETVALUE _U_(0x00)

#define TCC_DBGCTRL_DBGRUN_Pos 0
#define TCC_DBGCTRL_DBGRUN (_U_(0x1) << TCC_DBGCTRL_DBGRUN_Pos)
#define TCC_DBGCTRL_FDDBD_Pos 2
#define TCC_DBGCTRL_FDDBD (_U_(0x1) << TCC_DBGCTRL_FDDBD_Pos)
#define TCC_DBGCTRL_MASK _U_(0x05)



typedef union {
  struct {
    uint32_t EVACT0:3;
    uint32_t EVACT1:3;
    uint32_t CNTSEL:2;
    uint32_t OVFEO:1;
    uint32_t TRGEO:1;
    uint32_t CNTEO:1;
    uint32_t :1;
    uint32_t TCINV0:1;
    uint32_t TCINV1:1;
    uint32_t TCEI0:1;
    uint32_t TCEI1:1;
    uint32_t MCEI0:1;
    uint32_t MCEI1:1;
    uint32_t MCEI2:1;
    uint32_t MCEI3:1;
    uint32_t MCEI4:1;
    uint32_t MCEI5:1;
    uint32_t :2;
    uint32_t MCEO0:1;
    uint32_t MCEO1:1;
    uint32_t MCEO2:1;
    uint32_t MCEO3:1;
    uint32_t MCEO4:1;
    uint32_t MCEO5:1;
    uint32_t :2;
  } bit;
  struct {
    uint32_t :12;
    uint32_t TCINV:2;
    uint32_t TCEI:2;
    uint32_t MCEI:6;
    uint32_t :2;
    uint32_t MCEO:6;
    uint32_t :2;
  } vec;
  uint32_t reg;
} TCC_EVCTRL_Type;


#define TCC_EVCTRL_OFFSET 0x20
#define TCC_EVCTRL_RESETVALUE _U_(0x00000000)

#define TCC_EVCTRL_EVACT0_Pos 0
#define TCC_EVCTRL_EVACT0_Msk (_U_(0x7) << TCC_EVCTRL_EVACT0_Pos)
#define TCC_EVCTRL_EVACT0(value) (TCC_EVCTRL_EVACT0_Msk & ((value) << TCC_EVCTRL_EVACT0_Pos))
#define TCC_EVCTRL_EVACT0_OFF_Val _U_(0x0)
#define TCC_EVCTRL_EVACT0_RETRIGGER_Val _U_(0x1)
#define TCC_EVCTRL_EVACT0_COUNTEV_Val _U_(0x2)
#define TCC_EVCTRL_EVACT0_START_Val _U_(0x3)
#define TCC_EVCTRL_EVACT0_INC_Val _U_(0x4)
#define TCC_EVCTRL_EVACT0_COUNT_Val _U_(0x5)
#define TCC_EVCTRL_EVACT0_STAMP_Val _U_(0x6)
#define TCC_EVCTRL_EVACT0_FAULT_Val _U_(0x7)
#define TCC_EVCTRL_EVACT0_OFF (TCC_EVCTRL_EVACT0_OFF_Val << TCC_EVCTRL_EVACT0_Pos)
#define TCC_EVCTRL_EVACT0_RETRIGGER (TCC_EVCTRL_EVACT0_RETRIGGER_Val << TCC_EVCTRL_EVACT0_Pos)
#define TCC_EVCTRL_EVACT0_COUNTEV (TCC_EVCTRL_EVACT0_COUNTEV_Val << TCC_EVCTRL_EVACT0_Pos)
#define TCC_EVCTRL_EVACT0_START (TCC_EVCTRL_EVACT0_START_Val << TCC_EVCTRL_EVACT0_Pos)
#define TCC_EVCTRL_EVACT0_INC (TCC_EVCTRL_EVACT0_INC_Val << TCC_EVCTRL_EVACT0_Pos)
#define TCC_EVCTRL_EVACT0_COUNT (TCC_EVCTRL_EVACT0_COUNT_Val << TCC_EVCTRL_EVACT0_Pos)
#define TCC_EVCTRL_EVACT0_STAMP (TCC_EVCTRL_EVACT0_STAMP_Val << TCC_EVCTRL_EVACT0_Pos)
#define TCC_EVCTRL_EVACT0_FAULT (TCC_EVCTRL_EVACT0_FAULT_Val << TCC_EVCTRL_EVACT0_Pos)
#define TCC_EVCTRL_EVACT1_Pos 3
#define TCC_EVCTRL_EVACT1_Msk (_U_(0x7) << TCC_EVCTRL_EVACT1_Pos)
#define TCC_EVCTRL_EVACT1(value) (TCC_EVCTRL_EVACT1_Msk & ((value) << TCC_EVCTRL_EVACT1_Pos))
#define TCC_EVCTRL_EVACT1_OFF_Val _U_(0x0)
#define TCC_EVCTRL_EVACT1_RETRIGGER_Val _U_(0x1)
#define TCC_EVCTRL_EVACT1_DIR_Val _U_(0x2)
#define TCC_EVCTRL_EVACT1_STOP_Val _U_(0x3)
#define TCC_EVCTRL_EVACT1_DEC_Val _U_(0x4)
#define TCC_EVCTRL_EVACT1_PPW_Val _U_(0x5)
#define TCC_EVCTRL_EVACT1_PWP_Val _U_(0x6)
#define TCC_EVCTRL_EVACT1_FAULT_Val _U_(0x7)
#define TCC_EVCTRL_EVACT1_OFF (TCC_EVCTRL_EVACT1_OFF_Val << TCC_EVCTRL_EVACT1_Pos)
#define TCC_EVCTRL_EVACT1_RETRIGGER (TCC_EVCTRL_EVACT1_RETRIGGER_Val << TCC_EVCTRL_EVACT1_Pos)
#define TCC_EVCTRL_EVACT1_DIR (TCC_EVCTRL_EVACT1_DIR_Val << TCC_EVCTRL_EVACT1_Pos)
#define TCC_EVCTRL_EVACT1_STOP (TCC_EVCTRL_EVACT1_STOP_Val << TCC_EVCTRL_EVACT1_Pos)
#define TCC_EVCTRL_EVACT1_DEC (TCC_EVCTRL_EVACT1_DEC_Val << TCC_EVCTRL_EVACT1_Pos)
#define TCC_EVCTRL_EVACT1_PPW (TCC_EVCTRL_EVACT1_PPW_Val << TCC_EVCTRL_EVACT1_Pos)
#define TCC_EVCTRL_EVACT1_PWP (TCC_EVCTRL_EVACT1_PWP_Val << TCC_EVCTRL_EVACT1_Pos)
#define TCC_EVCTRL_EVACT1_FAULT (TCC_EVCTRL_EVACT1_FAULT_Val << TCC_EVCTRL_EVACT1_Pos)
#define TCC_EVCTRL_CNTSEL_Pos 6
#define TCC_EVCTRL_CNTSEL_Msk (_U_(0x3) << TCC_EVCTRL_CNTSEL_Pos)
#define TCC_EVCTRL_CNTSEL(value) (TCC_EVCTRL_CNTSEL_Msk & ((value) << TCC_EVCTRL_CNTSEL_Pos))
#define TCC_EVCTRL_CNTSEL_START_Val _U_(0x0)
#define TCC_EVCTRL_CNTSEL_END_Val _U_(0x1)
#define TCC_EVCTRL_CNTSEL_BETWEEN_Val _U_(0x2)
#define TCC_EVCTRL_CNTSEL_BOUNDARY_Val _U_(0x3)
#define TCC_EVCTRL_CNTSEL_START (TCC_EVCTRL_CNTSEL_START_Val << TCC_EVCTRL_CNTSEL_Pos)
#define TCC_EVCTRL_CNTSEL_END (TCC_EVCTRL_CNTSEL_END_Val << TCC_EVCTRL_CNTSEL_Pos)
#define TCC_EVCTRL_CNTSEL_BETWEEN (TCC_EVCTRL_CNTSEL_BETWEEN_Val << TCC_EVCTRL_CNTSEL_Pos)
#define TCC_EVCTRL_CNTSEL_BOUNDARY (TCC_EVCTRL_CNTSEL_BOUNDARY_Val << TCC_EVCTRL_CNTSEL_Pos)
#define TCC_EVCTRL_OVFEO_Pos 8
#define TCC_EVCTRL_OVFEO (_U_(0x1) << TCC_EVCTRL_OVFEO_Pos)
#define TCC_EVCTRL_TRGEO_Pos 9
#define TCC_EVCTRL_TRGEO (_U_(0x1) << TCC_EVCTRL_TRGEO_Pos)
#define TCC_EVCTRL_CNTEO_Pos 10
#define TCC_EVCTRL_CNTEO (_U_(0x1) << TCC_EVCTRL_CNTEO_Pos)
#define TCC_EVCTRL_TCINV0_Pos 12
#define TCC_EVCTRL_TCINV0 (_U_(1) << TCC_EVCTRL_TCINV0_Pos)
#define TCC_EVCTRL_TCINV1_Pos 13
#define TCC_EVCTRL_TCINV1 (_U_(1) << TCC_EVCTRL_TCINV1_Pos)
#define TCC_EVCTRL_TCINV_Pos 12
#define TCC_EVCTRL_TCINV_Msk (_U_(0x3) << TCC_EVCTRL_TCINV_Pos)
#define TCC_EVCTRL_TCINV(value) (TCC_EVCTRL_TCINV_Msk & ((value) << TCC_EVCTRL_TCINV_Pos))
#define TCC_EVCTRL_TCEI0_Pos 14
#define TCC_EVCTRL_TCEI0 (_U_(1) << TCC_EVCTRL_TCEI0_Pos)
#define TCC_EVCTRL_TCEI1_Pos 15
#define TCC_EVCTRL_TCEI1 (_U_(1) << TCC_EVCTRL_TCEI1_Pos)
#define TCC_EVCTRL_TCEI_Pos 14
#define TCC_EVCTRL_TCEI_Msk (_U_(0x3) << TCC_EVCTRL_TCEI_Pos)
#define TCC_EVCTRL_TCEI(value) (TCC_EVCTRL_TCEI_Msk & ((value) << TCC_EVCTRL_TCEI_Pos))
#define TCC_EVCTRL_MCEI0_Pos 16
#define TCC_EVCTRL_MCEI0 (_U_(1) << TCC_EVCTRL_MCEI0_Pos)
#define TCC_EVCTRL_MCEI1_Pos 17
#define TCC_EVCTRL_MCEI1 (_U_(1) << TCC_EVCTRL_MCEI1_Pos)
#define TCC_EVCTRL_MCEI2_Pos 18
#define TCC_EVCTRL_MCEI2 (_U_(1) << TCC_EVCTRL_MCEI2_Pos)
#define TCC_EVCTRL_MCEI3_Pos 19
#define TCC_EVCTRL_MCEI3 (_U_(1) << TCC_EVCTRL_MCEI3_Pos)
#define TCC_EVCTRL_MCEI4_Pos 20
#define TCC_EVCTRL_MCEI4 (_U_(1) << TCC_EVCTRL_MCEI4_Pos)
#define TCC_EVCTRL_MCEI5_Pos 21
#define TCC_EVCTRL_MCEI5 (_U_(1) << TCC_EVCTRL_MCEI5_Pos)
#define TCC_EVCTRL_MCEI_Pos 16
#define TCC_EVCTRL_MCEI_Msk (_U_(0x3F) << TCC_EVCTRL_MCEI_Pos)
#define TCC_EVCTRL_MCEI(value) (TCC_EVCTRL_MCEI_Msk & ((value) << TCC_EVCTRL_MCEI_Pos))
#define TCC_EVCTRL_MCEO0_Pos 24
#define TCC_EVCTRL_MCEO0 (_U_(1) << TCC_EVCTRL_MCEO0_Pos)
#define TCC_EVCTRL_MCEO1_Pos 25
#define TCC_EVCTRL_MCEO1 (_U_(1) << TCC_EVCTRL_MCEO1_Pos)
#define TCC_EVCTRL_MCEO2_Pos 26
#define TCC_EVCTRL_MCEO2 (_U_(1) << TCC_EVCTRL_MCEO2_Pos)
#define TCC_EVCTRL_MCEO3_Pos 27
#define TCC_EVCTRL_MCEO3 (_U_(1) << TCC_EVCTRL_MCEO3_Pos)
#define TCC_EVCTRL_MCEO4_Pos 28
#define TCC_EVCTRL_MCEO4 (_U_(1) << TCC_EVCTRL_MCEO4_Pos)
#define TCC_EVCTRL_MCEO5_Pos 29
#define TCC_EVCTRL_MCEO5 (_U_(1) << TCC_EVCTRL_MCEO5_Pos)
#define TCC_EVCTRL_MCEO_Pos 24
#define TCC_EVCTRL_MCEO_Msk (_U_(0x3F) << TCC_EVCTRL_MCEO_Pos)
#define TCC_EVCTRL_MCEO(value) (TCC_EVCTRL_MCEO_Msk & ((value) << TCC_EVCTRL_MCEO_Pos))
#define TCC_EVCTRL_MASK _U_(0x3F3FF7FF)



typedef union {
  struct {
    uint32_t OVF:1;
    uint32_t TRG:1;
    uint32_t CNT:1;
    uint32_t ERR:1;
    uint32_t :6;
    uint32_t UFS:1;
    uint32_t DFS:1;
    uint32_t FAULTA:1;
    uint32_t FAULTB:1;
    uint32_t FAULT0:1;
    uint32_t FAULT1:1;
    uint32_t MC0:1;
    uint32_t MC1:1;
    uint32_t MC2:1;
    uint32_t MC3:1;
    uint32_t MC4:1;
    uint32_t MC5:1;
    uint32_t :10;
  } bit;
  struct {
    uint32_t :16;
    uint32_t MC:6;
    uint32_t :10;
  } vec;
  uint32_t reg;
} TCC_INTENCLR_Type;


#define TCC_INTENCLR_OFFSET 0x24
#define TCC_INTENCLR_RESETVALUE _U_(0x00000000)

#define TCC_INTENCLR_OVF_Pos 0
#define TCC_INTENCLR_OVF (_U_(0x1) << TCC_INTENCLR_OVF_Pos)
#define TCC_INTENCLR_TRG_Pos 1
#define TCC_INTENCLR_TRG (_U_(0x1) << TCC_INTENCLR_TRG_Pos)
#define TCC_INTENCLR_CNT_Pos 2
#define TCC_INTENCLR_CNT (_U_(0x1) << TCC_INTENCLR_CNT_Pos)
#define TCC_INTENCLR_ERR_Pos 3
#define TCC_INTENCLR_ERR (_U_(0x1) << TCC_INTENCLR_ERR_Pos)
#define TCC_INTENCLR_UFS_Pos 10
#define TCC_INTENCLR_UFS (_U_(0x1) << TCC_INTENCLR_UFS_Pos)
#define TCC_INTENCLR_DFS_Pos 11
#define TCC_INTENCLR_DFS (_U_(0x1) << TCC_INTENCLR_DFS_Pos)
#define TCC_INTENCLR_FAULTA_Pos 12
#define TCC_INTENCLR_FAULTA (_U_(0x1) << TCC_INTENCLR_FAULTA_Pos)
#define TCC_INTENCLR_FAULTB_Pos 13
#define TCC_INTENCLR_FAULTB (_U_(0x1) << TCC_INTENCLR_FAULTB_Pos)
#define TCC_INTENCLR_FAULT0_Pos 14
#define TCC_INTENCLR_FAULT0 (_U_(0x1) << TCC_INTENCLR_FAULT0_Pos)
#define TCC_INTENCLR_FAULT1_Pos 15
#define TCC_INTENCLR_FAULT1 (_U_(0x1) << TCC_INTENCLR_FAULT1_Pos)
#define TCC_INTENCLR_MC0_Pos 16
#define TCC_INTENCLR_MC0 (_U_(1) << TCC_INTENCLR_MC0_Pos)
#define TCC_INTENCLR_MC1_Pos 17
#define TCC_INTENCLR_MC1 (_U_(1) << TCC_INTENCLR_MC1_Pos)
#define TCC_INTENCLR_MC2_Pos 18
#define TCC_INTENCLR_MC2 (_U_(1) << TCC_INTENCLR_MC2_Pos)
#define TCC_INTENCLR_MC3_Pos 19
#define TCC_INTENCLR_MC3 (_U_(1) << TCC_INTENCLR_MC3_Pos)
#define TCC_INTENCLR_MC4_Pos 20
#define TCC_INTENCLR_MC4 (_U_(1) << TCC_INTENCLR_MC4_Pos)
#define TCC_INTENCLR_MC5_Pos 21
#define TCC_INTENCLR_MC5 (_U_(1) << TCC_INTENCLR_MC5_Pos)
#define TCC_INTENCLR_MC_Pos 16
#define TCC_INTENCLR_MC_Msk (_U_(0x3F) << TCC_INTENCLR_MC_Pos)
#define TCC_INTENCLR_MC(value) (TCC_INTENCLR_MC_Msk & ((value) << TCC_INTENCLR_MC_Pos))
#define TCC_INTENCLR_MASK _U_(0x003FFC0F)



typedef union {
  struct {
    uint32_t OVF:1;
    uint32_t TRG:1;
    uint32_t CNT:1;
    uint32_t ERR:1;
    uint32_t :6;
    uint32_t UFS:1;
    uint32_t DFS:1;
    uint32_t FAULTA:1;
    uint32_t FAULTB:1;
    uint32_t FAULT0:1;
    uint32_t FAULT1:1;
    uint32_t MC0:1;
    uint32_t MC1:1;
    uint32_t MC2:1;
    uint32_t MC3:1;
    uint32_t MC4:1;
    uint32_t MC5:1;
    uint32_t :10;
  } bit;
  struct {
    uint32_t :16;
    uint32_t MC:6;
    uint32_t :10;
  } vec;
  uint32_t reg;
} TCC_INTENSET_Type;


#define TCC_INTENSET_OFFSET 0x28
#define TCC_INTENSET_RESETVALUE _U_(0x00000000)

#define TCC_INTENSET_OVF_Pos 0
#define TCC_INTENSET_OVF (_U_(0x1) << TCC_INTENSET_OVF_Pos)
#define TCC_INTENSET_TRG_Pos 1
#define TCC_INTENSET_TRG (_U_(0x1) << TCC_INTENSET_TRG_Pos)
#define TCC_INTENSET_CNT_Pos 2
#define TCC_INTENSET_CNT (_U_(0x1) << TCC_INTENSET_CNT_Pos)
#define TCC_INTENSET_ERR_Pos 3
#define TCC_INTENSET_ERR (_U_(0x1) << TCC_INTENSET_ERR_Pos)
#define TCC_INTENSET_UFS_Pos 10
#define TCC_INTENSET_UFS (_U_(0x1) << TCC_INTENSET_UFS_Pos)
#define TCC_INTENSET_DFS_Pos 11
#define TCC_INTENSET_DFS (_U_(0x1) << TCC_INTENSET_DFS_Pos)
#define TCC_INTENSET_FAULTA_Pos 12
#define TCC_INTENSET_FAULTA (_U_(0x1) << TCC_INTENSET_FAULTA_Pos)
#define TCC_INTENSET_FAULTB_Pos 13
#define TCC_INTENSET_FAULTB (_U_(0x1) << TCC_INTENSET_FAULTB_Pos)
#define TCC_INTENSET_FAULT0_Pos 14
#define TCC_INTENSET_FAULT0 (_U_(0x1) << TCC_INTENSET_FAULT0_Pos)
#define TCC_INTENSET_FAULT1_Pos 15
#define TCC_INTENSET_FAULT1 (_U_(0x1) << TCC_INTENSET_FAULT1_Pos)
#define TCC_INTENSET_MC0_Pos 16
#define TCC_INTENSET_MC0 (_U_(1) << TCC_INTENSET_MC0_Pos)
#define TCC_INTENSET_MC1_Pos 17
#define TCC_INTENSET_MC1 (_U_(1) << TCC_INTENSET_MC1_Pos)
#define TCC_INTENSET_MC2_Pos 18
#define TCC_INTENSET_MC2 (_U_(1) << TCC_INTENSET_MC2_Pos)
#define TCC_INTENSET_MC3_Pos 19
#define TCC_INTENSET_MC3 (_U_(1) << TCC_INTENSET_MC3_Pos)
#define TCC_INTENSET_MC4_Pos 20
#define TCC_INTENSET_MC4 (_U_(1) << TCC_INTENSET_MC4_Pos)
#define TCC_INTENSET_MC5_Pos 21
#define TCC_INTENSET_MC5 (_U_(1) << TCC_INTENSET_MC5_Pos)
#define TCC_INTENSET_MC_Pos 16
#define TCC_INTENSET_MC_Msk (_U_(0x3F) << TCC_INTENSET_MC_Pos)
#define TCC_INTENSET_MC(value) (TCC_INTENSET_MC_Msk & ((value) << TCC_INTENSET_MC_Pos))
#define TCC_INTENSET_MASK _U_(0x003FFC0F)



typedef union {
  struct {
    volatile const uint32_t OVF:1;
    volatile const uint32_t TRG:1;
    volatile const uint32_t CNT:1;
    volatile const uint32_t ERR:1;
    volatile const uint32_t :6;
    volatile const uint32_t UFS:1;
    volatile const uint32_t DFS:1;
    volatile const uint32_t FAULTA:1;
    volatile const uint32_t FAULTB:1;
    volatile const uint32_t FAULT0:1;
    volatile const uint32_t FAULT1:1;
    volatile const uint32_t MC0:1;
    volatile const uint32_t MC1:1;
    volatile const uint32_t MC2:1;
    volatile const uint32_t MC3:1;
    volatile const uint32_t MC4:1;
    volatile const uint32_t MC5:1;
    volatile const uint32_t :10;
  } bit;
  struct {
    volatile const uint32_t :16;
    volatile const uint32_t MC:6;
    volatile const uint32_t :10;
  } vec;
  uint32_t reg;
} TCC_INTFLAG_Type;


#define TCC_INTFLAG_OFFSET 0x2C
#define TCC_INTFLAG_RESETVALUE _U_(0x00000000)

#define TCC_INTFLAG_OVF_Pos 0
#define TCC_INTFLAG_OVF (_U_(0x1) << TCC_INTFLAG_OVF_Pos)
#define TCC_INTFLAG_TRG_Pos 1
#define TCC_INTFLAG_TRG (_U_(0x1) << TCC_INTFLAG_TRG_Pos)
#define TCC_INTFLAG_CNT_Pos 2
#define TCC_INTFLAG_CNT (_U_(0x1) << TCC_INTFLAG_CNT_Pos)
#define TCC_INTFLAG_ERR_Pos 3
#define TCC_INTFLAG_ERR (_U_(0x1) << TCC_INTFLAG_ERR_Pos)
#define TCC_INTFLAG_UFS_Pos 10
#define TCC_INTFLAG_UFS (_U_(0x1) << TCC_INTFLAG_UFS_Pos)
#define TCC_INTFLAG_DFS_Pos 11
#define TCC_INTFLAG_DFS (_U_(0x1) << TCC_INTFLAG_DFS_Pos)
#define TCC_INTFLAG_FAULTA_Pos 12
#define TCC_INTFLAG_FAULTA (_U_(0x1) << TCC_INTFLAG_FAULTA_Pos)
#define TCC_INTFLAG_FAULTB_Pos 13
#define TCC_INTFLAG_FAULTB (_U_(0x1) << TCC_INTFLAG_FAULTB_Pos)
#define TCC_INTFLAG_FAULT0_Pos 14
#define TCC_INTFLAG_FAULT0 (_U_(0x1) << TCC_INTFLAG_FAULT0_Pos)
#define TCC_INTFLAG_FAULT1_Pos 15
#define TCC_INTFLAG_FAULT1 (_U_(0x1) << TCC_INTFLAG_FAULT1_Pos)
#define TCC_INTFLAG_MC0_Pos 16
#define TCC_INTFLAG_MC0 (_U_(1) << TCC_INTFLAG_MC0_Pos)
#define TCC_INTFLAG_MC1_Pos 17
#define TCC_INTFLAG_MC1 (_U_(1) << TCC_INTFLAG_MC1_Pos)
#define TCC_INTFLAG_MC2_Pos 18
#define TCC_INTFLAG_MC2 (_U_(1) << TCC_INTFLAG_MC2_Pos)
#define TCC_INTFLAG_MC3_Pos 19
#define TCC_INTFLAG_MC3 (_U_(1) << TCC_INTFLAG_MC3_Pos)
#define TCC_INTFLAG_MC4_Pos 20
#define TCC_INTFLAG_MC4 (_U_(1) << TCC_INTFLAG_MC4_Pos)
#define TCC_INTFLAG_MC5_Pos 21
#define TCC_INTFLAG_MC5 (_U_(1) << TCC_INTFLAG_MC5_Pos)
#define TCC_INTFLAG_MC_Pos 16
#define TCC_INTFLAG_MC_Msk (_U_(0x3F) << TCC_INTFLAG_MC_Pos)
#define TCC_INTFLAG_MC(value) (TCC_INTFLAG_MC_Msk & ((value) << TCC_INTFLAG_MC_Pos))
#define TCC_INTFLAG_MASK _U_(0x003FFC0F)



typedef union {
  struct {
    uint32_t STOP:1;
    uint32_t IDX:1;
    uint32_t UFS:1;
    uint32_t DFS:1;
    uint32_t SLAVE:1;
    uint32_t PATTBUFV:1;
    uint32_t :1;
    uint32_t PERBUFV:1;
    uint32_t FAULTAIN:1;
    uint32_t FAULTBIN:1;
    uint32_t FAULT0IN:1;
    uint32_t FAULT1IN:1;
    uint32_t FAULTA:1;
    uint32_t FAULTB:1;
    uint32_t FAULT0:1;
    uint32_t FAULT1:1;
    uint32_t CCBUFV0:1;
    uint32_t CCBUFV1:1;
    uint32_t CCBUFV2:1;
    uint32_t CCBUFV3:1;
    uint32_t CCBUFV4:1;
    uint32_t CCBUFV5:1;
    uint32_t :2;
    uint32_t CMP0:1;
    uint32_t CMP1:1;
    uint32_t CMP2:1;
    uint32_t CMP3:1;
    uint32_t CMP4:1;
    uint32_t CMP5:1;
    uint32_t :2;
  } bit;
  struct {
    uint32_t :16;
    uint32_t CCBUFV:6;
    uint32_t :2;
    uint32_t CMP:6;
    uint32_t :2;
  } vec;
  uint32_t reg;
} TCC_STATUS_Type;


#define TCC_STATUS_OFFSET 0x30
#define TCC_STATUS_RESETVALUE _U_(0x00000001)

#define TCC_STATUS_STOP_Pos 0
#define TCC_STATUS_STOP (_U_(0x1) << TCC_STATUS_STOP_Pos)
#define TCC_STATUS_IDX_Pos 1
#define TCC_STATUS_IDX (_U_(0x1) << TCC_STATUS_IDX_Pos)
#define TCC_STATUS_UFS_Pos 2
#define TCC_STATUS_UFS (_U_(0x1) << TCC_STATUS_UFS_Pos)
#define TCC_STATUS_DFS_Pos 3
#define TCC_STATUS_DFS (_U_(0x1) << TCC_STATUS_DFS_Pos)
#define TCC_STATUS_SLAVE_Pos 4
#define TCC_STATUS_SLAVE (_U_(0x1) << TCC_STATUS_SLAVE_Pos)
#define TCC_STATUS_PATTBUFV_Pos 5
#define TCC_STATUS_PATTBUFV (_U_(0x1) << TCC_STATUS_PATTBUFV_Pos)
#define TCC_STATUS_PERBUFV_Pos 7
#define TCC_STATUS_PERBUFV (_U_(0x1) << TCC_STATUS_PERBUFV_Pos)
#define TCC_STATUS_FAULTAIN_Pos 8
#define TCC_STATUS_FAULTAIN (_U_(0x1) << TCC_STATUS_FAULTAIN_Pos)
#define TCC_STATUS_FAULTBIN_Pos 9
#define TCC_STATUS_FAULTBIN (_U_(0x1) << TCC_STATUS_FAULTBIN_Pos)
#define TCC_STATUS_FAULT0IN_Pos 10
#define TCC_STATUS_FAULT0IN (_U_(0x1) << TCC_STATUS_FAULT0IN_Pos)
#define TCC_STATUS_FAULT1IN_Pos 11
#define TCC_STATUS_FAULT1IN (_U_(0x1) << TCC_STATUS_FAULT1IN_Pos)
#define TCC_STATUS_FAULTA_Pos 12
#define TCC_STATUS_FAULTA (_U_(0x1) << TCC_STATUS_FAULTA_Pos)
#define TCC_STATUS_FAULTB_Pos 13
#define TCC_STATUS_FAULTB (_U_(0x1) << TCC_STATUS_FAULTB_Pos)
#define TCC_STATUS_FAULT0_Pos 14
#define TCC_STATUS_FAULT0 (_U_(0x1) << TCC_STATUS_FAULT0_Pos)
#define TCC_STATUS_FAULT1_Pos 15
#define TCC_STATUS_FAULT1 (_U_(0x1) << TCC_STATUS_FAULT1_Pos)
#define TCC_STATUS_CCBUFV0_Pos 16
#define TCC_STATUS_CCBUFV0 (_U_(1) << TCC_STATUS_CCBUFV0_Pos)
#define TCC_STATUS_CCBUFV1_Pos 17
#define TCC_STATUS_CCBUFV1 (_U_(1) << TCC_STATUS_CCBUFV1_Pos)
#define TCC_STATUS_CCBUFV2_Pos 18
#define TCC_STATUS_CCBUFV2 (_U_(1) << TCC_STATUS_CCBUFV2_Pos)
#define TCC_STATUS_CCBUFV3_Pos 19
#define TCC_STATUS_CCBUFV3 (_U_(1) << TCC_STATUS_CCBUFV3_Pos)
#define TCC_STATUS_CCBUFV4_Pos 20
#define TCC_STATUS_CCBUFV4 (_U_(1) << TCC_STATUS_CCBUFV4_Pos)
#define TCC_STATUS_CCBUFV5_Pos 21
#define TCC_STATUS_CCBUFV5 (_U_(1) << TCC_STATUS_CCBUFV5_Pos)
#define TCC_STATUS_CCBUFV_Pos 16
#define TCC_STATUS_CCBUFV_Msk (_U_(0x3F) << TCC_STATUS_CCBUFV_Pos)
#define TCC_STATUS_CCBUFV(value) (TCC_STATUS_CCBUFV_Msk & ((value) << TCC_STATUS_CCBUFV_Pos))
#define TCC_STATUS_CMP0_Pos 24
#define TCC_STATUS_CMP0 (_U_(1) << TCC_STATUS_CMP0_Pos)
#define TCC_STATUS_CMP1_Pos 25
#define TCC_STATUS_CMP1 (_U_(1) << TCC_STATUS_CMP1_Pos)
#define TCC_STATUS_CMP2_Pos 26
#define TCC_STATUS_CMP2 (_U_(1) << TCC_STATUS_CMP2_Pos)
#define TCC_STATUS_CMP3_Pos 27
#define TCC_STATUS_CMP3 (_U_(1) << TCC_STATUS_CMP3_Pos)
#define TCC_STATUS_CMP4_Pos 28
#define TCC_STATUS_CMP4 (_U_(1) << TCC_STATUS_CMP4_Pos)
#define TCC_STATUS_CMP5_Pos 29
#define TCC_STATUS_CMP5 (_U_(1) << TCC_STATUS_CMP5_Pos)
#define TCC_STATUS_CMP_Pos 24
#define TCC_STATUS_CMP_Msk (_U_(0x3F) << TCC_STATUS_CMP_Pos)
#define TCC_STATUS_CMP(value) (TCC_STATUS_CMP_Msk & ((value) << TCC_STATUS_CMP_Pos))
#define TCC_STATUS_MASK _U_(0x3F3FFFBF)



typedef union {
  struct {
    uint32_t :4;
    uint32_t COUNT:20;
    uint32_t :8;
  } DITH4;
  struct {
    uint32_t :5;
    uint32_t COUNT:19;
    uint32_t :8;
  } DITH5;
  struct {
    uint32_t :6;
    uint32_t COUNT:18;
    uint32_t :8;
  } DITH6;
  struct {
    uint32_t COUNT:24;
    uint32_t :8;
  } bit;
  uint32_t reg;
} TCC_COUNT_Type;


#define TCC_COUNT_OFFSET 0x34
#define TCC_COUNT_RESETVALUE _U_(0x00000000)


#define TCC_COUNT_DITH4_COUNT_Pos 4
#define TCC_COUNT_DITH4_COUNT_Msk (_U_(0xFFFFF) << TCC_COUNT_DITH4_COUNT_Pos)
#define TCC_COUNT_DITH4_COUNT(value) (TCC_COUNT_DITH4_COUNT_Msk & ((value) << TCC_COUNT_DITH4_COUNT_Pos))
#define TCC_COUNT_DITH4_MASK _U_(0x00FFFFF0)


#define TCC_COUNT_DITH5_COUNT_Pos 5
#define TCC_COUNT_DITH5_COUNT_Msk (_U_(0x7FFFF) << TCC_COUNT_DITH5_COUNT_Pos)
#define TCC_COUNT_DITH5_COUNT(value) (TCC_COUNT_DITH5_COUNT_Msk & ((value) << TCC_COUNT_DITH5_COUNT_Pos))
#define TCC_COUNT_DITH5_MASK _U_(0x00FFFFE0)


#define TCC_COUNT_DITH6_COUNT_Pos 6
#define TCC_COUNT_DITH6_COUNT_Msk (_U_(0x3FFFF) << TCC_COUNT_DITH6_COUNT_Pos)
#define TCC_COUNT_DITH6_COUNT(value) (TCC_COUNT_DITH6_COUNT_Msk & ((value) << TCC_COUNT_DITH6_COUNT_Pos))
#define TCC_COUNT_DITH6_MASK _U_(0x00FFFFC0)

#define TCC_COUNT_COUNT_Pos 0
#define TCC_COUNT_COUNT_Msk (_U_(0xFFFFFF) << TCC_COUNT_COUNT_Pos)
#define TCC_COUNT_COUNT(value) (TCC_COUNT_COUNT_Msk & ((value) << TCC_COUNT_COUNT_Pos))
#define TCC_COUNT_MASK _U_(0x00FFFFFF)



typedef union {
  struct {
    uint16_t PGE0:1;
    uint16_t PGE1:1;
    uint16_t PGE2:1;
    uint16_t PGE3:1;
    uint16_t PGE4:1;
    uint16_t PGE5:1;
    uint16_t PGE6:1;
    uint16_t PGE7:1;
    uint16_t PGV0:1;
    uint16_t PGV1:1;
    uint16_t PGV2:1;
    uint16_t PGV3:1;
    uint16_t PGV4:1;
    uint16_t PGV5:1;
    uint16_t PGV6:1;
    uint16_t PGV7:1;
  } bit;
  struct {
    uint16_t PGE:8;
    uint16_t PGV:8;
  } vec;
  uint16_t reg;
} TCC_PATT_Type;


#define TCC_PATT_OFFSET 0x38
#define TCC_PATT_RESETVALUE _U_(0x0000)

#define TCC_PATT_PGE0_Pos 0
#define TCC_PATT_PGE0 (_U_(1) << TCC_PATT_PGE0_Pos)
#define TCC_PATT_PGE1_Pos 1
#define TCC_PATT_PGE1 (_U_(1) << TCC_PATT_PGE1_Pos)
#define TCC_PATT_PGE2_Pos 2
#define TCC_PATT_PGE2 (_U_(1) << TCC_PATT_PGE2_Pos)
#define TCC_PATT_PGE3_Pos 3
#define TCC_PATT_PGE3 (_U_(1) << TCC_PATT_PGE3_Pos)
#define TCC_PATT_PGE4_Pos 4
#define TCC_PATT_PGE4 (_U_(1) << TCC_PATT_PGE4_Pos)
#define TCC_PATT_PGE5_Pos 5
#define TCC_PATT_PGE5 (_U_(1) << TCC_PATT_PGE5_Pos)
#define TCC_PATT_PGE6_Pos 6
#define TCC_PATT_PGE6 (_U_(1) << TCC_PATT_PGE6_Pos)
#define TCC_PATT_PGE7_Pos 7
#define TCC_PATT_PGE7 (_U_(1) << TCC_PATT_PGE7_Pos)
#define TCC_PATT_PGE_Pos 0
#define TCC_PATT_PGE_Msk (_U_(0xFF) << TCC_PATT_PGE_Pos)
#define TCC_PATT_PGE(value) (TCC_PATT_PGE_Msk & ((value) << TCC_PATT_PGE_Pos))
#define TCC_PATT_PGV0_Pos 8
#define TCC_PATT_PGV0 (_U_(1) << TCC_PATT_PGV0_Pos)
#define TCC_PATT_PGV1_Pos 9
#define TCC_PATT_PGV1 (_U_(1) << TCC_PATT_PGV1_Pos)
#define TCC_PATT_PGV2_Pos 10
#define TCC_PATT_PGV2 (_U_(1) << TCC_PATT_PGV2_Pos)
#define TCC_PATT_PGV3_Pos 11
#define TCC_PATT_PGV3 (_U_(1) << TCC_PATT_PGV3_Pos)
#define TCC_PATT_PGV4_Pos 12
#define TCC_PATT_PGV4 (_U_(1) << TCC_PATT_PGV4_Pos)
#define TCC_PATT_PGV5_Pos 13
#define TCC_PATT_PGV5 (_U_(1) << TCC_PATT_PGV5_Pos)
#define TCC_PATT_PGV6_Pos 14
#define TCC_PATT_PGV6 (_U_(1) << TCC_PATT_PGV6_Pos)
#define TCC_PATT_PGV7_Pos 15
#define TCC_PATT_PGV7 (_U_(1) << TCC_PATT_PGV7_Pos)
#define TCC_PATT_PGV_Pos 8
#define TCC_PATT_PGV_Msk (_U_(0xFF) << TCC_PATT_PGV_Pos)
#define TCC_PATT_PGV(value) (TCC_PATT_PGV_Msk & ((value) << TCC_PATT_PGV_Pos))
#define TCC_PATT_MASK _U_(0xFFFF)



typedef union {
  struct {
    uint32_t WAVEGEN:3;
    uint32_t :1;
    uint32_t RAMP:2;
    uint32_t :1;
    uint32_t CIPEREN:1;
    uint32_t CICCEN0:1;
    uint32_t CICCEN1:1;
    uint32_t CICCEN2:1;
    uint32_t CICCEN3:1;
    uint32_t :4;
    uint32_t POL0:1;
    uint32_t POL1:1;
    uint32_t POL2:1;
    uint32_t POL3:1;
    uint32_t POL4:1;
    uint32_t POL5:1;
    uint32_t :2;
    uint32_t SWAP0:1;
    uint32_t SWAP1:1;
    uint32_t SWAP2:1;
    uint32_t SWAP3:1;
    uint32_t :4;
  } bit;
  struct {
    uint32_t :8;
    uint32_t CICCEN:4;
    uint32_t :4;
    uint32_t POL:6;
    uint32_t :2;
    uint32_t SWAP:4;
    uint32_t :4;
  } vec;
  uint32_t reg;
} TCC_WAVE_Type;


#define TCC_WAVE_OFFSET 0x3C
#define TCC_WAVE_RESETVALUE _U_(0x00000000)

#define TCC_WAVE_WAVEGEN_Pos 0
#define TCC_WAVE_WAVEGEN_Msk (_U_(0x7) << TCC_WAVE_WAVEGEN_Pos)
#define TCC_WAVE_WAVEGEN(value) (TCC_WAVE_WAVEGEN_Msk & ((value) << TCC_WAVE_WAVEGEN_Pos))
#define TCC_WAVE_WAVEGEN_NFRQ_Val _U_(0x0)
#define TCC_WAVE_WAVEGEN_MFRQ_Val _U_(0x1)
#define TCC_WAVE_WAVEGEN_NPWM_Val _U_(0x2)
#define TCC_WAVE_WAVEGEN_DSCRITICAL_Val _U_(0x4)
#define TCC_WAVE_WAVEGEN_DSBOTTOM_Val _U_(0x5)
#define TCC_WAVE_WAVEGEN_DSBOTH_Val _U_(0x6)
#define TCC_WAVE_WAVEGEN_DSTOP_Val _U_(0x7)
#define TCC_WAVE_WAVEGEN_NFRQ (TCC_WAVE_WAVEGEN_NFRQ_Val << TCC_WAVE_WAVEGEN_Pos)
#define TCC_WAVE_WAVEGEN_MFRQ (TCC_WAVE_WAVEGEN_MFRQ_Val << TCC_WAVE_WAVEGEN_Pos)
#define TCC_WAVE_WAVEGEN_NPWM (TCC_WAVE_WAVEGEN_NPWM_Val << TCC_WAVE_WAVEGEN_Pos)
#define TCC_WAVE_WAVEGEN_DSCRITICAL (TCC_WAVE_WAVEGEN_DSCRITICAL_Val << TCC_WAVE_WAVEGEN_Pos)
#define TCC_WAVE_WAVEGEN_DSBOTTOM (TCC_WAVE_WAVEGEN_DSBOTTOM_Val << TCC_WAVE_WAVEGEN_Pos)
#define TCC_WAVE_WAVEGEN_DSBOTH (TCC_WAVE_WAVEGEN_DSBOTH_Val << TCC_WAVE_WAVEGEN_Pos)
#define TCC_WAVE_WAVEGEN_DSTOP (TCC_WAVE_WAVEGEN_DSTOP_Val << TCC_WAVE_WAVEGEN_Pos)
#define TCC_WAVE_RAMP_Pos 4
#define TCC_WAVE_RAMP_Msk (_U_(0x3) << TCC_WAVE_RAMP_Pos)
#define TCC_WAVE_RAMP(value) (TCC_WAVE_RAMP_Msk & ((value) << TCC_WAVE_RAMP_Pos))
#define TCC_WAVE_RAMP_RAMP1_Val _U_(0x0)
#define TCC_WAVE_RAMP_RAMP2A_Val _U_(0x1)
#define TCC_WAVE_RAMP_RAMP2_Val _U_(0x2)
#define TCC_WAVE_RAMP_RAMP2C_Val _U_(0x3)
#define TCC_WAVE_RAMP_RAMP1 (TCC_WAVE_RAMP_RAMP1_Val << TCC_WAVE_RAMP_Pos)
#define TCC_WAVE_RAMP_RAMP2A (TCC_WAVE_RAMP_RAMP2A_Val << TCC_WAVE_RAMP_Pos)
#define TCC_WAVE_RAMP_RAMP2 (TCC_WAVE_RAMP_RAMP2_Val << TCC_WAVE_RAMP_Pos)
#define TCC_WAVE_RAMP_RAMP2C (TCC_WAVE_RAMP_RAMP2C_Val << TCC_WAVE_RAMP_Pos)
#define TCC_WAVE_CIPEREN_Pos 7
#define TCC_WAVE_CIPEREN (_U_(0x1) << TCC_WAVE_CIPEREN_Pos)
#define TCC_WAVE_CICCEN0_Pos 8
#define TCC_WAVE_CICCEN0 (_U_(1) << TCC_WAVE_CICCEN0_Pos)
#define TCC_WAVE_CICCEN1_Pos 9
#define TCC_WAVE_CICCEN1 (_U_(1) << TCC_WAVE_CICCEN1_Pos)
#define TCC_WAVE_CICCEN2_Pos 10
#define TCC_WAVE_CICCEN2 (_U_(1) << TCC_WAVE_CICCEN2_Pos)
#define TCC_WAVE_CICCEN3_Pos 11
#define TCC_WAVE_CICCEN3 (_U_(1) << TCC_WAVE_CICCEN3_Pos)
#define TCC_WAVE_CICCEN_Pos 8
#define TCC_WAVE_CICCEN_Msk (_U_(0xF) << TCC_WAVE_CICCEN_Pos)
#define TCC_WAVE_CICCEN(value) (TCC_WAVE_CICCEN_Msk & ((value) << TCC_WAVE_CICCEN_Pos))
#define TCC_WAVE_POL0_Pos 16
#define TCC_WAVE_POL0 (_U_(1) << TCC_WAVE_POL0_Pos)
#define TCC_WAVE_POL1_Pos 17
#define TCC_WAVE_POL1 (_U_(1) << TCC_WAVE_POL1_Pos)
#define TCC_WAVE_POL2_Pos 18
#define TCC_WAVE_POL2 (_U_(1) << TCC_WAVE_POL2_Pos)
#define TCC_WAVE_POL3_Pos 19
#define TCC_WAVE_POL3 (_U_(1) << TCC_WAVE_POL3_Pos)
#define TCC_WAVE_POL4_Pos 20
#define TCC_WAVE_POL4 (_U_(1) << TCC_WAVE_POL4_Pos)
#define TCC_WAVE_POL5_Pos 21
#define TCC_WAVE_POL5 (_U_(1) << TCC_WAVE_POL5_Pos)
#define TCC_WAVE_POL_Pos 16
#define TCC_WAVE_POL_Msk (_U_(0x3F) << TCC_WAVE_POL_Pos)
#define TCC_WAVE_POL(value) (TCC_WAVE_POL_Msk & ((value) << TCC_WAVE_POL_Pos))
#define TCC_WAVE_SWAP0_Pos 24
#define TCC_WAVE_SWAP0 (_U_(1) << TCC_WAVE_SWAP0_Pos)
#define TCC_WAVE_SWAP1_Pos 25
#define TCC_WAVE_SWAP1 (_U_(1) << TCC_WAVE_SWAP1_Pos)
#define TCC_WAVE_SWAP2_Pos 26
#define TCC_WAVE_SWAP2 (_U_(1) << TCC_WAVE_SWAP2_Pos)
#define TCC_WAVE_SWAP3_Pos 27
#define TCC_WAVE_SWAP3 (_U_(1) << TCC_WAVE_SWAP3_Pos)
#define TCC_WAVE_SWAP_Pos 24
#define TCC_WAVE_SWAP_Msk (_U_(0xF) << TCC_WAVE_SWAP_Pos)
#define TCC_WAVE_SWAP(value) (TCC_WAVE_SWAP_Msk & ((value) << TCC_WAVE_SWAP_Pos))
#define TCC_WAVE_MASK _U_(0x0F3F0FB7)



typedef union {
  struct {
    uint32_t DITHER:4;
    uint32_t PER:20;
    uint32_t :8;
  } DITH4;
  struct {
    uint32_t DITHER:5;
    uint32_t PER:19;
    uint32_t :8;
  } DITH5;
  struct {
    uint32_t DITHER:6;
    uint32_t PER:18;
    uint32_t :8;
  } DITH6;
  struct {
    uint32_t PER:24;
    uint32_t :8;
  } bit;
  uint32_t reg;
} TCC_PER_Type;


#define TCC_PER_OFFSET 0x40
#define TCC_PER_RESETVALUE _U_(0xFFFFFFFF)


#define TCC_PER_DITH4_DITHER_Pos 0
#define TCC_PER_DITH4_DITHER_Msk (_U_(0xF) << TCC_PER_DITH4_DITHER_Pos)
#define TCC_PER_DITH4_DITHER(value) (TCC_PER_DITH4_DITHER_Msk & ((value) << TCC_PER_DITH4_DITHER_Pos))
#define TCC_PER_DITH4_PER_Pos 4
#define TCC_PER_DITH4_PER_Msk (_U_(0xFFFFF) << TCC_PER_DITH4_PER_Pos)
#define TCC_PER_DITH4_PER(value) (TCC_PER_DITH4_PER_Msk & ((value) << TCC_PER_DITH4_PER_Pos))
#define TCC_PER_DITH4_MASK _U_(0x00FFFFFF)


#define TCC_PER_DITH5_DITHER_Pos 0
#define TCC_PER_DITH5_DITHER_Msk (_U_(0x1F) << TCC_PER_DITH5_DITHER_Pos)
#define TCC_PER_DITH5_DITHER(value) (TCC_PER_DITH5_DITHER_Msk & ((value) << TCC_PER_DITH5_DITHER_Pos))
#define TCC_PER_DITH5_PER_Pos 5
#define TCC_PER_DITH5_PER_Msk (_U_(0x7FFFF) << TCC_PER_DITH5_PER_Pos)
#define TCC_PER_DITH5_PER(value) (TCC_PER_DITH5_PER_Msk & ((value) << TCC_PER_DITH5_PER_Pos))
#define TCC_PER_DITH5_MASK _U_(0x00FFFFFF)


#define TCC_PER_DITH6_DITHER_Pos 0
#define TCC_PER_DITH6_DITHER_Msk (_U_(0x3F) << TCC_PER_DITH6_DITHER_Pos)
#define TCC_PER_DITH6_DITHER(value) (TCC_PER_DITH6_DITHER_Msk & ((value) << TCC_PER_DITH6_DITHER_Pos))
#define TCC_PER_DITH6_PER_Pos 6
#define TCC_PER_DITH6_PER_Msk (_U_(0x3FFFF) << TCC_PER_DITH6_PER_Pos)
#define TCC_PER_DITH6_PER(value) (TCC_PER_DITH6_PER_Msk & ((value) << TCC_PER_DITH6_PER_Pos))
#define TCC_PER_DITH6_MASK _U_(0x00FFFFFF)

#define TCC_PER_PER_Pos 0
#define TCC_PER_PER_Msk (_U_(0xFFFFFF) << TCC_PER_PER_Pos)
#define TCC_PER_PER(value) (TCC_PER_PER_Msk & ((value) << TCC_PER_PER_Pos))
#define TCC_PER_MASK _U_(0x00FFFFFF)



typedef union {
  struct {
    uint32_t DITHER:4;
    uint32_t CC:20;
    uint32_t :8;
  } DITH4;
  struct {
    uint32_t DITHER:5;
    uint32_t CC:19;
    uint32_t :8;
  } DITH5;
  struct {
    uint32_t DITHER:6;
    uint32_t CC:18;
    uint32_t :8;
  } DITH6;
  struct {
    uint32_t CC:24;
    uint32_t :8;
  } bit;
  uint32_t reg;
} TCC_CC_Type;


#define TCC_CC_OFFSET 0x44
#define TCC_CC_RESETVALUE _U_(0x00000000)


#define TCC_CC_DITH4_DITHER_Pos 0
#define TCC_CC_DITH4_DITHER_Msk (_U_(0xF) << TCC_CC_DITH4_DITHER_Pos)
#define TCC_CC_DITH4_DITHER(value) (TCC_CC_DITH4_DITHER_Msk & ((value) << TCC_CC_DITH4_DITHER_Pos))
#define TCC_CC_DITH4_CC_Pos 4
#define TCC_CC_DITH4_CC_Msk (_U_(0xFFFFF) << TCC_CC_DITH4_CC_Pos)
#define TCC_CC_DITH4_CC(value) (TCC_CC_DITH4_CC_Msk & ((value) << TCC_CC_DITH4_CC_Pos))
#define TCC_CC_DITH4_MASK _U_(0x00FFFFFF)


#define TCC_CC_DITH5_DITHER_Pos 0
#define TCC_CC_DITH5_DITHER_Msk (_U_(0x1F) << TCC_CC_DITH5_DITHER_Pos)
#define TCC_CC_DITH5_DITHER(value) (TCC_CC_DITH5_DITHER_Msk & ((value) << TCC_CC_DITH5_DITHER_Pos))
#define TCC_CC_DITH5_CC_Pos 5
#define TCC_CC_DITH5_CC_Msk (_U_(0x7FFFF) << TCC_CC_DITH5_CC_Pos)
#define TCC_CC_DITH5_CC(value) (TCC_CC_DITH5_CC_Msk & ((value) << TCC_CC_DITH5_CC_Pos))
#define TCC_CC_DITH5_MASK _U_(0x00FFFFFF)


#define TCC_CC_DITH6_DITHER_Pos 0
#define TCC_CC_DITH6_DITHER_Msk (_U_(0x3F) << TCC_CC_DITH6_DITHER_Pos)
#define TCC_CC_DITH6_DITHER(value) (TCC_CC_DITH6_DITHER_Msk & ((value) << TCC_CC_DITH6_DITHER_Pos))
#define TCC_CC_DITH6_CC_Pos 6
#define TCC_CC_DITH6_CC_Msk (_U_(0x3FFFF) << TCC_CC_DITH6_CC_Pos)
#define TCC_CC_DITH6_CC(value) (TCC_CC_DITH6_CC_Msk & ((value) << TCC_CC_DITH6_CC_Pos))
#define TCC_CC_DITH6_MASK _U_(0x00FFFFFF)

#define TCC_CC_CC_Pos 0
#define TCC_CC_CC_Msk (_U_(0xFFFFFF) << TCC_CC_CC_Pos)
#define TCC_CC_CC(value) (TCC_CC_CC_Msk & ((value) << TCC_CC_CC_Pos))
#define TCC_CC_MASK _U_(0x00FFFFFF)



typedef union {
  struct {
    uint16_t PGEB0:1;
    uint16_t PGEB1:1;
    uint16_t PGEB2:1;
    uint16_t PGEB3:1;
    uint16_t PGEB4:1;
    uint16_t PGEB5:1;
    uint16_t PGEB6:1;
    uint16_t PGEB7:1;
    uint16_t PGVB0:1;
    uint16_t PGVB1:1;
    uint16_t PGVB2:1;
    uint16_t PGVB3:1;
    uint16_t PGVB4:1;
    uint16_t PGVB5:1;
    uint16_t PGVB6:1;
    uint16_t PGVB7:1;
  } bit;
  struct {
    uint16_t PGEB:8;
    uint16_t PGVB:8;
  } vec;
  uint16_t reg;
} TCC_PATTBUF_Type;


#define TCC_PATTBUF_OFFSET 0x64
#define TCC_PATTBUF_RESETVALUE _U_(0x0000)

#define TCC_PATTBUF_PGEB0_Pos 0
#define TCC_PATTBUF_PGEB0 (_U_(1) << TCC_PATTBUF_PGEB0_Pos)
#define TCC_PATTBUF_PGEB1_Pos 1
#define TCC_PATTBUF_PGEB1 (_U_(1) << TCC_PATTBUF_PGEB1_Pos)
#define TCC_PATTBUF_PGEB2_Pos 2
#define TCC_PATTBUF_PGEB2 (_U_(1) << TCC_PATTBUF_PGEB2_Pos)
#define TCC_PATTBUF_PGEB3_Pos 3
#define TCC_PATTBUF_PGEB3 (_U_(1) << TCC_PATTBUF_PGEB3_Pos)
#define TCC_PATTBUF_PGEB4_Pos 4
#define TCC_PATTBUF_PGEB4 (_U_(1) << TCC_PATTBUF_PGEB4_Pos)
#define TCC_PATTBUF_PGEB5_Pos 5
#define TCC_PATTBUF_PGEB5 (_U_(1) << TCC_PATTBUF_PGEB5_Pos)
#define TCC_PATTBUF_PGEB6_Pos 6
#define TCC_PATTBUF_PGEB6 (_U_(1) << TCC_PATTBUF_PGEB6_Pos)
#define TCC_PATTBUF_PGEB7_Pos 7
#define TCC_PATTBUF_PGEB7 (_U_(1) << TCC_PATTBUF_PGEB7_Pos)
#define TCC_PATTBUF_PGEB_Pos 0
#define TCC_PATTBUF_PGEB_Msk (_U_(0xFF) << TCC_PATTBUF_PGEB_Pos)
#define TCC_PATTBUF_PGEB(value) (TCC_PATTBUF_PGEB_Msk & ((value) << TCC_PATTBUF_PGEB_Pos))
#define TCC_PATTBUF_PGVB0_Pos 8
#define TCC_PATTBUF_PGVB0 (_U_(1) << TCC_PATTBUF_PGVB0_Pos)
#define TCC_PATTBUF_PGVB1_Pos 9
#define TCC_PATTBUF_PGVB1 (_U_(1) << TCC_PATTBUF_PGVB1_Pos)
#define TCC_PATTBUF_PGVB2_Pos 10
#define TCC_PATTBUF_PGVB2 (_U_(1) << TCC_PATTBUF_PGVB2_Pos)
#define TCC_PATTBUF_PGVB3_Pos 11
#define TCC_PATTBUF_PGVB3 (_U_(1) << TCC_PATTBUF_PGVB3_Pos)
#define TCC_PATTBUF_PGVB4_Pos 12
#define TCC_PATTBUF_PGVB4 (_U_(1) << TCC_PATTBUF_PGVB4_Pos)
#define TCC_PATTBUF_PGVB5_Pos 13
#define TCC_PATTBUF_PGVB5 (_U_(1) << TCC_PATTBUF_PGVB5_Pos)
#define TCC_PATTBUF_PGVB6_Pos 14
#define TCC_PATTBUF_PGVB6 (_U_(1) << TCC_PATTBUF_PGVB6_Pos)
#define TCC_PATTBUF_PGVB7_Pos 15
#define TCC_PATTBUF_PGVB7 (_U_(1) << TCC_PATTBUF_PGVB7_Pos)
#define TCC_PATTBUF_PGVB_Pos 8
#define TCC_PATTBUF_PGVB_Msk (_U_(0xFF) << TCC_PATTBUF_PGVB_Pos)
#define TCC_PATTBUF_PGVB(value) (TCC_PATTBUF_PGVB_Msk & ((value) << TCC_PATTBUF_PGVB_Pos))
#define TCC_PATTBUF_MASK _U_(0xFFFF)



typedef union {
  struct {
    uint32_t DITHERBUF:4;
    uint32_t PERBUF:20;
    uint32_t :8;
  } DITH4;
  struct {
    uint32_t DITHERBUF:5;
    uint32_t PERBUF:19;
    uint32_t :8;
  } DITH5;
  struct {
    uint32_t DITHERBUF:6;
    uint32_t PERBUF:18;
    uint32_t :8;
  } DITH6;
  struct {
    uint32_t PERBUF:24;
    uint32_t :8;
  } bit;
  uint32_t reg;
} TCC_PERBUF_Type;


#define TCC_PERBUF_OFFSET 0x6C
#define TCC_PERBUF_RESETVALUE _U_(0xFFFFFFFF)


#define TCC_PERBUF_DITH4_DITHERBUF_Pos 0
#define TCC_PERBUF_DITH4_DITHERBUF_Msk (_U_(0xF) << TCC_PERBUF_DITH4_DITHERBUF_Pos)
#define TCC_PERBUF_DITH4_DITHERBUF(value) (TCC_PERBUF_DITH4_DITHERBUF_Msk & ((value) << TCC_PERBUF_DITH4_DITHERBUF_Pos))
#define TCC_PERBUF_DITH4_PERBUF_Pos 4
#define TCC_PERBUF_DITH4_PERBUF_Msk (_U_(0xFFFFF) << TCC_PERBUF_DITH4_PERBUF_Pos)
#define TCC_PERBUF_DITH4_PERBUF(value) (TCC_PERBUF_DITH4_PERBUF_Msk & ((value) << TCC_PERBUF_DITH4_PERBUF_Pos))
#define TCC_PERBUF_DITH4_MASK _U_(0x00FFFFFF)


#define TCC_PERBUF_DITH5_DITHERBUF_Pos 0
#define TCC_PERBUF_DITH5_DITHERBUF_Msk (_U_(0x1F) << TCC_PERBUF_DITH5_DITHERBUF_Pos)
#define TCC_PERBUF_DITH5_DITHERBUF(value) (TCC_PERBUF_DITH5_DITHERBUF_Msk & ((value) << TCC_PERBUF_DITH5_DITHERBUF_Pos))
#define TCC_PERBUF_DITH5_PERBUF_Pos 5
#define TCC_PERBUF_DITH5_PERBUF_Msk (_U_(0x7FFFF) << TCC_PERBUF_DITH5_PERBUF_Pos)
#define TCC_PERBUF_DITH5_PERBUF(value) (TCC_PERBUF_DITH5_PERBUF_Msk & ((value) << TCC_PERBUF_DITH5_PERBUF_Pos))
#define TCC_PERBUF_DITH5_MASK _U_(0x00FFFFFF)


#define TCC_PERBUF_DITH6_DITHERBUF_Pos 0
#define TCC_PERBUF_DITH6_DITHERBUF_Msk (_U_(0x3F) << TCC_PERBUF_DITH6_DITHERBUF_Pos)
#define TCC_PERBUF_DITH6_DITHERBUF(value) (TCC_PERBUF_DITH6_DITHERBUF_Msk & ((value) << TCC_PERBUF_DITH6_DITHERBUF_Pos))
#define TCC_PERBUF_DITH6_PERBUF_Pos 6
#define TCC_PERBUF_DITH6_PERBUF_Msk (_U_(0x3FFFF) << TCC_PERBUF_DITH6_PERBUF_Pos)
#define TCC_PERBUF_DITH6_PERBUF(value) (TCC_PERBUF_DITH6_PERBUF_Msk & ((value) << TCC_PERBUF_DITH6_PERBUF_Pos))
#define TCC_PERBUF_DITH6_MASK _U_(0x00FFFFFF)

#define TCC_PERBUF_PERBUF_Pos 0
#define TCC_PERBUF_PERBUF_Msk (_U_(0xFFFFFF) << TCC_PERBUF_PERBUF_Pos)
#define TCC_PERBUF_PERBUF(value) (TCC_PERBUF_PERBUF_Msk & ((value) << TCC_PERBUF_PERBUF_Pos))
#define TCC_PERBUF_MASK _U_(0x00FFFFFF)



typedef union {
  struct {
    uint32_t CCBUF:4;
    uint32_t DITHERBUF:20;
    uint32_t :8;
  } DITH4;
  struct {
    uint32_t DITHERBUF:5;
    uint32_t CCBUF:19;
    uint32_t :8;
  } DITH5;
  struct {
    uint32_t DITHERBUF:6;
    uint32_t CCBUF:18;
    uint32_t :8;
  } DITH6;
  struct {
    uint32_t CCBUF:24;
    uint32_t :8;
  } bit;
  uint32_t reg;
} TCC_CCBUF_Type;


#define TCC_CCBUF_OFFSET 0x70
#define TCC_CCBUF_RESETVALUE _U_(0x00000000)


#define TCC_CCBUF_DITH4_CCBUF_Pos 0
#define TCC_CCBUF_DITH4_CCBUF_Msk (_U_(0xF) << TCC_CCBUF_DITH4_CCBUF_Pos)
#define TCC_CCBUF_DITH4_CCBUF(value) (TCC_CCBUF_DITH4_CCBUF_Msk & ((value) << TCC_CCBUF_DITH4_CCBUF_Pos))
#define TCC_CCBUF_DITH4_DITHERBUF_Pos 4
#define TCC_CCBUF_DITH4_DITHERBUF_Msk (_U_(0xFFFFF) << TCC_CCBUF_DITH4_DITHERBUF_Pos)
#define TCC_CCBUF_DITH4_DITHERBUF(value) (TCC_CCBUF_DITH4_DITHERBUF_Msk & ((value) << TCC_CCBUF_DITH4_DITHERBUF_Pos))
#define TCC_CCBUF_DITH4_MASK _U_(0x00FFFFFF)


#define TCC_CCBUF_DITH5_DITHERBUF_Pos 0
#define TCC_CCBUF_DITH5_DITHERBUF_Msk (_U_(0x1F) << TCC_CCBUF_DITH5_DITHERBUF_Pos)
#define TCC_CCBUF_DITH5_DITHERBUF(value) (TCC_CCBUF_DITH5_DITHERBUF_Msk & ((value) << TCC_CCBUF_DITH5_DITHERBUF_Pos))
#define TCC_CCBUF_DITH5_CCBUF_Pos 5
#define TCC_CCBUF_DITH5_CCBUF_Msk (_U_(0x7FFFF) << TCC_CCBUF_DITH5_CCBUF_Pos)
#define TCC_CCBUF_DITH5_CCBUF(value) (TCC_CCBUF_DITH5_CCBUF_Msk & ((value) << TCC_CCBUF_DITH5_CCBUF_Pos))
#define TCC_CCBUF_DITH5_MASK _U_(0x00FFFFFF)


#define TCC_CCBUF_DITH6_DITHERBUF_Pos 0
#define TCC_CCBUF_DITH6_DITHERBUF_Msk (_U_(0x3F) << TCC_CCBUF_DITH6_DITHERBUF_Pos)
#define TCC_CCBUF_DITH6_DITHERBUF(value) (TCC_CCBUF_DITH6_DITHERBUF_Msk & ((value) << TCC_CCBUF_DITH6_DITHERBUF_Pos))
#define TCC_CCBUF_DITH6_CCBUF_Pos 6
#define TCC_CCBUF_DITH6_CCBUF_Msk (_U_(0x3FFFF) << TCC_CCBUF_DITH6_CCBUF_Pos)
#define TCC_CCBUF_DITH6_CCBUF(value) (TCC_CCBUF_DITH6_CCBUF_Msk & ((value) << TCC_CCBUF_DITH6_CCBUF_Pos))
#define TCC_CCBUF_DITH6_MASK _U_(0x00FFFFFF)

#define TCC_CCBUF_CCBUF_Pos 0
#define TCC_CCBUF_CCBUF_Msk (_U_(0xFFFFFF) << TCC_CCBUF_CCBUF_Pos)
#define TCC_CCBUF_CCBUF(value) (TCC_CCBUF_CCBUF_Msk & ((value) << TCC_CCBUF_CCBUF_Pos))
#define TCC_CCBUF_MASK _U_(0x00FFFFFF)



typedef struct {
  volatile TCC_CTRLA_Type CTRLA;
  volatile TCC_CTRLBCLR_Type CTRLBCLR;
  volatile TCC_CTRLBSET_Type CTRLBSET;
       RoReg8 Reserved1[0x2];
  volatile const TCC_SYNCBUSY_Type SYNCBUSY;
  volatile TCC_FCTRLA_Type FCTRLA;
  volatile TCC_FCTRLB_Type FCTRLB;
  volatile TCC_WEXCTRL_Type WEXCTRL;
  volatile TCC_DRVCTRL_Type DRVCTRL;
       RoReg8 Reserved2[0x2];
  volatile TCC_DBGCTRL_Type DBGCTRL;
       RoReg8 Reserved3[0x1];
  volatile TCC_EVCTRL_Type EVCTRL;
  volatile TCC_INTENCLR_Type INTENCLR;
  volatile TCC_INTENSET_Type INTENSET;
  volatile TCC_INTFLAG_Type INTFLAG;
  volatile TCC_STATUS_Type STATUS;
  volatile TCC_COUNT_Type COUNT;
  volatile TCC_PATT_Type PATT;
       RoReg8 Reserved4[0x2];
  volatile TCC_WAVE_Type WAVE;
  volatile TCC_PER_Type PER;
  volatile TCC_CC_Type CC[6];
       RoReg8 Reserved5[0x8];
  volatile TCC_PATTBUF_Type PATTBUF;
       RoReg8 Reserved6[0x6];
  volatile TCC_PERBUF_Type PERBUF;
  volatile TCC_CCBUF_Type CCBUF[6];
} Tcc;
# 615 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/trng.h" 1
# 31 "asf4/samd51/include/component/trng.h"
#define _SAMD51_TRNG_COMPONENT_ 







#define TRNG_U2242 
#define REV_TRNG 0x110



typedef union {
  struct {
    uint8_t :1;
    uint8_t ENABLE:1;
    uint8_t :4;
    uint8_t RUNSTDBY:1;
    uint8_t :1;
  } bit;
  uint8_t reg;
} TRNG_CTRLA_Type;


#define TRNG_CTRLA_OFFSET 0x00
#define TRNG_CTRLA_RESETVALUE _U_(0x00)

#define TRNG_CTRLA_ENABLE_Pos 1
#define TRNG_CTRLA_ENABLE (_U_(0x1) << TRNG_CTRLA_ENABLE_Pos)
#define TRNG_CTRLA_RUNSTDBY_Pos 6
#define TRNG_CTRLA_RUNSTDBY (_U_(0x1) << TRNG_CTRLA_RUNSTDBY_Pos)
#define TRNG_CTRLA_MASK _U_(0x42)



typedef union {
  struct {
    uint8_t DATARDYEO:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} TRNG_EVCTRL_Type;


#define TRNG_EVCTRL_OFFSET 0x04
#define TRNG_EVCTRL_RESETVALUE _U_(0x00)

#define TRNG_EVCTRL_DATARDYEO_Pos 0
#define TRNG_EVCTRL_DATARDYEO (_U_(0x1) << TRNG_EVCTRL_DATARDYEO_Pos)
#define TRNG_EVCTRL_MASK _U_(0x01)



typedef union {
  struct {
    uint8_t DATARDY:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} TRNG_INTENCLR_Type;


#define TRNG_INTENCLR_OFFSET 0x08
#define TRNG_INTENCLR_RESETVALUE _U_(0x00)

#define TRNG_INTENCLR_DATARDY_Pos 0
#define TRNG_INTENCLR_DATARDY (_U_(0x1) << TRNG_INTENCLR_DATARDY_Pos)
#define TRNG_INTENCLR_MASK _U_(0x01)



typedef union {
  struct {
    uint8_t DATARDY:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} TRNG_INTENSET_Type;


#define TRNG_INTENSET_OFFSET 0x09
#define TRNG_INTENSET_RESETVALUE _U_(0x00)

#define TRNG_INTENSET_DATARDY_Pos 0
#define TRNG_INTENSET_DATARDY (_U_(0x1) << TRNG_INTENSET_DATARDY_Pos)
#define TRNG_INTENSET_MASK _U_(0x01)



typedef union {
  struct {
    volatile const uint8_t DATARDY:1;
    volatile const uint8_t :7;
  } bit;
  uint8_t reg;
} TRNG_INTFLAG_Type;


#define TRNG_INTFLAG_OFFSET 0x0A
#define TRNG_INTFLAG_RESETVALUE _U_(0x00)

#define TRNG_INTFLAG_DATARDY_Pos 0
#define TRNG_INTFLAG_DATARDY (_U_(0x1) << TRNG_INTFLAG_DATARDY_Pos)
#define TRNG_INTFLAG_MASK _U_(0x01)



typedef union {
  struct {
    uint32_t DATA:32;
  } bit;
  uint32_t reg;
} TRNG_DATA_Type;


#define TRNG_DATA_OFFSET 0x20
#define TRNG_DATA_RESETVALUE _U_(0x00000000)

#define TRNG_DATA_DATA_Pos 0
#define TRNG_DATA_DATA_Msk (_U_(0xFFFFFFFF) << TRNG_DATA_DATA_Pos)
#define TRNG_DATA_DATA(value) (TRNG_DATA_DATA_Msk & ((value) << TRNG_DATA_DATA_Pos))
#define TRNG_DATA_MASK _U_(0xFFFFFFFF)



typedef struct {
  volatile TRNG_CTRLA_Type CTRLA;
       RoReg8 Reserved1[0x3];
  volatile TRNG_EVCTRL_Type EVCTRL;
       RoReg8 Reserved2[0x3];
  volatile TRNG_INTENCLR_Type INTENCLR;
  volatile TRNG_INTENSET_Type INTENSET;
  volatile TRNG_INTFLAG_Type INTFLAG;
       RoReg8 Reserved3[0x15];
  volatile const TRNG_DATA_Type DATA;
} Trng;
# 616 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/usb.h" 1
# 31 "asf4/samd51/include/component/usb.h"
#define _SAMD51_USB_COMPONENT_ 







#define USB_U2222 
#define REV_USB 0x120



typedef union {
  struct {
    uint8_t SWRST:1;
    uint8_t ENABLE:1;
    uint8_t RUNSTDBY:1;
    uint8_t :4;
    uint8_t MODE:1;
  } bit;
  uint8_t reg;
} USB_CTRLA_Type;


#define USB_CTRLA_OFFSET 0x000
#define USB_CTRLA_RESETVALUE _U_(0x00)

#define USB_CTRLA_SWRST_Pos 0
#define USB_CTRLA_SWRST (_U_(0x1) << USB_CTRLA_SWRST_Pos)
#define USB_CTRLA_ENABLE_Pos 1
#define USB_CTRLA_ENABLE (_U_(0x1) << USB_CTRLA_ENABLE_Pos)
#define USB_CTRLA_RUNSTDBY_Pos 2
#define USB_CTRLA_RUNSTDBY (_U_(0x1) << USB_CTRLA_RUNSTDBY_Pos)
#define USB_CTRLA_MODE_Pos 7
#define USB_CTRLA_MODE (_U_(0x1) << USB_CTRLA_MODE_Pos)
#define USB_CTRLA_MODE_DEVICE_Val _U_(0x0)
#define USB_CTRLA_MODE_HOST_Val _U_(0x1)
#define USB_CTRLA_MODE_DEVICE (USB_CTRLA_MODE_DEVICE_Val << USB_CTRLA_MODE_Pos)
#define USB_CTRLA_MODE_HOST (USB_CTRLA_MODE_HOST_Val << USB_CTRLA_MODE_Pos)
#define USB_CTRLA_MASK _U_(0x87)



typedef union {
  struct {
    uint8_t SWRST:1;
    uint8_t ENABLE:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} USB_SYNCBUSY_Type;


#define USB_SYNCBUSY_OFFSET 0x002
#define USB_SYNCBUSY_RESETVALUE _U_(0x00)

#define USB_SYNCBUSY_SWRST_Pos 0
#define USB_SYNCBUSY_SWRST (_U_(0x1) << USB_SYNCBUSY_SWRST_Pos)
#define USB_SYNCBUSY_ENABLE_Pos 1
#define USB_SYNCBUSY_ENABLE (_U_(0x1) << USB_SYNCBUSY_ENABLE_Pos)
#define USB_SYNCBUSY_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t CQOS:2;
    uint8_t DQOS:2;
    uint8_t :4;
  } bit;
  uint8_t reg;
} USB_QOSCTRL_Type;


#define USB_QOSCTRL_OFFSET 0x003
#define USB_QOSCTRL_RESETVALUE _U_(0x0F)

#define USB_QOSCTRL_CQOS_Pos 0
#define USB_QOSCTRL_CQOS_Msk (_U_(0x3) << USB_QOSCTRL_CQOS_Pos)
#define USB_QOSCTRL_CQOS(value) (USB_QOSCTRL_CQOS_Msk & ((value) << USB_QOSCTRL_CQOS_Pos))
#define USB_QOSCTRL_DQOS_Pos 2
#define USB_QOSCTRL_DQOS_Msk (_U_(0x3) << USB_QOSCTRL_DQOS_Pos)
#define USB_QOSCTRL_DQOS(value) (USB_QOSCTRL_DQOS_Msk & ((value) << USB_QOSCTRL_DQOS_Pos))
#define USB_QOSCTRL_MASK _U_(0x0F)



typedef union {
  struct {
    uint16_t DETACH:1;
    uint16_t UPRSM:1;
    uint16_t SPDCONF:2;
    uint16_t NREPLY:1;
    uint16_t TSTJ:1;
    uint16_t TSTK:1;
    uint16_t TSTPCKT:1;
    uint16_t OPMODE2:1;
    uint16_t GNAK:1;
    uint16_t LPMHDSK:2;
    uint16_t :4;
  } bit;
  uint16_t reg;
} USB_DEVICE_CTRLB_Type;


#define USB_DEVICE_CTRLB_OFFSET 0x008
#define USB_DEVICE_CTRLB_RESETVALUE _U_(0x0001)

#define USB_DEVICE_CTRLB_DETACH_Pos 0
#define USB_DEVICE_CTRLB_DETACH (_U_(0x1) << USB_DEVICE_CTRLB_DETACH_Pos)
#define USB_DEVICE_CTRLB_UPRSM_Pos 1
#define USB_DEVICE_CTRLB_UPRSM (_U_(0x1) << USB_DEVICE_CTRLB_UPRSM_Pos)
#define USB_DEVICE_CTRLB_SPDCONF_Pos 2
#define USB_DEVICE_CTRLB_SPDCONF_Msk (_U_(0x3) << USB_DEVICE_CTRLB_SPDCONF_Pos)
#define USB_DEVICE_CTRLB_SPDCONF(value) (USB_DEVICE_CTRLB_SPDCONF_Msk & ((value) << USB_DEVICE_CTRLB_SPDCONF_Pos))
#define USB_DEVICE_CTRLB_SPDCONF_FS_Val _U_(0x0)
#define USB_DEVICE_CTRLB_SPDCONF_LS_Val _U_(0x1)
#define USB_DEVICE_CTRLB_SPDCONF_HS_Val _U_(0x2)
#define USB_DEVICE_CTRLB_SPDCONF_HSTM_Val _U_(0x3)
#define USB_DEVICE_CTRLB_SPDCONF_FS (USB_DEVICE_CTRLB_SPDCONF_FS_Val << USB_DEVICE_CTRLB_SPDCONF_Pos)
#define USB_DEVICE_CTRLB_SPDCONF_LS (USB_DEVICE_CTRLB_SPDCONF_LS_Val << USB_DEVICE_CTRLB_SPDCONF_Pos)
#define USB_DEVICE_CTRLB_SPDCONF_HS (USB_DEVICE_CTRLB_SPDCONF_HS_Val << USB_DEVICE_CTRLB_SPDCONF_Pos)
#define USB_DEVICE_CTRLB_SPDCONF_HSTM (USB_DEVICE_CTRLB_SPDCONF_HSTM_Val << USB_DEVICE_CTRLB_SPDCONF_Pos)
#define USB_DEVICE_CTRLB_NREPLY_Pos 4
#define USB_DEVICE_CTRLB_NREPLY (_U_(0x1) << USB_DEVICE_CTRLB_NREPLY_Pos)
#define USB_DEVICE_CTRLB_TSTJ_Pos 5
#define USB_DEVICE_CTRLB_TSTJ (_U_(0x1) << USB_DEVICE_CTRLB_TSTJ_Pos)
#define USB_DEVICE_CTRLB_TSTK_Pos 6
#define USB_DEVICE_CTRLB_TSTK (_U_(0x1) << USB_DEVICE_CTRLB_TSTK_Pos)
#define USB_DEVICE_CTRLB_TSTPCKT_Pos 7
#define USB_DEVICE_CTRLB_TSTPCKT (_U_(0x1) << USB_DEVICE_CTRLB_TSTPCKT_Pos)
#define USB_DEVICE_CTRLB_OPMODE2_Pos 8
#define USB_DEVICE_CTRLB_OPMODE2 (_U_(0x1) << USB_DEVICE_CTRLB_OPMODE2_Pos)
#define USB_DEVICE_CTRLB_GNAK_Pos 9
#define USB_DEVICE_CTRLB_GNAK (_U_(0x1) << USB_DEVICE_CTRLB_GNAK_Pos)
#define USB_DEVICE_CTRLB_LPMHDSK_Pos 10
#define USB_DEVICE_CTRLB_LPMHDSK_Msk (_U_(0x3) << USB_DEVICE_CTRLB_LPMHDSK_Pos)
#define USB_DEVICE_CTRLB_LPMHDSK(value) (USB_DEVICE_CTRLB_LPMHDSK_Msk & ((value) << USB_DEVICE_CTRLB_LPMHDSK_Pos))
#define USB_DEVICE_CTRLB_LPMHDSK_NO_Val _U_(0x0)
#define USB_DEVICE_CTRLB_LPMHDSK_ACK_Val _U_(0x1)
#define USB_DEVICE_CTRLB_LPMHDSK_NYET_Val _U_(0x2)
#define USB_DEVICE_CTRLB_LPMHDSK_STALL_Val _U_(0x3)
#define USB_DEVICE_CTRLB_LPMHDSK_NO (USB_DEVICE_CTRLB_LPMHDSK_NO_Val << USB_DEVICE_CTRLB_LPMHDSK_Pos)
#define USB_DEVICE_CTRLB_LPMHDSK_ACK (USB_DEVICE_CTRLB_LPMHDSK_ACK_Val << USB_DEVICE_CTRLB_LPMHDSK_Pos)
#define USB_DEVICE_CTRLB_LPMHDSK_NYET (USB_DEVICE_CTRLB_LPMHDSK_NYET_Val << USB_DEVICE_CTRLB_LPMHDSK_Pos)
#define USB_DEVICE_CTRLB_LPMHDSK_STALL (USB_DEVICE_CTRLB_LPMHDSK_STALL_Val << USB_DEVICE_CTRLB_LPMHDSK_Pos)
#define USB_DEVICE_CTRLB_MASK _U_(0x0FFF)



typedef union {
  struct {
    uint16_t :1;
    uint16_t RESUME:1;
    uint16_t SPDCONF:2;
    uint16_t AUTORESUME:1;
    uint16_t TSTJ:1;
    uint16_t TSTK:1;
    uint16_t :1;
    uint16_t SOFE:1;
    uint16_t BUSRESET:1;
    uint16_t VBUSOK:1;
    uint16_t L1RESUME:1;
    uint16_t :4;
  } bit;
  uint16_t reg;
} USB_HOST_CTRLB_Type;


#define USB_HOST_CTRLB_OFFSET 0x008
#define USB_HOST_CTRLB_RESETVALUE _U_(0x0000)

#define USB_HOST_CTRLB_RESUME_Pos 1
#define USB_HOST_CTRLB_RESUME (_U_(0x1) << USB_HOST_CTRLB_RESUME_Pos)
#define USB_HOST_CTRLB_SPDCONF_Pos 2
#define USB_HOST_CTRLB_SPDCONF_Msk (_U_(0x3) << USB_HOST_CTRLB_SPDCONF_Pos)
#define USB_HOST_CTRLB_SPDCONF(value) (USB_HOST_CTRLB_SPDCONF_Msk & ((value) << USB_HOST_CTRLB_SPDCONF_Pos))
#define USB_HOST_CTRLB_SPDCONF_NORMAL_Val _U_(0x0)
#define USB_HOST_CTRLB_SPDCONF_FS_Val _U_(0x3)
#define USB_HOST_CTRLB_SPDCONF_NORMAL (USB_HOST_CTRLB_SPDCONF_NORMAL_Val << USB_HOST_CTRLB_SPDCONF_Pos)
#define USB_HOST_CTRLB_SPDCONF_FS (USB_HOST_CTRLB_SPDCONF_FS_Val << USB_HOST_CTRLB_SPDCONF_Pos)
#define USB_HOST_CTRLB_AUTORESUME_Pos 4
#define USB_HOST_CTRLB_AUTORESUME (_U_(0x1) << USB_HOST_CTRLB_AUTORESUME_Pos)
#define USB_HOST_CTRLB_TSTJ_Pos 5
#define USB_HOST_CTRLB_TSTJ (_U_(0x1) << USB_HOST_CTRLB_TSTJ_Pos)
#define USB_HOST_CTRLB_TSTK_Pos 6
#define USB_HOST_CTRLB_TSTK (_U_(0x1) << USB_HOST_CTRLB_TSTK_Pos)
#define USB_HOST_CTRLB_SOFE_Pos 8
#define USB_HOST_CTRLB_SOFE (_U_(0x1) << USB_HOST_CTRLB_SOFE_Pos)
#define USB_HOST_CTRLB_BUSRESET_Pos 9
#define USB_HOST_CTRLB_BUSRESET (_U_(0x1) << USB_HOST_CTRLB_BUSRESET_Pos)
#define USB_HOST_CTRLB_VBUSOK_Pos 10
#define USB_HOST_CTRLB_VBUSOK (_U_(0x1) << USB_HOST_CTRLB_VBUSOK_Pos)
#define USB_HOST_CTRLB_L1RESUME_Pos 11
#define USB_HOST_CTRLB_L1RESUME (_U_(0x1) << USB_HOST_CTRLB_L1RESUME_Pos)
#define USB_HOST_CTRLB_MASK _U_(0x0F7E)



typedef union {
  struct {
    uint8_t DADD:7;
    uint8_t ADDEN:1;
  } bit;
  uint8_t reg;
} USB_DEVICE_DADD_Type;


#define USB_DEVICE_DADD_OFFSET 0x00A
#define USB_DEVICE_DADD_RESETVALUE _U_(0x00)

#define USB_DEVICE_DADD_DADD_Pos 0
#define USB_DEVICE_DADD_DADD_Msk (_U_(0x7F) << USB_DEVICE_DADD_DADD_Pos)
#define USB_DEVICE_DADD_DADD(value) (USB_DEVICE_DADD_DADD_Msk & ((value) << USB_DEVICE_DADD_DADD_Pos))
#define USB_DEVICE_DADD_ADDEN_Pos 7
#define USB_DEVICE_DADD_ADDEN (_U_(0x1) << USB_DEVICE_DADD_ADDEN_Pos)
#define USB_DEVICE_DADD_MASK _U_(0xFF)



typedef union {
  struct {
    uint8_t FLENC:4;
    uint8_t :3;
    uint8_t FLENCE:1;
  } bit;
  uint8_t reg;
} USB_HOST_HSOFC_Type;


#define USB_HOST_HSOFC_OFFSET 0x00A
#define USB_HOST_HSOFC_RESETVALUE _U_(0x00)

#define USB_HOST_HSOFC_FLENC_Pos 0
#define USB_HOST_HSOFC_FLENC_Msk (_U_(0xF) << USB_HOST_HSOFC_FLENC_Pos)
#define USB_HOST_HSOFC_FLENC(value) (USB_HOST_HSOFC_FLENC_Msk & ((value) << USB_HOST_HSOFC_FLENC_Pos))
#define USB_HOST_HSOFC_FLENCE_Pos 7
#define USB_HOST_HSOFC_FLENCE (_U_(0x1) << USB_HOST_HSOFC_FLENCE_Pos)
#define USB_HOST_HSOFC_MASK _U_(0x8F)



typedef union {
  struct {
    uint8_t :2;
    uint8_t SPEED:2;
    uint8_t :2;
    uint8_t LINESTATE:2;
  } bit;
  uint8_t reg;
} USB_DEVICE_STATUS_Type;


#define USB_DEVICE_STATUS_OFFSET 0x00C
#define USB_DEVICE_STATUS_RESETVALUE _U_(0x40)

#define USB_DEVICE_STATUS_SPEED_Pos 2
#define USB_DEVICE_STATUS_SPEED_Msk (_U_(0x3) << USB_DEVICE_STATUS_SPEED_Pos)
#define USB_DEVICE_STATUS_SPEED(value) (USB_DEVICE_STATUS_SPEED_Msk & ((value) << USB_DEVICE_STATUS_SPEED_Pos))
#define USB_DEVICE_STATUS_SPEED_FS_Val _U_(0x0)
#define USB_DEVICE_STATUS_SPEED_LS_Val _U_(0x1)
#define USB_DEVICE_STATUS_SPEED_HS_Val _U_(0x2)
#define USB_DEVICE_STATUS_SPEED_FS (USB_DEVICE_STATUS_SPEED_FS_Val << USB_DEVICE_STATUS_SPEED_Pos)
#define USB_DEVICE_STATUS_SPEED_LS (USB_DEVICE_STATUS_SPEED_LS_Val << USB_DEVICE_STATUS_SPEED_Pos)
#define USB_DEVICE_STATUS_SPEED_HS (USB_DEVICE_STATUS_SPEED_HS_Val << USB_DEVICE_STATUS_SPEED_Pos)
#define USB_DEVICE_STATUS_LINESTATE_Pos 6
#define USB_DEVICE_STATUS_LINESTATE_Msk (_U_(0x3) << USB_DEVICE_STATUS_LINESTATE_Pos)
#define USB_DEVICE_STATUS_LINESTATE(value) (USB_DEVICE_STATUS_LINESTATE_Msk & ((value) << USB_DEVICE_STATUS_LINESTATE_Pos))
#define USB_DEVICE_STATUS_LINESTATE_0_Val _U_(0x0)
#define USB_DEVICE_STATUS_LINESTATE_1_Val _U_(0x1)
#define USB_DEVICE_STATUS_LINESTATE_2_Val _U_(0x2)
#define USB_DEVICE_STATUS_LINESTATE_0 (USB_DEVICE_STATUS_LINESTATE_0_Val << USB_DEVICE_STATUS_LINESTATE_Pos)
#define USB_DEVICE_STATUS_LINESTATE_1 (USB_DEVICE_STATUS_LINESTATE_1_Val << USB_DEVICE_STATUS_LINESTATE_Pos)
#define USB_DEVICE_STATUS_LINESTATE_2 (USB_DEVICE_STATUS_LINESTATE_2_Val << USB_DEVICE_STATUS_LINESTATE_Pos)
#define USB_DEVICE_STATUS_MASK _U_(0xCC)



typedef union {
  struct {
    uint8_t :2;
    uint8_t SPEED:2;
    uint8_t :2;
    uint8_t LINESTATE:2;
  } bit;
  uint8_t reg;
} USB_HOST_STATUS_Type;


#define USB_HOST_STATUS_OFFSET 0x00C
#define USB_HOST_STATUS_RESETVALUE _U_(0x00)

#define USB_HOST_STATUS_SPEED_Pos 2
#define USB_HOST_STATUS_SPEED_Msk (_U_(0x3) << USB_HOST_STATUS_SPEED_Pos)
#define USB_HOST_STATUS_SPEED(value) (USB_HOST_STATUS_SPEED_Msk & ((value) << USB_HOST_STATUS_SPEED_Pos))
#define USB_HOST_STATUS_LINESTATE_Pos 6
#define USB_HOST_STATUS_LINESTATE_Msk (_U_(0x3) << USB_HOST_STATUS_LINESTATE_Pos)
#define USB_HOST_STATUS_LINESTATE(value) (USB_HOST_STATUS_LINESTATE_Msk & ((value) << USB_HOST_STATUS_LINESTATE_Pos))
#define USB_HOST_STATUS_MASK _U_(0xCC)



typedef union {
  struct {
    uint8_t FSMSTATE:7;
    uint8_t :1;
  } bit;
  uint8_t reg;
} USB_FSMSTATUS_Type;


#define USB_FSMSTATUS_OFFSET 0x00D
#define USB_FSMSTATUS_RESETVALUE _U_(0x01)

#define USB_FSMSTATUS_FSMSTATE_Pos 0
#define USB_FSMSTATUS_FSMSTATE_Msk (_U_(0x7F) << USB_FSMSTATUS_FSMSTATE_Pos)
#define USB_FSMSTATUS_FSMSTATE(value) (USB_FSMSTATUS_FSMSTATE_Msk & ((value) << USB_FSMSTATUS_FSMSTATE_Pos))
#define USB_FSMSTATUS_FSMSTATE_OFF_Val _U_(0x1)
#define USB_FSMSTATUS_FSMSTATE_ON_Val _U_(0x2)
#define USB_FSMSTATUS_FSMSTATE_SUSPEND_Val _U_(0x4)
#define USB_FSMSTATUS_FSMSTATE_SLEEP_Val _U_(0x8)
#define USB_FSMSTATUS_FSMSTATE_DNRESUME_Val _U_(0x10)
#define USB_FSMSTATUS_FSMSTATE_UPRESUME_Val _U_(0x20)
#define USB_FSMSTATUS_FSMSTATE_RESET_Val _U_(0x40)
#define USB_FSMSTATUS_FSMSTATE_OFF (USB_FSMSTATUS_FSMSTATE_OFF_Val << USB_FSMSTATUS_FSMSTATE_Pos)
#define USB_FSMSTATUS_FSMSTATE_ON (USB_FSMSTATUS_FSMSTATE_ON_Val << USB_FSMSTATUS_FSMSTATE_Pos)
#define USB_FSMSTATUS_FSMSTATE_SUSPEND (USB_FSMSTATUS_FSMSTATE_SUSPEND_Val << USB_FSMSTATUS_FSMSTATE_Pos)
#define USB_FSMSTATUS_FSMSTATE_SLEEP (USB_FSMSTATUS_FSMSTATE_SLEEP_Val << USB_FSMSTATUS_FSMSTATE_Pos)
#define USB_FSMSTATUS_FSMSTATE_DNRESUME (USB_FSMSTATUS_FSMSTATE_DNRESUME_Val << USB_FSMSTATUS_FSMSTATE_Pos)
#define USB_FSMSTATUS_FSMSTATE_UPRESUME (USB_FSMSTATUS_FSMSTATE_UPRESUME_Val << USB_FSMSTATUS_FSMSTATE_Pos)
#define USB_FSMSTATUS_FSMSTATE_RESET (USB_FSMSTATUS_FSMSTATE_RESET_Val << USB_FSMSTATUS_FSMSTATE_Pos)
#define USB_FSMSTATUS_MASK _U_(0x7F)



typedef union {
  struct {
    uint16_t MFNUM:3;
    uint16_t FNUM:11;
    uint16_t :1;
    uint16_t FNCERR:1;
  } bit;
  uint16_t reg;
} USB_DEVICE_FNUM_Type;


#define USB_DEVICE_FNUM_OFFSET 0x010
#define USB_DEVICE_FNUM_RESETVALUE _U_(0x0000)

#define USB_DEVICE_FNUM_MFNUM_Pos 0
#define USB_DEVICE_FNUM_MFNUM_Msk (_U_(0x7) << USB_DEVICE_FNUM_MFNUM_Pos)
#define USB_DEVICE_FNUM_MFNUM(value) (USB_DEVICE_FNUM_MFNUM_Msk & ((value) << USB_DEVICE_FNUM_MFNUM_Pos))
#define USB_DEVICE_FNUM_FNUM_Pos 3
#define USB_DEVICE_FNUM_FNUM_Msk (_U_(0x7FF) << USB_DEVICE_FNUM_FNUM_Pos)
#define USB_DEVICE_FNUM_FNUM(value) (USB_DEVICE_FNUM_FNUM_Msk & ((value) << USB_DEVICE_FNUM_FNUM_Pos))
#define USB_DEVICE_FNUM_FNCERR_Pos 15
#define USB_DEVICE_FNUM_FNCERR (_U_(0x1) << USB_DEVICE_FNUM_FNCERR_Pos)
#define USB_DEVICE_FNUM_MASK _U_(0xBFFF)



typedef union {
  struct {
    uint16_t MFNUM:3;
    uint16_t FNUM:11;
    uint16_t :2;
  } bit;
  uint16_t reg;
} USB_HOST_FNUM_Type;


#define USB_HOST_FNUM_OFFSET 0x010
#define USB_HOST_FNUM_RESETVALUE _U_(0x0000)

#define USB_HOST_FNUM_MFNUM_Pos 0
#define USB_HOST_FNUM_MFNUM_Msk (_U_(0x7) << USB_HOST_FNUM_MFNUM_Pos)
#define USB_HOST_FNUM_MFNUM(value) (USB_HOST_FNUM_MFNUM_Msk & ((value) << USB_HOST_FNUM_MFNUM_Pos))
#define USB_HOST_FNUM_FNUM_Pos 3
#define USB_HOST_FNUM_FNUM_Msk (_U_(0x7FF) << USB_HOST_FNUM_FNUM_Pos)
#define USB_HOST_FNUM_FNUM(value) (USB_HOST_FNUM_FNUM_Msk & ((value) << USB_HOST_FNUM_FNUM_Pos))
#define USB_HOST_FNUM_MASK _U_(0x3FFF)



typedef union {
  struct {
    uint8_t FLENHIGH:8;
  } bit;
  uint8_t reg;
} USB_HOST_FLENHIGH_Type;


#define USB_HOST_FLENHIGH_OFFSET 0x012
#define USB_HOST_FLENHIGH_RESETVALUE _U_(0x00)

#define USB_HOST_FLENHIGH_FLENHIGH_Pos 0
#define USB_HOST_FLENHIGH_FLENHIGH_Msk (_U_(0xFF) << USB_HOST_FLENHIGH_FLENHIGH_Pos)
#define USB_HOST_FLENHIGH_FLENHIGH(value) (USB_HOST_FLENHIGH_FLENHIGH_Msk & ((value) << USB_HOST_FLENHIGH_FLENHIGH_Pos))
#define USB_HOST_FLENHIGH_MASK _U_(0xFF)



typedef union {
  struct {
    uint16_t SUSPEND:1;
    uint16_t MSOF:1;
    uint16_t SOF:1;
    uint16_t EORST:1;
    uint16_t WAKEUP:1;
    uint16_t EORSM:1;
    uint16_t UPRSM:1;
    uint16_t RAMACER:1;
    uint16_t LPMNYET:1;
    uint16_t LPMSUSP:1;
    uint16_t :6;
  } bit;
  uint16_t reg;
} USB_DEVICE_INTENCLR_Type;


#define USB_DEVICE_INTENCLR_OFFSET 0x014
#define USB_DEVICE_INTENCLR_RESETVALUE _U_(0x0000)

#define USB_DEVICE_INTENCLR_SUSPEND_Pos 0
#define USB_DEVICE_INTENCLR_SUSPEND (_U_(0x1) << USB_DEVICE_INTENCLR_SUSPEND_Pos)
#define USB_DEVICE_INTENCLR_MSOF_Pos 1
#define USB_DEVICE_INTENCLR_MSOF (_U_(0x1) << USB_DEVICE_INTENCLR_MSOF_Pos)
#define USB_DEVICE_INTENCLR_SOF_Pos 2
#define USB_DEVICE_INTENCLR_SOF (_U_(0x1) << USB_DEVICE_INTENCLR_SOF_Pos)
#define USB_DEVICE_INTENCLR_EORST_Pos 3
#define USB_DEVICE_INTENCLR_EORST (_U_(0x1) << USB_DEVICE_INTENCLR_EORST_Pos)
#define USB_DEVICE_INTENCLR_WAKEUP_Pos 4
#define USB_DEVICE_INTENCLR_WAKEUP (_U_(0x1) << USB_DEVICE_INTENCLR_WAKEUP_Pos)
#define USB_DEVICE_INTENCLR_EORSM_Pos 5
#define USB_DEVICE_INTENCLR_EORSM (_U_(0x1) << USB_DEVICE_INTENCLR_EORSM_Pos)
#define USB_DEVICE_INTENCLR_UPRSM_Pos 6
#define USB_DEVICE_INTENCLR_UPRSM (_U_(0x1) << USB_DEVICE_INTENCLR_UPRSM_Pos)
#define USB_DEVICE_INTENCLR_RAMACER_Pos 7
#define USB_DEVICE_INTENCLR_RAMACER (_U_(0x1) << USB_DEVICE_INTENCLR_RAMACER_Pos)
#define USB_DEVICE_INTENCLR_LPMNYET_Pos 8
#define USB_DEVICE_INTENCLR_LPMNYET (_U_(0x1) << USB_DEVICE_INTENCLR_LPMNYET_Pos)
#define USB_DEVICE_INTENCLR_LPMSUSP_Pos 9
#define USB_DEVICE_INTENCLR_LPMSUSP (_U_(0x1) << USB_DEVICE_INTENCLR_LPMSUSP_Pos)
#define USB_DEVICE_INTENCLR_MASK _U_(0x03FF)



typedef union {
  struct {
    uint16_t :2;
    uint16_t HSOF:1;
    uint16_t RST:1;
    uint16_t WAKEUP:1;
    uint16_t DNRSM:1;
    uint16_t UPRSM:1;
    uint16_t RAMACER:1;
    uint16_t DCONN:1;
    uint16_t DDISC:1;
    uint16_t :6;
  } bit;
  uint16_t reg;
} USB_HOST_INTENCLR_Type;


#define USB_HOST_INTENCLR_OFFSET 0x014
#define USB_HOST_INTENCLR_RESETVALUE _U_(0x0000)

#define USB_HOST_INTENCLR_HSOF_Pos 2
#define USB_HOST_INTENCLR_HSOF (_U_(0x1) << USB_HOST_INTENCLR_HSOF_Pos)
#define USB_HOST_INTENCLR_RST_Pos 3
#define USB_HOST_INTENCLR_RST (_U_(0x1) << USB_HOST_INTENCLR_RST_Pos)
#define USB_HOST_INTENCLR_WAKEUP_Pos 4
#define USB_HOST_INTENCLR_WAKEUP (_U_(0x1) << USB_HOST_INTENCLR_WAKEUP_Pos)
#define USB_HOST_INTENCLR_DNRSM_Pos 5
#define USB_HOST_INTENCLR_DNRSM (_U_(0x1) << USB_HOST_INTENCLR_DNRSM_Pos)
#define USB_HOST_INTENCLR_UPRSM_Pos 6
#define USB_HOST_INTENCLR_UPRSM (_U_(0x1) << USB_HOST_INTENCLR_UPRSM_Pos)
#define USB_HOST_INTENCLR_RAMACER_Pos 7
#define USB_HOST_INTENCLR_RAMACER (_U_(0x1) << USB_HOST_INTENCLR_RAMACER_Pos)
#define USB_HOST_INTENCLR_DCONN_Pos 8
#define USB_HOST_INTENCLR_DCONN (_U_(0x1) << USB_HOST_INTENCLR_DCONN_Pos)
#define USB_HOST_INTENCLR_DDISC_Pos 9
#define USB_HOST_INTENCLR_DDISC (_U_(0x1) << USB_HOST_INTENCLR_DDISC_Pos)
#define USB_HOST_INTENCLR_MASK _U_(0x03FC)



typedef union {
  struct {
    uint16_t SUSPEND:1;
    uint16_t MSOF:1;
    uint16_t SOF:1;
    uint16_t EORST:1;
    uint16_t WAKEUP:1;
    uint16_t EORSM:1;
    uint16_t UPRSM:1;
    uint16_t RAMACER:1;
    uint16_t LPMNYET:1;
    uint16_t LPMSUSP:1;
    uint16_t :6;
  } bit;
  uint16_t reg;
} USB_DEVICE_INTENSET_Type;


#define USB_DEVICE_INTENSET_OFFSET 0x018
#define USB_DEVICE_INTENSET_RESETVALUE _U_(0x0000)

#define USB_DEVICE_INTENSET_SUSPEND_Pos 0
#define USB_DEVICE_INTENSET_SUSPEND (_U_(0x1) << USB_DEVICE_INTENSET_SUSPEND_Pos)
#define USB_DEVICE_INTENSET_MSOF_Pos 1
#define USB_DEVICE_INTENSET_MSOF (_U_(0x1) << USB_DEVICE_INTENSET_MSOF_Pos)
#define USB_DEVICE_INTENSET_SOF_Pos 2
#define USB_DEVICE_INTENSET_SOF (_U_(0x1) << USB_DEVICE_INTENSET_SOF_Pos)
#define USB_DEVICE_INTENSET_EORST_Pos 3
#define USB_DEVICE_INTENSET_EORST (_U_(0x1) << USB_DEVICE_INTENSET_EORST_Pos)
#define USB_DEVICE_INTENSET_WAKEUP_Pos 4
#define USB_DEVICE_INTENSET_WAKEUP (_U_(0x1) << USB_DEVICE_INTENSET_WAKEUP_Pos)
#define USB_DEVICE_INTENSET_EORSM_Pos 5
#define USB_DEVICE_INTENSET_EORSM (_U_(0x1) << USB_DEVICE_INTENSET_EORSM_Pos)
#define USB_DEVICE_INTENSET_UPRSM_Pos 6
#define USB_DEVICE_INTENSET_UPRSM (_U_(0x1) << USB_DEVICE_INTENSET_UPRSM_Pos)
#define USB_DEVICE_INTENSET_RAMACER_Pos 7
#define USB_DEVICE_INTENSET_RAMACER (_U_(0x1) << USB_DEVICE_INTENSET_RAMACER_Pos)
#define USB_DEVICE_INTENSET_LPMNYET_Pos 8
#define USB_DEVICE_INTENSET_LPMNYET (_U_(0x1) << USB_DEVICE_INTENSET_LPMNYET_Pos)
#define USB_DEVICE_INTENSET_LPMSUSP_Pos 9
#define USB_DEVICE_INTENSET_LPMSUSP (_U_(0x1) << USB_DEVICE_INTENSET_LPMSUSP_Pos)
#define USB_DEVICE_INTENSET_MASK _U_(0x03FF)



typedef union {
  struct {
    uint16_t :2;
    uint16_t HSOF:1;
    uint16_t RST:1;
    uint16_t WAKEUP:1;
    uint16_t DNRSM:1;
    uint16_t UPRSM:1;
    uint16_t RAMACER:1;
    uint16_t DCONN:1;
    uint16_t DDISC:1;
    uint16_t :6;
  } bit;
  uint16_t reg;
} USB_HOST_INTENSET_Type;


#define USB_HOST_INTENSET_OFFSET 0x018
#define USB_HOST_INTENSET_RESETVALUE _U_(0x0000)

#define USB_HOST_INTENSET_HSOF_Pos 2
#define USB_HOST_INTENSET_HSOF (_U_(0x1) << USB_HOST_INTENSET_HSOF_Pos)
#define USB_HOST_INTENSET_RST_Pos 3
#define USB_HOST_INTENSET_RST (_U_(0x1) << USB_HOST_INTENSET_RST_Pos)
#define USB_HOST_INTENSET_WAKEUP_Pos 4
#define USB_HOST_INTENSET_WAKEUP (_U_(0x1) << USB_HOST_INTENSET_WAKEUP_Pos)
#define USB_HOST_INTENSET_DNRSM_Pos 5
#define USB_HOST_INTENSET_DNRSM (_U_(0x1) << USB_HOST_INTENSET_DNRSM_Pos)
#define USB_HOST_INTENSET_UPRSM_Pos 6
#define USB_HOST_INTENSET_UPRSM (_U_(0x1) << USB_HOST_INTENSET_UPRSM_Pos)
#define USB_HOST_INTENSET_RAMACER_Pos 7
#define USB_HOST_INTENSET_RAMACER (_U_(0x1) << USB_HOST_INTENSET_RAMACER_Pos)
#define USB_HOST_INTENSET_DCONN_Pos 8
#define USB_HOST_INTENSET_DCONN (_U_(0x1) << USB_HOST_INTENSET_DCONN_Pos)
#define USB_HOST_INTENSET_DDISC_Pos 9
#define USB_HOST_INTENSET_DDISC (_U_(0x1) << USB_HOST_INTENSET_DDISC_Pos)
#define USB_HOST_INTENSET_MASK _U_(0x03FC)



typedef union {
  struct {
    volatile const uint16_t SUSPEND:1;
    volatile const uint16_t MSOF:1;
    volatile const uint16_t SOF:1;
    volatile const uint16_t EORST:1;
    volatile const uint16_t WAKEUP:1;
    volatile const uint16_t EORSM:1;
    volatile const uint16_t UPRSM:1;
    volatile const uint16_t RAMACER:1;
    volatile const uint16_t LPMNYET:1;
    volatile const uint16_t LPMSUSP:1;
    volatile const uint16_t :6;
  } bit;
  uint16_t reg;
} USB_DEVICE_INTFLAG_Type;


#define USB_DEVICE_INTFLAG_OFFSET 0x01C
#define USB_DEVICE_INTFLAG_RESETVALUE _U_(0x0000)

#define USB_DEVICE_INTFLAG_SUSPEND_Pos 0
#define USB_DEVICE_INTFLAG_SUSPEND (_U_(0x1) << USB_DEVICE_INTFLAG_SUSPEND_Pos)
#define USB_DEVICE_INTFLAG_MSOF_Pos 1
#define USB_DEVICE_INTFLAG_MSOF (_U_(0x1) << USB_DEVICE_INTFLAG_MSOF_Pos)
#define USB_DEVICE_INTFLAG_SOF_Pos 2
#define USB_DEVICE_INTFLAG_SOF (_U_(0x1) << USB_DEVICE_INTFLAG_SOF_Pos)
#define USB_DEVICE_INTFLAG_EORST_Pos 3
#define USB_DEVICE_INTFLAG_EORST (_U_(0x1) << USB_DEVICE_INTFLAG_EORST_Pos)
#define USB_DEVICE_INTFLAG_WAKEUP_Pos 4
#define USB_DEVICE_INTFLAG_WAKEUP (_U_(0x1) << USB_DEVICE_INTFLAG_WAKEUP_Pos)
#define USB_DEVICE_INTFLAG_EORSM_Pos 5
#define USB_DEVICE_INTFLAG_EORSM (_U_(0x1) << USB_DEVICE_INTFLAG_EORSM_Pos)
#define USB_DEVICE_INTFLAG_UPRSM_Pos 6
#define USB_DEVICE_INTFLAG_UPRSM (_U_(0x1) << USB_DEVICE_INTFLAG_UPRSM_Pos)
#define USB_DEVICE_INTFLAG_RAMACER_Pos 7
#define USB_DEVICE_INTFLAG_RAMACER (_U_(0x1) << USB_DEVICE_INTFLAG_RAMACER_Pos)
#define USB_DEVICE_INTFLAG_LPMNYET_Pos 8
#define USB_DEVICE_INTFLAG_LPMNYET (_U_(0x1) << USB_DEVICE_INTFLAG_LPMNYET_Pos)
#define USB_DEVICE_INTFLAG_LPMSUSP_Pos 9
#define USB_DEVICE_INTFLAG_LPMSUSP (_U_(0x1) << USB_DEVICE_INTFLAG_LPMSUSP_Pos)
#define USB_DEVICE_INTFLAG_MASK _U_(0x03FF)



typedef union {
  struct {
    volatile const uint16_t :2;
    volatile const uint16_t HSOF:1;
    volatile const uint16_t RST:1;
    volatile const uint16_t WAKEUP:1;
    volatile const uint16_t DNRSM:1;
    volatile const uint16_t UPRSM:1;
    volatile const uint16_t RAMACER:1;
    volatile const uint16_t DCONN:1;
    volatile const uint16_t DDISC:1;
    volatile const uint16_t :6;
  } bit;
  uint16_t reg;
} USB_HOST_INTFLAG_Type;


#define USB_HOST_INTFLAG_OFFSET 0x01C
#define USB_HOST_INTFLAG_RESETVALUE _U_(0x0000)

#define USB_HOST_INTFLAG_HSOF_Pos 2
#define USB_HOST_INTFLAG_HSOF (_U_(0x1) << USB_HOST_INTFLAG_HSOF_Pos)
#define USB_HOST_INTFLAG_RST_Pos 3
#define USB_HOST_INTFLAG_RST (_U_(0x1) << USB_HOST_INTFLAG_RST_Pos)
#define USB_HOST_INTFLAG_WAKEUP_Pos 4
#define USB_HOST_INTFLAG_WAKEUP (_U_(0x1) << USB_HOST_INTFLAG_WAKEUP_Pos)
#define USB_HOST_INTFLAG_DNRSM_Pos 5
#define USB_HOST_INTFLAG_DNRSM (_U_(0x1) << USB_HOST_INTFLAG_DNRSM_Pos)
#define USB_HOST_INTFLAG_UPRSM_Pos 6
#define USB_HOST_INTFLAG_UPRSM (_U_(0x1) << USB_HOST_INTFLAG_UPRSM_Pos)
#define USB_HOST_INTFLAG_RAMACER_Pos 7
#define USB_HOST_INTFLAG_RAMACER (_U_(0x1) << USB_HOST_INTFLAG_RAMACER_Pos)
#define USB_HOST_INTFLAG_DCONN_Pos 8
#define USB_HOST_INTFLAG_DCONN (_U_(0x1) << USB_HOST_INTFLAG_DCONN_Pos)
#define USB_HOST_INTFLAG_DDISC_Pos 9
#define USB_HOST_INTFLAG_DDISC (_U_(0x1) << USB_HOST_INTFLAG_DDISC_Pos)
#define USB_HOST_INTFLAG_MASK _U_(0x03FC)



typedef union {
  struct {
    uint16_t EPINT0:1;
    uint16_t EPINT1:1;
    uint16_t EPINT2:1;
    uint16_t EPINT3:1;
    uint16_t EPINT4:1;
    uint16_t EPINT5:1;
    uint16_t EPINT6:1;
    uint16_t EPINT7:1;
    uint16_t :8;
  } bit;
  struct {
    uint16_t EPINT:8;
    uint16_t :8;
  } vec;
  uint16_t reg;
} USB_DEVICE_EPINTSMRY_Type;


#define USB_DEVICE_EPINTSMRY_OFFSET 0x020
#define USB_DEVICE_EPINTSMRY_RESETVALUE _U_(0x0000)

#define USB_DEVICE_EPINTSMRY_EPINT0_Pos 0
#define USB_DEVICE_EPINTSMRY_EPINT0 (_U_(1) << USB_DEVICE_EPINTSMRY_EPINT0_Pos)
#define USB_DEVICE_EPINTSMRY_EPINT1_Pos 1
#define USB_DEVICE_EPINTSMRY_EPINT1 (_U_(1) << USB_DEVICE_EPINTSMRY_EPINT1_Pos)
#define USB_DEVICE_EPINTSMRY_EPINT2_Pos 2
#define USB_DEVICE_EPINTSMRY_EPINT2 (_U_(1) << USB_DEVICE_EPINTSMRY_EPINT2_Pos)
#define USB_DEVICE_EPINTSMRY_EPINT3_Pos 3
#define USB_DEVICE_EPINTSMRY_EPINT3 (_U_(1) << USB_DEVICE_EPINTSMRY_EPINT3_Pos)
#define USB_DEVICE_EPINTSMRY_EPINT4_Pos 4
#define USB_DEVICE_EPINTSMRY_EPINT4 (_U_(1) << USB_DEVICE_EPINTSMRY_EPINT4_Pos)
#define USB_DEVICE_EPINTSMRY_EPINT5_Pos 5
#define USB_DEVICE_EPINTSMRY_EPINT5 (_U_(1) << USB_DEVICE_EPINTSMRY_EPINT5_Pos)
#define USB_DEVICE_EPINTSMRY_EPINT6_Pos 6
#define USB_DEVICE_EPINTSMRY_EPINT6 (_U_(1) << USB_DEVICE_EPINTSMRY_EPINT6_Pos)
#define USB_DEVICE_EPINTSMRY_EPINT7_Pos 7
#define USB_DEVICE_EPINTSMRY_EPINT7 (_U_(1) << USB_DEVICE_EPINTSMRY_EPINT7_Pos)
#define USB_DEVICE_EPINTSMRY_EPINT_Pos 0
#define USB_DEVICE_EPINTSMRY_EPINT_Msk (_U_(0xFF) << USB_DEVICE_EPINTSMRY_EPINT_Pos)
#define USB_DEVICE_EPINTSMRY_EPINT(value) (USB_DEVICE_EPINTSMRY_EPINT_Msk & ((value) << USB_DEVICE_EPINTSMRY_EPINT_Pos))
#define USB_DEVICE_EPINTSMRY_MASK _U_(0x00FF)



typedef union {
  struct {
    uint16_t EPINT0:1;
    uint16_t EPINT1:1;
    uint16_t EPINT2:1;
    uint16_t EPINT3:1;
    uint16_t EPINT4:1;
    uint16_t EPINT5:1;
    uint16_t EPINT6:1;
    uint16_t EPINT7:1;
    uint16_t :8;
  } bit;
  struct {
    uint16_t EPINT:8;
    uint16_t :8;
  } vec;
  uint16_t reg;
} USB_HOST_PINTSMRY_Type;


#define USB_HOST_PINTSMRY_OFFSET 0x020
#define USB_HOST_PINTSMRY_RESETVALUE _U_(0x0000)

#define USB_HOST_PINTSMRY_EPINT0_Pos 0
#define USB_HOST_PINTSMRY_EPINT0 (_U_(1) << USB_HOST_PINTSMRY_EPINT0_Pos)
#define USB_HOST_PINTSMRY_EPINT1_Pos 1
#define USB_HOST_PINTSMRY_EPINT1 (_U_(1) << USB_HOST_PINTSMRY_EPINT1_Pos)
#define USB_HOST_PINTSMRY_EPINT2_Pos 2
#define USB_HOST_PINTSMRY_EPINT2 (_U_(1) << USB_HOST_PINTSMRY_EPINT2_Pos)
#define USB_HOST_PINTSMRY_EPINT3_Pos 3
#define USB_HOST_PINTSMRY_EPINT3 (_U_(1) << USB_HOST_PINTSMRY_EPINT3_Pos)
#define USB_HOST_PINTSMRY_EPINT4_Pos 4
#define USB_HOST_PINTSMRY_EPINT4 (_U_(1) << USB_HOST_PINTSMRY_EPINT4_Pos)
#define USB_HOST_PINTSMRY_EPINT5_Pos 5
#define USB_HOST_PINTSMRY_EPINT5 (_U_(1) << USB_HOST_PINTSMRY_EPINT5_Pos)
#define USB_HOST_PINTSMRY_EPINT6_Pos 6
#define USB_HOST_PINTSMRY_EPINT6 (_U_(1) << USB_HOST_PINTSMRY_EPINT6_Pos)
#define USB_HOST_PINTSMRY_EPINT7_Pos 7
#define USB_HOST_PINTSMRY_EPINT7 (_U_(1) << USB_HOST_PINTSMRY_EPINT7_Pos)
#define USB_HOST_PINTSMRY_EPINT_Pos 0
#define USB_HOST_PINTSMRY_EPINT_Msk (_U_(0xFF) << USB_HOST_PINTSMRY_EPINT_Pos)
#define USB_HOST_PINTSMRY_EPINT(value) (USB_HOST_PINTSMRY_EPINT_Msk & ((value) << USB_HOST_PINTSMRY_EPINT_Pos))
#define USB_HOST_PINTSMRY_MASK _U_(0x00FF)



typedef union {
  struct {
    uint32_t DESCADD:32;
  } bit;
  uint32_t reg;
} USB_DESCADD_Type;


#define USB_DESCADD_OFFSET 0x024
#define USB_DESCADD_RESETVALUE _U_(0x00000000)

#define USB_DESCADD_DESCADD_Pos 0
#define USB_DESCADD_DESCADD_Msk (_U_(0xFFFFFFFF) << USB_DESCADD_DESCADD_Pos)
#define USB_DESCADD_DESCADD(value) (USB_DESCADD_DESCADD_Msk & ((value) << USB_DESCADD_DESCADD_Pos))
#define USB_DESCADD_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint16_t TRANSP:5;
    uint16_t :1;
    uint16_t TRANSN:5;
    uint16_t :1;
    uint16_t TRIM:3;
    uint16_t :1;
  } bit;
  uint16_t reg;
} USB_PADCAL_Type;


#define USB_PADCAL_OFFSET 0x028
#define USB_PADCAL_RESETVALUE _U_(0x0000)

#define USB_PADCAL_TRANSP_Pos 0
#define USB_PADCAL_TRANSP_Msk (_U_(0x1F) << USB_PADCAL_TRANSP_Pos)
#define USB_PADCAL_TRANSP(value) (USB_PADCAL_TRANSP_Msk & ((value) << USB_PADCAL_TRANSP_Pos))
#define USB_PADCAL_TRANSN_Pos 6
#define USB_PADCAL_TRANSN_Msk (_U_(0x1F) << USB_PADCAL_TRANSN_Pos)
#define USB_PADCAL_TRANSN(value) (USB_PADCAL_TRANSN_Msk & ((value) << USB_PADCAL_TRANSN_Pos))
#define USB_PADCAL_TRIM_Pos 12
#define USB_PADCAL_TRIM_Msk (_U_(0x7) << USB_PADCAL_TRIM_Pos)
#define USB_PADCAL_TRIM(value) (USB_PADCAL_TRIM_Msk & ((value) << USB_PADCAL_TRIM_Pos))
#define USB_PADCAL_MASK _U_(0x77DF)



typedef union {
  struct {
    uint8_t EPTYPE0:3;
    uint8_t :1;
    uint8_t EPTYPE1:3;
    uint8_t NYETDIS:1;
  } bit;
  uint8_t reg;
} USB_DEVICE_EPCFG_Type;


#define USB_DEVICE_EPCFG_OFFSET 0x100
#define USB_DEVICE_EPCFG_RESETVALUE _U_(0x00)

#define USB_DEVICE_EPCFG_EPTYPE0_Pos 0
#define USB_DEVICE_EPCFG_EPTYPE0_Msk (_U_(0x7) << USB_DEVICE_EPCFG_EPTYPE0_Pos)
#define USB_DEVICE_EPCFG_EPTYPE0(value) (USB_DEVICE_EPCFG_EPTYPE0_Msk & ((value) << USB_DEVICE_EPCFG_EPTYPE0_Pos))
#define USB_DEVICE_EPCFG_EPTYPE1_Pos 4
#define USB_DEVICE_EPCFG_EPTYPE1_Msk (_U_(0x7) << USB_DEVICE_EPCFG_EPTYPE1_Pos)
#define USB_DEVICE_EPCFG_EPTYPE1(value) (USB_DEVICE_EPCFG_EPTYPE1_Msk & ((value) << USB_DEVICE_EPCFG_EPTYPE1_Pos))
#define USB_DEVICE_EPCFG_NYETDIS_Pos 7
#define USB_DEVICE_EPCFG_NYETDIS (_U_(0x1) << USB_DEVICE_EPCFG_NYETDIS_Pos)
#define USB_DEVICE_EPCFG_MASK _U_(0xF7)



typedef union {
  struct {
    uint8_t PTOKEN:2;
    uint8_t BK:1;
    uint8_t PTYPE:3;
    uint8_t :2;
  } bit;
  uint8_t reg;
} USB_HOST_PCFG_Type;


#define USB_HOST_PCFG_OFFSET 0x100
#define USB_HOST_PCFG_RESETVALUE _U_(0x00)

#define USB_HOST_PCFG_PTOKEN_Pos 0
#define USB_HOST_PCFG_PTOKEN_Msk (_U_(0x3) << USB_HOST_PCFG_PTOKEN_Pos)
#define USB_HOST_PCFG_PTOKEN(value) (USB_HOST_PCFG_PTOKEN_Msk & ((value) << USB_HOST_PCFG_PTOKEN_Pos))
#define USB_HOST_PCFG_BK_Pos 2
#define USB_HOST_PCFG_BK (_U_(0x1) << USB_HOST_PCFG_BK_Pos)
#define USB_HOST_PCFG_PTYPE_Pos 3
#define USB_HOST_PCFG_PTYPE_Msk (_U_(0x7) << USB_HOST_PCFG_PTYPE_Pos)
#define USB_HOST_PCFG_PTYPE(value) (USB_HOST_PCFG_PTYPE_Msk & ((value) << USB_HOST_PCFG_PTYPE_Pos))
#define USB_HOST_PCFG_MASK _U_(0x3F)



typedef union {
  struct {
    uint8_t BITINTERVAL:8;
  } bit;
  uint8_t reg;
} USB_HOST_BINTERVAL_Type;


#define USB_HOST_BINTERVAL_OFFSET 0x103
#define USB_HOST_BINTERVAL_RESETVALUE _U_(0x00)

#define USB_HOST_BINTERVAL_BITINTERVAL_Pos 0
#define USB_HOST_BINTERVAL_BITINTERVAL_Msk (_U_(0xFF) << USB_HOST_BINTERVAL_BITINTERVAL_Pos)
#define USB_HOST_BINTERVAL_BITINTERVAL(value) (USB_HOST_BINTERVAL_BITINTERVAL_Msk & ((value) << USB_HOST_BINTERVAL_BITINTERVAL_Pos))
#define USB_HOST_BINTERVAL_MASK _U_(0xFF)



typedef union {
  struct {
    uint8_t DTGLOUT:1;
    uint8_t DTGLIN:1;
    uint8_t CURBK:1;
    uint8_t :1;
    uint8_t STALLRQ0:1;
    uint8_t STALLRQ1:1;
    uint8_t BK0RDY:1;
    uint8_t BK1RDY:1;
  } bit;
  struct {
    uint8_t :4;
    uint8_t STALLRQ:2;
    uint8_t :2;
  } vec;
  uint8_t reg;
} USB_DEVICE_EPSTATUSCLR_Type;


#define USB_DEVICE_EPSTATUSCLR_OFFSET 0x104
#define USB_DEVICE_EPSTATUSCLR_RESETVALUE _U_(0x00)

#define USB_DEVICE_EPSTATUSCLR_DTGLOUT_Pos 0
#define USB_DEVICE_EPSTATUSCLR_DTGLOUT (_U_(0x1) << USB_DEVICE_EPSTATUSCLR_DTGLOUT_Pos)
#define USB_DEVICE_EPSTATUSCLR_DTGLIN_Pos 1
#define USB_DEVICE_EPSTATUSCLR_DTGLIN (_U_(0x1) << USB_DEVICE_EPSTATUSCLR_DTGLIN_Pos)
#define USB_DEVICE_EPSTATUSCLR_CURBK_Pos 2
#define USB_DEVICE_EPSTATUSCLR_CURBK (_U_(0x1) << USB_DEVICE_EPSTATUSCLR_CURBK_Pos)
#define USB_DEVICE_EPSTATUSCLR_STALLRQ0_Pos 4
#define USB_DEVICE_EPSTATUSCLR_STALLRQ0 (_U_(1) << USB_DEVICE_EPSTATUSCLR_STALLRQ0_Pos)
#define USB_DEVICE_EPSTATUSCLR_STALLRQ1_Pos 5
#define USB_DEVICE_EPSTATUSCLR_STALLRQ1 (_U_(1) << USB_DEVICE_EPSTATUSCLR_STALLRQ1_Pos)
#define USB_DEVICE_EPSTATUSCLR_STALLRQ_Pos 4
#define USB_DEVICE_EPSTATUSCLR_STALLRQ_Msk (_U_(0x3) << USB_DEVICE_EPSTATUSCLR_STALLRQ_Pos)
#define USB_DEVICE_EPSTATUSCLR_STALLRQ(value) (USB_DEVICE_EPSTATUSCLR_STALLRQ_Msk & ((value) << USB_DEVICE_EPSTATUSCLR_STALLRQ_Pos))
#define USB_DEVICE_EPSTATUSCLR_BK0RDY_Pos 6
#define USB_DEVICE_EPSTATUSCLR_BK0RDY (_U_(0x1) << USB_DEVICE_EPSTATUSCLR_BK0RDY_Pos)
#define USB_DEVICE_EPSTATUSCLR_BK1RDY_Pos 7
#define USB_DEVICE_EPSTATUSCLR_BK1RDY (_U_(0x1) << USB_DEVICE_EPSTATUSCLR_BK1RDY_Pos)
#define USB_DEVICE_EPSTATUSCLR_MASK _U_(0xF7)



typedef union {
  struct {
    uint8_t DTGL:1;
    uint8_t :1;
    uint8_t CURBK:1;
    uint8_t :1;
    uint8_t PFREEZE:1;
    uint8_t :1;
    uint8_t BK0RDY:1;
    uint8_t BK1RDY:1;
  } bit;
  uint8_t reg;
} USB_HOST_PSTATUSCLR_Type;


#define USB_HOST_PSTATUSCLR_OFFSET 0x104
#define USB_HOST_PSTATUSCLR_RESETVALUE _U_(0x00)

#define USB_HOST_PSTATUSCLR_DTGL_Pos 0
#define USB_HOST_PSTATUSCLR_DTGL (_U_(0x1) << USB_HOST_PSTATUSCLR_DTGL_Pos)
#define USB_HOST_PSTATUSCLR_CURBK_Pos 2
#define USB_HOST_PSTATUSCLR_CURBK (_U_(0x1) << USB_HOST_PSTATUSCLR_CURBK_Pos)
#define USB_HOST_PSTATUSCLR_PFREEZE_Pos 4
#define USB_HOST_PSTATUSCLR_PFREEZE (_U_(0x1) << USB_HOST_PSTATUSCLR_PFREEZE_Pos)
#define USB_HOST_PSTATUSCLR_BK0RDY_Pos 6
#define USB_HOST_PSTATUSCLR_BK0RDY (_U_(0x1) << USB_HOST_PSTATUSCLR_BK0RDY_Pos)
#define USB_HOST_PSTATUSCLR_BK1RDY_Pos 7
#define USB_HOST_PSTATUSCLR_BK1RDY (_U_(0x1) << USB_HOST_PSTATUSCLR_BK1RDY_Pos)
#define USB_HOST_PSTATUSCLR_MASK _U_(0xD5)



typedef union {
  struct {
    uint8_t DTGLOUT:1;
    uint8_t DTGLIN:1;
    uint8_t CURBK:1;
    uint8_t :1;
    uint8_t STALLRQ0:1;
    uint8_t STALLRQ1:1;
    uint8_t BK0RDY:1;
    uint8_t BK1RDY:1;
  } bit;
  struct {
    uint8_t :4;
    uint8_t STALLRQ:2;
    uint8_t :2;
  } vec;
  uint8_t reg;
} USB_DEVICE_EPSTATUSSET_Type;


#define USB_DEVICE_EPSTATUSSET_OFFSET 0x105
#define USB_DEVICE_EPSTATUSSET_RESETVALUE _U_(0x00)

#define USB_DEVICE_EPSTATUSSET_DTGLOUT_Pos 0
#define USB_DEVICE_EPSTATUSSET_DTGLOUT (_U_(0x1) << USB_DEVICE_EPSTATUSSET_DTGLOUT_Pos)
#define USB_DEVICE_EPSTATUSSET_DTGLIN_Pos 1
#define USB_DEVICE_EPSTATUSSET_DTGLIN (_U_(0x1) << USB_DEVICE_EPSTATUSSET_DTGLIN_Pos)
#define USB_DEVICE_EPSTATUSSET_CURBK_Pos 2
#define USB_DEVICE_EPSTATUSSET_CURBK (_U_(0x1) << USB_DEVICE_EPSTATUSSET_CURBK_Pos)
#define USB_DEVICE_EPSTATUSSET_STALLRQ0_Pos 4
#define USB_DEVICE_EPSTATUSSET_STALLRQ0 (_U_(1) << USB_DEVICE_EPSTATUSSET_STALLRQ0_Pos)
#define USB_DEVICE_EPSTATUSSET_STALLRQ1_Pos 5
#define USB_DEVICE_EPSTATUSSET_STALLRQ1 (_U_(1) << USB_DEVICE_EPSTATUSSET_STALLRQ1_Pos)
#define USB_DEVICE_EPSTATUSSET_STALLRQ_Pos 4
#define USB_DEVICE_EPSTATUSSET_STALLRQ_Msk (_U_(0x3) << USB_DEVICE_EPSTATUSSET_STALLRQ_Pos)
#define USB_DEVICE_EPSTATUSSET_STALLRQ(value) (USB_DEVICE_EPSTATUSSET_STALLRQ_Msk & ((value) << USB_DEVICE_EPSTATUSSET_STALLRQ_Pos))
#define USB_DEVICE_EPSTATUSSET_BK0RDY_Pos 6
#define USB_DEVICE_EPSTATUSSET_BK0RDY (_U_(0x1) << USB_DEVICE_EPSTATUSSET_BK0RDY_Pos)
#define USB_DEVICE_EPSTATUSSET_BK1RDY_Pos 7
#define USB_DEVICE_EPSTATUSSET_BK1RDY (_U_(0x1) << USB_DEVICE_EPSTATUSSET_BK1RDY_Pos)
#define USB_DEVICE_EPSTATUSSET_MASK _U_(0xF7)



typedef union {
  struct {
    uint8_t DTGL:1;
    uint8_t :1;
    uint8_t CURBK:1;
    uint8_t :1;
    uint8_t PFREEZE:1;
    uint8_t :1;
    uint8_t BK0RDY:1;
    uint8_t BK1RDY:1;
  } bit;
  uint8_t reg;
} USB_HOST_PSTATUSSET_Type;


#define USB_HOST_PSTATUSSET_OFFSET 0x105
#define USB_HOST_PSTATUSSET_RESETVALUE _U_(0x00)

#define USB_HOST_PSTATUSSET_DTGL_Pos 0
#define USB_HOST_PSTATUSSET_DTGL (_U_(0x1) << USB_HOST_PSTATUSSET_DTGL_Pos)
#define USB_HOST_PSTATUSSET_CURBK_Pos 2
#define USB_HOST_PSTATUSSET_CURBK (_U_(0x1) << USB_HOST_PSTATUSSET_CURBK_Pos)
#define USB_HOST_PSTATUSSET_PFREEZE_Pos 4
#define USB_HOST_PSTATUSSET_PFREEZE (_U_(0x1) << USB_HOST_PSTATUSSET_PFREEZE_Pos)
#define USB_HOST_PSTATUSSET_BK0RDY_Pos 6
#define USB_HOST_PSTATUSSET_BK0RDY (_U_(0x1) << USB_HOST_PSTATUSSET_BK0RDY_Pos)
#define USB_HOST_PSTATUSSET_BK1RDY_Pos 7
#define USB_HOST_PSTATUSSET_BK1RDY (_U_(0x1) << USB_HOST_PSTATUSSET_BK1RDY_Pos)
#define USB_HOST_PSTATUSSET_MASK _U_(0xD5)



typedef union {
  struct {
    uint8_t DTGLOUT:1;
    uint8_t DTGLIN:1;
    uint8_t CURBK:1;
    uint8_t :1;
    uint8_t STALLRQ0:1;
    uint8_t STALLRQ1:1;
    uint8_t BK0RDY:1;
    uint8_t BK1RDY:1;
  } bit;
  struct {
    uint8_t :4;
    uint8_t STALLRQ:2;
    uint8_t :2;
  } vec;
  uint8_t reg;
} USB_DEVICE_EPSTATUS_Type;


#define USB_DEVICE_EPSTATUS_OFFSET 0x106
#define USB_DEVICE_EPSTATUS_RESETVALUE _U_(0x00)

#define USB_DEVICE_EPSTATUS_DTGLOUT_Pos 0
#define USB_DEVICE_EPSTATUS_DTGLOUT (_U_(0x1) << USB_DEVICE_EPSTATUS_DTGLOUT_Pos)
#define USB_DEVICE_EPSTATUS_DTGLIN_Pos 1
#define USB_DEVICE_EPSTATUS_DTGLIN (_U_(0x1) << USB_DEVICE_EPSTATUS_DTGLIN_Pos)
#define USB_DEVICE_EPSTATUS_CURBK_Pos 2
#define USB_DEVICE_EPSTATUS_CURBK (_U_(0x1) << USB_DEVICE_EPSTATUS_CURBK_Pos)
#define USB_DEVICE_EPSTATUS_STALLRQ0_Pos 4
#define USB_DEVICE_EPSTATUS_STALLRQ0 (_U_(1) << USB_DEVICE_EPSTATUS_STALLRQ0_Pos)
#define USB_DEVICE_EPSTATUS_STALLRQ1_Pos 5
#define USB_DEVICE_EPSTATUS_STALLRQ1 (_U_(1) << USB_DEVICE_EPSTATUS_STALLRQ1_Pos)
#define USB_DEVICE_EPSTATUS_STALLRQ_Pos 4
#define USB_DEVICE_EPSTATUS_STALLRQ_Msk (_U_(0x3) << USB_DEVICE_EPSTATUS_STALLRQ_Pos)
#define USB_DEVICE_EPSTATUS_STALLRQ(value) (USB_DEVICE_EPSTATUS_STALLRQ_Msk & ((value) << USB_DEVICE_EPSTATUS_STALLRQ_Pos))
#define USB_DEVICE_EPSTATUS_BK0RDY_Pos 6
#define USB_DEVICE_EPSTATUS_BK0RDY (_U_(0x1) << USB_DEVICE_EPSTATUS_BK0RDY_Pos)
#define USB_DEVICE_EPSTATUS_BK1RDY_Pos 7
#define USB_DEVICE_EPSTATUS_BK1RDY (_U_(0x1) << USB_DEVICE_EPSTATUS_BK1RDY_Pos)
#define USB_DEVICE_EPSTATUS_MASK _U_(0xF7)



typedef union {
  struct {
    uint8_t DTGL:1;
    uint8_t :1;
    uint8_t CURBK:1;
    uint8_t :1;
    uint8_t PFREEZE:1;
    uint8_t :1;
    uint8_t BK0RDY:1;
    uint8_t BK1RDY:1;
  } bit;
  uint8_t reg;
} USB_HOST_PSTATUS_Type;


#define USB_HOST_PSTATUS_OFFSET 0x106
#define USB_HOST_PSTATUS_RESETVALUE _U_(0x00)

#define USB_HOST_PSTATUS_DTGL_Pos 0
#define USB_HOST_PSTATUS_DTGL (_U_(0x1) << USB_HOST_PSTATUS_DTGL_Pos)
#define USB_HOST_PSTATUS_CURBK_Pos 2
#define USB_HOST_PSTATUS_CURBK (_U_(0x1) << USB_HOST_PSTATUS_CURBK_Pos)
#define USB_HOST_PSTATUS_PFREEZE_Pos 4
#define USB_HOST_PSTATUS_PFREEZE (_U_(0x1) << USB_HOST_PSTATUS_PFREEZE_Pos)
#define USB_HOST_PSTATUS_BK0RDY_Pos 6
#define USB_HOST_PSTATUS_BK0RDY (_U_(0x1) << USB_HOST_PSTATUS_BK0RDY_Pos)
#define USB_HOST_PSTATUS_BK1RDY_Pos 7
#define USB_HOST_PSTATUS_BK1RDY (_U_(0x1) << USB_HOST_PSTATUS_BK1RDY_Pos)
#define USB_HOST_PSTATUS_MASK _U_(0xD5)



typedef union {
  struct {
    volatile const uint8_t TRCPT0:1;
    volatile const uint8_t TRCPT1:1;
    volatile const uint8_t TRFAIL0:1;
    volatile const uint8_t TRFAIL1:1;
    volatile const uint8_t RXSTP:1;
    volatile const uint8_t STALL0:1;
    volatile const uint8_t STALL1:1;
    volatile const uint8_t :1;
  } bit;
  struct {
    volatile const uint8_t TRCPT:2;
    volatile const uint8_t TRFAIL:2;
    volatile const uint8_t :1;
    volatile const uint8_t STALL:2;
    volatile const uint8_t :1;
  } vec;
  uint8_t reg;
} USB_DEVICE_EPINTFLAG_Type;


#define USB_DEVICE_EPINTFLAG_OFFSET 0x107
#define USB_DEVICE_EPINTFLAG_RESETVALUE _U_(0x00)

#define USB_DEVICE_EPINTFLAG_TRCPT0_Pos 0
#define USB_DEVICE_EPINTFLAG_TRCPT0 (_U_(1) << USB_DEVICE_EPINTFLAG_TRCPT0_Pos)
#define USB_DEVICE_EPINTFLAG_TRCPT1_Pos 1
#define USB_DEVICE_EPINTFLAG_TRCPT1 (_U_(1) << USB_DEVICE_EPINTFLAG_TRCPT1_Pos)
#define USB_DEVICE_EPINTFLAG_TRCPT_Pos 0
#define USB_DEVICE_EPINTFLAG_TRCPT_Msk (_U_(0x3) << USB_DEVICE_EPINTFLAG_TRCPT_Pos)
#define USB_DEVICE_EPINTFLAG_TRCPT(value) (USB_DEVICE_EPINTFLAG_TRCPT_Msk & ((value) << USB_DEVICE_EPINTFLAG_TRCPT_Pos))
#define USB_DEVICE_EPINTFLAG_TRFAIL0_Pos 2
#define USB_DEVICE_EPINTFLAG_TRFAIL0 (_U_(1) << USB_DEVICE_EPINTFLAG_TRFAIL0_Pos)
#define USB_DEVICE_EPINTFLAG_TRFAIL1_Pos 3
#define USB_DEVICE_EPINTFLAG_TRFAIL1 (_U_(1) << USB_DEVICE_EPINTFLAG_TRFAIL1_Pos)
#define USB_DEVICE_EPINTFLAG_TRFAIL_Pos 2
#define USB_DEVICE_EPINTFLAG_TRFAIL_Msk (_U_(0x3) << USB_DEVICE_EPINTFLAG_TRFAIL_Pos)
#define USB_DEVICE_EPINTFLAG_TRFAIL(value) (USB_DEVICE_EPINTFLAG_TRFAIL_Msk & ((value) << USB_DEVICE_EPINTFLAG_TRFAIL_Pos))
#define USB_DEVICE_EPINTFLAG_RXSTP_Pos 4
#define USB_DEVICE_EPINTFLAG_RXSTP (_U_(0x1) << USB_DEVICE_EPINTFLAG_RXSTP_Pos)
#define USB_DEVICE_EPINTFLAG_STALL0_Pos 5
#define USB_DEVICE_EPINTFLAG_STALL0 (_U_(1) << USB_DEVICE_EPINTFLAG_STALL0_Pos)
#define USB_DEVICE_EPINTFLAG_STALL1_Pos 6
#define USB_DEVICE_EPINTFLAG_STALL1 (_U_(1) << USB_DEVICE_EPINTFLAG_STALL1_Pos)
#define USB_DEVICE_EPINTFLAG_STALL_Pos 5
#define USB_DEVICE_EPINTFLAG_STALL_Msk (_U_(0x3) << USB_DEVICE_EPINTFLAG_STALL_Pos)
#define USB_DEVICE_EPINTFLAG_STALL(value) (USB_DEVICE_EPINTFLAG_STALL_Msk & ((value) << USB_DEVICE_EPINTFLAG_STALL_Pos))
#define USB_DEVICE_EPINTFLAG_MASK _U_(0x7F)



typedef union {
  struct {
    volatile const uint8_t TRCPT0:1;
    volatile const uint8_t TRCPT1:1;
    volatile const uint8_t TRFAIL:1;
    volatile const uint8_t PERR:1;
    volatile const uint8_t TXSTP:1;
    volatile const uint8_t STALL:1;
    volatile const uint8_t :2;
  } bit;
  struct {
    volatile const uint8_t TRCPT:2;
    volatile const uint8_t :6;
  } vec;
  uint8_t reg;
} USB_HOST_PINTFLAG_Type;


#define USB_HOST_PINTFLAG_OFFSET 0x107
#define USB_HOST_PINTFLAG_RESETVALUE _U_(0x00)

#define USB_HOST_PINTFLAG_TRCPT0_Pos 0
#define USB_HOST_PINTFLAG_TRCPT0 (_U_(1) << USB_HOST_PINTFLAG_TRCPT0_Pos)
#define USB_HOST_PINTFLAG_TRCPT1_Pos 1
#define USB_HOST_PINTFLAG_TRCPT1 (_U_(1) << USB_HOST_PINTFLAG_TRCPT1_Pos)
#define USB_HOST_PINTFLAG_TRCPT_Pos 0
#define USB_HOST_PINTFLAG_TRCPT_Msk (_U_(0x3) << USB_HOST_PINTFLAG_TRCPT_Pos)
#define USB_HOST_PINTFLAG_TRCPT(value) (USB_HOST_PINTFLAG_TRCPT_Msk & ((value) << USB_HOST_PINTFLAG_TRCPT_Pos))
#define USB_HOST_PINTFLAG_TRFAIL_Pos 2
#define USB_HOST_PINTFLAG_TRFAIL (_U_(0x1) << USB_HOST_PINTFLAG_TRFAIL_Pos)
#define USB_HOST_PINTFLAG_PERR_Pos 3
#define USB_HOST_PINTFLAG_PERR (_U_(0x1) << USB_HOST_PINTFLAG_PERR_Pos)
#define USB_HOST_PINTFLAG_TXSTP_Pos 4
#define USB_HOST_PINTFLAG_TXSTP (_U_(0x1) << USB_HOST_PINTFLAG_TXSTP_Pos)
#define USB_HOST_PINTFLAG_STALL_Pos 5
#define USB_HOST_PINTFLAG_STALL (_U_(0x1) << USB_HOST_PINTFLAG_STALL_Pos)
#define USB_HOST_PINTFLAG_MASK _U_(0x3F)



typedef union {
  struct {
    uint8_t TRCPT0:1;
    uint8_t TRCPT1:1;
    uint8_t TRFAIL0:1;
    uint8_t TRFAIL1:1;
    uint8_t RXSTP:1;
    uint8_t STALL0:1;
    uint8_t STALL1:1;
    uint8_t :1;
  } bit;
  struct {
    uint8_t TRCPT:2;
    uint8_t TRFAIL:2;
    uint8_t :1;
    uint8_t STALL:2;
    uint8_t :1;
  } vec;
  uint8_t reg;
} USB_DEVICE_EPINTENCLR_Type;


#define USB_DEVICE_EPINTENCLR_OFFSET 0x108
#define USB_DEVICE_EPINTENCLR_RESETVALUE _U_(0x00)

#define USB_DEVICE_EPINTENCLR_TRCPT0_Pos 0
#define USB_DEVICE_EPINTENCLR_TRCPT0 (_U_(1) << USB_DEVICE_EPINTENCLR_TRCPT0_Pos)
#define USB_DEVICE_EPINTENCLR_TRCPT1_Pos 1
#define USB_DEVICE_EPINTENCLR_TRCPT1 (_U_(1) << USB_DEVICE_EPINTENCLR_TRCPT1_Pos)
#define USB_DEVICE_EPINTENCLR_TRCPT_Pos 0
#define USB_DEVICE_EPINTENCLR_TRCPT_Msk (_U_(0x3) << USB_DEVICE_EPINTENCLR_TRCPT_Pos)
#define USB_DEVICE_EPINTENCLR_TRCPT(value) (USB_DEVICE_EPINTENCLR_TRCPT_Msk & ((value) << USB_DEVICE_EPINTENCLR_TRCPT_Pos))
#define USB_DEVICE_EPINTENCLR_TRFAIL0_Pos 2
#define USB_DEVICE_EPINTENCLR_TRFAIL0 (_U_(1) << USB_DEVICE_EPINTENCLR_TRFAIL0_Pos)
#define USB_DEVICE_EPINTENCLR_TRFAIL1_Pos 3
#define USB_DEVICE_EPINTENCLR_TRFAIL1 (_U_(1) << USB_DEVICE_EPINTENCLR_TRFAIL1_Pos)
#define USB_DEVICE_EPINTENCLR_TRFAIL_Pos 2
#define USB_DEVICE_EPINTENCLR_TRFAIL_Msk (_U_(0x3) << USB_DEVICE_EPINTENCLR_TRFAIL_Pos)
#define USB_DEVICE_EPINTENCLR_TRFAIL(value) (USB_DEVICE_EPINTENCLR_TRFAIL_Msk & ((value) << USB_DEVICE_EPINTENCLR_TRFAIL_Pos))
#define USB_DEVICE_EPINTENCLR_RXSTP_Pos 4
#define USB_DEVICE_EPINTENCLR_RXSTP (_U_(0x1) << USB_DEVICE_EPINTENCLR_RXSTP_Pos)
#define USB_DEVICE_EPINTENCLR_STALL0_Pos 5
#define USB_DEVICE_EPINTENCLR_STALL0 (_U_(1) << USB_DEVICE_EPINTENCLR_STALL0_Pos)
#define USB_DEVICE_EPINTENCLR_STALL1_Pos 6
#define USB_DEVICE_EPINTENCLR_STALL1 (_U_(1) << USB_DEVICE_EPINTENCLR_STALL1_Pos)
#define USB_DEVICE_EPINTENCLR_STALL_Pos 5
#define USB_DEVICE_EPINTENCLR_STALL_Msk (_U_(0x3) << USB_DEVICE_EPINTENCLR_STALL_Pos)
#define USB_DEVICE_EPINTENCLR_STALL(value) (USB_DEVICE_EPINTENCLR_STALL_Msk & ((value) << USB_DEVICE_EPINTENCLR_STALL_Pos))
#define USB_DEVICE_EPINTENCLR_MASK _U_(0x7F)



typedef union {
  struct {
    uint8_t TRCPT0:1;
    uint8_t TRCPT1:1;
    uint8_t TRFAIL:1;
    uint8_t PERR:1;
    uint8_t TXSTP:1;
    uint8_t STALL:1;
    uint8_t :2;
  } bit;
  struct {
    uint8_t TRCPT:2;
    uint8_t :6;
  } vec;
  uint8_t reg;
} USB_HOST_PINTENCLR_Type;


#define USB_HOST_PINTENCLR_OFFSET 0x108
#define USB_HOST_PINTENCLR_RESETVALUE _U_(0x00)

#define USB_HOST_PINTENCLR_TRCPT0_Pos 0
#define USB_HOST_PINTENCLR_TRCPT0 (_U_(1) << USB_HOST_PINTENCLR_TRCPT0_Pos)
#define USB_HOST_PINTENCLR_TRCPT1_Pos 1
#define USB_HOST_PINTENCLR_TRCPT1 (_U_(1) << USB_HOST_PINTENCLR_TRCPT1_Pos)
#define USB_HOST_PINTENCLR_TRCPT_Pos 0
#define USB_HOST_PINTENCLR_TRCPT_Msk (_U_(0x3) << USB_HOST_PINTENCLR_TRCPT_Pos)
#define USB_HOST_PINTENCLR_TRCPT(value) (USB_HOST_PINTENCLR_TRCPT_Msk & ((value) << USB_HOST_PINTENCLR_TRCPT_Pos))
#define USB_HOST_PINTENCLR_TRFAIL_Pos 2
#define USB_HOST_PINTENCLR_TRFAIL (_U_(0x1) << USB_HOST_PINTENCLR_TRFAIL_Pos)
#define USB_HOST_PINTENCLR_PERR_Pos 3
#define USB_HOST_PINTENCLR_PERR (_U_(0x1) << USB_HOST_PINTENCLR_PERR_Pos)
#define USB_HOST_PINTENCLR_TXSTP_Pos 4
#define USB_HOST_PINTENCLR_TXSTP (_U_(0x1) << USB_HOST_PINTENCLR_TXSTP_Pos)
#define USB_HOST_PINTENCLR_STALL_Pos 5
#define USB_HOST_PINTENCLR_STALL (_U_(0x1) << USB_HOST_PINTENCLR_STALL_Pos)
#define USB_HOST_PINTENCLR_MASK _U_(0x3F)



typedef union {
  struct {
    uint8_t TRCPT0:1;
    uint8_t TRCPT1:1;
    uint8_t TRFAIL0:1;
    uint8_t TRFAIL1:1;
    uint8_t RXSTP:1;
    uint8_t STALL0:1;
    uint8_t STALL1:1;
    uint8_t :1;
  } bit;
  struct {
    uint8_t TRCPT:2;
    uint8_t TRFAIL:2;
    uint8_t :1;
    uint8_t STALL:2;
    uint8_t :1;
  } vec;
  uint8_t reg;
} USB_DEVICE_EPINTENSET_Type;


#define USB_DEVICE_EPINTENSET_OFFSET 0x109
#define USB_DEVICE_EPINTENSET_RESETVALUE _U_(0x00)

#define USB_DEVICE_EPINTENSET_TRCPT0_Pos 0
#define USB_DEVICE_EPINTENSET_TRCPT0 (_U_(1) << USB_DEVICE_EPINTENSET_TRCPT0_Pos)
#define USB_DEVICE_EPINTENSET_TRCPT1_Pos 1
#define USB_DEVICE_EPINTENSET_TRCPT1 (_U_(1) << USB_DEVICE_EPINTENSET_TRCPT1_Pos)
#define USB_DEVICE_EPINTENSET_TRCPT_Pos 0
#define USB_DEVICE_EPINTENSET_TRCPT_Msk (_U_(0x3) << USB_DEVICE_EPINTENSET_TRCPT_Pos)
#define USB_DEVICE_EPINTENSET_TRCPT(value) (USB_DEVICE_EPINTENSET_TRCPT_Msk & ((value) << USB_DEVICE_EPINTENSET_TRCPT_Pos))
#define USB_DEVICE_EPINTENSET_TRFAIL0_Pos 2
#define USB_DEVICE_EPINTENSET_TRFAIL0 (_U_(1) << USB_DEVICE_EPINTENSET_TRFAIL0_Pos)
#define USB_DEVICE_EPINTENSET_TRFAIL1_Pos 3
#define USB_DEVICE_EPINTENSET_TRFAIL1 (_U_(1) << USB_DEVICE_EPINTENSET_TRFAIL1_Pos)
#define USB_DEVICE_EPINTENSET_TRFAIL_Pos 2
#define USB_DEVICE_EPINTENSET_TRFAIL_Msk (_U_(0x3) << USB_DEVICE_EPINTENSET_TRFAIL_Pos)
#define USB_DEVICE_EPINTENSET_TRFAIL(value) (USB_DEVICE_EPINTENSET_TRFAIL_Msk & ((value) << USB_DEVICE_EPINTENSET_TRFAIL_Pos))
#define USB_DEVICE_EPINTENSET_RXSTP_Pos 4
#define USB_DEVICE_EPINTENSET_RXSTP (_U_(0x1) << USB_DEVICE_EPINTENSET_RXSTP_Pos)
#define USB_DEVICE_EPINTENSET_STALL0_Pos 5
#define USB_DEVICE_EPINTENSET_STALL0 (_U_(1) << USB_DEVICE_EPINTENSET_STALL0_Pos)
#define USB_DEVICE_EPINTENSET_STALL1_Pos 6
#define USB_DEVICE_EPINTENSET_STALL1 (_U_(1) << USB_DEVICE_EPINTENSET_STALL1_Pos)
#define USB_DEVICE_EPINTENSET_STALL_Pos 5
#define USB_DEVICE_EPINTENSET_STALL_Msk (_U_(0x3) << USB_DEVICE_EPINTENSET_STALL_Pos)
#define USB_DEVICE_EPINTENSET_STALL(value) (USB_DEVICE_EPINTENSET_STALL_Msk & ((value) << USB_DEVICE_EPINTENSET_STALL_Pos))
#define USB_DEVICE_EPINTENSET_MASK _U_(0x7F)



typedef union {
  struct {
    uint8_t TRCPT0:1;
    uint8_t TRCPT1:1;
    uint8_t TRFAIL:1;
    uint8_t PERR:1;
    uint8_t TXSTP:1;
    uint8_t STALL:1;
    uint8_t :2;
  } bit;
  struct {
    uint8_t TRCPT:2;
    uint8_t :6;
  } vec;
  uint8_t reg;
} USB_HOST_PINTENSET_Type;


#define USB_HOST_PINTENSET_OFFSET 0x109
#define USB_HOST_PINTENSET_RESETVALUE _U_(0x00)

#define USB_HOST_PINTENSET_TRCPT0_Pos 0
#define USB_HOST_PINTENSET_TRCPT0 (_U_(1) << USB_HOST_PINTENSET_TRCPT0_Pos)
#define USB_HOST_PINTENSET_TRCPT1_Pos 1
#define USB_HOST_PINTENSET_TRCPT1 (_U_(1) << USB_HOST_PINTENSET_TRCPT1_Pos)
#define USB_HOST_PINTENSET_TRCPT_Pos 0
#define USB_HOST_PINTENSET_TRCPT_Msk (_U_(0x3) << USB_HOST_PINTENSET_TRCPT_Pos)
#define USB_HOST_PINTENSET_TRCPT(value) (USB_HOST_PINTENSET_TRCPT_Msk & ((value) << USB_HOST_PINTENSET_TRCPT_Pos))
#define USB_HOST_PINTENSET_TRFAIL_Pos 2
#define USB_HOST_PINTENSET_TRFAIL (_U_(0x1) << USB_HOST_PINTENSET_TRFAIL_Pos)
#define USB_HOST_PINTENSET_PERR_Pos 3
#define USB_HOST_PINTENSET_PERR (_U_(0x1) << USB_HOST_PINTENSET_PERR_Pos)
#define USB_HOST_PINTENSET_TXSTP_Pos 4
#define USB_HOST_PINTENSET_TXSTP (_U_(0x1) << USB_HOST_PINTENSET_TXSTP_Pos)
#define USB_HOST_PINTENSET_STALL_Pos 5
#define USB_HOST_PINTENSET_STALL (_U_(0x1) << USB_HOST_PINTENSET_STALL_Pos)
#define USB_HOST_PINTENSET_MASK _U_(0x3F)



typedef union {
  struct {
    uint32_t ADDR:32;
  } bit;
  uint32_t reg;
} USB_DEVICE_ADDR_Type;


#define USB_DEVICE_ADDR_OFFSET 0x000

#define USB_DEVICE_ADDR_ADDR_Pos 0
#define USB_DEVICE_ADDR_ADDR_Msk (_U_(0xFFFFFFFF) << USB_DEVICE_ADDR_ADDR_Pos)
#define USB_DEVICE_ADDR_ADDR(value) (USB_DEVICE_ADDR_ADDR_Msk & ((value) << USB_DEVICE_ADDR_ADDR_Pos))
#define USB_DEVICE_ADDR_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t ADDR:32;
  } bit;
  uint32_t reg;
} USB_HOST_ADDR_Type;


#define USB_HOST_ADDR_OFFSET 0x000

#define USB_HOST_ADDR_ADDR_Pos 0
#define USB_HOST_ADDR_ADDR_Msk (_U_(0xFFFFFFFF) << USB_HOST_ADDR_ADDR_Pos)
#define USB_HOST_ADDR_ADDR(value) (USB_HOST_ADDR_ADDR_Msk & ((value) << USB_HOST_ADDR_ADDR_Pos))
#define USB_HOST_ADDR_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t BYTE_COUNT:14;
    uint32_t MULTI_PACKET_SIZE:14;
    uint32_t SIZE:3;
    uint32_t AUTO_ZLP:1;
  } bit;
  uint32_t reg;
} USB_DEVICE_PCKSIZE_Type;


#define USB_DEVICE_PCKSIZE_OFFSET 0x004

#define USB_DEVICE_PCKSIZE_BYTE_COUNT_Pos 0
#define USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk (_U_(0x3FFF) << USB_DEVICE_PCKSIZE_BYTE_COUNT_Pos)
#define USB_DEVICE_PCKSIZE_BYTE_COUNT(value) (USB_DEVICE_PCKSIZE_BYTE_COUNT_Msk & ((value) << USB_DEVICE_PCKSIZE_BYTE_COUNT_Pos))
#define USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Pos 14
#define USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk (_U_(0x3FFF) << USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Pos)
#define USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(value) (USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Msk & ((value) << USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE_Pos))
#define USB_DEVICE_PCKSIZE_SIZE_Pos 28
#define USB_DEVICE_PCKSIZE_SIZE_Msk (_U_(0x7) << USB_DEVICE_PCKSIZE_SIZE_Pos)
#define USB_DEVICE_PCKSIZE_SIZE(value) (USB_DEVICE_PCKSIZE_SIZE_Msk & ((value) << USB_DEVICE_PCKSIZE_SIZE_Pos))
#define USB_DEVICE_PCKSIZE_AUTO_ZLP_Pos 31
#define USB_DEVICE_PCKSIZE_AUTO_ZLP (_U_(0x1) << USB_DEVICE_PCKSIZE_AUTO_ZLP_Pos)
#define USB_DEVICE_PCKSIZE_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint32_t BYTE_COUNT:14;
    uint32_t MULTI_PACKET_SIZE:14;
    uint32_t SIZE:3;
    uint32_t AUTO_ZLP:1;
  } bit;
  uint32_t reg;
} USB_HOST_PCKSIZE_Type;


#define USB_HOST_PCKSIZE_OFFSET 0x004

#define USB_HOST_PCKSIZE_BYTE_COUNT_Pos 0
#define USB_HOST_PCKSIZE_BYTE_COUNT_Msk (_U_(0x3FFF) << USB_HOST_PCKSIZE_BYTE_COUNT_Pos)
#define USB_HOST_PCKSIZE_BYTE_COUNT(value) (USB_HOST_PCKSIZE_BYTE_COUNT_Msk & ((value) << USB_HOST_PCKSIZE_BYTE_COUNT_Pos))
#define USB_HOST_PCKSIZE_MULTI_PACKET_SIZE_Pos 14
#define USB_HOST_PCKSIZE_MULTI_PACKET_SIZE_Msk (_U_(0x3FFF) << USB_HOST_PCKSIZE_MULTI_PACKET_SIZE_Pos)
#define USB_HOST_PCKSIZE_MULTI_PACKET_SIZE(value) (USB_HOST_PCKSIZE_MULTI_PACKET_SIZE_Msk & ((value) << USB_HOST_PCKSIZE_MULTI_PACKET_SIZE_Pos))
#define USB_HOST_PCKSIZE_SIZE_Pos 28
#define USB_HOST_PCKSIZE_SIZE_Msk (_U_(0x7) << USB_HOST_PCKSIZE_SIZE_Pos)
#define USB_HOST_PCKSIZE_SIZE(value) (USB_HOST_PCKSIZE_SIZE_Msk & ((value) << USB_HOST_PCKSIZE_SIZE_Pos))
#define USB_HOST_PCKSIZE_AUTO_ZLP_Pos 31
#define USB_HOST_PCKSIZE_AUTO_ZLP (_U_(0x1) << USB_HOST_PCKSIZE_AUTO_ZLP_Pos)
#define USB_HOST_PCKSIZE_MASK _U_(0xFFFFFFFF)



typedef union {
  struct {
    uint16_t SUBPID:4;
    uint16_t VARIABLE:11;
    uint16_t :1;
  } bit;
  uint16_t reg;
} USB_DEVICE_EXTREG_Type;


#define USB_DEVICE_EXTREG_OFFSET 0x008

#define USB_DEVICE_EXTREG_SUBPID_Pos 0
#define USB_DEVICE_EXTREG_SUBPID_Msk (_U_(0xF) << USB_DEVICE_EXTREG_SUBPID_Pos)
#define USB_DEVICE_EXTREG_SUBPID(value) (USB_DEVICE_EXTREG_SUBPID_Msk & ((value) << USB_DEVICE_EXTREG_SUBPID_Pos))
#define USB_DEVICE_EXTREG_VARIABLE_Pos 4
#define USB_DEVICE_EXTREG_VARIABLE_Msk (_U_(0x7FF) << USB_DEVICE_EXTREG_VARIABLE_Pos)
#define USB_DEVICE_EXTREG_VARIABLE(value) (USB_DEVICE_EXTREG_VARIABLE_Msk & ((value) << USB_DEVICE_EXTREG_VARIABLE_Pos))
#define USB_DEVICE_EXTREG_MASK _U_(0x7FFF)



typedef union {
  struct {
    uint16_t SUBPID:4;
    uint16_t VARIABLE:11;
    uint16_t :1;
  } bit;
  uint16_t reg;
} USB_HOST_EXTREG_Type;


#define USB_HOST_EXTREG_OFFSET 0x008

#define USB_HOST_EXTREG_SUBPID_Pos 0
#define USB_HOST_EXTREG_SUBPID_Msk (_U_(0xF) << USB_HOST_EXTREG_SUBPID_Pos)
#define USB_HOST_EXTREG_SUBPID(value) (USB_HOST_EXTREG_SUBPID_Msk & ((value) << USB_HOST_EXTREG_SUBPID_Pos))
#define USB_HOST_EXTREG_VARIABLE_Pos 4
#define USB_HOST_EXTREG_VARIABLE_Msk (_U_(0x7FF) << USB_HOST_EXTREG_VARIABLE_Pos)
#define USB_HOST_EXTREG_VARIABLE(value) (USB_HOST_EXTREG_VARIABLE_Msk & ((value) << USB_HOST_EXTREG_VARIABLE_Pos))
#define USB_HOST_EXTREG_MASK _U_(0x7FFF)



typedef union {
  struct {
    uint8_t CRCERR:1;
    uint8_t ERRORFLOW:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} USB_DEVICE_STATUS_BK_Type;


#define USB_DEVICE_STATUS_BK_OFFSET 0x00A

#define USB_DEVICE_STATUS_BK_CRCERR_Pos 0
#define USB_DEVICE_STATUS_BK_CRCERR (_U_(0x1) << USB_DEVICE_STATUS_BK_CRCERR_Pos)
#define USB_DEVICE_STATUS_BK_ERRORFLOW_Pos 1
#define USB_DEVICE_STATUS_BK_ERRORFLOW (_U_(0x1) << USB_DEVICE_STATUS_BK_ERRORFLOW_Pos)
#define USB_DEVICE_STATUS_BK_MASK _U_(0x03)



typedef union {
  struct {
    uint8_t CRCERR:1;
    uint8_t ERRORFLOW:1;
    uint8_t :6;
  } bit;
  uint8_t reg;
} USB_HOST_STATUS_BK_Type;


#define USB_HOST_STATUS_BK_OFFSET 0x00A

#define USB_HOST_STATUS_BK_CRCERR_Pos 0
#define USB_HOST_STATUS_BK_CRCERR (_U_(0x1) << USB_HOST_STATUS_BK_CRCERR_Pos)
#define USB_HOST_STATUS_BK_ERRORFLOW_Pos 1
#define USB_HOST_STATUS_BK_ERRORFLOW (_U_(0x1) << USB_HOST_STATUS_BK_ERRORFLOW_Pos)
#define USB_HOST_STATUS_BK_MASK _U_(0x03)



typedef union {
  struct {
    uint16_t PDADDR:7;
    uint16_t :1;
    uint16_t PEPNUM:4;
    uint16_t PERMAX:4;
  } bit;
  uint16_t reg;
} USB_HOST_CTRL_PIPE_Type;


#define USB_HOST_CTRL_PIPE_OFFSET 0x00C
#define USB_HOST_CTRL_PIPE_RESETVALUE _U_(0x0000)

#define USB_HOST_CTRL_PIPE_PDADDR_Pos 0
#define USB_HOST_CTRL_PIPE_PDADDR_Msk (_U_(0x7F) << USB_HOST_CTRL_PIPE_PDADDR_Pos)
#define USB_HOST_CTRL_PIPE_PDADDR(value) (USB_HOST_CTRL_PIPE_PDADDR_Msk & ((value) << USB_HOST_CTRL_PIPE_PDADDR_Pos))
#define USB_HOST_CTRL_PIPE_PEPNUM_Pos 8
#define USB_HOST_CTRL_PIPE_PEPNUM_Msk (_U_(0xF) << USB_HOST_CTRL_PIPE_PEPNUM_Pos)
#define USB_HOST_CTRL_PIPE_PEPNUM(value) (USB_HOST_CTRL_PIPE_PEPNUM_Msk & ((value) << USB_HOST_CTRL_PIPE_PEPNUM_Pos))
#define USB_HOST_CTRL_PIPE_PERMAX_Pos 12
#define USB_HOST_CTRL_PIPE_PERMAX_Msk (_U_(0xF) << USB_HOST_CTRL_PIPE_PERMAX_Pos)
#define USB_HOST_CTRL_PIPE_PERMAX(value) (USB_HOST_CTRL_PIPE_PERMAX_Msk & ((value) << USB_HOST_CTRL_PIPE_PERMAX_Pos))
#define USB_HOST_CTRL_PIPE_MASK _U_(0xFF7F)



typedef union {
  struct {
    uint16_t DTGLER:1;
    uint16_t DAPIDER:1;
    uint16_t PIDER:1;
    uint16_t TOUTER:1;
    uint16_t CRC16ER:1;
    uint16_t ERCNT:3;
    uint16_t :8;
  } bit;
  uint16_t reg;
} USB_HOST_STATUS_PIPE_Type;


#define USB_HOST_STATUS_PIPE_OFFSET 0x00E

#define USB_HOST_STATUS_PIPE_DTGLER_Pos 0
#define USB_HOST_STATUS_PIPE_DTGLER (_U_(0x1) << USB_HOST_STATUS_PIPE_DTGLER_Pos)
#define USB_HOST_STATUS_PIPE_DAPIDER_Pos 1
#define USB_HOST_STATUS_PIPE_DAPIDER (_U_(0x1) << USB_HOST_STATUS_PIPE_DAPIDER_Pos)
#define USB_HOST_STATUS_PIPE_PIDER_Pos 2
#define USB_HOST_STATUS_PIPE_PIDER (_U_(0x1) << USB_HOST_STATUS_PIPE_PIDER_Pos)
#define USB_HOST_STATUS_PIPE_TOUTER_Pos 3
#define USB_HOST_STATUS_PIPE_TOUTER (_U_(0x1) << USB_HOST_STATUS_PIPE_TOUTER_Pos)
#define USB_HOST_STATUS_PIPE_CRC16ER_Pos 4
#define USB_HOST_STATUS_PIPE_CRC16ER (_U_(0x1) << USB_HOST_STATUS_PIPE_CRC16ER_Pos)
#define USB_HOST_STATUS_PIPE_ERCNT_Pos 5
#define USB_HOST_STATUS_PIPE_ERCNT_Msk (_U_(0x7) << USB_HOST_STATUS_PIPE_ERCNT_Pos)
#define USB_HOST_STATUS_PIPE_ERCNT(value) (USB_HOST_STATUS_PIPE_ERCNT_Msk & ((value) << USB_HOST_STATUS_PIPE_ERCNT_Pos))
#define USB_HOST_STATUS_PIPE_MASK _U_(0x00FF)



typedef struct {
  volatile USB_DEVICE_ADDR_Type ADDR;
  volatile USB_DEVICE_PCKSIZE_Type PCKSIZE;
  volatile USB_DEVICE_EXTREG_Type EXTREG;
  volatile USB_DEVICE_STATUS_BK_Type STATUS_BK;
       RoReg8 Reserved1[0x5];
} UsbDeviceDescBank;




typedef struct {
  volatile USB_HOST_ADDR_Type ADDR;
  volatile USB_HOST_PCKSIZE_Type PCKSIZE;
  volatile USB_HOST_EXTREG_Type EXTREG;
  volatile USB_HOST_STATUS_BK_Type STATUS_BK;
       RoReg8 Reserved1[0x1];
  volatile USB_HOST_CTRL_PIPE_Type CTRL_PIPE;
  volatile USB_HOST_STATUS_PIPE_Type STATUS_PIPE;
} UsbHostDescBank;




typedef struct {
  volatile USB_DEVICE_EPCFG_Type EPCFG;
       RoReg8 Reserved1[0x3];
  volatile USB_DEVICE_EPSTATUSCLR_Type EPSTATUSCLR;
  volatile USB_DEVICE_EPSTATUSSET_Type EPSTATUSSET;
  volatile const USB_DEVICE_EPSTATUS_Type EPSTATUS;
  volatile USB_DEVICE_EPINTFLAG_Type EPINTFLAG;
  volatile USB_DEVICE_EPINTENCLR_Type EPINTENCLR;
  volatile USB_DEVICE_EPINTENSET_Type EPINTENSET;
       RoReg8 Reserved2[0x16];
} UsbDeviceEndpoint;




typedef struct {
  volatile USB_HOST_PCFG_Type PCFG;
       RoReg8 Reserved1[0x2];
  volatile USB_HOST_BINTERVAL_Type BINTERVAL;
  volatile USB_HOST_PSTATUSCLR_Type PSTATUSCLR;
  volatile USB_HOST_PSTATUSSET_Type PSTATUSSET;
  volatile const USB_HOST_PSTATUS_Type PSTATUS;
  volatile USB_HOST_PINTFLAG_Type PINTFLAG;
  volatile USB_HOST_PINTENCLR_Type PINTENCLR;
  volatile USB_HOST_PINTENSET_Type PINTENSET;
       RoReg8 Reserved2[0x16];
} UsbHostPipe;




typedef struct {
  volatile USB_CTRLA_Type CTRLA;
       RoReg8 Reserved1[0x1];
  volatile const USB_SYNCBUSY_Type SYNCBUSY;
  volatile USB_QOSCTRL_Type QOSCTRL;
       RoReg8 Reserved2[0x4];
  volatile USB_DEVICE_CTRLB_Type CTRLB;
  volatile USB_DEVICE_DADD_Type DADD;
       RoReg8 Reserved3[0x1];
  volatile const USB_DEVICE_STATUS_Type STATUS;
  volatile const USB_FSMSTATUS_Type FSMSTATUS;
       RoReg8 Reserved4[0x2];
  volatile const USB_DEVICE_FNUM_Type FNUM;
       RoReg8 Reserved5[0x2];
  volatile USB_DEVICE_INTENCLR_Type INTENCLR;
       RoReg8 Reserved6[0x2];
  volatile USB_DEVICE_INTENSET_Type INTENSET;
       RoReg8 Reserved7[0x2];
  volatile USB_DEVICE_INTFLAG_Type INTFLAG;
       RoReg8 Reserved8[0x2];
  volatile const USB_DEVICE_EPINTSMRY_Type EPINTSMRY;
       RoReg8 Reserved9[0x2];
  volatile USB_DESCADD_Type DESCADD;
  volatile USB_PADCAL_Type PADCAL;
       RoReg8 Reserved10[0xD6];
       UsbDeviceEndpoint DeviceEndpoint[8];
} UsbDevice;




typedef struct {
  volatile USB_CTRLA_Type CTRLA;
       RoReg8 Reserved1[0x1];
  volatile const USB_SYNCBUSY_Type SYNCBUSY;
  volatile USB_QOSCTRL_Type QOSCTRL;
       RoReg8 Reserved2[0x4];
  volatile USB_HOST_CTRLB_Type CTRLB;
  volatile USB_HOST_HSOFC_Type HSOFC;
       RoReg8 Reserved3[0x1];
  volatile USB_HOST_STATUS_Type STATUS;
  volatile const USB_FSMSTATUS_Type FSMSTATUS;
       RoReg8 Reserved4[0x2];
  volatile USB_HOST_FNUM_Type FNUM;
  volatile const USB_HOST_FLENHIGH_Type FLENHIGH;
       RoReg8 Reserved5[0x1];
  volatile USB_HOST_INTENCLR_Type INTENCLR;
       RoReg8 Reserved6[0x2];
  volatile USB_HOST_INTENSET_Type INTENSET;
       RoReg8 Reserved7[0x2];
  volatile USB_HOST_INTFLAG_Type INTFLAG;
       RoReg8 Reserved8[0x2];
  volatile const USB_HOST_PINTSMRY_Type PINTSMRY;
       RoReg8 Reserved9[0x2];
  volatile USB_DESCADD_Type DESCADD;
  volatile USB_PADCAL_Type PADCAL;
       RoReg8 Reserved10[0xD6];
       UsbHostPipe HostPipe[8];
} UsbHost;




typedef struct {
       UsbDeviceDescBank DeviceDescBank[2];
} UsbDeviceDescriptor;




typedef struct {
       UsbHostDescBank HostDescBank[2];
} UsbHostDescriptor;


#define SECTION_USB_DESCRIPTOR 


typedef union {
       UsbDevice DEVICE;
       UsbHost HOST;
} Usb;
# 617 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/component/wdt.h" 1
# 31 "asf4/samd51/include/component/wdt.h"
#define _SAMD51_WDT_COMPONENT_ 







#define WDT_U2251 
#define REV_WDT 0x110



typedef union {
  struct {
    uint8_t :1;
    uint8_t ENABLE:1;
    uint8_t WEN:1;
    uint8_t :4;
    uint8_t ALWAYSON:1;
  } bit;
  uint8_t reg;
} WDT_CTRLA_Type;


#define WDT_CTRLA_OFFSET 0x0
#define WDT_CTRLA_RESETVALUE _U_(0x00)

#define WDT_CTRLA_ENABLE_Pos 1
#define WDT_CTRLA_ENABLE (_U_(0x1) << WDT_CTRLA_ENABLE_Pos)
#define WDT_CTRLA_WEN_Pos 2
#define WDT_CTRLA_WEN (_U_(0x1) << WDT_CTRLA_WEN_Pos)
#define WDT_CTRLA_ALWAYSON_Pos 7
#define WDT_CTRLA_ALWAYSON (_U_(0x1) << WDT_CTRLA_ALWAYSON_Pos)
#define WDT_CTRLA_MASK _U_(0x86)



typedef union {
  struct {
    uint8_t PER:4;
    uint8_t WINDOW:4;
  } bit;
  uint8_t reg;
} WDT_CONFIG_Type;


#define WDT_CONFIG_OFFSET 0x1
#define WDT_CONFIG_RESETVALUE _U_(0xBB)

#define WDT_CONFIG_PER_Pos 0
#define WDT_CONFIG_PER_Msk (_U_(0xF) << WDT_CONFIG_PER_Pos)
#define WDT_CONFIG_PER(value) (WDT_CONFIG_PER_Msk & ((value) << WDT_CONFIG_PER_Pos))
#define WDT_CONFIG_PER_CYC8_Val _U_(0x0)
#define WDT_CONFIG_PER_CYC16_Val _U_(0x1)
#define WDT_CONFIG_PER_CYC32_Val _U_(0x2)
#define WDT_CONFIG_PER_CYC64_Val _U_(0x3)
#define WDT_CONFIG_PER_CYC128_Val _U_(0x4)
#define WDT_CONFIG_PER_CYC256_Val _U_(0x5)
#define WDT_CONFIG_PER_CYC512_Val _U_(0x6)
#define WDT_CONFIG_PER_CYC1024_Val _U_(0x7)
#define WDT_CONFIG_PER_CYC2048_Val _U_(0x8)
#define WDT_CONFIG_PER_CYC4096_Val _U_(0x9)
#define WDT_CONFIG_PER_CYC8192_Val _U_(0xA)
#define WDT_CONFIG_PER_CYC16384_Val _U_(0xB)
#define WDT_CONFIG_PER_CYC8 (WDT_CONFIG_PER_CYC8_Val << WDT_CONFIG_PER_Pos)
#define WDT_CONFIG_PER_CYC16 (WDT_CONFIG_PER_CYC16_Val << WDT_CONFIG_PER_Pos)
#define WDT_CONFIG_PER_CYC32 (WDT_CONFIG_PER_CYC32_Val << WDT_CONFIG_PER_Pos)
#define WDT_CONFIG_PER_CYC64 (WDT_CONFIG_PER_CYC64_Val << WDT_CONFIG_PER_Pos)
#define WDT_CONFIG_PER_CYC128 (WDT_CONFIG_PER_CYC128_Val << WDT_CONFIG_PER_Pos)
#define WDT_CONFIG_PER_CYC256 (WDT_CONFIG_PER_CYC256_Val << WDT_CONFIG_PER_Pos)
#define WDT_CONFIG_PER_CYC512 (WDT_CONFIG_PER_CYC512_Val << WDT_CONFIG_PER_Pos)
#define WDT_CONFIG_PER_CYC1024 (WDT_CONFIG_PER_CYC1024_Val << WDT_CONFIG_PER_Pos)
#define WDT_CONFIG_PER_CYC2048 (WDT_CONFIG_PER_CYC2048_Val << WDT_CONFIG_PER_Pos)
#define WDT_CONFIG_PER_CYC4096 (WDT_CONFIG_PER_CYC4096_Val << WDT_CONFIG_PER_Pos)
#define WDT_CONFIG_PER_CYC8192 (WDT_CONFIG_PER_CYC8192_Val << WDT_CONFIG_PER_Pos)
#define WDT_CONFIG_PER_CYC16384 (WDT_CONFIG_PER_CYC16384_Val << WDT_CONFIG_PER_Pos)
#define WDT_CONFIG_WINDOW_Pos 4
#define WDT_CONFIG_WINDOW_Msk (_U_(0xF) << WDT_CONFIG_WINDOW_Pos)
#define WDT_CONFIG_WINDOW(value) (WDT_CONFIG_WINDOW_Msk & ((value) << WDT_CONFIG_WINDOW_Pos))
#define WDT_CONFIG_WINDOW_CYC8_Val _U_(0x0)
#define WDT_CONFIG_WINDOW_CYC16_Val _U_(0x1)
#define WDT_CONFIG_WINDOW_CYC32_Val _U_(0x2)
#define WDT_CONFIG_WINDOW_CYC64_Val _U_(0x3)
#define WDT_CONFIG_WINDOW_CYC128_Val _U_(0x4)
#define WDT_CONFIG_WINDOW_CYC256_Val _U_(0x5)
#define WDT_CONFIG_WINDOW_CYC512_Val _U_(0x6)
#define WDT_CONFIG_WINDOW_CYC1024_Val _U_(0x7)
#define WDT_CONFIG_WINDOW_CYC2048_Val _U_(0x8)
#define WDT_CONFIG_WINDOW_CYC4096_Val _U_(0x9)
#define WDT_CONFIG_WINDOW_CYC8192_Val _U_(0xA)
#define WDT_CONFIG_WINDOW_CYC16384_Val _U_(0xB)
#define WDT_CONFIG_WINDOW_CYC8 (WDT_CONFIG_WINDOW_CYC8_Val << WDT_CONFIG_WINDOW_Pos)
#define WDT_CONFIG_WINDOW_CYC16 (WDT_CONFIG_WINDOW_CYC16_Val << WDT_CONFIG_WINDOW_Pos)
#define WDT_CONFIG_WINDOW_CYC32 (WDT_CONFIG_WINDOW_CYC32_Val << WDT_CONFIG_WINDOW_Pos)
#define WDT_CONFIG_WINDOW_CYC64 (WDT_CONFIG_WINDOW_CYC64_Val << WDT_CONFIG_WINDOW_Pos)
#define WDT_CONFIG_WINDOW_CYC128 (WDT_CONFIG_WINDOW_CYC128_Val << WDT_CONFIG_WINDOW_Pos)
#define WDT_CONFIG_WINDOW_CYC256 (WDT_CONFIG_WINDOW_CYC256_Val << WDT_CONFIG_WINDOW_Pos)
#define WDT_CONFIG_WINDOW_CYC512 (WDT_CONFIG_WINDOW_CYC512_Val << WDT_CONFIG_WINDOW_Pos)
#define WDT_CONFIG_WINDOW_CYC1024 (WDT_CONFIG_WINDOW_CYC1024_Val << WDT_CONFIG_WINDOW_Pos)
#define WDT_CONFIG_WINDOW_CYC2048 (WDT_CONFIG_WINDOW_CYC2048_Val << WDT_CONFIG_WINDOW_Pos)
#define WDT_CONFIG_WINDOW_CYC4096 (WDT_CONFIG_WINDOW_CYC4096_Val << WDT_CONFIG_WINDOW_Pos)
#define WDT_CONFIG_WINDOW_CYC8192 (WDT_CONFIG_WINDOW_CYC8192_Val << WDT_CONFIG_WINDOW_Pos)
#define WDT_CONFIG_WINDOW_CYC16384 (WDT_CONFIG_WINDOW_CYC16384_Val << WDT_CONFIG_WINDOW_Pos)
#define WDT_CONFIG_MASK _U_(0xFF)



typedef union {
  struct {
    uint8_t EWOFFSET:4;
    uint8_t :4;
  } bit;
  uint8_t reg;
} WDT_EWCTRL_Type;


#define WDT_EWCTRL_OFFSET 0x2
#define WDT_EWCTRL_RESETVALUE _U_(0x0B)

#define WDT_EWCTRL_EWOFFSET_Pos 0
#define WDT_EWCTRL_EWOFFSET_Msk (_U_(0xF) << WDT_EWCTRL_EWOFFSET_Pos)
#define WDT_EWCTRL_EWOFFSET(value) (WDT_EWCTRL_EWOFFSET_Msk & ((value) << WDT_EWCTRL_EWOFFSET_Pos))
#define WDT_EWCTRL_EWOFFSET_CYC8_Val _U_(0x0)
#define WDT_EWCTRL_EWOFFSET_CYC16_Val _U_(0x1)
#define WDT_EWCTRL_EWOFFSET_CYC32_Val _U_(0x2)
#define WDT_EWCTRL_EWOFFSET_CYC64_Val _U_(0x3)
#define WDT_EWCTRL_EWOFFSET_CYC128_Val _U_(0x4)
#define WDT_EWCTRL_EWOFFSET_CYC256_Val _U_(0x5)
#define WDT_EWCTRL_EWOFFSET_CYC512_Val _U_(0x6)
#define WDT_EWCTRL_EWOFFSET_CYC1024_Val _U_(0x7)
#define WDT_EWCTRL_EWOFFSET_CYC2048_Val _U_(0x8)
#define WDT_EWCTRL_EWOFFSET_CYC4096_Val _U_(0x9)
#define WDT_EWCTRL_EWOFFSET_CYC8192_Val _U_(0xA)
#define WDT_EWCTRL_EWOFFSET_CYC16384_Val _U_(0xB)
#define WDT_EWCTRL_EWOFFSET_CYC8 (WDT_EWCTRL_EWOFFSET_CYC8_Val << WDT_EWCTRL_EWOFFSET_Pos)
#define WDT_EWCTRL_EWOFFSET_CYC16 (WDT_EWCTRL_EWOFFSET_CYC16_Val << WDT_EWCTRL_EWOFFSET_Pos)
#define WDT_EWCTRL_EWOFFSET_CYC32 (WDT_EWCTRL_EWOFFSET_CYC32_Val << WDT_EWCTRL_EWOFFSET_Pos)
#define WDT_EWCTRL_EWOFFSET_CYC64 (WDT_EWCTRL_EWOFFSET_CYC64_Val << WDT_EWCTRL_EWOFFSET_Pos)
#define WDT_EWCTRL_EWOFFSET_CYC128 (WDT_EWCTRL_EWOFFSET_CYC128_Val << WDT_EWCTRL_EWOFFSET_Pos)
#define WDT_EWCTRL_EWOFFSET_CYC256 (WDT_EWCTRL_EWOFFSET_CYC256_Val << WDT_EWCTRL_EWOFFSET_Pos)
#define WDT_EWCTRL_EWOFFSET_CYC512 (WDT_EWCTRL_EWOFFSET_CYC512_Val << WDT_EWCTRL_EWOFFSET_Pos)
#define WDT_EWCTRL_EWOFFSET_CYC1024 (WDT_EWCTRL_EWOFFSET_CYC1024_Val << WDT_EWCTRL_EWOFFSET_Pos)
#define WDT_EWCTRL_EWOFFSET_CYC2048 (WDT_EWCTRL_EWOFFSET_CYC2048_Val << WDT_EWCTRL_EWOFFSET_Pos)
#define WDT_EWCTRL_EWOFFSET_CYC4096 (WDT_EWCTRL_EWOFFSET_CYC4096_Val << WDT_EWCTRL_EWOFFSET_Pos)
#define WDT_EWCTRL_EWOFFSET_CYC8192 (WDT_EWCTRL_EWOFFSET_CYC8192_Val << WDT_EWCTRL_EWOFFSET_Pos)
#define WDT_EWCTRL_EWOFFSET_CYC16384 (WDT_EWCTRL_EWOFFSET_CYC16384_Val << WDT_EWCTRL_EWOFFSET_Pos)
#define WDT_EWCTRL_MASK _U_(0x0F)



typedef union {
  struct {
    uint8_t EW:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} WDT_INTENCLR_Type;


#define WDT_INTENCLR_OFFSET 0x4
#define WDT_INTENCLR_RESETVALUE _U_(0x00)

#define WDT_INTENCLR_EW_Pos 0
#define WDT_INTENCLR_EW (_U_(0x1) << WDT_INTENCLR_EW_Pos)
#define WDT_INTENCLR_MASK _U_(0x01)



typedef union {
  struct {
    uint8_t EW:1;
    uint8_t :7;
  } bit;
  uint8_t reg;
} WDT_INTENSET_Type;


#define WDT_INTENSET_OFFSET 0x5
#define WDT_INTENSET_RESETVALUE _U_(0x00)

#define WDT_INTENSET_EW_Pos 0
#define WDT_INTENSET_EW (_U_(0x1) << WDT_INTENSET_EW_Pos)
#define WDT_INTENSET_MASK _U_(0x01)



typedef union {
  struct {
    volatile const uint8_t EW:1;
    volatile const uint8_t :7;
  } bit;
  uint8_t reg;
} WDT_INTFLAG_Type;


#define WDT_INTFLAG_OFFSET 0x6
#define WDT_INTFLAG_RESETVALUE _U_(0x00)

#define WDT_INTFLAG_EW_Pos 0
#define WDT_INTFLAG_EW (_U_(0x1) << WDT_INTFLAG_EW_Pos)
#define WDT_INTFLAG_MASK _U_(0x01)



typedef union {
  struct {
    uint32_t :1;
    uint32_t ENABLE:1;
    uint32_t WEN:1;
    uint32_t ALWAYSON:1;
    uint32_t CLEAR:1;
    uint32_t :27;
  } bit;
  uint32_t reg;
} WDT_SYNCBUSY_Type;


#define WDT_SYNCBUSY_OFFSET 0x8
#define WDT_SYNCBUSY_RESETVALUE _U_(0x00000000)

#define WDT_SYNCBUSY_ENABLE_Pos 1
#define WDT_SYNCBUSY_ENABLE (_U_(0x1) << WDT_SYNCBUSY_ENABLE_Pos)
#define WDT_SYNCBUSY_WEN_Pos 2
#define WDT_SYNCBUSY_WEN (_U_(0x1) << WDT_SYNCBUSY_WEN_Pos)
#define WDT_SYNCBUSY_ALWAYSON_Pos 3
#define WDT_SYNCBUSY_ALWAYSON (_U_(0x1) << WDT_SYNCBUSY_ALWAYSON_Pos)
#define WDT_SYNCBUSY_CLEAR_Pos 4
#define WDT_SYNCBUSY_CLEAR (_U_(0x1) << WDT_SYNCBUSY_CLEAR_Pos)
#define WDT_SYNCBUSY_MASK _U_(0x0000001E)



typedef union {
  struct {
    uint8_t CLEAR:8;
  } bit;
  uint8_t reg;
} WDT_CLEAR_Type;


#define WDT_CLEAR_OFFSET 0xC
#define WDT_CLEAR_RESETVALUE _U_(0x00)

#define WDT_CLEAR_CLEAR_Pos 0
#define WDT_CLEAR_CLEAR_Msk (_U_(0xFF) << WDT_CLEAR_CLEAR_Pos)
#define WDT_CLEAR_CLEAR(value) (WDT_CLEAR_CLEAR_Msk & ((value) << WDT_CLEAR_CLEAR_Pos))
#define WDT_CLEAR_CLEAR_KEY_Val _U_(0xA5)
#define WDT_CLEAR_CLEAR_KEY (WDT_CLEAR_CLEAR_KEY_Val << WDT_CLEAR_CLEAR_Pos)
#define WDT_CLEAR_MASK _U_(0xFF)



typedef struct {
  volatile WDT_CTRLA_Type CTRLA;
  volatile WDT_CONFIG_Type CONFIG;
  volatile WDT_EWCTRL_Type EWCTRL;
       RoReg8 Reserved1[0x1];
  volatile WDT_INTENCLR_Type INTENCLR;
  volatile WDT_INTENSET_Type INTENSET;
  volatile WDT_INTFLAG_Type INTFLAG;
       RoReg8 Reserved2[0x1];
  volatile const WDT_SYNCBUSY_Type SYNCBUSY;
  volatile WDT_CLEAR_Type CLEAR;
} Wdt;
# 618 "asf4/samd51/include/samd51p20a.h" 2
# 626 "asf4/samd51/include/samd51p20a.h"
# 1 "asf4/samd51/include/instance/ac.h" 1
# 31 "asf4/samd51/include/instance/ac.h"
#define _SAMD51_AC_INSTANCE_ 
# 52 "asf4/samd51/include/instance/ac.h"
#define REG_AC_CTRLA (*(RwReg8 *)0x42002000UL)
#define REG_AC_CTRLB (*(WoReg8 *)0x42002001UL)
#define REG_AC_EVCTRL (*(RwReg16*)0x42002002UL)
#define REG_AC_INTENCLR (*(RwReg8 *)0x42002004UL)
#define REG_AC_INTENSET (*(RwReg8 *)0x42002005UL)
#define REG_AC_INTFLAG (*(RwReg8 *)0x42002006UL)
#define REG_AC_STATUSA (*(RoReg8 *)0x42002007UL)
#define REG_AC_STATUSB (*(RoReg8 *)0x42002008UL)
#define REG_AC_DBGCTRL (*(RwReg8 *)0x42002009UL)
#define REG_AC_WINCTRL (*(RwReg8 *)0x4200200AUL)
#define REG_AC_SCALER0 (*(RwReg8 *)0x4200200CUL)
#define REG_AC_SCALER1 (*(RwReg8 *)0x4200200DUL)
#define REG_AC_COMPCTRL0 (*(RwReg *)0x42002010UL)
#define REG_AC_COMPCTRL1 (*(RwReg *)0x42002014UL)
#define REG_AC_SYNCBUSY (*(RoReg *)0x42002020UL)
#define REG_AC_CALIB (*(RwReg16*)0x42002024UL)



#define AC_COMPCTRL_MUXNEG_OPAMP 7
#define AC_FUSES_BIAS1 
#define AC_GCLK_ID 32
#define AC_IMPLEMENTS_VDBLR 0
#define AC_NUM_CMP 2
#define AC_PAIRS 1
#define AC_SPEED_LEVELS 2
# 627 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/adc0.h" 1
# 31 "asf4/samd51/include/instance/adc0.h"
#define _SAMD51_ADC0_INSTANCE_ 
# 60 "asf4/samd51/include/instance/adc0.h"
#define REG_ADC0_CTRLA (*(RwReg16*)0x43001C00UL)
#define REG_ADC0_EVCTRL (*(RwReg8 *)0x43001C02UL)
#define REG_ADC0_DBGCTRL (*(RwReg8 *)0x43001C03UL)
#define REG_ADC0_INPUTCTRL (*(RwReg16*)0x43001C04UL)
#define REG_ADC0_CTRLB (*(RwReg16*)0x43001C06UL)
#define REG_ADC0_REFCTRL (*(RwReg8 *)0x43001C08UL)
#define REG_ADC0_AVGCTRL (*(RwReg8 *)0x43001C0AUL)
#define REG_ADC0_SAMPCTRL (*(RwReg8 *)0x43001C0BUL)
#define REG_ADC0_WINLT (*(RwReg16*)0x43001C0CUL)
#define REG_ADC0_WINUT (*(RwReg16*)0x43001C0EUL)
#define REG_ADC0_GAINCORR (*(RwReg16*)0x43001C10UL)
#define REG_ADC0_OFFSETCORR (*(RwReg16*)0x43001C12UL)
#define REG_ADC0_SWTRIG (*(RwReg8 *)0x43001C14UL)
#define REG_ADC0_INTENCLR (*(RwReg8 *)0x43001C2CUL)
#define REG_ADC0_INTENSET (*(RwReg8 *)0x43001C2DUL)
#define REG_ADC0_INTFLAG (*(RwReg8 *)0x43001C2EUL)
#define REG_ADC0_STATUS (*(RoReg8 *)0x43001C2FUL)
#define REG_ADC0_SYNCBUSY (*(RoReg *)0x43001C30UL)
#define REG_ADC0_DSEQDATA (*(WoReg *)0x43001C34UL)
#define REG_ADC0_DSEQCTRL (*(RwReg *)0x43001C38UL)
#define REG_ADC0_DSEQSTAT (*(RoReg *)0x43001C3CUL)
#define REG_ADC0_RESULT (*(RoReg16*)0x43001C40UL)
#define REG_ADC0_RESS (*(RoReg16*)0x43001C44UL)
#define REG_ADC0_CALIB (*(RwReg16*)0x43001C48UL)



#define ADC0_BANDGAP 27
#define ADC0_CTAT 29
#define ADC0_DMAC_ID_RESRDY 68
#define ADC0_DMAC_ID_SEQ 69
#define ADC0_EXTCHANNEL_MSB 15
#define ADC0_GCLK_ID 40
#define ADC0_MASTER_SLAVE_MODE 1
#define ADC0_OPAMP2 0
#define ADC0_OPAMP01 0
#define ADC0_PTAT 28
#define ADC0_TOUCH_IMPLEMENTED 1
# 628 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/adc1.h" 1
# 31 "asf4/samd51/include/instance/adc1.h"
#define _SAMD51_ADC1_INSTANCE_ 
# 60 "asf4/samd51/include/instance/adc1.h"
#define REG_ADC1_CTRLA (*(RwReg16*)0x43002000UL)
#define REG_ADC1_EVCTRL (*(RwReg8 *)0x43002002UL)
#define REG_ADC1_DBGCTRL (*(RwReg8 *)0x43002003UL)
#define REG_ADC1_INPUTCTRL (*(RwReg16*)0x43002004UL)
#define REG_ADC1_CTRLB (*(RwReg16*)0x43002006UL)
#define REG_ADC1_REFCTRL (*(RwReg8 *)0x43002008UL)
#define REG_ADC1_AVGCTRL (*(RwReg8 *)0x4300200AUL)
#define REG_ADC1_SAMPCTRL (*(RwReg8 *)0x4300200BUL)
#define REG_ADC1_WINLT (*(RwReg16*)0x4300200CUL)
#define REG_ADC1_WINUT (*(RwReg16*)0x4300200EUL)
#define REG_ADC1_GAINCORR (*(RwReg16*)0x43002010UL)
#define REG_ADC1_OFFSETCORR (*(RwReg16*)0x43002012UL)
#define REG_ADC1_SWTRIG (*(RwReg8 *)0x43002014UL)
#define REG_ADC1_INTENCLR (*(RwReg8 *)0x4300202CUL)
#define REG_ADC1_INTENSET (*(RwReg8 *)0x4300202DUL)
#define REG_ADC1_INTFLAG (*(RwReg8 *)0x4300202EUL)
#define REG_ADC1_STATUS (*(RoReg8 *)0x4300202FUL)
#define REG_ADC1_SYNCBUSY (*(RoReg *)0x43002030UL)
#define REG_ADC1_DSEQDATA (*(WoReg *)0x43002034UL)
#define REG_ADC1_DSEQCTRL (*(RwReg *)0x43002038UL)
#define REG_ADC1_DSEQSTAT (*(RoReg *)0x4300203CUL)
#define REG_ADC1_RESULT (*(RoReg16*)0x43002040UL)
#define REG_ADC1_RESS (*(RoReg16*)0x43002044UL)
#define REG_ADC1_CALIB (*(RwReg16*)0x43002048UL)



#define ADC1_BANDGAP 27
#define ADC1_CTAT 29
#define ADC1_DMAC_ID_RESRDY 70
#define ADC1_DMAC_ID_SEQ 71
#define ADC1_EXTCHANNEL_MSB 15
#define ADC1_GCLK_ID 41
#define ADC1_MASTER_SLAVE_MODE 2
#define ADC1_OPAMP2 0
#define ADC1_OPAMP01 0
#define ADC1_PTAT 28
#define ADC1_TOUCH_IMPLEMENTED 0
#define ADC1_TOUCH_LINES_NUM 1
# 629 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/aes.h" 1
# 31 "asf4/samd51/include/instance/aes.h"
#define _SAMD51_AES_INSTANCE_ 
# 66 "asf4/samd51/include/instance/aes.h"
#define REG_AES_CTRLA (*(RwReg *)0x42002400UL)
#define REG_AES_CTRLB (*(RwReg8 *)0x42002404UL)
#define REG_AES_INTENCLR (*(RwReg8 *)0x42002405UL)
#define REG_AES_INTENSET (*(RwReg8 *)0x42002406UL)
#define REG_AES_INTFLAG (*(RwReg8 *)0x42002407UL)
#define REG_AES_DATABUFPTR (*(RwReg8 *)0x42002408UL)
#define REG_AES_DBGCTRL (*(RwReg8 *)0x42002409UL)
#define REG_AES_KEYWORD0 (*(WoReg *)0x4200240CUL)
#define REG_AES_KEYWORD1 (*(WoReg *)0x42002410UL)
#define REG_AES_KEYWORD2 (*(WoReg *)0x42002414UL)
#define REG_AES_KEYWORD3 (*(WoReg *)0x42002418UL)
#define REG_AES_KEYWORD4 (*(WoReg *)0x4200241CUL)
#define REG_AES_KEYWORD5 (*(WoReg *)0x42002420UL)
#define REG_AES_KEYWORD6 (*(WoReg *)0x42002424UL)
#define REG_AES_KEYWORD7 (*(WoReg *)0x42002428UL)
#define REG_AES_INDATA (*(RwReg *)0x42002438UL)
#define REG_AES_INTVECTV0 (*(WoReg *)0x4200243CUL)
#define REG_AES_INTVECTV1 (*(WoReg *)0x42002440UL)
#define REG_AES_INTVECTV2 (*(WoReg *)0x42002444UL)
#define REG_AES_INTVECTV3 (*(WoReg *)0x42002448UL)
#define REG_AES_HASHKEY0 (*(RwReg *)0x4200245CUL)
#define REG_AES_HASHKEY1 (*(RwReg *)0x42002460UL)
#define REG_AES_HASHKEY2 (*(RwReg *)0x42002464UL)
#define REG_AES_HASHKEY3 (*(RwReg *)0x42002468UL)
#define REG_AES_GHASH0 (*(RwReg *)0x4200246CUL)
#define REG_AES_GHASH1 (*(RwReg *)0x42002470UL)
#define REG_AES_GHASH2 (*(RwReg *)0x42002474UL)
#define REG_AES_GHASH3 (*(RwReg *)0x42002478UL)
#define REG_AES_CIPLEN (*(RwReg *)0x42002480UL)
#define REG_AES_RANDSEED (*(RwReg *)0x42002484UL)



#define AES_DMAC_ID_RD 82
#define AES_DMAC_ID_WR 81
#define AES_FOUR_BYTE_OPERATION 1
#define AES_GCM 1
#define AES_KEYLEN 2
# 630 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/ccl.h" 1
# 31 "asf4/samd51/include/instance/ccl.h"
#define _SAMD51_CCL_INSTANCE_ 
# 43 "asf4/samd51/include/instance/ccl.h"
#define REG_CCL_CTRL (*(RwReg8 *)0x42003800UL)
#define REG_CCL_SEQCTRL0 (*(RwReg8 *)0x42003804UL)
#define REG_CCL_SEQCTRL1 (*(RwReg8 *)0x42003805UL)
#define REG_CCL_LUTCTRL0 (*(RwReg *)0x42003808UL)
#define REG_CCL_LUTCTRL1 (*(RwReg *)0x4200380CUL)
#define REG_CCL_LUTCTRL2 (*(RwReg *)0x42003810UL)
#define REG_CCL_LUTCTRL3 (*(RwReg *)0x42003814UL)



#define CCL_GCLK_ID 33
#define CCL_LUT_NUM 4
#define CCL_SEQ_NUM 2
# 631 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/cmcc.h" 1
# 31 "asf4/samd51/include/instance/cmcc.h"
#define _SAMD51_CMCC_INSTANCE_ 
# 47 "asf4/samd51/include/instance/cmcc.h"
#define REG_CMCC_TYPE (*(RoReg *)0x41006000UL)
#define REG_CMCC_CFG (*(RwReg *)0x41006004UL)
#define REG_CMCC_CTRL (*(WoReg *)0x41006008UL)
#define REG_CMCC_SR (*(RoReg *)0x4100600CUL)
#define REG_CMCC_LCKWAY (*(RwReg *)0x41006010UL)
#define REG_CMCC_MAINT0 (*(WoReg *)0x41006020UL)
#define REG_CMCC_MAINT1 (*(WoReg *)0x41006024UL)
#define REG_CMCC_MCFG (*(RwReg *)0x41006028UL)
#define REG_CMCC_MEN (*(RwReg *)0x4100602CUL)
#define REG_CMCC_MCTRL (*(WoReg *)0x41006030UL)
#define REG_CMCC_MSR (*(RoReg *)0x41006034UL)
# 632 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/dac.h" 1
# 31 "asf4/samd51/include/instance/dac.h"
#define _SAMD51_DAC_INSTANCE_ 
# 53 "asf4/samd51/include/instance/dac.h"
#define REG_DAC_CTRLA (*(RwReg8 *)0x43002400UL)
#define REG_DAC_CTRLB (*(RwReg8 *)0x43002401UL)
#define REG_DAC_EVCTRL (*(RwReg8 *)0x43002402UL)
#define REG_DAC_INTENCLR (*(RwReg8 *)0x43002404UL)
#define REG_DAC_INTENSET (*(RwReg8 *)0x43002405UL)
#define REG_DAC_INTFLAG (*(RwReg8 *)0x43002406UL)
#define REG_DAC_STATUS (*(RoReg8 *)0x43002407UL)
#define REG_DAC_SYNCBUSY (*(RoReg *)0x43002408UL)
#define REG_DAC_DACCTRL0 (*(RwReg16*)0x4300240CUL)
#define REG_DAC_DACCTRL1 (*(RwReg16*)0x4300240EUL)
#define REG_DAC_DATA0 (*(WoReg16*)0x43002410UL)
#define REG_DAC_DATA1 (*(WoReg16*)0x43002412UL)
#define REG_DAC_DATABUF0 (*(WoReg16*)0x43002414UL)
#define REG_DAC_DATABUF1 (*(WoReg16*)0x43002416UL)
#define REG_DAC_DBGCTRL (*(RwReg8 *)0x43002418UL)
#define REG_DAC_RESULT0 (*(RoReg16*)0x4300241CUL)
#define REG_DAC_RESULT1 (*(RoReg16*)0x4300241EUL)



#define DAC_CHANNEL_SIZE 2
#define DAC_DATA_SIZE 12
#define DAC_DMAC_ID_EMPTY_0 72
#define DAC_DMAC_ID_EMPTY_1 73
#define DAC_DMAC_ID_EMPTY_LSB 72
#define DAC_DMAC_ID_EMPTY_MSB 73
#define DAC_DMAC_ID_EMPTY_SIZE 2
#define DAC_DMAC_ID_RESRDY_0 74
#define DAC_DMAC_ID_RESRDY_1 75
#define DAC_DMAC_ID_RESRDY_LSB 74
#define DAC_DMAC_ID_RESRDY_MSB 75
#define DAC_DMAC_ID_RESRDY_SIZE 2
#define DAC_GCLK_ID 42
#define DAC_STEP 7
# 633 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/dmac.h" 1
# 31 "asf4/samd51/include/instance/dmac.h"
#define _SAMD51_DMAC_INSTANCE_ 
# 307 "asf4/samd51/include/instance/dmac.h"
#define REG_DMAC_CTRL (*(RwReg16*)0x4100A000UL)
#define REG_DMAC_CRCCTRL (*(RwReg16*)0x4100A002UL)
#define REG_DMAC_CRCDATAIN (*(RwReg *)0x4100A004UL)
#define REG_DMAC_CRCCHKSUM (*(RwReg *)0x4100A008UL)
#define REG_DMAC_CRCSTATUS (*(RwReg8 *)0x4100A00CUL)
#define REG_DMAC_DBGCTRL (*(RwReg8 *)0x4100A00DUL)
#define REG_DMAC_SWTRIGCTRL (*(RwReg *)0x4100A010UL)
#define REG_DMAC_PRICTRL0 (*(RwReg *)0x4100A014UL)
#define REG_DMAC_INTPEND (*(RwReg16*)0x4100A020UL)
#define REG_DMAC_INTSTATUS (*(RoReg *)0x4100A024UL)
#define REG_DMAC_BUSYCH (*(RoReg *)0x4100A028UL)
#define REG_DMAC_PENDCH (*(RoReg *)0x4100A02CUL)
#define REG_DMAC_ACTIVE (*(RoReg *)0x4100A030UL)
#define REG_DMAC_BASEADDR (*(RwReg *)0x4100A034UL)
#define REG_DMAC_WRBADDR (*(RwReg *)0x4100A038UL)
#define REG_DMAC_CHCTRLA0 (*(RwReg *)0x4100A040UL)
#define REG_DMAC_CHCTRLB0 (*(RwReg *)0x4100A044UL)
#define REG_DMAC_CHPRILVL0 (*(RwReg *)0x4100A045UL)
#define REG_DMAC_CHEVCTRL0 (*(RwReg *)0x4100A046UL)
#define REG_DMAC_CHINTENCLR0 (*(RwReg *)0x4100A04CUL)
#define REG_DMAC_CHINTENSET0 (*(RwReg *)0x4100A04DUL)
#define REG_DMAC_CHINTFLAG0 (*(RwReg *)0x4100A04EUL)
#define REG_DMAC_CHSTATUS0 (*(RwReg *)0x4100A04FUL)
#define REG_DMAC_CHCTRLA1 (*(RwReg *)0x4100A050UL)
#define REG_DMAC_CHCTRLB1 (*(RwReg *)0x4100A054UL)
#define REG_DMAC_CHPRILVL1 (*(RwReg *)0x4100A055UL)
#define REG_DMAC_CHEVCTRL1 (*(RwReg *)0x4100A056UL)
#define REG_DMAC_CHINTENCLR1 (*(RwReg *)0x4100A05CUL)
#define REG_DMAC_CHINTENSET1 (*(RwReg *)0x4100A05DUL)
#define REG_DMAC_CHINTFLAG1 (*(RwReg *)0x4100A05EUL)
#define REG_DMAC_CHSTATUS1 (*(RwReg *)0x4100A05FUL)
#define REG_DMAC_CHCTRLA2 (*(RwReg *)0x4100A060UL)
#define REG_DMAC_CHCTRLB2 (*(RwReg *)0x4100A064UL)
#define REG_DMAC_CHPRILVL2 (*(RwReg *)0x4100A065UL)
#define REG_DMAC_CHEVCTRL2 (*(RwReg *)0x4100A066UL)
#define REG_DMAC_CHINTENCLR2 (*(RwReg *)0x4100A06CUL)
#define REG_DMAC_CHINTENSET2 (*(RwReg *)0x4100A06DUL)
#define REG_DMAC_CHINTFLAG2 (*(RwReg *)0x4100A06EUL)
#define REG_DMAC_CHSTATUS2 (*(RwReg *)0x4100A06FUL)
#define REG_DMAC_CHCTRLA3 (*(RwReg *)0x4100A070UL)
#define REG_DMAC_CHCTRLB3 (*(RwReg *)0x4100A074UL)
#define REG_DMAC_CHPRILVL3 (*(RwReg *)0x4100A075UL)
#define REG_DMAC_CHEVCTRL3 (*(RwReg *)0x4100A076UL)
#define REG_DMAC_CHINTENCLR3 (*(RwReg *)0x4100A07CUL)
#define REG_DMAC_CHINTENSET3 (*(RwReg *)0x4100A07DUL)
#define REG_DMAC_CHINTFLAG3 (*(RwReg *)0x4100A07EUL)
#define REG_DMAC_CHSTATUS3 (*(RwReg *)0x4100A07FUL)
#define REG_DMAC_CHCTRLA4 (*(RwReg *)0x4100A080UL)
#define REG_DMAC_CHCTRLB4 (*(RwReg *)0x4100A084UL)
#define REG_DMAC_CHPRILVL4 (*(RwReg *)0x4100A085UL)
#define REG_DMAC_CHEVCTRL4 (*(RwReg *)0x4100A086UL)
#define REG_DMAC_CHINTENCLR4 (*(RwReg *)0x4100A08CUL)
#define REG_DMAC_CHINTENSET4 (*(RwReg *)0x4100A08DUL)
#define REG_DMAC_CHINTFLAG4 (*(RwReg *)0x4100A08EUL)
#define REG_DMAC_CHSTATUS4 (*(RwReg *)0x4100A08FUL)
#define REG_DMAC_CHCTRLA5 (*(RwReg *)0x4100A090UL)
#define REG_DMAC_CHCTRLB5 (*(RwReg *)0x4100A094UL)
#define REG_DMAC_CHPRILVL5 (*(RwReg *)0x4100A095UL)
#define REG_DMAC_CHEVCTRL5 (*(RwReg *)0x4100A096UL)
#define REG_DMAC_CHINTENCLR5 (*(RwReg *)0x4100A09CUL)
#define REG_DMAC_CHINTENSET5 (*(RwReg *)0x4100A09DUL)
#define REG_DMAC_CHINTFLAG5 (*(RwReg *)0x4100A09EUL)
#define REG_DMAC_CHSTATUS5 (*(RwReg *)0x4100A09FUL)
#define REG_DMAC_CHCTRLA6 (*(RwReg *)0x4100A0A0UL)
#define REG_DMAC_CHCTRLB6 (*(RwReg *)0x4100A0A4UL)
#define REG_DMAC_CHPRILVL6 (*(RwReg *)0x4100A0A5UL)
#define REG_DMAC_CHEVCTRL6 (*(RwReg *)0x4100A0A6UL)
#define REG_DMAC_CHINTENCLR6 (*(RwReg *)0x4100A0ACUL)
#define REG_DMAC_CHINTENSET6 (*(RwReg *)0x4100A0ADUL)
#define REG_DMAC_CHINTFLAG6 (*(RwReg *)0x4100A0AEUL)
#define REG_DMAC_CHSTATUS6 (*(RwReg *)0x4100A0AFUL)
#define REG_DMAC_CHCTRLA7 (*(RwReg *)0x4100A0B0UL)
#define REG_DMAC_CHCTRLB7 (*(RwReg *)0x4100A0B4UL)
#define REG_DMAC_CHPRILVL7 (*(RwReg *)0x4100A0B5UL)
#define REG_DMAC_CHEVCTRL7 (*(RwReg *)0x4100A0B6UL)
#define REG_DMAC_CHINTENCLR7 (*(RwReg *)0x4100A0BCUL)
#define REG_DMAC_CHINTENSET7 (*(RwReg *)0x4100A0BDUL)
#define REG_DMAC_CHINTFLAG7 (*(RwReg *)0x4100A0BEUL)
#define REG_DMAC_CHSTATUS7 (*(RwReg *)0x4100A0BFUL)
#define REG_DMAC_CHCTRLA8 (*(RwReg *)0x4100A0C0UL)
#define REG_DMAC_CHCTRLB8 (*(RwReg *)0x4100A0C4UL)
#define REG_DMAC_CHPRILVL8 (*(RwReg *)0x4100A0C5UL)
#define REG_DMAC_CHEVCTRL8 (*(RwReg *)0x4100A0C6UL)
#define REG_DMAC_CHINTENCLR8 (*(RwReg *)0x4100A0CCUL)
#define REG_DMAC_CHINTENSET8 (*(RwReg *)0x4100A0CDUL)
#define REG_DMAC_CHINTFLAG8 (*(RwReg *)0x4100A0CEUL)
#define REG_DMAC_CHSTATUS8 (*(RwReg *)0x4100A0CFUL)
#define REG_DMAC_CHCTRLA9 (*(RwReg *)0x4100A0D0UL)
#define REG_DMAC_CHCTRLB9 (*(RwReg *)0x4100A0D4UL)
#define REG_DMAC_CHPRILVL9 (*(RwReg *)0x4100A0D5UL)
#define REG_DMAC_CHEVCTRL9 (*(RwReg *)0x4100A0D6UL)
#define REG_DMAC_CHINTENCLR9 (*(RwReg *)0x4100A0DCUL)
#define REG_DMAC_CHINTENSET9 (*(RwReg *)0x4100A0DDUL)
#define REG_DMAC_CHINTFLAG9 (*(RwReg *)0x4100A0DEUL)
#define REG_DMAC_CHSTATUS9 (*(RwReg *)0x4100A0DFUL)
#define REG_DMAC_CHCTRLA10 (*(RwReg *)0x4100A0E0UL)
#define REG_DMAC_CHCTRLB10 (*(RwReg *)0x4100A0E4UL)
#define REG_DMAC_CHPRILVL10 (*(RwReg *)0x4100A0E5UL)
#define REG_DMAC_CHEVCTRL10 (*(RwReg *)0x4100A0E6UL)
#define REG_DMAC_CHINTENCLR10 (*(RwReg *)0x4100A0ECUL)
#define REG_DMAC_CHINTENSET10 (*(RwReg *)0x4100A0EDUL)
#define REG_DMAC_CHINTFLAG10 (*(RwReg *)0x4100A0EEUL)
#define REG_DMAC_CHSTATUS10 (*(RwReg *)0x4100A0EFUL)
#define REG_DMAC_CHCTRLA11 (*(RwReg *)0x4100A0F0UL)
#define REG_DMAC_CHCTRLB11 (*(RwReg *)0x4100A0F4UL)
#define REG_DMAC_CHPRILVL11 (*(RwReg *)0x4100A0F5UL)
#define REG_DMAC_CHEVCTRL11 (*(RwReg *)0x4100A0F6UL)
#define REG_DMAC_CHINTENCLR11 (*(RwReg *)0x4100A0FCUL)
#define REG_DMAC_CHINTENSET11 (*(RwReg *)0x4100A0FDUL)
#define REG_DMAC_CHINTFLAG11 (*(RwReg *)0x4100A0FEUL)
#define REG_DMAC_CHSTATUS11 (*(RwReg *)0x4100A0FFUL)
#define REG_DMAC_CHCTRLA12 (*(RwReg *)0x4100A100UL)
#define REG_DMAC_CHCTRLB12 (*(RwReg *)0x4100A104UL)
#define REG_DMAC_CHPRILVL12 (*(RwReg *)0x4100A105UL)
#define REG_DMAC_CHEVCTRL12 (*(RwReg *)0x4100A106UL)
#define REG_DMAC_CHINTENCLR12 (*(RwReg *)0x4100A10CUL)
#define REG_DMAC_CHINTENSET12 (*(RwReg *)0x4100A10DUL)
#define REG_DMAC_CHINTFLAG12 (*(RwReg *)0x4100A10EUL)
#define REG_DMAC_CHSTATUS12 (*(RwReg *)0x4100A10FUL)
#define REG_DMAC_CHCTRLA13 (*(RwReg *)0x4100A110UL)
#define REG_DMAC_CHCTRLB13 (*(RwReg *)0x4100A114UL)
#define REG_DMAC_CHPRILVL13 (*(RwReg *)0x4100A115UL)
#define REG_DMAC_CHEVCTRL13 (*(RwReg *)0x4100A116UL)
#define REG_DMAC_CHINTENCLR13 (*(RwReg *)0x4100A11CUL)
#define REG_DMAC_CHINTENSET13 (*(RwReg *)0x4100A11DUL)
#define REG_DMAC_CHINTFLAG13 (*(RwReg *)0x4100A11EUL)
#define REG_DMAC_CHSTATUS13 (*(RwReg *)0x4100A11FUL)
#define REG_DMAC_CHCTRLA14 (*(RwReg *)0x4100A120UL)
#define REG_DMAC_CHCTRLB14 (*(RwReg *)0x4100A124UL)
#define REG_DMAC_CHPRILVL14 (*(RwReg *)0x4100A125UL)
#define REG_DMAC_CHEVCTRL14 (*(RwReg *)0x4100A126UL)
#define REG_DMAC_CHINTENCLR14 (*(RwReg *)0x4100A12CUL)
#define REG_DMAC_CHINTENSET14 (*(RwReg *)0x4100A12DUL)
#define REG_DMAC_CHINTFLAG14 (*(RwReg *)0x4100A12EUL)
#define REG_DMAC_CHSTATUS14 (*(RwReg *)0x4100A12FUL)
#define REG_DMAC_CHCTRLA15 (*(RwReg *)0x4100A130UL)
#define REG_DMAC_CHCTRLB15 (*(RwReg *)0x4100A134UL)
#define REG_DMAC_CHPRILVL15 (*(RwReg *)0x4100A135UL)
#define REG_DMAC_CHEVCTRL15 (*(RwReg *)0x4100A136UL)
#define REG_DMAC_CHINTENCLR15 (*(RwReg *)0x4100A13CUL)
#define REG_DMAC_CHINTENSET15 (*(RwReg *)0x4100A13DUL)
#define REG_DMAC_CHINTFLAG15 (*(RwReg *)0x4100A13EUL)
#define REG_DMAC_CHSTATUS15 (*(RwReg *)0x4100A13FUL)
#define REG_DMAC_CHCTRLA16 (*(RwReg *)0x4100A140UL)
#define REG_DMAC_CHCTRLB16 (*(RwReg *)0x4100A144UL)
#define REG_DMAC_CHPRILVL16 (*(RwReg *)0x4100A145UL)
#define REG_DMAC_CHEVCTRL16 (*(RwReg *)0x4100A146UL)
#define REG_DMAC_CHINTENCLR16 (*(RwReg *)0x4100A14CUL)
#define REG_DMAC_CHINTENSET16 (*(RwReg *)0x4100A14DUL)
#define REG_DMAC_CHINTFLAG16 (*(RwReg *)0x4100A14EUL)
#define REG_DMAC_CHSTATUS16 (*(RwReg *)0x4100A14FUL)
#define REG_DMAC_CHCTRLA17 (*(RwReg *)0x4100A150UL)
#define REG_DMAC_CHCTRLB17 (*(RwReg *)0x4100A154UL)
#define REG_DMAC_CHPRILVL17 (*(RwReg *)0x4100A155UL)
#define REG_DMAC_CHEVCTRL17 (*(RwReg *)0x4100A156UL)
#define REG_DMAC_CHINTENCLR17 (*(RwReg *)0x4100A15CUL)
#define REG_DMAC_CHINTENSET17 (*(RwReg *)0x4100A15DUL)
#define REG_DMAC_CHINTFLAG17 (*(RwReg *)0x4100A15EUL)
#define REG_DMAC_CHSTATUS17 (*(RwReg *)0x4100A15FUL)
#define REG_DMAC_CHCTRLA18 (*(RwReg *)0x4100A160UL)
#define REG_DMAC_CHCTRLB18 (*(RwReg *)0x4100A164UL)
#define REG_DMAC_CHPRILVL18 (*(RwReg *)0x4100A165UL)
#define REG_DMAC_CHEVCTRL18 (*(RwReg *)0x4100A166UL)
#define REG_DMAC_CHINTENCLR18 (*(RwReg *)0x4100A16CUL)
#define REG_DMAC_CHINTENSET18 (*(RwReg *)0x4100A16DUL)
#define REG_DMAC_CHINTFLAG18 (*(RwReg *)0x4100A16EUL)
#define REG_DMAC_CHSTATUS18 (*(RwReg *)0x4100A16FUL)
#define REG_DMAC_CHCTRLA19 (*(RwReg *)0x4100A170UL)
#define REG_DMAC_CHCTRLB19 (*(RwReg *)0x4100A174UL)
#define REG_DMAC_CHPRILVL19 (*(RwReg *)0x4100A175UL)
#define REG_DMAC_CHEVCTRL19 (*(RwReg *)0x4100A176UL)
#define REG_DMAC_CHINTENCLR19 (*(RwReg *)0x4100A17CUL)
#define REG_DMAC_CHINTENSET19 (*(RwReg *)0x4100A17DUL)
#define REG_DMAC_CHINTFLAG19 (*(RwReg *)0x4100A17EUL)
#define REG_DMAC_CHSTATUS19 (*(RwReg *)0x4100A17FUL)
#define REG_DMAC_CHCTRLA20 (*(RwReg *)0x4100A180UL)
#define REG_DMAC_CHCTRLB20 (*(RwReg *)0x4100A184UL)
#define REG_DMAC_CHPRILVL20 (*(RwReg *)0x4100A185UL)
#define REG_DMAC_CHEVCTRL20 (*(RwReg *)0x4100A186UL)
#define REG_DMAC_CHINTENCLR20 (*(RwReg *)0x4100A18CUL)
#define REG_DMAC_CHINTENSET20 (*(RwReg *)0x4100A18DUL)
#define REG_DMAC_CHINTFLAG20 (*(RwReg *)0x4100A18EUL)
#define REG_DMAC_CHSTATUS20 (*(RwReg *)0x4100A18FUL)
#define REG_DMAC_CHCTRLA21 (*(RwReg *)0x4100A190UL)
#define REG_DMAC_CHCTRLB21 (*(RwReg *)0x4100A194UL)
#define REG_DMAC_CHPRILVL21 (*(RwReg *)0x4100A195UL)
#define REG_DMAC_CHEVCTRL21 (*(RwReg *)0x4100A196UL)
#define REG_DMAC_CHINTENCLR21 (*(RwReg *)0x4100A19CUL)
#define REG_DMAC_CHINTENSET21 (*(RwReg *)0x4100A19DUL)
#define REG_DMAC_CHINTFLAG21 (*(RwReg *)0x4100A19EUL)
#define REG_DMAC_CHSTATUS21 (*(RwReg *)0x4100A19FUL)
#define REG_DMAC_CHCTRLA22 (*(RwReg *)0x4100A1A0UL)
#define REG_DMAC_CHCTRLB22 (*(RwReg *)0x4100A1A4UL)
#define REG_DMAC_CHPRILVL22 (*(RwReg *)0x4100A1A5UL)
#define REG_DMAC_CHEVCTRL22 (*(RwReg *)0x4100A1A6UL)
#define REG_DMAC_CHINTENCLR22 (*(RwReg *)0x4100A1ACUL)
#define REG_DMAC_CHINTENSET22 (*(RwReg *)0x4100A1ADUL)
#define REG_DMAC_CHINTFLAG22 (*(RwReg *)0x4100A1AEUL)
#define REG_DMAC_CHSTATUS22 (*(RwReg *)0x4100A1AFUL)
#define REG_DMAC_CHCTRLA23 (*(RwReg *)0x4100A1B0UL)
#define REG_DMAC_CHCTRLB23 (*(RwReg *)0x4100A1B4UL)
#define REG_DMAC_CHPRILVL23 (*(RwReg *)0x4100A1B5UL)
#define REG_DMAC_CHEVCTRL23 (*(RwReg *)0x4100A1B6UL)
#define REG_DMAC_CHINTENCLR23 (*(RwReg *)0x4100A1BCUL)
#define REG_DMAC_CHINTENSET23 (*(RwReg *)0x4100A1BDUL)
#define REG_DMAC_CHINTFLAG23 (*(RwReg *)0x4100A1BEUL)
#define REG_DMAC_CHSTATUS23 (*(RwReg *)0x4100A1BFUL)
#define REG_DMAC_CHCTRLA24 (*(RwReg *)0x4100A1C0UL)
#define REG_DMAC_CHCTRLB24 (*(RwReg *)0x4100A1C4UL)
#define REG_DMAC_CHPRILVL24 (*(RwReg *)0x4100A1C5UL)
#define REG_DMAC_CHEVCTRL24 (*(RwReg *)0x4100A1C6UL)
#define REG_DMAC_CHINTENCLR24 (*(RwReg *)0x4100A1CCUL)
#define REG_DMAC_CHINTENSET24 (*(RwReg *)0x4100A1CDUL)
#define REG_DMAC_CHINTFLAG24 (*(RwReg *)0x4100A1CEUL)
#define REG_DMAC_CHSTATUS24 (*(RwReg *)0x4100A1CFUL)
#define REG_DMAC_CHCTRLA25 (*(RwReg *)0x4100A1D0UL)
#define REG_DMAC_CHCTRLB25 (*(RwReg *)0x4100A1D4UL)
#define REG_DMAC_CHPRILVL25 (*(RwReg *)0x4100A1D5UL)
#define REG_DMAC_CHEVCTRL25 (*(RwReg *)0x4100A1D6UL)
#define REG_DMAC_CHINTENCLR25 (*(RwReg *)0x4100A1DCUL)
#define REG_DMAC_CHINTENSET25 (*(RwReg *)0x4100A1DDUL)
#define REG_DMAC_CHINTFLAG25 (*(RwReg *)0x4100A1DEUL)
#define REG_DMAC_CHSTATUS25 (*(RwReg *)0x4100A1DFUL)
#define REG_DMAC_CHCTRLA26 (*(RwReg *)0x4100A1E0UL)
#define REG_DMAC_CHCTRLB26 (*(RwReg *)0x4100A1E4UL)
#define REG_DMAC_CHPRILVL26 (*(RwReg *)0x4100A1E5UL)
#define REG_DMAC_CHEVCTRL26 (*(RwReg *)0x4100A1E6UL)
#define REG_DMAC_CHINTENCLR26 (*(RwReg *)0x4100A1ECUL)
#define REG_DMAC_CHINTENSET26 (*(RwReg *)0x4100A1EDUL)
#define REG_DMAC_CHINTFLAG26 (*(RwReg *)0x4100A1EEUL)
#define REG_DMAC_CHSTATUS26 (*(RwReg *)0x4100A1EFUL)
#define REG_DMAC_CHCTRLA27 (*(RwReg *)0x4100A1F0UL)
#define REG_DMAC_CHCTRLB27 (*(RwReg *)0x4100A1F4UL)
#define REG_DMAC_CHPRILVL27 (*(RwReg *)0x4100A1F5UL)
#define REG_DMAC_CHEVCTRL27 (*(RwReg *)0x4100A1F6UL)
#define REG_DMAC_CHINTENCLR27 (*(RwReg *)0x4100A1FCUL)
#define REG_DMAC_CHINTENSET27 (*(RwReg *)0x4100A1FDUL)
#define REG_DMAC_CHINTFLAG27 (*(RwReg *)0x4100A1FEUL)
#define REG_DMAC_CHSTATUS27 (*(RwReg *)0x4100A1FFUL)
#define REG_DMAC_CHCTRLA28 (*(RwReg *)0x4100A200UL)
#define REG_DMAC_CHCTRLB28 (*(RwReg *)0x4100A204UL)
#define REG_DMAC_CHPRILVL28 (*(RwReg *)0x4100A205UL)
#define REG_DMAC_CHEVCTRL28 (*(RwReg *)0x4100A206UL)
#define REG_DMAC_CHINTENCLR28 (*(RwReg *)0x4100A20CUL)
#define REG_DMAC_CHINTENSET28 (*(RwReg *)0x4100A20DUL)
#define REG_DMAC_CHINTFLAG28 (*(RwReg *)0x4100A20EUL)
#define REG_DMAC_CHSTATUS28 (*(RwReg *)0x4100A20FUL)
#define REG_DMAC_CHCTRLA29 (*(RwReg *)0x4100A210UL)
#define REG_DMAC_CHCTRLB29 (*(RwReg *)0x4100A214UL)
#define REG_DMAC_CHPRILVL29 (*(RwReg *)0x4100A215UL)
#define REG_DMAC_CHEVCTRL29 (*(RwReg *)0x4100A216UL)
#define REG_DMAC_CHINTENCLR29 (*(RwReg *)0x4100A21CUL)
#define REG_DMAC_CHINTENSET29 (*(RwReg *)0x4100A21DUL)
#define REG_DMAC_CHINTFLAG29 (*(RwReg *)0x4100A21EUL)
#define REG_DMAC_CHSTATUS29 (*(RwReg *)0x4100A21FUL)
#define REG_DMAC_CHCTRLA30 (*(RwReg *)0x4100A220UL)
#define REG_DMAC_CHCTRLB30 (*(RwReg *)0x4100A224UL)
#define REG_DMAC_CHPRILVL30 (*(RwReg *)0x4100A225UL)
#define REG_DMAC_CHEVCTRL30 (*(RwReg *)0x4100A226UL)
#define REG_DMAC_CHINTENCLR30 (*(RwReg *)0x4100A22CUL)
#define REG_DMAC_CHINTENSET30 (*(RwReg *)0x4100A22DUL)
#define REG_DMAC_CHINTFLAG30 (*(RwReg *)0x4100A22EUL)
#define REG_DMAC_CHSTATUS30 (*(RwReg *)0x4100A22FUL)
#define REG_DMAC_CHCTRLA31 (*(RwReg *)0x4100A230UL)
#define REG_DMAC_CHCTRLB31 (*(RwReg *)0x4100A234UL)
#define REG_DMAC_CHPRILVL31 (*(RwReg *)0x4100A235UL)
#define REG_DMAC_CHEVCTRL31 (*(RwReg *)0x4100A236UL)
#define REG_DMAC_CHINTENCLR31 (*(RwReg *)0x4100A23CUL)
#define REG_DMAC_CHINTENSET31 (*(RwReg *)0x4100A23DUL)
#define REG_DMAC_CHINTFLAG31 (*(RwReg *)0x4100A23EUL)
#define REG_DMAC_CHSTATUS31 (*(RwReg *)0x4100A23FUL)



#define DMAC_BURST 1
#define DMAC_CH_BITS 5
#define DMAC_CH_NUM 32
#define DMAC_CLK_AHB_ID 9
#define DMAC_EVIN_NUM 8
#define DMAC_EVOUT_NUM 4
#define DMAC_FIFO_SIZE 16
#define DMAC_LVL_BITS 2
#define DMAC_LVL_NUM 4
#define DMAC_QOSCTRL_D_RESETVALUE 2
#define DMAC_QOSCTRL_F_RESETVALUE 2
#define DMAC_QOSCTRL_WRB_RESETVALUE 2
#define DMAC_TRIG_BITS 7
#define DMAC_TRIG_NUM 85
# 634 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/dsu.h" 1
# 31 "asf4/samd51/include/instance/dsu.h"
#define _SAMD51_DSU_INSTANCE_ 
# 75 "asf4/samd51/include/instance/dsu.h"
#define REG_DSU_CTRL (*(WoReg8 *)0x41002000UL)
#define REG_DSU_STATUSA (*(RwReg8 *)0x41002001UL)
#define REG_DSU_STATUSB (*(RoReg8 *)0x41002002UL)
#define REG_DSU_ADDR (*(RwReg *)0x41002004UL)
#define REG_DSU_LENGTH (*(RwReg *)0x41002008UL)
#define REG_DSU_DATA (*(RwReg *)0x4100200CUL)
#define REG_DSU_DCC0 (*(RwReg *)0x41002010UL)
#define REG_DSU_DCC1 (*(RwReg *)0x41002014UL)
#define REG_DSU_DID (*(RoReg *)0x41002018UL)
#define REG_DSU_CFG (*(RwReg *)0x4100201CUL)
#define REG_DSU_MBCTRL (*(RwReg *)0x41002040UL)
#define REG_DSU_MBCONFIG (*(RwReg *)0x41002044UL)
#define REG_DSU_MBWORD (*(RwReg *)0x41002048UL)
#define REG_DSU_MBGSTAT (*(RwReg *)0x4100204CUL)
#define REG_DSU_MBDFAIL (*(RoReg *)0x41002050UL)
#define REG_DSU_MBDEXP (*(RoReg *)0x41002054UL)
#define REG_DSU_MBAFAIL (*(RoReg *)0x41002058UL)
#define REG_DSU_MBCONTEXT (*(RoReg *)0x4100205CUL)
#define REG_DSU_MBENABLE0 (*(RwReg *)0x41002060UL)
#define REG_DSU_MBBUSY0 (*(RoReg *)0x41002068UL)
#define REG_DSU_MBSTATUS0 (*(RwReg *)0x41002070UL)
#define REG_DSU_DCFG0 (*(RwReg *)0x410020F0UL)
#define REG_DSU_DCFG1 (*(RwReg *)0x410020F4UL)
#define REG_DSU_ENTRY0 (*(RoReg *)0x41003000UL)
#define REG_DSU_ENTRY1 (*(RoReg *)0x41003004UL)
#define REG_DSU_END (*(RoReg *)0x41003008UL)
#define REG_DSU_MEMTYPE (*(RoReg *)0x41003FCCUL)
#define REG_DSU_PID4 (*(RoReg *)0x41003FD0UL)
#define REG_DSU_PID5 (*(RoReg *)0x41003FD4UL)
#define REG_DSU_PID6 (*(RoReg *)0x41003FD8UL)
#define REG_DSU_PID7 (*(RoReg *)0x41003FDCUL)
#define REG_DSU_PID0 (*(RoReg *)0x41003FE0UL)
#define REG_DSU_PID1 (*(RoReg *)0x41003FE4UL)
#define REG_DSU_PID2 (*(RoReg *)0x41003FE8UL)
#define REG_DSU_PID3 (*(RoReg *)0x41003FECUL)
#define REG_DSU_CID0 (*(RoReg *)0x41003FF0UL)
#define REG_DSU_CID1 (*(RoReg *)0x41003FF4UL)
#define REG_DSU_CID2 (*(RoReg *)0x41003FF8UL)
#define REG_DSU_CID3 (*(RoReg *)0x41003FFCUL)



#define DSU_CLK_AHB_ID 4
#define DSU_DMAC_ID_DCC0 2
#define DSU_DMAC_ID_DCC1 3
# 635 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/eic.h" 1
# 31 "asf4/samd51/include/instance/eic.h"
#define _SAMD51_EIC_INSTANCE_ 
# 50 "asf4/samd51/include/instance/eic.h"
#define REG_EIC_CTRLA (*(RwReg8 *)0x40002800UL)
#define REG_EIC_NMICTRL (*(RwReg8 *)0x40002801UL)
#define REG_EIC_NMIFLAG (*(RwReg16*)0x40002802UL)
#define REG_EIC_SYNCBUSY (*(RoReg *)0x40002804UL)
#define REG_EIC_EVCTRL (*(RwReg *)0x40002808UL)
#define REG_EIC_INTENCLR (*(RwReg *)0x4000280CUL)
#define REG_EIC_INTENSET (*(RwReg *)0x40002810UL)
#define REG_EIC_INTFLAG (*(RwReg *)0x40002814UL)
#define REG_EIC_ASYNCH (*(RwReg *)0x40002818UL)
#define REG_EIC_CONFIG0 (*(RwReg *)0x4000281CUL)
#define REG_EIC_CONFIG1 (*(RwReg *)0x40002820UL)
#define REG_EIC_DEBOUNCEN (*(RwReg *)0x40002830UL)
#define REG_EIC_DPRESCALER (*(RwReg *)0x40002834UL)
#define REG_EIC_PINSTATE (*(RoReg *)0x40002838UL)



#define EIC_EXTINT_NUM 16
#define EIC_GCLK_ID 4
#define EIC_NUMBER_OF_CONFIG_REGS 2
#define EIC_NUMBER_OF_DPRESCALER_REGS 2
#define EIC_NUMBER_OF_INTERRUPTS 16
# 636 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/evsys.h" 1
# 31 "asf4/samd51/include/instance/evsys.h"
#define _SAMD51_EVSYS_INSTANCE_ 
# 270 "asf4/samd51/include/instance/evsys.h"
#define REG_EVSYS_CTRLA (*(RwReg8 *)0x4100E000UL)
#define REG_EVSYS_SWEVT (*(WoReg *)0x4100E004UL)
#define REG_EVSYS_PRICTRL (*(RwReg8 *)0x4100E008UL)
#define REG_EVSYS_INTPEND (*(RwReg16*)0x4100E010UL)
#define REG_EVSYS_INTSTATUS (*(RoReg *)0x4100E014UL)
#define REG_EVSYS_BUSYCH (*(RoReg *)0x4100E018UL)
#define REG_EVSYS_READYUSR (*(RoReg *)0x4100E01CUL)
#define REG_EVSYS_CHANNEL0 (*(RwReg *)0x4100E020UL)
#define REG_EVSYS_CHINTENCLR0 (*(RwReg *)0x4100E024UL)
#define REG_EVSYS_CHINTENSET0 (*(RwReg *)0x4100E025UL)
#define REG_EVSYS_CHINTFLAG0 (*(RwReg *)0x4100E026UL)
#define REG_EVSYS_CHSTATUS0 (*(RoReg *)0x4100E027UL)
#define REG_EVSYS_CHANNEL1 (*(RwReg *)0x4100E028UL)
#define REG_EVSYS_CHINTENCLR1 (*(RwReg *)0x4100E02CUL)
#define REG_EVSYS_CHINTENSET1 (*(RwReg *)0x4100E02DUL)
#define REG_EVSYS_CHINTFLAG1 (*(RwReg *)0x4100E02EUL)
#define REG_EVSYS_CHSTATUS1 (*(RoReg *)0x4100E02FUL)
#define REG_EVSYS_CHANNEL2 (*(RwReg *)0x4100E030UL)
#define REG_EVSYS_CHINTENCLR2 (*(RwReg *)0x4100E034UL)
#define REG_EVSYS_CHINTENSET2 (*(RwReg *)0x4100E035UL)
#define REG_EVSYS_CHINTFLAG2 (*(RwReg *)0x4100E036UL)
#define REG_EVSYS_CHSTATUS2 (*(RoReg *)0x4100E037UL)
#define REG_EVSYS_CHANNEL3 (*(RwReg *)0x4100E038UL)
#define REG_EVSYS_CHINTENCLR3 (*(RwReg *)0x4100E03CUL)
#define REG_EVSYS_CHINTENSET3 (*(RwReg *)0x4100E03DUL)
#define REG_EVSYS_CHINTFLAG3 (*(RwReg *)0x4100E03EUL)
#define REG_EVSYS_CHSTATUS3 (*(RoReg *)0x4100E03FUL)
#define REG_EVSYS_CHANNEL4 (*(RwReg *)0x4100E040UL)
#define REG_EVSYS_CHINTENCLR4 (*(RwReg *)0x4100E044UL)
#define REG_EVSYS_CHINTENSET4 (*(RwReg *)0x4100E045UL)
#define REG_EVSYS_CHINTFLAG4 (*(RwReg *)0x4100E046UL)
#define REG_EVSYS_CHSTATUS4 (*(RoReg *)0x4100E047UL)
#define REG_EVSYS_CHANNEL5 (*(RwReg *)0x4100E048UL)
#define REG_EVSYS_CHINTENCLR5 (*(RwReg *)0x4100E04CUL)
#define REG_EVSYS_CHINTENSET5 (*(RwReg *)0x4100E04DUL)
#define REG_EVSYS_CHINTFLAG5 (*(RwReg *)0x4100E04EUL)
#define REG_EVSYS_CHSTATUS5 (*(RoReg *)0x4100E04FUL)
#define REG_EVSYS_CHANNEL6 (*(RwReg *)0x4100E050UL)
#define REG_EVSYS_CHINTENCLR6 (*(RwReg *)0x4100E054UL)
#define REG_EVSYS_CHINTENSET6 (*(RwReg *)0x4100E055UL)
#define REG_EVSYS_CHINTFLAG6 (*(RwReg *)0x4100E056UL)
#define REG_EVSYS_CHSTATUS6 (*(RoReg *)0x4100E057UL)
#define REG_EVSYS_CHANNEL7 (*(RwReg *)0x4100E058UL)
#define REG_EVSYS_CHINTENCLR7 (*(RwReg *)0x4100E05CUL)
#define REG_EVSYS_CHINTENSET7 (*(RwReg *)0x4100E05DUL)
#define REG_EVSYS_CHINTFLAG7 (*(RwReg *)0x4100E05EUL)
#define REG_EVSYS_CHSTATUS7 (*(RoReg *)0x4100E05FUL)
#define REG_EVSYS_CHANNEL8 (*(RwReg *)0x4100E060UL)
#define REG_EVSYS_CHINTENCLR8 (*(RwReg *)0x4100E064UL)
#define REG_EVSYS_CHINTENSET8 (*(RwReg *)0x4100E065UL)
#define REG_EVSYS_CHINTFLAG8 (*(RwReg *)0x4100E066UL)
#define REG_EVSYS_CHSTATUS8 (*(RoReg *)0x4100E067UL)
#define REG_EVSYS_CHANNEL9 (*(RwReg *)0x4100E068UL)
#define REG_EVSYS_CHINTENCLR9 (*(RwReg *)0x4100E06CUL)
#define REG_EVSYS_CHINTENSET9 (*(RwReg *)0x4100E06DUL)
#define REG_EVSYS_CHINTFLAG9 (*(RwReg *)0x4100E06EUL)
#define REG_EVSYS_CHSTATUS9 (*(RoReg *)0x4100E06FUL)
#define REG_EVSYS_CHANNEL10 (*(RwReg *)0x4100E070UL)
#define REG_EVSYS_CHINTENCLR10 (*(RwReg *)0x4100E074UL)
#define REG_EVSYS_CHINTENSET10 (*(RwReg *)0x4100E075UL)
#define REG_EVSYS_CHINTFLAG10 (*(RwReg *)0x4100E076UL)
#define REG_EVSYS_CHSTATUS10 (*(RoReg *)0x4100E077UL)
#define REG_EVSYS_CHANNEL11 (*(RwReg *)0x4100E078UL)
#define REG_EVSYS_CHINTENCLR11 (*(RwReg *)0x4100E07CUL)
#define REG_EVSYS_CHINTENSET11 (*(RwReg *)0x4100E07DUL)
#define REG_EVSYS_CHINTFLAG11 (*(RwReg *)0x4100E07EUL)
#define REG_EVSYS_CHSTATUS11 (*(RoReg *)0x4100E07FUL)
#define REG_EVSYS_CHANNEL12 (*(RwReg *)0x4100E080UL)
#define REG_EVSYS_CHINTENCLR12 (*(RwReg *)0x4100E084UL)
#define REG_EVSYS_CHINTENSET12 (*(RwReg *)0x4100E085UL)
#define REG_EVSYS_CHINTFLAG12 (*(RwReg *)0x4100E086UL)
#define REG_EVSYS_CHSTATUS12 (*(RoReg *)0x4100E087UL)
#define REG_EVSYS_CHANNEL13 (*(RwReg *)0x4100E088UL)
#define REG_EVSYS_CHINTENCLR13 (*(RwReg *)0x4100E08CUL)
#define REG_EVSYS_CHINTENSET13 (*(RwReg *)0x4100E08DUL)
#define REG_EVSYS_CHINTFLAG13 (*(RwReg *)0x4100E08EUL)
#define REG_EVSYS_CHSTATUS13 (*(RoReg *)0x4100E08FUL)
#define REG_EVSYS_CHANNEL14 (*(RwReg *)0x4100E090UL)
#define REG_EVSYS_CHINTENCLR14 (*(RwReg *)0x4100E094UL)
#define REG_EVSYS_CHINTENSET14 (*(RwReg *)0x4100E095UL)
#define REG_EVSYS_CHINTFLAG14 (*(RwReg *)0x4100E096UL)
#define REG_EVSYS_CHSTATUS14 (*(RoReg *)0x4100E097UL)
#define REG_EVSYS_CHANNEL15 (*(RwReg *)0x4100E098UL)
#define REG_EVSYS_CHINTENCLR15 (*(RwReg *)0x4100E09CUL)
#define REG_EVSYS_CHINTENSET15 (*(RwReg *)0x4100E09DUL)
#define REG_EVSYS_CHINTFLAG15 (*(RwReg *)0x4100E09EUL)
#define REG_EVSYS_CHSTATUS15 (*(RoReg *)0x4100E09FUL)
#define REG_EVSYS_CHANNEL16 (*(RwReg *)0x4100E0A0UL)
#define REG_EVSYS_CHINTENCLR16 (*(RwReg *)0x4100E0A4UL)
#define REG_EVSYS_CHINTENSET16 (*(RwReg *)0x4100E0A5UL)
#define REG_EVSYS_CHINTFLAG16 (*(RwReg *)0x4100E0A6UL)
#define REG_EVSYS_CHSTATUS16 (*(RoReg *)0x4100E0A7UL)
#define REG_EVSYS_CHANNEL17 (*(RwReg *)0x4100E0A8UL)
#define REG_EVSYS_CHINTENCLR17 (*(RwReg *)0x4100E0ACUL)
#define REG_EVSYS_CHINTENSET17 (*(RwReg *)0x4100E0ADUL)
#define REG_EVSYS_CHINTFLAG17 (*(RwReg *)0x4100E0AEUL)
#define REG_EVSYS_CHSTATUS17 (*(RoReg *)0x4100E0AFUL)
#define REG_EVSYS_CHANNEL18 (*(RwReg *)0x4100E0B0UL)
#define REG_EVSYS_CHINTENCLR18 (*(RwReg *)0x4100E0B4UL)
#define REG_EVSYS_CHINTENSET18 (*(RwReg *)0x4100E0B5UL)
#define REG_EVSYS_CHINTFLAG18 (*(RwReg *)0x4100E0B6UL)
#define REG_EVSYS_CHSTATUS18 (*(RoReg *)0x4100E0B7UL)
#define REG_EVSYS_CHANNEL19 (*(RwReg *)0x4100E0B8UL)
#define REG_EVSYS_CHINTENCLR19 (*(RwReg *)0x4100E0BCUL)
#define REG_EVSYS_CHINTENSET19 (*(RwReg *)0x4100E0BDUL)
#define REG_EVSYS_CHINTFLAG19 (*(RwReg *)0x4100E0BEUL)
#define REG_EVSYS_CHSTATUS19 (*(RoReg *)0x4100E0BFUL)
#define REG_EVSYS_CHANNEL20 (*(RwReg *)0x4100E0C0UL)
#define REG_EVSYS_CHINTENCLR20 (*(RwReg *)0x4100E0C4UL)
#define REG_EVSYS_CHINTENSET20 (*(RwReg *)0x4100E0C5UL)
#define REG_EVSYS_CHINTFLAG20 (*(RwReg *)0x4100E0C6UL)
#define REG_EVSYS_CHSTATUS20 (*(RoReg *)0x4100E0C7UL)
#define REG_EVSYS_CHANNEL21 (*(RwReg *)0x4100E0C8UL)
#define REG_EVSYS_CHINTENCLR21 (*(RwReg *)0x4100E0CCUL)
#define REG_EVSYS_CHINTENSET21 (*(RwReg *)0x4100E0CDUL)
#define REG_EVSYS_CHINTFLAG21 (*(RwReg *)0x4100E0CEUL)
#define REG_EVSYS_CHSTATUS21 (*(RoReg *)0x4100E0CFUL)
#define REG_EVSYS_CHANNEL22 (*(RwReg *)0x4100E0D0UL)
#define REG_EVSYS_CHINTENCLR22 (*(RwReg *)0x4100E0D4UL)
#define REG_EVSYS_CHINTENSET22 (*(RwReg *)0x4100E0D5UL)
#define REG_EVSYS_CHINTFLAG22 (*(RwReg *)0x4100E0D6UL)
#define REG_EVSYS_CHSTATUS22 (*(RoReg *)0x4100E0D7UL)
#define REG_EVSYS_CHANNEL23 (*(RwReg *)0x4100E0D8UL)
#define REG_EVSYS_CHINTENCLR23 (*(RwReg *)0x4100E0DCUL)
#define REG_EVSYS_CHINTENSET23 (*(RwReg *)0x4100E0DDUL)
#define REG_EVSYS_CHINTFLAG23 (*(RwReg *)0x4100E0DEUL)
#define REG_EVSYS_CHSTATUS23 (*(RoReg *)0x4100E0DFUL)
#define REG_EVSYS_CHANNEL24 (*(RwReg *)0x4100E0E0UL)
#define REG_EVSYS_CHINTENCLR24 (*(RwReg *)0x4100E0E4UL)
#define REG_EVSYS_CHINTENSET24 (*(RwReg *)0x4100E0E5UL)
#define REG_EVSYS_CHINTFLAG24 (*(RwReg *)0x4100E0E6UL)
#define REG_EVSYS_CHSTATUS24 (*(RoReg *)0x4100E0E7UL)
#define REG_EVSYS_CHANNEL25 (*(RwReg *)0x4100E0E8UL)
#define REG_EVSYS_CHINTENCLR25 (*(RwReg *)0x4100E0ECUL)
#define REG_EVSYS_CHINTENSET25 (*(RwReg *)0x4100E0EDUL)
#define REG_EVSYS_CHINTFLAG25 (*(RwReg *)0x4100E0EEUL)
#define REG_EVSYS_CHSTATUS25 (*(RoReg *)0x4100E0EFUL)
#define REG_EVSYS_CHANNEL26 (*(RwReg *)0x4100E0F0UL)
#define REG_EVSYS_CHINTENCLR26 (*(RwReg *)0x4100E0F4UL)
#define REG_EVSYS_CHINTENSET26 (*(RwReg *)0x4100E0F5UL)
#define REG_EVSYS_CHINTFLAG26 (*(RwReg *)0x4100E0F6UL)
#define REG_EVSYS_CHSTATUS26 (*(RoReg *)0x4100E0F7UL)
#define REG_EVSYS_CHANNEL27 (*(RwReg *)0x4100E0F8UL)
#define REG_EVSYS_CHINTENCLR27 (*(RwReg *)0x4100E0FCUL)
#define REG_EVSYS_CHINTENSET27 (*(RwReg *)0x4100E0FDUL)
#define REG_EVSYS_CHINTFLAG27 (*(RwReg *)0x4100E0FEUL)
#define REG_EVSYS_CHSTATUS27 (*(RoReg *)0x4100E0FFUL)
#define REG_EVSYS_CHANNEL28 (*(RwReg *)0x4100E100UL)
#define REG_EVSYS_CHINTENCLR28 (*(RwReg *)0x4100E104UL)
#define REG_EVSYS_CHINTENSET28 (*(RwReg *)0x4100E105UL)
#define REG_EVSYS_CHINTFLAG28 (*(RwReg *)0x4100E106UL)
#define REG_EVSYS_CHSTATUS28 (*(RoReg *)0x4100E107UL)
#define REG_EVSYS_CHANNEL29 (*(RwReg *)0x4100E108UL)
#define REG_EVSYS_CHINTENCLR29 (*(RwReg *)0x4100E10CUL)
#define REG_EVSYS_CHINTENSET29 (*(RwReg *)0x4100E10DUL)
#define REG_EVSYS_CHINTFLAG29 (*(RwReg *)0x4100E10EUL)
#define REG_EVSYS_CHSTATUS29 (*(RoReg *)0x4100E10FUL)
#define REG_EVSYS_CHANNEL30 (*(RwReg *)0x4100E110UL)
#define REG_EVSYS_CHINTENCLR30 (*(RwReg *)0x4100E114UL)
#define REG_EVSYS_CHINTENSET30 (*(RwReg *)0x4100E115UL)
#define REG_EVSYS_CHINTFLAG30 (*(RwReg *)0x4100E116UL)
#define REG_EVSYS_CHSTATUS30 (*(RoReg *)0x4100E117UL)
#define REG_EVSYS_CHANNEL31 (*(RwReg *)0x4100E118UL)
#define REG_EVSYS_CHINTENCLR31 (*(RwReg *)0x4100E11CUL)
#define REG_EVSYS_CHINTENSET31 (*(RwReg *)0x4100E11DUL)
#define REG_EVSYS_CHINTFLAG31 (*(RwReg *)0x4100E11EUL)
#define REG_EVSYS_CHSTATUS31 (*(RoReg *)0x4100E11FUL)
#define REG_EVSYS_USER0 (*(RwReg *)0x4100E120UL)
#define REG_EVSYS_USER1 (*(RwReg *)0x4100E124UL)
#define REG_EVSYS_USER2 (*(RwReg *)0x4100E128UL)
#define REG_EVSYS_USER3 (*(RwReg *)0x4100E12CUL)
#define REG_EVSYS_USER4 (*(RwReg *)0x4100E130UL)
#define REG_EVSYS_USER5 (*(RwReg *)0x4100E134UL)
#define REG_EVSYS_USER6 (*(RwReg *)0x4100E138UL)
#define REG_EVSYS_USER7 (*(RwReg *)0x4100E13CUL)
#define REG_EVSYS_USER8 (*(RwReg *)0x4100E140UL)
#define REG_EVSYS_USER9 (*(RwReg *)0x4100E144UL)
#define REG_EVSYS_USER10 (*(RwReg *)0x4100E148UL)
#define REG_EVSYS_USER11 (*(RwReg *)0x4100E14CUL)
#define REG_EVSYS_USER12 (*(RwReg *)0x4100E150UL)
#define REG_EVSYS_USER13 (*(RwReg *)0x4100E154UL)
#define REG_EVSYS_USER14 (*(RwReg *)0x4100E158UL)
#define REG_EVSYS_USER15 (*(RwReg *)0x4100E15CUL)
#define REG_EVSYS_USER16 (*(RwReg *)0x4100E160UL)
#define REG_EVSYS_USER17 (*(RwReg *)0x4100E164UL)
#define REG_EVSYS_USER18 (*(RwReg *)0x4100E168UL)
#define REG_EVSYS_USER19 (*(RwReg *)0x4100E16CUL)
#define REG_EVSYS_USER20 (*(RwReg *)0x4100E170UL)
#define REG_EVSYS_USER21 (*(RwReg *)0x4100E174UL)
#define REG_EVSYS_USER22 (*(RwReg *)0x4100E178UL)
#define REG_EVSYS_USER23 (*(RwReg *)0x4100E17CUL)
#define REG_EVSYS_USER24 (*(RwReg *)0x4100E180UL)
#define REG_EVSYS_USER25 (*(RwReg *)0x4100E184UL)
#define REG_EVSYS_USER26 (*(RwReg *)0x4100E188UL)
#define REG_EVSYS_USER27 (*(RwReg *)0x4100E18CUL)
#define REG_EVSYS_USER28 (*(RwReg *)0x4100E190UL)
#define REG_EVSYS_USER29 (*(RwReg *)0x4100E194UL)
#define REG_EVSYS_USER30 (*(RwReg *)0x4100E198UL)
#define REG_EVSYS_USER31 (*(RwReg *)0x4100E19CUL)
#define REG_EVSYS_USER32 (*(RwReg *)0x4100E1A0UL)
#define REG_EVSYS_USER33 (*(RwReg *)0x4100E1A4UL)
#define REG_EVSYS_USER34 (*(RwReg *)0x4100E1A8UL)
#define REG_EVSYS_USER35 (*(RwReg *)0x4100E1ACUL)
#define REG_EVSYS_USER36 (*(RwReg *)0x4100E1B0UL)
#define REG_EVSYS_USER37 (*(RwReg *)0x4100E1B4UL)
#define REG_EVSYS_USER38 (*(RwReg *)0x4100E1B8UL)
#define REG_EVSYS_USER39 (*(RwReg *)0x4100E1BCUL)
#define REG_EVSYS_USER40 (*(RwReg *)0x4100E1C0UL)
#define REG_EVSYS_USER41 (*(RwReg *)0x4100E1C4UL)
#define REG_EVSYS_USER42 (*(RwReg *)0x4100E1C8UL)
#define REG_EVSYS_USER43 (*(RwReg *)0x4100E1CCUL)
#define REG_EVSYS_USER44 (*(RwReg *)0x4100E1D0UL)
#define REG_EVSYS_USER45 (*(RwReg *)0x4100E1D4UL)
#define REG_EVSYS_USER46 (*(RwReg *)0x4100E1D8UL)
#define REG_EVSYS_USER47 (*(RwReg *)0x4100E1DCUL)
#define REG_EVSYS_USER48 (*(RwReg *)0x4100E1E0UL)
#define REG_EVSYS_USER49 (*(RwReg *)0x4100E1E4UL)
#define REG_EVSYS_USER50 (*(RwReg *)0x4100E1E8UL)
#define REG_EVSYS_USER51 (*(RwReg *)0x4100E1ECUL)
#define REG_EVSYS_USER52 (*(RwReg *)0x4100E1F0UL)
#define REG_EVSYS_USER53 (*(RwReg *)0x4100E1F4UL)
#define REG_EVSYS_USER54 (*(RwReg *)0x4100E1F8UL)
#define REG_EVSYS_USER55 (*(RwReg *)0x4100E1FCUL)
#define REG_EVSYS_USER56 (*(RwReg *)0x4100E200UL)
#define REG_EVSYS_USER57 (*(RwReg *)0x4100E204UL)
#define REG_EVSYS_USER58 (*(RwReg *)0x4100E208UL)
#define REG_EVSYS_USER59 (*(RwReg *)0x4100E20CUL)
#define REG_EVSYS_USER60 (*(RwReg *)0x4100E210UL)
#define REG_EVSYS_USER61 (*(RwReg *)0x4100E214UL)
#define REG_EVSYS_USER62 (*(RwReg *)0x4100E218UL)
#define REG_EVSYS_USER63 (*(RwReg *)0x4100E21CUL)
#define REG_EVSYS_USER64 (*(RwReg *)0x4100E220UL)
#define REG_EVSYS_USER65 (*(RwReg *)0x4100E224UL)
#define REG_EVSYS_USER66 (*(RwReg *)0x4100E228UL)



#define EVSYS_ASYNCHRONOUS_CHANNELS 0xFFFFF000
#define EVSYS_CHANNELS 32
#define EVSYS_CHANNELS_BITS 5
#define EVSYS_EXTEVT_NUM 0
#define EVSYS_GCLK_ID_0 11
#define EVSYS_GCLK_ID_1 12
#define EVSYS_GCLK_ID_2 13
#define EVSYS_GCLK_ID_3 14
#define EVSYS_GCLK_ID_4 15
#define EVSYS_GCLK_ID_5 16
#define EVSYS_GCLK_ID_6 17
#define EVSYS_GCLK_ID_7 18
#define EVSYS_GCLK_ID_8 19
#define EVSYS_GCLK_ID_9 20
#define EVSYS_GCLK_ID_10 21
#define EVSYS_GCLK_ID_11 22
#define EVSYS_GCLK_ID_LSB 11
#define EVSYS_GCLK_ID_MSB 22
#define EVSYS_GCLK_ID_SIZE 12
#define EVSYS_GENERATORS 119
#define EVSYS_GENERATORS_BITS 7
#define EVSYS_SYNCH_NUM 12
#define EVSYS_SYNCH_NUM_BITS 4
#define EVSYS_USERS 67
#define EVSYS_USERS_BITS 7


#define EVSYS_ID_GEN_OSCCTRL_XOSC_FAIL_0 1
#define EVSYS_ID_GEN_OSCCTRL_XOSC_FAIL_1 2
#define EVSYS_ID_GEN_OSC32KCTRL_XOSC32K_FAIL 3
#define EVSYS_ID_GEN_RTC_PER_0 4
#define EVSYS_ID_GEN_RTC_PER_1 5
#define EVSYS_ID_GEN_RTC_PER_2 6
#define EVSYS_ID_GEN_RTC_PER_3 7
#define EVSYS_ID_GEN_RTC_PER_4 8
#define EVSYS_ID_GEN_RTC_PER_5 9
#define EVSYS_ID_GEN_RTC_PER_6 10
#define EVSYS_ID_GEN_RTC_PER_7 11
#define EVSYS_ID_GEN_RTC_CMP_0 12
#define EVSYS_ID_GEN_RTC_CMP_1 13
#define EVSYS_ID_GEN_RTC_CMP_2 14
#define EVSYS_ID_GEN_RTC_CMP_3 15
#define EVSYS_ID_GEN_RTC_TAMPER 16
#define EVSYS_ID_GEN_RTC_OVF 17
#define EVSYS_ID_GEN_EIC_EXTINT_0 18
#define EVSYS_ID_GEN_EIC_EXTINT_1 19
#define EVSYS_ID_GEN_EIC_EXTINT_2 20
#define EVSYS_ID_GEN_EIC_EXTINT_3 21
#define EVSYS_ID_GEN_EIC_EXTINT_4 22
#define EVSYS_ID_GEN_EIC_EXTINT_5 23
#define EVSYS_ID_GEN_EIC_EXTINT_6 24
#define EVSYS_ID_GEN_EIC_EXTINT_7 25
#define EVSYS_ID_GEN_EIC_EXTINT_8 26
#define EVSYS_ID_GEN_EIC_EXTINT_9 27
#define EVSYS_ID_GEN_EIC_EXTINT_10 28
#define EVSYS_ID_GEN_EIC_EXTINT_11 29
#define EVSYS_ID_GEN_EIC_EXTINT_12 30
#define EVSYS_ID_GEN_EIC_EXTINT_13 31
#define EVSYS_ID_GEN_EIC_EXTINT_14 32
#define EVSYS_ID_GEN_EIC_EXTINT_15 33
#define EVSYS_ID_GEN_DMAC_CH_0 34
#define EVSYS_ID_GEN_DMAC_CH_1 35
#define EVSYS_ID_GEN_DMAC_CH_2 36
#define EVSYS_ID_GEN_DMAC_CH_3 37
#define EVSYS_ID_GEN_PAC_ACCERR 38
#define EVSYS_ID_GEN_TAL_BRK 39
#define EVSYS_ID_GEN_TAL_IRQMON_0 40
#define EVSYS_ID_GEN_TCC0_OVF 41
#define EVSYS_ID_GEN_TCC0_TRG 42
#define EVSYS_ID_GEN_TCC0_CNT 43
#define EVSYS_ID_GEN_TCC0_MCX_0 44
#define EVSYS_ID_GEN_TCC0_MCX_1 45
#define EVSYS_ID_GEN_TCC0_MCX_2 46
#define EVSYS_ID_GEN_TCC0_MCX_3 47
#define EVSYS_ID_GEN_TCC0_MCX_4 48
#define EVSYS_ID_GEN_TCC0_MCX_5 49
#define EVSYS_ID_GEN_TCC1_OVF 50
#define EVSYS_ID_GEN_TCC1_TRG 51
#define EVSYS_ID_GEN_TCC1_CNT 52
#define EVSYS_ID_GEN_TCC1_MCX_0 53
#define EVSYS_ID_GEN_TCC1_MCX_1 54
#define EVSYS_ID_GEN_TCC1_MCX_2 55
#define EVSYS_ID_GEN_TCC1_MCX_3 56
#define EVSYS_ID_GEN_TCC2_OVF 57
#define EVSYS_ID_GEN_TCC2_TRG 58
#define EVSYS_ID_GEN_TCC2_CNT 59
#define EVSYS_ID_GEN_TCC2_MCX_0 60
#define EVSYS_ID_GEN_TCC2_MCX_1 61
#define EVSYS_ID_GEN_TCC2_MCX_2 62
#define EVSYS_ID_GEN_TCC3_OVF 63
#define EVSYS_ID_GEN_TCC3_TRG 64
#define EVSYS_ID_GEN_TCC3_CNT 65
#define EVSYS_ID_GEN_TCC3_MCX_0 66
#define EVSYS_ID_GEN_TCC3_MCX_1 67
#define EVSYS_ID_GEN_TCC4_OVF 68
#define EVSYS_ID_GEN_TCC4_TRG 69
#define EVSYS_ID_GEN_TCC4_CNT 70
#define EVSYS_ID_GEN_TCC4_MCX_0 71
#define EVSYS_ID_GEN_TCC4_MCX_1 72
#define EVSYS_ID_GEN_TC0_OVF 73
#define EVSYS_ID_GEN_TC0_MCX_0 74
#define EVSYS_ID_GEN_TC0_MCX_1 75
#define EVSYS_ID_GEN_TC1_OVF 76
#define EVSYS_ID_GEN_TC1_MCX_0 77
#define EVSYS_ID_GEN_TC1_MCX_1 78
#define EVSYS_ID_GEN_TC2_OVF 79
#define EVSYS_ID_GEN_TC2_MCX_0 80
#define EVSYS_ID_GEN_TC2_MCX_1 81
#define EVSYS_ID_GEN_TC3_OVF 82
#define EVSYS_ID_GEN_TC3_MCX_0 83
#define EVSYS_ID_GEN_TC3_MCX_1 84
#define EVSYS_ID_GEN_TC4_OVF 85
#define EVSYS_ID_GEN_TC4_MCX_0 86
#define EVSYS_ID_GEN_TC4_MCX_1 87
#define EVSYS_ID_GEN_TC5_OVF 88
#define EVSYS_ID_GEN_TC5_MCX_0 89
#define EVSYS_ID_GEN_TC5_MCX_1 90
#define EVSYS_ID_GEN_TC6_OVF 91
#define EVSYS_ID_GEN_TC6_MCX_0 92
#define EVSYS_ID_GEN_TC6_MCX_1 93
#define EVSYS_ID_GEN_TC7_OVF 94
#define EVSYS_ID_GEN_TC7_MCX_0 95
#define EVSYS_ID_GEN_TC7_MCX_1 96
#define EVSYS_ID_GEN_PDEC_OVF 97
#define EVSYS_ID_GEN_PDEC_ERR 98
#define EVSYS_ID_GEN_PDEC_DIR 99
#define EVSYS_ID_GEN_PDEC_VLC 100
#define EVSYS_ID_GEN_PDEC_MCX_0 101
#define EVSYS_ID_GEN_PDEC_MCX_1 102
#define EVSYS_ID_GEN_ADC0_RESRDY 103
#define EVSYS_ID_GEN_ADC0_WINMON 104
#define EVSYS_ID_GEN_ADC1_RESRDY 105
#define EVSYS_ID_GEN_ADC1_WINMON 106
#define EVSYS_ID_GEN_AC_COMP_0 107
#define EVSYS_ID_GEN_AC_COMP_1 108
#define EVSYS_ID_GEN_AC_WIN_0 109
#define EVSYS_ID_GEN_DAC_EMPTY_0 110
#define EVSYS_ID_GEN_DAC_EMPTY_1 111
#define EVSYS_ID_GEN_DAC_RESRDY_0 112
#define EVSYS_ID_GEN_DAC_RESRDY_1 113
#define EVSYS_ID_GEN_TRNG_READY 115
#define EVSYS_ID_GEN_CCL_LUTOUT_0 116
#define EVSYS_ID_GEN_CCL_LUTOUT_1 117
#define EVSYS_ID_GEN_CCL_LUTOUT_2 118
#define EVSYS_ID_GEN_CCL_LUTOUT_3 119


#define EVSYS_ID_USER_RTC_TAMPER 0
#define EVSYS_ID_USER_PORT_EV_0 1
#define EVSYS_ID_USER_PORT_EV_1 2
#define EVSYS_ID_USER_PORT_EV_2 3
#define EVSYS_ID_USER_PORT_EV_3 4
#define EVSYS_ID_USER_DMAC_CH_0 5
#define EVSYS_ID_USER_DMAC_CH_1 6
#define EVSYS_ID_USER_DMAC_CH_2 7
#define EVSYS_ID_USER_DMAC_CH_3 8
#define EVSYS_ID_USER_DMAC_CH_4 9
#define EVSYS_ID_USER_DMAC_CH_5 10
#define EVSYS_ID_USER_DMAC_CH_6 11
#define EVSYS_ID_USER_DMAC_CH_7 12
#define EVSYS_ID_USER_TAL_BRK 13
#define EVSYS_ID_USER_CM4_TRACE_START 14
#define EVSYS_ID_USER_CM4_TRACE_STOP 15
#define EVSYS_ID_USER_CM4_TRACE_TRIG 16
#define EVSYS_ID_USER_TCC0_EV_0 17
#define EVSYS_ID_USER_TCC0_EV_1 18
#define EVSYS_ID_USER_TCC0_MC_0 19
#define EVSYS_ID_USER_TCC0_MC_1 20
#define EVSYS_ID_USER_TCC0_MC_2 21
#define EVSYS_ID_USER_TCC0_MC_3 22
#define EVSYS_ID_USER_TCC0_MC_4 23
#define EVSYS_ID_USER_TCC0_MC_5 24
#define EVSYS_ID_USER_TCC1_EV_0 25
#define EVSYS_ID_USER_TCC1_EV_1 26
#define EVSYS_ID_USER_TCC1_MC_0 27
#define EVSYS_ID_USER_TCC1_MC_1 28
#define EVSYS_ID_USER_TCC1_MC_2 29
#define EVSYS_ID_USER_TCC1_MC_3 30
#define EVSYS_ID_USER_TCC2_EV_0 31
#define EVSYS_ID_USER_TCC2_EV_1 32
#define EVSYS_ID_USER_TCC2_MC_0 33
#define EVSYS_ID_USER_TCC2_MC_1 34
#define EVSYS_ID_USER_TCC2_MC_2 35
#define EVSYS_ID_USER_TCC3_EV_0 36
#define EVSYS_ID_USER_TCC3_EV_1 37
#define EVSYS_ID_USER_TCC3_MC_0 38
#define EVSYS_ID_USER_TCC3_MC_1 39
#define EVSYS_ID_USER_TCC4_EV_0 40
#define EVSYS_ID_USER_TCC4_EV_1 41
#define EVSYS_ID_USER_TCC4_MC_0 42
#define EVSYS_ID_USER_TCC4_MC_1 43
#define EVSYS_ID_USER_TC0_EVU 44
#define EVSYS_ID_USER_TC1_EVU 45
#define EVSYS_ID_USER_TC2_EVU 46
#define EVSYS_ID_USER_TC3_EVU 47
#define EVSYS_ID_USER_TC4_EVU 48
#define EVSYS_ID_USER_TC5_EVU 49
#define EVSYS_ID_USER_TC6_EVU 50
#define EVSYS_ID_USER_TC7_EVU 51
#define EVSYS_ID_USER_PDEC_EVU_0 52
#define EVSYS_ID_USER_PDEC_EVU_1 53
#define EVSYS_ID_USER_PDEC_EVU_2 54
#define EVSYS_ID_USER_ADC0_START 55
#define EVSYS_ID_USER_ADC0_SYNC 56
#define EVSYS_ID_USER_ADC1_START 57
#define EVSYS_ID_USER_ADC1_SYNC 58
#define EVSYS_ID_USER_AC_SOC_0 59
#define EVSYS_ID_USER_AC_SOC_1 60
#define EVSYS_ID_USER_DAC_START_0 61
#define EVSYS_ID_USER_DAC_START_1 62
#define EVSYS_ID_USER_CCL_LUTIN_0 63
#define EVSYS_ID_USER_CCL_LUTIN_1 64
#define EVSYS_ID_USER_CCL_LUTIN_2 65
#define EVSYS_ID_USER_CCL_LUTIN_3 66
# 637 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/freqm.h" 1
# 31 "asf4/samd51/include/instance/freqm.h"
#define _SAMD51_FREQM_INSTANCE_ 
# 45 "asf4/samd51/include/instance/freqm.h"
#define REG_FREQM_CTRLA (*(RwReg8 *)0x40002C00UL)
#define REG_FREQM_CTRLB (*(WoReg8 *)0x40002C01UL)
#define REG_FREQM_CFGA (*(RwReg16*)0x40002C02UL)
#define REG_FREQM_INTENCLR (*(RwReg8 *)0x40002C08UL)
#define REG_FREQM_INTENSET (*(RwReg8 *)0x40002C09UL)
#define REG_FREQM_INTFLAG (*(RwReg8 *)0x40002C0AUL)
#define REG_FREQM_STATUS (*(RwReg8 *)0x40002C0BUL)
#define REG_FREQM_SYNCBUSY (*(RoReg *)0x40002C0CUL)
#define REG_FREQM_VALUE (*(RoReg *)0x40002C10UL)



#define FREQM_GCLK_ID_MSR 5
#define FREQM_GCLK_ID_REF 6
# 638 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/gclk.h" 1
# 31 "asf4/samd51/include/instance/gclk.h"
#define _SAMD51_GCLK_INSTANCE_ 
# 98 "asf4/samd51/include/instance/gclk.h"
#define REG_GCLK_CTRLA (*(RwReg8 *)0x40001C00UL)
#define REG_GCLK_SYNCBUSY (*(RoReg *)0x40001C04UL)
#define REG_GCLK_GENCTRL0 (*(RwReg *)0x40001C20UL)
#define REG_GCLK_GENCTRL1 (*(RwReg *)0x40001C24UL)
#define REG_GCLK_GENCTRL2 (*(RwReg *)0x40001C28UL)
#define REG_GCLK_GENCTRL3 (*(RwReg *)0x40001C2CUL)
#define REG_GCLK_GENCTRL4 (*(RwReg *)0x40001C30UL)
#define REG_GCLK_GENCTRL5 (*(RwReg *)0x40001C34UL)
#define REG_GCLK_GENCTRL6 (*(RwReg *)0x40001C38UL)
#define REG_GCLK_GENCTRL7 (*(RwReg *)0x40001C3CUL)
#define REG_GCLK_GENCTRL8 (*(RwReg *)0x40001C40UL)
#define REG_GCLK_GENCTRL9 (*(RwReg *)0x40001C44UL)
#define REG_GCLK_GENCTRL10 (*(RwReg *)0x40001C48UL)
#define REG_GCLK_GENCTRL11 (*(RwReg *)0x40001C4CUL)
#define REG_GCLK_PCHCTRL0 (*(RwReg *)0x40001C80UL)
#define REG_GCLK_PCHCTRL1 (*(RwReg *)0x40001C84UL)
#define REG_GCLK_PCHCTRL2 (*(RwReg *)0x40001C88UL)
#define REG_GCLK_PCHCTRL3 (*(RwReg *)0x40001C8CUL)
#define REG_GCLK_PCHCTRL4 (*(RwReg *)0x40001C90UL)
#define REG_GCLK_PCHCTRL5 (*(RwReg *)0x40001C94UL)
#define REG_GCLK_PCHCTRL6 (*(RwReg *)0x40001C98UL)
#define REG_GCLK_PCHCTRL7 (*(RwReg *)0x40001C9CUL)
#define REG_GCLK_PCHCTRL8 (*(RwReg *)0x40001CA0UL)
#define REG_GCLK_PCHCTRL9 (*(RwReg *)0x40001CA4UL)
#define REG_GCLK_PCHCTRL10 (*(RwReg *)0x40001CA8UL)
#define REG_GCLK_PCHCTRL11 (*(RwReg *)0x40001CACUL)
#define REG_GCLK_PCHCTRL12 (*(RwReg *)0x40001CB0UL)
#define REG_GCLK_PCHCTRL13 (*(RwReg *)0x40001CB4UL)
#define REG_GCLK_PCHCTRL14 (*(RwReg *)0x40001CB8UL)
#define REG_GCLK_PCHCTRL15 (*(RwReg *)0x40001CBCUL)
#define REG_GCLK_PCHCTRL16 (*(RwReg *)0x40001CC0UL)
#define REG_GCLK_PCHCTRL17 (*(RwReg *)0x40001CC4UL)
#define REG_GCLK_PCHCTRL18 (*(RwReg *)0x40001CC8UL)
#define REG_GCLK_PCHCTRL19 (*(RwReg *)0x40001CCCUL)
#define REG_GCLK_PCHCTRL20 (*(RwReg *)0x40001CD0UL)
#define REG_GCLK_PCHCTRL21 (*(RwReg *)0x40001CD4UL)
#define REG_GCLK_PCHCTRL22 (*(RwReg *)0x40001CD8UL)
#define REG_GCLK_PCHCTRL23 (*(RwReg *)0x40001CDCUL)
#define REG_GCLK_PCHCTRL24 (*(RwReg *)0x40001CE0UL)
#define REG_GCLK_PCHCTRL25 (*(RwReg *)0x40001CE4UL)
#define REG_GCLK_PCHCTRL26 (*(RwReg *)0x40001CE8UL)
#define REG_GCLK_PCHCTRL27 (*(RwReg *)0x40001CECUL)
#define REG_GCLK_PCHCTRL28 (*(RwReg *)0x40001CF0UL)
#define REG_GCLK_PCHCTRL29 (*(RwReg *)0x40001CF4UL)
#define REG_GCLK_PCHCTRL30 (*(RwReg *)0x40001CF8UL)
#define REG_GCLK_PCHCTRL31 (*(RwReg *)0x40001CFCUL)
#define REG_GCLK_PCHCTRL32 (*(RwReg *)0x40001D00UL)
#define REG_GCLK_PCHCTRL33 (*(RwReg *)0x40001D04UL)
#define REG_GCLK_PCHCTRL34 (*(RwReg *)0x40001D08UL)
#define REG_GCLK_PCHCTRL35 (*(RwReg *)0x40001D0CUL)
#define REG_GCLK_PCHCTRL36 (*(RwReg *)0x40001D10UL)
#define REG_GCLK_PCHCTRL37 (*(RwReg *)0x40001D14UL)
#define REG_GCLK_PCHCTRL38 (*(RwReg *)0x40001D18UL)
#define REG_GCLK_PCHCTRL39 (*(RwReg *)0x40001D1CUL)
#define REG_GCLK_PCHCTRL40 (*(RwReg *)0x40001D20UL)
#define REG_GCLK_PCHCTRL41 (*(RwReg *)0x40001D24UL)
#define REG_GCLK_PCHCTRL42 (*(RwReg *)0x40001D28UL)
#define REG_GCLK_PCHCTRL43 (*(RwReg *)0x40001D2CUL)
#define REG_GCLK_PCHCTRL44 (*(RwReg *)0x40001D30UL)
#define REG_GCLK_PCHCTRL45 (*(RwReg *)0x40001D34UL)
#define REG_GCLK_PCHCTRL46 (*(RwReg *)0x40001D38UL)
#define REG_GCLK_PCHCTRL47 (*(RwReg *)0x40001D3CUL)



#define GCLK_GENCTRL0_RESETVALUE 106
#define GCLK_GENDIV_BITS 16
#define GCLK_GEN_BITS 4
#define GCLK_GEN_NUM 12
#define GCLK_GEN_NUM_MSB 11
#define GCLK_GEN_SOURCE_NUM_MSB 8
#define GCLK_IO_NUM 8
#define GCLK_NUM 48
#define GCLK_SOURCE_BITS 4
#define GCLK_SOURCE_NUM 9
#define GCLK_SOURCE_XOSC0 0
#define GCLK_SOURCE_XOSC 0
#define GCLK_SOURCE_XOSC1 1
#define GCLK_SOURCE_GCLKIN 2
#define GCLK_SOURCE_GCLKGEN1 3
#define GCLK_SOURCE_OSCULP32K 4
#define GCLK_SOURCE_XOSC32K 5
#define GCLK_SOURCE_DFLL 6
#define GCLK_SOURCE_DFLL48M 6
#define GCLK_SOURCE_OSC16M 6
#define GCLK_SOURCE_OSC48M 6
#define GCLK_SOURCE_DPLL0 7
#define GCLK_SOURCE_FDPLL 7
#define GCLK_SOURCE_FDPLL0 7
#define GCLK_SOURCE_DPLL1 8
#define GCLK_SOURCE_FDPLL1 8
#define GCLK_GEN_DIV_BITS { 8, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8 }
# 639 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/hmatrix.h" 1
# 31 "asf4/samd51/include/instance/hmatrix.h"
#define _SAMD51_HMATRIX_INSTANCE_ 
# 68 "asf4/samd51/include/instance/hmatrix.h"
#define REG_HMATRIX_PRAS0 (*(RwReg *)0x4100C080UL)
#define REG_HMATRIX_PRBS0 (*(RwReg *)0x4100C084UL)
#define REG_HMATRIX_PRAS1 (*(RwReg *)0x4100C088UL)
#define REG_HMATRIX_PRBS1 (*(RwReg *)0x4100C08CUL)
#define REG_HMATRIX_PRAS2 (*(RwReg *)0x4100C090UL)
#define REG_HMATRIX_PRBS2 (*(RwReg *)0x4100C094UL)
#define REG_HMATRIX_PRAS3 (*(RwReg *)0x4100C098UL)
#define REG_HMATRIX_PRBS3 (*(RwReg *)0x4100C09CUL)
#define REG_HMATRIX_PRAS4 (*(RwReg *)0x4100C0A0UL)
#define REG_HMATRIX_PRBS4 (*(RwReg *)0x4100C0A4UL)
#define REG_HMATRIX_PRAS5 (*(RwReg *)0x4100C0A8UL)
#define REG_HMATRIX_PRBS5 (*(RwReg *)0x4100C0ACUL)
#define REG_HMATRIX_PRAS6 (*(RwReg *)0x4100C0B0UL)
#define REG_HMATRIX_PRBS6 (*(RwReg *)0x4100C0B4UL)
#define REG_HMATRIX_PRAS7 (*(RwReg *)0x4100C0B8UL)
#define REG_HMATRIX_PRBS7 (*(RwReg *)0x4100C0BCUL)
#define REG_HMATRIX_PRAS8 (*(RwReg *)0x4100C0C0UL)
#define REG_HMATRIX_PRBS8 (*(RwReg *)0x4100C0C4UL)
#define REG_HMATRIX_PRAS9 (*(RwReg *)0x4100C0C8UL)
#define REG_HMATRIX_PRBS9 (*(RwReg *)0x4100C0CCUL)
#define REG_HMATRIX_PRAS10 (*(RwReg *)0x4100C0D0UL)
#define REG_HMATRIX_PRBS10 (*(RwReg *)0x4100C0D4UL)
#define REG_HMATRIX_PRAS11 (*(RwReg *)0x4100C0D8UL)
#define REG_HMATRIX_PRBS11 (*(RwReg *)0x4100C0DCUL)
#define REG_HMATRIX_PRAS12 (*(RwReg *)0x4100C0E0UL)
#define REG_HMATRIX_PRBS12 (*(RwReg *)0x4100C0E4UL)
#define REG_HMATRIX_PRAS13 (*(RwReg *)0x4100C0E8UL)
#define REG_HMATRIX_PRBS13 (*(RwReg *)0x4100C0ECUL)
#define REG_HMATRIX_PRAS14 (*(RwReg *)0x4100C0F0UL)
#define REG_HMATRIX_PRBS14 (*(RwReg *)0x4100C0F4UL)
#define REG_HMATRIX_PRAS15 (*(RwReg *)0x4100C0F8UL)
#define REG_HMATRIX_PRBS15 (*(RwReg *)0x4100C0FCUL)



#define HMATRIX_CLK_AHB_ID 5
#define HMATRIX_DEFINED 

#define HMATRIX_SLAVE_FLASH 0
#define HMATRIX_SLAVE_FLASH_ALT 1
#define HMATRIX_SLAVE_SEEPROM 2
#define HMATRIX_SLAVE_RAMCM4S 3
#define HMATRIX_SLAVE_RAMPPPDSU 4
#define HMATRIX_SLAVE_RAMDMAWR 5
#define HMATRIX_SLAVE_RAMDMACICM 6
#define HMATRIX_SLAVE_HPB0 7
#define HMATRIX_SLAVE_HPB1 8
#define HMATRIX_SLAVE_HPB2 9
#define HMATRIX_SLAVE_HPB3 10
#define HMATRIX_SLAVE_SDHC0 12
#define HMATRIX_SLAVE_SDHC1 13
#define HMATRIX_SLAVE_QSPI 14
#define HMATRIX_SLAVE_BKUPRAM 15
#define HMATRIX_SLAVE_NUM 16

#define HMATRIX_MASTER_CM4_S 0
#define HMATRIX_MASTER_CMCC 1
#define HMATRIX_MASTER_PICOP_MEM 2
#define HMATRIX_MASTER_PICOP_IO 3
#define HMATRIX_MASTER_DMAC_DTWR 4
#define HMATRIX_MASTER_DMAC_DTRD 5
#define HMATRIX_MASTER_ICM 6
#define HMATRIX_MASTER_DSU 7
#define HMATRIX_MASTER_NUM 8
# 640 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/icm.h" 1
# 31 "asf4/samd51/include/instance/icm.h"
#define _SAMD51_ICM_INSTANCE_ 
# 54 "asf4/samd51/include/instance/icm.h"
#define REG_ICM_CFG (*(RwReg *)0x42002C00UL)
#define REG_ICM_CTRL (*(WoReg *)0x42002C04UL)
#define REG_ICM_SR (*(RoReg *)0x42002C08UL)
#define REG_ICM_IER (*(WoReg *)0x42002C10UL)
#define REG_ICM_IDR (*(WoReg *)0x42002C14UL)
#define REG_ICM_IMR (*(RoReg *)0x42002C18UL)
#define REG_ICM_ISR (*(RoReg *)0x42002C1CUL)
#define REG_ICM_UASR (*(RoReg *)0x42002C20UL)
#define REG_ICM_DSCR (*(RwReg *)0x42002C30UL)
#define REG_ICM_HASH (*(RwReg *)0x42002C34UL)
#define REG_ICM_UIHVAL0 (*(WoReg *)0x42002C38UL)
#define REG_ICM_UIHVAL1 (*(WoReg *)0x42002C3CUL)
#define REG_ICM_UIHVAL2 (*(WoReg *)0x42002C40UL)
#define REG_ICM_UIHVAL3 (*(WoReg *)0x42002C44UL)
#define REG_ICM_UIHVAL4 (*(WoReg *)0x42002C48UL)
#define REG_ICM_UIHVAL5 (*(WoReg *)0x42002C4CUL)
#define REG_ICM_UIHVAL6 (*(WoReg *)0x42002C50UL)
#define REG_ICM_UIHVAL7 (*(WoReg *)0x42002C54UL)



#define ICM_CLK_AHB_ID 19
# 641 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/i2s.h" 1
# 31 "asf4/samd51/include/instance/i2s.h"
#define _SAMD51_I2S_INSTANCE_ 
# 47 "asf4/samd51/include/instance/i2s.h"
#define REG_I2S_CTRLA (*(RwReg8 *)0x43002800UL)
#define REG_I2S_CLKCTRL0 (*(RwReg *)0x43002804UL)
#define REG_I2S_CLKCTRL1 (*(RwReg *)0x43002808UL)
#define REG_I2S_INTENCLR (*(RwReg16*)0x4300280CUL)
#define REG_I2S_INTENSET (*(RwReg16*)0x43002810UL)
#define REG_I2S_INTFLAG (*(RwReg16*)0x43002814UL)
#define REG_I2S_SYNCBUSY (*(RoReg16*)0x43002818UL)
#define REG_I2S_TXCTRL (*(RwReg *)0x43002820UL)
#define REG_I2S_RXCTRL (*(RwReg *)0x43002824UL)
#define REG_I2S_TXDATA (*(WoReg *)0x43002830UL)
#define REG_I2S_RXDATA (*(RoReg *)0x43002834UL)



#define I2S_CLK_NUM 2
#define I2S_DMAC_ID_RX_0 76
#define I2S_DMAC_ID_RX_1 77
#define I2S_DMAC_ID_RX_LSB 76
#define I2S_DMAC_ID_RX_MSB 77
#define I2S_DMAC_ID_RX_SIZE 2
#define I2S_DMAC_ID_TX_0 78
#define I2S_DMAC_ID_TX_1 79
#define I2S_DMAC_ID_TX_LSB 78
#define I2S_DMAC_ID_TX_MSB 79
#define I2S_DMAC_ID_TX_SIZE 2
#define I2S_GCLK_ID_0 43
#define I2S_GCLK_ID_1 44
#define I2S_GCLK_ID_LSB 43
#define I2S_GCLK_ID_MSB 44
#define I2S_GCLK_ID_SIZE 2
#define I2S_MAX_SLOTS 8
#define I2S_MAX_WL_BITS 32
#define I2S_SER_NUM 2
# 642 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/mclk.h" 1
# 31 "asf4/samd51/include/instance/mclk.h"
#define _SAMD51_MCLK_INSTANCE_ 
# 46 "asf4/samd51/include/instance/mclk.h"
#define REG_MCLK_INTENCLR (*(RwReg8 *)0x40000801UL)
#define REG_MCLK_INTENSET (*(RwReg8 *)0x40000802UL)
#define REG_MCLK_INTFLAG (*(RwReg8 *)0x40000803UL)
#define REG_MCLK_HSDIV (*(RoReg8 *)0x40000804UL)
#define REG_MCLK_CPUDIV (*(RwReg8 *)0x40000805UL)
#define REG_MCLK_AHBMASK (*(RwReg *)0x40000810UL)
#define REG_MCLK_APBAMASK (*(RwReg *)0x40000814UL)
#define REG_MCLK_APBBMASK (*(RwReg *)0x40000818UL)
#define REG_MCLK_APBCMASK (*(RwReg *)0x4000081CUL)
#define REG_MCLK_APBDMASK (*(RwReg *)0x40000820UL)



#define MCLK_SYSTEM_CLOCK 48000000
# 643 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/nvmctrl.h" 1
# 31 "asf4/samd51/include/instance/nvmctrl.h"
#define _SAMD51_NVMCTRL_INSTANCE_ 
# 51 "asf4/samd51/include/instance/nvmctrl.h"
#define REG_NVMCTRL_CTRLA (*(RwReg16*)0x41004000UL)
#define REG_NVMCTRL_CTRLB (*(WoReg16*)0x41004004UL)
#define REG_NVMCTRL_PARAM (*(RoReg *)0x41004008UL)
#define REG_NVMCTRL_INTENCLR (*(RwReg16*)0x4100400CUL)
#define REG_NVMCTRL_INTENSET (*(RwReg16*)0x4100400EUL)
#define REG_NVMCTRL_INTFLAG (*(RwReg16*)0x41004010UL)
#define REG_NVMCTRL_STATUS (*(RoReg16*)0x41004012UL)
#define REG_NVMCTRL_ADDR (*(RwReg *)0x41004014UL)
#define REG_NVMCTRL_RUNLOCK (*(RoReg *)0x41004018UL)
#define REG_NVMCTRL_PBLDATA0 (*(RoReg *)0x4100401CUL)
#define REG_NVMCTRL_PBLDATA1 (*(RoReg *)0x41004020UL)
#define REG_NVMCTRL_ECCERR (*(RoReg *)0x41004024UL)
#define REG_NVMCTRL_DBGCTRL (*(RwReg8 *)0x41004028UL)
#define REG_NVMCTRL_SEECFG (*(RwReg8 *)0x4100402AUL)
#define REG_NVMCTRL_SEESTAT (*(RoReg *)0x4100402CUL)



#define NVMCTRL_BLOCK_SIZE 8192
#define NVMCTRL_CLK_AHB_ID 6
#define NVMCTRL_CLK_AHB_ID_CACHE 23
#define NVMCTRL_CLK_AHB_ID_SMEEPROM 22
#define NVMCTRL_PAGE_SIZE 512
# 644 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/oscctrl.h" 1
# 31 "asf4/samd51/include/instance/oscctrl.h"
#define _SAMD51_OSCCTRL_INSTANCE_ 
# 58 "asf4/samd51/include/instance/oscctrl.h"
#define REG_OSCCTRL_EVCTRL (*(RwReg8 *)0x40001000UL)
#define REG_OSCCTRL_INTENCLR (*(RwReg *)0x40001004UL)
#define REG_OSCCTRL_INTENSET (*(RwReg *)0x40001008UL)
#define REG_OSCCTRL_INTFLAG (*(RwReg *)0x4000100CUL)
#define REG_OSCCTRL_STATUS (*(RoReg *)0x40001010UL)
#define REG_OSCCTRL_XOSCCTRL0 (*(RwReg *)0x40001014UL)
#define REG_OSCCTRL_XOSCCTRL1 (*(RwReg *)0x40001018UL)
#define REG_OSCCTRL_DFLLCTRLA (*(RwReg8 *)0x4000101CUL)
#define REG_OSCCTRL_DFLLCTRLB (*(RwReg8 *)0x40001020UL)
#define REG_OSCCTRL_DFLLVAL (*(RwReg *)0x40001024UL)
#define REG_OSCCTRL_DFLLMUL (*(RwReg *)0x40001028UL)
#define REG_OSCCTRL_DFLLSYNC (*(RwReg8 *)0x4000102CUL)
#define REG_OSCCTRL_DPLLCTRLA0 (*(RwReg8 *)0x40001030UL)
#define REG_OSCCTRL_DPLLRATIO0 (*(RwReg8 *)0x40001034UL)
#define REG_OSCCTRL_DPLLCTRLB0 (*(RwReg8 *)0x40001038UL)
#define REG_OSCCTRL_DPLLSYNCBUSY0 (*(RoReg8 *)0x4000103CUL)
#define REG_OSCCTRL_DPLLSTATUS0 (*(RoReg8 *)0x40001040UL)
#define REG_OSCCTRL_DPLLCTRLA1 (*(RwReg8 *)0x40001044UL)
#define REG_OSCCTRL_DPLLRATIO1 (*(RwReg8 *)0x40001048UL)
#define REG_OSCCTRL_DPLLCTRLB1 (*(RwReg8 *)0x4000104CUL)
#define REG_OSCCTRL_DPLLSYNCBUSY1 (*(RoReg8 *)0x40001050UL)
#define REG_OSCCTRL_DPLLSTATUS1 (*(RoReg8 *)0x40001054UL)



#define OSCCTRL_DFLLS_NUM 1
#define OSCCTRL_DFLL_IMPLEMENTED 1
#define OSCCTRL_DFLL48M_BIASTESTPT_IMPLEMENTED 0
#define OSCCTRL_DFLL48M_CDACSTEPSIZE_SIZE 2
#define OSCCTRL_DFLL48M_COARSE_RESET_VALUE 32
#define OSCCTRL_DFLL48M_COARSE_SIZE 6
#define OSCCTRL_DFLL48M_ENABLE_RESET_VALUE 1
#define OSCCTRL_DFLL48M_FDACSTEPSIZE_SIZE 2
#define OSCCTRL_DFLL48M_FINE_RESET_VALUE 128
#define OSCCTRL_DFLL48M_FINE_SIZE 8
#define OSCCTRL_DFLL48M_ONDEMAND_RESET_VALUE 1
#define OSCCTRL_DFLL48M_RUNSTDBY_RESET_VALUE 0
#define OSCCTRL_DFLL48M_TCAL_SIZE 4
#define OSCCTRL_DFLL48M_TCBIAS_SIZE 2
#define OSCCTRL_DFLL48M_TESTPTSEL_SIZE 3
#define OSCCTRL_DFLL48M_WAITLOCK_ACTIVE 1
#define OSCCTRL_DPLLS_NUM 2
#define OSCCTRL_DPLL0_IMPLEMENTED 1
#define OSCCTRL_DPLL0_I12ND_I12NDFRAC_PAD_CONTROL 0
#define OSCCTRL_DPLL0_OCC_IMPLEMENTED 1
#define OSCCTRL_DPLL1_IMPLEMENTED 1
#define OSCCTRL_DPLL1_I12ND_I12NDFRAC_PAD_CONTROL 0
#define OSCCTRL_DPLL1_OCC_IMPLEMENTED 0
#define OSCCTRL_GCLK_ID_DFLL48 0
#define OSCCTRL_GCLK_ID_FDPLL0 1
#define OSCCTRL_GCLK_ID_FDPLL1 2
#define OSCCTRL_GCLK_ID_FDPLL032K 3
#define OSCCTRL_GCLK_ID_FDPLL132K 3
#define OSCCTRL_OSC16M_IMPLEMENTED 0
#define OSCCTRL_OSC48M_IMPLEMENTED 0
#define OSCCTRL_OSC48M_NUM 1
#define OSCCTRL_RCOSCS_NUM 1
#define OSCCTRL_XOSCS_NUM 2
#define OSCCTRL_XOSC0_CFD_CLK_SELECT_SIZE 4
#define OSCCTRL_XOSC0_CFD_IMPLEMENTED 1
#define OSCCTRL_XOSC0_IMPLEMENTED 1
#define OSCCTRL_XOSC0_ONDEMAND_RESET_VALUE 1
#define OSCCTRL_XOSC0_RUNSTDBY_RESET_VALUE 0
#define OSCCTRL_XOSC1_CFD_CLK_SELECT_SIZE 4
#define OSCCTRL_XOSC1_CFD_IMPLEMENTED 1
#define OSCCTRL_XOSC1_IMPLEMENTED 1
#define OSCCTRL_XOSC1_ONDEMAND_RESET_VALUE 1
#define OSCCTRL_XOSC1_RUNSTDBY_RESET_VALUE 0
#define OSCCTRL_DFLL48M_VERSION 0x100
#define OSCCTRL_FDPLL_VERSION 0x100
#define OSCCTRL_XOSC_VERSION 0x100
# 645 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/osc32kctrl.h" 1
# 31 "asf4/samd51/include/instance/osc32kctrl.h"
#define _SAMD51_OSC32KCTRL_INSTANCE_ 
# 45 "asf4/samd51/include/instance/osc32kctrl.h"
#define REG_OSC32KCTRL_INTENCLR (*(RwReg *)0x40001400UL)
#define REG_OSC32KCTRL_INTENSET (*(RwReg *)0x40001404UL)
#define REG_OSC32KCTRL_INTFLAG (*(RwReg *)0x40001408UL)
#define REG_OSC32KCTRL_STATUS (*(RoReg *)0x4000140CUL)
#define REG_OSC32KCTRL_RTCCTRL (*(RwReg8 *)0x40001410UL)
#define REG_OSC32KCTRL_XOSC32K (*(RwReg16*)0x40001414UL)
#define REG_OSC32KCTRL_CFDCTRL (*(RwReg8 *)0x40001416UL)
#define REG_OSC32KCTRL_EVCTRL (*(RwReg8 *)0x40001417UL)
#define REG_OSC32KCTRL_OSCULP32K (*(RwReg *)0x4000141CUL)



#define OSC32KCTRL_OSC32K_COARSE_CALIB_MSB 0
# 646 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/pac.h" 1
# 31 "asf4/samd51/include/instance/pac.h"
#define _SAMD51_PAC_INSTANCE_ 
# 49 "asf4/samd51/include/instance/pac.h"
#define REG_PAC_WRCTRL (*(RwReg *)0x40000000UL)
#define REG_PAC_EVCTRL (*(RwReg8 *)0x40000004UL)
#define REG_PAC_INTENCLR (*(RwReg8 *)0x40000008UL)
#define REG_PAC_INTENSET (*(RwReg8 *)0x40000009UL)
#define REG_PAC_INTFLAGAHB (*(RwReg *)0x40000010UL)
#define REG_PAC_INTFLAGA (*(RwReg *)0x40000014UL)
#define REG_PAC_INTFLAGB (*(RwReg *)0x40000018UL)
#define REG_PAC_INTFLAGC (*(RwReg *)0x4000001CUL)
#define REG_PAC_INTFLAGD (*(RwReg *)0x40000020UL)
#define REG_PAC_STATUSA (*(RoReg *)0x40000034UL)
#define REG_PAC_STATUSB (*(RoReg *)0x40000038UL)
#define REG_PAC_STATUSC (*(RoReg *)0x4000003CUL)
#define REG_PAC_STATUSD (*(RoReg *)0x40000040UL)



#define PAC_CLK_AHB_DOMAIN 
#define PAC_CLK_AHB_ID 12
#define PAC_HPB_NUM 4
# 647 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/pcc.h" 1
# 31 "asf4/samd51/include/instance/pcc.h"
#define _SAMD51_PCC_INSTANCE_ 
# 44 "asf4/samd51/include/instance/pcc.h"
#define REG_PCC_MR (*(RwReg *)0x43002C00UL)
#define REG_PCC_IER (*(WoReg *)0x43002C04UL)
#define REG_PCC_IDR (*(WoReg *)0x43002C08UL)
#define REG_PCC_IMR (*(RoReg *)0x43002C0CUL)
#define REG_PCC_ISR (*(RoReg *)0x43002C10UL)
#define REG_PCC_RHR (*(RoReg *)0x43002C14UL)
#define REG_PCC_WPMR (*(RwReg *)0x43002CE0UL)
#define REG_PCC_WPSR (*(RoReg *)0x43002CE4UL)



#define PCC_DATA_SIZE 14
#define PCC_DMAC_ID_RX 80
# 648 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/pdec.h" 1
# 31 "asf4/samd51/include/instance/pdec.h"
#define _SAMD51_PDEC_INSTANCE_ 
# 55 "asf4/samd51/include/instance/pdec.h"
#define REG_PDEC_CTRLA (*(RwReg *)0x42001C00UL)
#define REG_PDEC_CTRLBCLR (*(RwReg8 *)0x42001C04UL)
#define REG_PDEC_CTRLBSET (*(RwReg8 *)0x42001C05UL)
#define REG_PDEC_EVCTRL (*(RwReg16*)0x42001C06UL)
#define REG_PDEC_INTENCLR (*(RwReg8 *)0x42001C08UL)
#define REG_PDEC_INTENSET (*(RwReg8 *)0x42001C09UL)
#define REG_PDEC_INTFLAG (*(RwReg8 *)0x42001C0AUL)
#define REG_PDEC_STATUS (*(RwReg16*)0x42001C0CUL)
#define REG_PDEC_DBGCTRL (*(RwReg8 *)0x42001C0FUL)
#define REG_PDEC_SYNCBUSY (*(RoReg *)0x42001C10UL)
#define REG_PDEC_PRESC (*(RwReg8 *)0x42001C14UL)
#define REG_PDEC_FILTER (*(RwReg8 *)0x42001C15UL)
#define REG_PDEC_PRESCBUF (*(RwReg8 *)0x42001C18UL)
#define REG_PDEC_FILTERBUF (*(RwReg8 *)0x42001C19UL)
#define REG_PDEC_COUNT (*(RwReg *)0x42001C1CUL)
#define REG_PDEC_CC0 (*(RwReg *)0x42001C20UL)
#define REG_PDEC_CC1 (*(RwReg *)0x42001C24UL)
#define REG_PDEC_CCBUF0 (*(RwReg *)0x42001C30UL)
#define REG_PDEC_CCBUF1 (*(RwReg *)0x42001C34UL)



#define PDEC_CC_NUM 2
#define PDEC_GCLK_ID 31
# 649 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/pm.h" 1
# 31 "asf4/samd51/include/instance/pm.h"
#define _SAMD51_PM_INSTANCE_ 
# 45 "asf4/samd51/include/instance/pm.h"
#define REG_PM_CTRLA (*(RwReg8 *)0x40000400UL)
#define REG_PM_SLEEPCFG (*(RwReg8 *)0x40000401UL)
#define REG_PM_INTENCLR (*(RwReg8 *)0x40000404UL)
#define REG_PM_INTENSET (*(RwReg8 *)0x40000405UL)
#define REG_PM_INTFLAG (*(RwReg8 *)0x40000406UL)
#define REG_PM_STDBYCFG (*(RwReg8 *)0x40000408UL)
#define REG_PM_HIBCFG (*(RwReg8 *)0x40000409UL)
#define REG_PM_BKUPCFG (*(RwReg8 *)0x4000040AUL)
#define REG_PM_PWSAKDLY (*(RwReg8 *)0x40000412UL)



#define PM_PD_NUM 0
# 650 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/port.h" 1
# 31 "asf4/samd51/include/instance/port.h"
#define _SAMD51_PORT_INSTANCE_ 
# 92 "asf4/samd51/include/instance/port.h"
#define REG_PORT_DIR0 (*(RwReg *)0x41008000UL)
#define REG_PORT_DIRCLR0 (*(RwReg *)0x41008004UL)
#define REG_PORT_DIRSET0 (*(RwReg *)0x41008008UL)
#define REG_PORT_DIRTGL0 (*(RwReg *)0x4100800CUL)
#define REG_PORT_OUT0 (*(RwReg *)0x41008010UL)
#define REG_PORT_OUTCLR0 (*(RwReg *)0x41008014UL)
#define REG_PORT_OUTSET0 (*(RwReg *)0x41008018UL)
#define REG_PORT_OUTTGL0 (*(RwReg *)0x4100801CUL)
#define REG_PORT_IN0 (*(RoReg *)0x41008020UL)
#define REG_PORT_CTRL0 (*(RwReg *)0x41008024UL)
#define REG_PORT_WRCONFIG0 (*(WoReg *)0x41008028UL)
#define REG_PORT_EVCTRL0 (*(RwReg *)0x4100802CUL)
#define REG_PORT_PMUX0 (*(RwReg *)0x41008030UL)
#define REG_PORT_PINCFG0 (*(RwReg *)0x41008040UL)
#define REG_PORT_DIR1 (*(RwReg *)0x41008080UL)
#define REG_PORT_DIRCLR1 (*(RwReg *)0x41008084UL)
#define REG_PORT_DIRSET1 (*(RwReg *)0x41008088UL)
#define REG_PORT_DIRTGL1 (*(RwReg *)0x4100808CUL)
#define REG_PORT_OUT1 (*(RwReg *)0x41008090UL)
#define REG_PORT_OUTCLR1 (*(RwReg *)0x41008094UL)
#define REG_PORT_OUTSET1 (*(RwReg *)0x41008098UL)
#define REG_PORT_OUTTGL1 (*(RwReg *)0x4100809CUL)
#define REG_PORT_IN1 (*(RoReg *)0x410080A0UL)
#define REG_PORT_CTRL1 (*(RwReg *)0x410080A4UL)
#define REG_PORT_WRCONFIG1 (*(WoReg *)0x410080A8UL)
#define REG_PORT_EVCTRL1 (*(RwReg *)0x410080ACUL)
#define REG_PORT_PMUX1 (*(RwReg *)0x410080B0UL)
#define REG_PORT_PINCFG1 (*(RwReg *)0x410080C0UL)
#define REG_PORT_DIR2 (*(RwReg *)0x41008100UL)
#define REG_PORT_DIRCLR2 (*(RwReg *)0x41008104UL)
#define REG_PORT_DIRSET2 (*(RwReg *)0x41008108UL)
#define REG_PORT_DIRTGL2 (*(RwReg *)0x4100810CUL)
#define REG_PORT_OUT2 (*(RwReg *)0x41008110UL)
#define REG_PORT_OUTCLR2 (*(RwReg *)0x41008114UL)
#define REG_PORT_OUTSET2 (*(RwReg *)0x41008118UL)
#define REG_PORT_OUTTGL2 (*(RwReg *)0x4100811CUL)
#define REG_PORT_IN2 (*(RoReg *)0x41008120UL)
#define REG_PORT_CTRL2 (*(RwReg *)0x41008124UL)
#define REG_PORT_WRCONFIG2 (*(WoReg *)0x41008128UL)
#define REG_PORT_EVCTRL2 (*(RwReg *)0x4100812CUL)
#define REG_PORT_PMUX2 (*(RwReg *)0x41008130UL)
#define REG_PORT_PINCFG2 (*(RwReg *)0x41008140UL)
#define REG_PORT_DIR3 (*(RwReg *)0x41008180UL)
#define REG_PORT_DIRCLR3 (*(RwReg *)0x41008184UL)
#define REG_PORT_DIRSET3 (*(RwReg *)0x41008188UL)
#define REG_PORT_DIRTGL3 (*(RwReg *)0x4100818CUL)
#define REG_PORT_OUT3 (*(RwReg *)0x41008190UL)
#define REG_PORT_OUTCLR3 (*(RwReg *)0x41008194UL)
#define REG_PORT_OUTSET3 (*(RwReg *)0x41008198UL)
#define REG_PORT_OUTTGL3 (*(RwReg *)0x4100819CUL)
#define REG_PORT_IN3 (*(RoReg *)0x410081A0UL)
#define REG_PORT_CTRL3 (*(RwReg *)0x410081A4UL)
#define REG_PORT_WRCONFIG3 (*(WoReg *)0x410081A8UL)
#define REG_PORT_EVCTRL3 (*(RwReg *)0x410081ACUL)
#define REG_PORT_PMUX3 (*(RwReg *)0x410081B0UL)
#define REG_PORT_PINCFG3 (*(RwReg *)0x410081C0UL)



#define PORT_BITS 118
#define PORT_DIR_DEFAULT_VAL { 0x00000000, 0x00000000, 0x00000000, 0x00000000 }
#define PORT_DIR_IMPLEMENTED { 0xCBFFFFFF, 0xFFFFFFFF, 0xDFFFFCFF, 0x00301F03 }
#define PORT_DRVSTR 1
#define PORT_DRVSTR_DEFAULT_VAL { 0x00000000, 0x00000000, 0x00000000, 0x00000000 }
#define PORT_DRVSTR_IMPLEMENTED { 0xC8FFFFFF, 0xFFFFFFFF, 0xDFFFFCFF, 0x00301F03 }
#define PORT_EVENT_IMPLEMENTED { 0xCBFFFFFF, 0xFFFFFFFF, 0xDFFFFCFF, 0x00301F03 }
#define PORT_EV_NUM 4
#define PORT_INEN_DEFAULT_VAL { 0x00000000, 0x00000000, 0x00000000, 0x00000000 }
#define PORT_INEN_IMPLEMENTED { 0xCBFFFFFF, 0xFFFFFFFF, 0xDFFFFCFF, 0x00301F03 }
#define PORT_ODRAIN 0
#define PORT_ODRAIN_DEFAULT_VAL { 0x00000000, 0x00000000, 0x00000000, 0x00000000 }
#define PORT_ODRAIN_IMPLEMENTED { 0x00000000, 0x00000000, 0x00000000, 0x00000000 }
#define PORT_OUT_DEFAULT_VAL { 0x00000000, 0x00000000, 0x00000000, 0x00000000 }
#define PORT_OUT_IMPLEMENTED { 0xCBFFFFFF, 0xFFFFFFFF, 0xDFFFFCFF, 0x00301F03 }
#define PORT_PIN_IMPLEMENTED { 0xCBFFFFFF, 0xFFFFFFFF, 0xDFFFFCFF, 0x00301F03 }
#define PORT_PMUXBIT0_DEFAULT_VAL { 0x40000000, 0x00000000, 0x00000000, 0x00000000 }
#define PORT_PMUXBIT0_IMPLEMENTED { 0xCBFFFFFF, 0xFFFFFFFF, 0xDFFFFC1F, 0x00301F03 }
#define PORT_PMUXBIT1_DEFAULT_VAL { 0x40000000, 0x00000000, 0x00000000, 0x00000000 }
#define PORT_PMUXBIT1_IMPLEMENTED { 0xCBFFFFFB, 0xFFFFFFFF, 0x1FFFFCF0, 0x00300F00 }
#define PORT_PMUXBIT2_DEFAULT_VAL { 0x40000000, 0x00000000, 0x00000000, 0x00000000 }
#define PORT_PMUXBIT2_IMPLEMENTED { 0xCBFFFFFB, 0xFFFFFFFF, 0x1FFFFC10, 0x00301F00 }
#define PORT_PMUXBIT3_DEFAULT_VAL { 0x00000000, 0x00000000, 0x00000000, 0x00000000 }
#define PORT_PMUXBIT3_IMPLEMENTED { 0xCBFFFFF8, 0x33FFFFFF, 0x18FFF8C0, 0x00300000 }
#define PORT_PMUXEN_DEFAULT_VAL { 0x40000000, 0x00000000, 0x00000000, 0x00000000 }
#define PORT_PMUXEN_IMPLEMENTED { 0xCBFFFFFF, 0xFFFFFFFF, 0xDFFFFCFF, 0x00301F03 }
#define PORT_PPP_IMPLEMENTED { 0x00000001 }
#define PORT_PULLEN_DEFAULT_VAL { 0x00000000, 0x00000000, 0x00000000, 0x00000000 }
#define PORT_PULLEN_IMPLEMENTED { 0xCBFFFFFF, 0xFFFFFFFF, 0xDFFFFCFF, 0x00301F03 }
#define PORT_SLEWLIM 0
#define PORT_SLEWLIM_DEFAULT_VAL { 0x00000000, 0x00000000, 0x00000000, 0x00000000 }
#define PORT_SLEWLIM_IMPLEMENTED { 0x00000000, 0x00000000, 0x00000000, 0x00000000 }
# 651 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/qspi.h" 1
# 31 "asf4/samd51/include/instance/qspi.h"
#define _SAMD51_QSPI_INSTANCE_ 
# 50 "asf4/samd51/include/instance/qspi.h"
#define REG_QSPI_CTRLA (*(RwReg *)0x42003400UL)
#define REG_QSPI_CTRLB (*(RwReg *)0x42003404UL)
#define REG_QSPI_BAUD (*(RwReg *)0x42003408UL)
#define REG_QSPI_RXDATA (*(RoReg *)0x4200340CUL)
#define REG_QSPI_TXDATA (*(WoReg *)0x42003410UL)
#define REG_QSPI_INTENCLR (*(RwReg *)0x42003414UL)
#define REG_QSPI_INTENSET (*(RwReg *)0x42003418UL)
#define REG_QSPI_INTFLAG (*(RwReg *)0x4200341CUL)
#define REG_QSPI_STATUS (*(RoReg *)0x42003420UL)
#define REG_QSPI_INSTRADDR (*(RwReg *)0x42003430UL)
#define REG_QSPI_INSTRCTRL (*(RwReg *)0x42003434UL)
#define REG_QSPI_INSTRFRAME (*(RwReg *)0x42003438UL)
#define REG_QSPI_SCRAMBCTRL (*(RwReg *)0x42003440UL)
#define REG_QSPI_SCRAMBKEY (*(WoReg *)0x42003444UL)



#define QSPI_DMAC_ID_RX 83
#define QSPI_DMAC_ID_TX 84
#define QSPI_HADDR_MSB 23
#define QSPI_OCMS 1
# 652 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/ramecc.h" 1
# 31 "asf4/samd51/include/instance/ramecc.h"
#define _SAMD51_RAMECC_INSTANCE_ 
# 42 "asf4/samd51/include/instance/ramecc.h"
#define REG_RAMECC_INTENCLR (*(RwReg8 *)0x41020000UL)
#define REG_RAMECC_INTENSET (*(RwReg8 *)0x41020001UL)
#define REG_RAMECC_INTFLAG (*(RwReg8 *)0x41020002UL)
#define REG_RAMECC_STATUS (*(RoReg8 *)0x41020003UL)
#define REG_RAMECC_ERRADDR (*(RoReg *)0x41020004UL)
#define REG_RAMECC_DBGCTRL (*(RwReg8 *)0x4102000FUL)



#define RAMECC_RAMADDR_BITS 13
#define RAMECC_RAMBANK_NUM 4
# 653 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/rstc.h" 1
# 31 "asf4/samd51/include/instance/rstc.h"
#define _SAMD51_RSTC_INSTANCE_ 






#define REG_RSTC_RCAUSE (*(RoReg8 *)0x40000C00UL)
#define REG_RSTC_BKUPEXIT (*(RoReg8 *)0x40000C02UL)



#define RSTC_BACKUP_IMPLEMENTED 1
#define RSTC_HIB_IMPLEMENTED 1
#define RSTC_NUMBER_OF_EXTWAKE 0
#define RSTC_NVMRST_IMPLEMENTED 1
# 654 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/rtc.h" 1
# 31 "asf4/samd51/include/instance/rtc.h"
#define _SAMD51_RTC_INSTANCE_ 
# 90 "asf4/samd51/include/instance/rtc.h"
#define REG_RTC_DBGCTRL (*(RwReg8 *)0x4000240EUL)
#define REG_RTC_FREQCORR (*(RwReg8 *)0x40002414UL)
#define REG_RTC_GP0 (*(RwReg *)0x40002440UL)
#define REG_RTC_GP1 (*(RwReg *)0x40002444UL)
#define REG_RTC_GP2 (*(RwReg *)0x40002448UL)
#define REG_RTC_GP3 (*(RwReg *)0x4000244CUL)
#define REG_RTC_TAMPCTRL (*(RwReg *)0x40002460UL)
#define REG_RTC_TAMPID (*(RwReg *)0x40002468UL)
#define REG_RTC_BKUP0 (*(RwReg *)0x40002480UL)
#define REG_RTC_BKUP1 (*(RwReg *)0x40002484UL)
#define REG_RTC_BKUP2 (*(RwReg *)0x40002488UL)
#define REG_RTC_BKUP3 (*(RwReg *)0x4000248CUL)
#define REG_RTC_BKUP4 (*(RwReg *)0x40002490UL)
#define REG_RTC_BKUP5 (*(RwReg *)0x40002494UL)
#define REG_RTC_BKUP6 (*(RwReg *)0x40002498UL)
#define REG_RTC_BKUP7 (*(RwReg *)0x4000249CUL)
#define REG_RTC_MODE0_CTRLA (*(RwReg16*)0x40002400UL)
#define REG_RTC_MODE0_CTRLB (*(RwReg16*)0x40002402UL)
#define REG_RTC_MODE0_EVCTRL (*(RwReg *)0x40002404UL)
#define REG_RTC_MODE0_INTENCLR (*(RwReg16*)0x40002408UL)
#define REG_RTC_MODE0_INTENSET (*(RwReg16*)0x4000240AUL)
#define REG_RTC_MODE0_INTFLAG (*(RwReg16*)0x4000240CUL)
#define REG_RTC_MODE0_SYNCBUSY (*(RoReg *)0x40002410UL)
#define REG_RTC_MODE0_COUNT (*(RwReg *)0x40002418UL)
#define REG_RTC_MODE0_COMP0 (*(RwReg *)0x40002420UL)
#define REG_RTC_MODE0_COMP1 (*(RwReg *)0x40002424UL)
#define REG_RTC_MODE0_TIMESTAMP (*(RoReg *)0x40002464UL)
#define REG_RTC_MODE1_CTRLA (*(RwReg16*)0x40002400UL)
#define REG_RTC_MODE1_CTRLB (*(RwReg16*)0x40002402UL)
#define REG_RTC_MODE1_EVCTRL (*(RwReg *)0x40002404UL)
#define REG_RTC_MODE1_INTENCLR (*(RwReg16*)0x40002408UL)
#define REG_RTC_MODE1_INTENSET (*(RwReg16*)0x4000240AUL)
#define REG_RTC_MODE1_INTFLAG (*(RwReg16*)0x4000240CUL)
#define REG_RTC_MODE1_SYNCBUSY (*(RoReg *)0x40002410UL)
#define REG_RTC_MODE1_COUNT (*(RwReg16*)0x40002418UL)
#define REG_RTC_MODE1_PER (*(RwReg16*)0x4000241CUL)
#define REG_RTC_MODE1_COMP0 (*(RwReg16*)0x40002420UL)
#define REG_RTC_MODE1_COMP1 (*(RwReg16*)0x40002422UL)
#define REG_RTC_MODE1_COMP2 (*(RwReg16*)0x40002424UL)
#define REG_RTC_MODE1_COMP3 (*(RwReg16*)0x40002426UL)
#define REG_RTC_MODE1_TIMESTAMP (*(RoReg *)0x40002464UL)
#define REG_RTC_MODE2_CTRLA (*(RwReg16*)0x40002400UL)
#define REG_RTC_MODE2_CTRLB (*(RwReg16*)0x40002402UL)
#define REG_RTC_MODE2_EVCTRL (*(RwReg *)0x40002404UL)
#define REG_RTC_MODE2_INTENCLR (*(RwReg16*)0x40002408UL)
#define REG_RTC_MODE2_INTENSET (*(RwReg16*)0x4000240AUL)
#define REG_RTC_MODE2_INTFLAG (*(RwReg16*)0x4000240CUL)
#define REG_RTC_MODE2_SYNCBUSY (*(RoReg *)0x40002410UL)
#define REG_RTC_MODE2_CLOCK (*(RwReg *)0x40002418UL)
#define REG_RTC_MODE2_TIMESTAMP (*(RoReg *)0x40002464UL)
#define REG_RTC_MODE2_ALARM_ALARM0 (*(RwReg *)0x40002420UL)
#define REG_RTC_MODE2_ALARM_MASK0 (*(RwReg *)0x40002424UL)
#define REG_RTC_MODE2_ALARM_ALARM1 (*(RwReg *)0x40002428UL)
#define REG_RTC_MODE2_ALARM_MASK1 (*(RwReg *)0x4000242CUL)



#define RTC_DMAC_ID_TIMESTAMP 1
#define RTC_GPR_NUM 4
#define RTC_NUM_OF_ALARMS 2
#define RTC_NUM_OF_BKREGS 8
#define RTC_NUM_OF_COMP16 4
#define RTC_NUM_OF_COMP32 2
#define RTC_NUM_OF_TAMPERS 5
#define RTC_PER_NUM 8
# 655 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/sdhc0.h" 1
# 31 "asf4/samd51/include/instance/sdhc0.h"
#define _SAMD51_SDHC0_INSTANCE_ 
# 86 "asf4/samd51/include/instance/sdhc0.h"
#define REG_SDHC0_SSAR (*(RwReg *)0x45000000UL)
#define REG_SDHC0_BSR (*(RwReg16*)0x45000004UL)
#define REG_SDHC0_BCR (*(RwReg16*)0x45000006UL)
#define REG_SDHC0_ARG1R (*(RwReg *)0x45000008UL)
#define REG_SDHC0_TMR (*(RwReg16*)0x4500000CUL)
#define REG_SDHC0_CR (*(RwReg16*)0x4500000EUL)
#define REG_SDHC0_RR0 (*(RoReg *)0x45000010UL)
#define REG_SDHC0_RR1 (*(RoReg *)0x45000014UL)
#define REG_SDHC0_RR2 (*(RoReg *)0x45000018UL)
#define REG_SDHC0_RR3 (*(RoReg *)0x4500001CUL)
#define REG_SDHC0_BDPR (*(RwReg *)0x45000020UL)
#define REG_SDHC0_PSR (*(RoReg *)0x45000024UL)
#define REG_SDHC0_HC1R (*(RwReg8 *)0x45000028UL)
#define REG_SDHC0_PCR (*(RwReg8 *)0x45000029UL)
#define REG_SDHC0_BGCR (*(RwReg8 *)0x4500002AUL)
#define REG_SDHC0_WCR (*(RwReg8 *)0x4500002BUL)
#define REG_SDHC0_CCR (*(RwReg16*)0x4500002CUL)
#define REG_SDHC0_TCR (*(RwReg8 *)0x4500002EUL)
#define REG_SDHC0_SRR (*(RwReg8 *)0x4500002FUL)
#define REG_SDHC0_NISTR (*(RwReg16*)0x45000030UL)
#define REG_SDHC0_EISTR (*(RwReg16*)0x45000032UL)
#define REG_SDHC0_NISTER (*(RwReg16*)0x45000034UL)
#define REG_SDHC0_EISTER (*(RwReg16*)0x45000036UL)
#define REG_SDHC0_NISIER (*(RwReg16*)0x45000038UL)
#define REG_SDHC0_EISIER (*(RwReg16*)0x4500003AUL)
#define REG_SDHC0_ACESR (*(RoReg16*)0x4500003CUL)
#define REG_SDHC0_HC2R (*(RwReg16*)0x4500003EUL)
#define REG_SDHC0_CA0R (*(RoReg *)0x45000040UL)
#define REG_SDHC0_CA1R (*(RoReg *)0x45000044UL)
#define REG_SDHC0_MCCAR (*(RoReg *)0x45000048UL)
#define REG_SDHC0_FERACES (*(WoReg16*)0x45000050UL)
#define REG_SDHC0_FEREIS (*(WoReg16*)0x45000052UL)
#define REG_SDHC0_AESR (*(RoReg8 *)0x45000054UL)
#define REG_SDHC0_ASAR0 (*(RwReg *)0x45000058UL)
#define REG_SDHC0_PVR0 (*(RwReg16*)0x45000060UL)
#define REG_SDHC0_PVR1 (*(RwReg16*)0x45000062UL)
#define REG_SDHC0_PVR2 (*(RwReg16*)0x45000064UL)
#define REG_SDHC0_PVR3 (*(RwReg16*)0x45000066UL)
#define REG_SDHC0_PVR4 (*(RwReg16*)0x45000068UL)
#define REG_SDHC0_PVR5 (*(RwReg16*)0x4500006AUL)
#define REG_SDHC0_PVR6 (*(RwReg16*)0x4500006CUL)
#define REG_SDHC0_PVR7 (*(RwReg16*)0x4500006EUL)
#define REG_SDHC0_SISR (*(RoReg16*)0x450000FCUL)
#define REG_SDHC0_HCVR (*(RoReg16*)0x450000FEUL)
#define REG_SDHC0_MC1R (*(RwReg8 *)0x45000204UL)
#define REG_SDHC0_MC2R (*(WoReg8 *)0x45000205UL)
#define REG_SDHC0_ACR (*(RwReg *)0x45000208UL)
#define REG_SDHC0_CC2R (*(RwReg *)0x4500020CUL)
#define REG_SDHC0_CACR (*(RwReg *)0x45000230UL)
#define REG_SDHC0_DBGR (*(RwReg8 *)0x45000234UL)



#define SDHC0_CARD_DATA_SIZE 4
#define SDHC0_CLK_AHB_ID 15
#define SDHC0_GCLK_ID 45
#define SDHC0_GCLK_ID_SLOW 3
#define SDHC0_NB_OF_DEVICES 1
#define SDHC0_NB_REG_PVR 8
#define SDHC0_NB_REG_RR 4
# 656 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/sdhc1.h" 1
# 31 "asf4/samd51/include/instance/sdhc1.h"
#define _SAMD51_SDHC1_INSTANCE_ 
# 86 "asf4/samd51/include/instance/sdhc1.h"
#define REG_SDHC1_SSAR (*(RwReg *)0x46000000UL)
#define REG_SDHC1_BSR (*(RwReg16*)0x46000004UL)
#define REG_SDHC1_BCR (*(RwReg16*)0x46000006UL)
#define REG_SDHC1_ARG1R (*(RwReg *)0x46000008UL)
#define REG_SDHC1_TMR (*(RwReg16*)0x4600000CUL)
#define REG_SDHC1_CR (*(RwReg16*)0x4600000EUL)
#define REG_SDHC1_RR0 (*(RoReg *)0x46000010UL)
#define REG_SDHC1_RR1 (*(RoReg *)0x46000014UL)
#define REG_SDHC1_RR2 (*(RoReg *)0x46000018UL)
#define REG_SDHC1_RR3 (*(RoReg *)0x4600001CUL)
#define REG_SDHC1_BDPR (*(RwReg *)0x46000020UL)
#define REG_SDHC1_PSR (*(RoReg *)0x46000024UL)
#define REG_SDHC1_HC1R (*(RwReg8 *)0x46000028UL)
#define REG_SDHC1_PCR (*(RwReg8 *)0x46000029UL)
#define REG_SDHC1_BGCR (*(RwReg8 *)0x4600002AUL)
#define REG_SDHC1_WCR (*(RwReg8 *)0x4600002BUL)
#define REG_SDHC1_CCR (*(RwReg16*)0x4600002CUL)
#define REG_SDHC1_TCR (*(RwReg8 *)0x4600002EUL)
#define REG_SDHC1_SRR (*(RwReg8 *)0x4600002FUL)
#define REG_SDHC1_NISTR (*(RwReg16*)0x46000030UL)
#define REG_SDHC1_EISTR (*(RwReg16*)0x46000032UL)
#define REG_SDHC1_NISTER (*(RwReg16*)0x46000034UL)
#define REG_SDHC1_EISTER (*(RwReg16*)0x46000036UL)
#define REG_SDHC1_NISIER (*(RwReg16*)0x46000038UL)
#define REG_SDHC1_EISIER (*(RwReg16*)0x4600003AUL)
#define REG_SDHC1_ACESR (*(RoReg16*)0x4600003CUL)
#define REG_SDHC1_HC2R (*(RwReg16*)0x4600003EUL)
#define REG_SDHC1_CA0R (*(RoReg *)0x46000040UL)
#define REG_SDHC1_CA1R (*(RoReg *)0x46000044UL)
#define REG_SDHC1_MCCAR (*(RoReg *)0x46000048UL)
#define REG_SDHC1_FERACES (*(WoReg16*)0x46000050UL)
#define REG_SDHC1_FEREIS (*(WoReg16*)0x46000052UL)
#define REG_SDHC1_AESR (*(RoReg8 *)0x46000054UL)
#define REG_SDHC1_ASAR0 (*(RwReg *)0x46000058UL)
#define REG_SDHC1_PVR0 (*(RwReg16*)0x46000060UL)
#define REG_SDHC1_PVR1 (*(RwReg16*)0x46000062UL)
#define REG_SDHC1_PVR2 (*(RwReg16*)0x46000064UL)
#define REG_SDHC1_PVR3 (*(RwReg16*)0x46000066UL)
#define REG_SDHC1_PVR4 (*(RwReg16*)0x46000068UL)
#define REG_SDHC1_PVR5 (*(RwReg16*)0x4600006AUL)
#define REG_SDHC1_PVR6 (*(RwReg16*)0x4600006CUL)
#define REG_SDHC1_PVR7 (*(RwReg16*)0x4600006EUL)
#define REG_SDHC1_SISR (*(RoReg16*)0x460000FCUL)
#define REG_SDHC1_HCVR (*(RoReg16*)0x460000FEUL)
#define REG_SDHC1_MC1R (*(RwReg8 *)0x46000204UL)
#define REG_SDHC1_MC2R (*(WoReg8 *)0x46000205UL)
#define REG_SDHC1_ACR (*(RwReg *)0x46000208UL)
#define REG_SDHC1_CC2R (*(RwReg *)0x4600020CUL)
#define REG_SDHC1_CACR (*(RwReg *)0x46000230UL)
#define REG_SDHC1_DBGR (*(RwReg8 *)0x46000234UL)



#define SDHC1_CARD_DATA_SIZE 4
#define SDHC1_CLK_AHB_ID 16
#define SDHC1_GCLK_ID 46
#define SDHC1_GCLK_ID_SLOW 3
#define SDHC1_NB_OF_DEVICES 1
#define SDHC1_NB_REG_PVR 8
#define SDHC1_NB_REG_RR 4
# 657 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/sercom0.h" 1
# 31 "asf4/samd51/include/instance/sercom0.h"
#define _SAMD51_SERCOM0_INSTANCE_ 
# 86 "asf4/samd51/include/instance/sercom0.h"
#define REG_SERCOM0_I2CM_CTRLA (*(RwReg *)0x40003000UL)
#define REG_SERCOM0_I2CM_CTRLB (*(RwReg *)0x40003004UL)
#define REG_SERCOM0_I2CM_CTRLC (*(RwReg *)0x40003008UL)
#define REG_SERCOM0_I2CM_BAUD (*(RwReg *)0x4000300CUL)
#define REG_SERCOM0_I2CM_INTENCLR (*(RwReg8 *)0x40003014UL)
#define REG_SERCOM0_I2CM_INTENSET (*(RwReg8 *)0x40003016UL)
#define REG_SERCOM0_I2CM_INTFLAG (*(RwReg8 *)0x40003018UL)
#define REG_SERCOM0_I2CM_STATUS (*(RwReg16*)0x4000301AUL)
#define REG_SERCOM0_I2CM_SYNCBUSY (*(RoReg *)0x4000301CUL)
#define REG_SERCOM0_I2CM_ADDR (*(RwReg *)0x40003024UL)
#define REG_SERCOM0_I2CM_DATA (*(RwReg *)0x40003028UL)
#define REG_SERCOM0_I2CM_DBGCTRL (*(RwReg8 *)0x40003030UL)
#define REG_SERCOM0_I2CS_CTRLA (*(RwReg *)0x40003000UL)
#define REG_SERCOM0_I2CS_CTRLB (*(RwReg *)0x40003004UL)
#define REG_SERCOM0_I2CS_CTRLC (*(RwReg *)0x40003008UL)
#define REG_SERCOM0_I2CS_INTENCLR (*(RwReg8 *)0x40003014UL)
#define REG_SERCOM0_I2CS_INTENSET (*(RwReg8 *)0x40003016UL)
#define REG_SERCOM0_I2CS_INTFLAG (*(RwReg8 *)0x40003018UL)
#define REG_SERCOM0_I2CS_STATUS (*(RwReg16*)0x4000301AUL)
#define REG_SERCOM0_I2CS_SYNCBUSY (*(RoReg *)0x4000301CUL)
#define REG_SERCOM0_I2CS_LENGTH (*(RwReg16*)0x40003022UL)
#define REG_SERCOM0_I2CS_ADDR (*(RwReg *)0x40003024UL)
#define REG_SERCOM0_I2CS_DATA (*(RwReg *)0x40003028UL)
#define REG_SERCOM0_SPI_CTRLA (*(RwReg *)0x40003000UL)
#define REG_SERCOM0_SPI_CTRLB (*(RwReg *)0x40003004UL)
#define REG_SERCOM0_SPI_CTRLC (*(RwReg *)0x40003008UL)
#define REG_SERCOM0_SPI_BAUD (*(RwReg8 *)0x4000300CUL)
#define REG_SERCOM0_SPI_INTENCLR (*(RwReg8 *)0x40003014UL)
#define REG_SERCOM0_SPI_INTENSET (*(RwReg8 *)0x40003016UL)
#define REG_SERCOM0_SPI_INTFLAG (*(RwReg8 *)0x40003018UL)
#define REG_SERCOM0_SPI_STATUS (*(RwReg16*)0x4000301AUL)
#define REG_SERCOM0_SPI_SYNCBUSY (*(RoReg *)0x4000301CUL)
#define REG_SERCOM0_SPI_LENGTH (*(RwReg16*)0x40003022UL)
#define REG_SERCOM0_SPI_ADDR (*(RwReg *)0x40003024UL)
#define REG_SERCOM0_SPI_DATA (*(RwReg *)0x40003028UL)
#define REG_SERCOM0_SPI_DBGCTRL (*(RwReg8 *)0x40003030UL)
#define REG_SERCOM0_USART_CTRLA (*(RwReg *)0x40003000UL)
#define REG_SERCOM0_USART_CTRLB (*(RwReg *)0x40003004UL)
#define REG_SERCOM0_USART_CTRLC (*(RwReg *)0x40003008UL)
#define REG_SERCOM0_USART_BAUD (*(RwReg16*)0x4000300CUL)
#define REG_SERCOM0_USART_RXPL (*(RwReg8 *)0x4000300EUL)
#define REG_SERCOM0_USART_INTENCLR (*(RwReg8 *)0x40003014UL)
#define REG_SERCOM0_USART_INTENSET (*(RwReg8 *)0x40003016UL)
#define REG_SERCOM0_USART_INTFLAG (*(RwReg8 *)0x40003018UL)
#define REG_SERCOM0_USART_STATUS (*(RwReg16*)0x4000301AUL)
#define REG_SERCOM0_USART_SYNCBUSY (*(RoReg *)0x4000301CUL)
#define REG_SERCOM0_USART_RXERRCNT (*(RoReg8 *)0x40003020UL)
#define REG_SERCOM0_USART_LENGTH (*(RwReg16*)0x40003022UL)
#define REG_SERCOM0_USART_DATA (*(RwReg *)0x40003028UL)
#define REG_SERCOM0_USART_DBGCTRL (*(RwReg8 *)0x40003030UL)



#define SERCOM0_CLK_REDUCTION 1
#define SERCOM0_DLY_COMPENSATION 1
#define SERCOM0_DMA 1
#define SERCOM0_DMAC_ID_RX 4
#define SERCOM0_DMAC_ID_TX 5
#define SERCOM0_FIFO_DEPTH_POWER 1
#define SERCOM0_GCLK_ID_CORE 7
#define SERCOM0_GCLK_ID_SLOW 3
#define SERCOM0_INT_MSB 6
#define SERCOM0_PMSB 3
#define SERCOM0_RETENTION_SUPPORT 0
#define SERCOM0_SE_CNT 1
#define SERCOM0_SPI 1
#define SERCOM0_SPI_HW_SS_CTRL 1
#define SERCOM0_SPI_ICSPACE_EXT 1
#define SERCOM0_SPI_OZMO 0
#define SERCOM0_SPI_WAKE_ON_SSL 1
#define SERCOM0_TTBIT_EXTENSION 1
#define SERCOM0_TWIM 1
#define SERCOM0_TWIS 1
#define SERCOM0_TWIS_AUTO_ACK 1
#define SERCOM0_TWIS_GROUP_CMD 1
#define SERCOM0_TWIS_SDASETUP_CNT_SIZE 8
#define SERCOM0_TWIS_SDASETUP_SIZE 4
#define SERCOM0_TWIS_SUDAT 1
#define SERCOM0_TWI_FASTMP 1
#define SERCOM0_TWI_HSMODE 1
#define SERCOM0_TWI_SCLSM_MODE 1
#define SERCOM0_TWI_SMB_TIMEOUTS 1
#define SERCOM0_TWI_TENBIT_ADR 1
#define SERCOM0_USART 1
#define SERCOM0_USART_AUTOBAUD 1
#define SERCOM0_USART_COLDET 1
#define SERCOM0_USART_FLOW_CTRL 1
#define SERCOM0_USART_FRAC_BAUD 1
#define SERCOM0_USART_IRDA 1
#define SERCOM0_USART_ISO7816 1
#define SERCOM0_USART_LIN_MASTER 1
#define SERCOM0_USART_RS485 1
#define SERCOM0_USART_SAMPA_EXT 1
#define SERCOM0_USART_SAMPR_EXT 1
# 658 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/sercom1.h" 1
# 31 "asf4/samd51/include/instance/sercom1.h"
#define _SAMD51_SERCOM1_INSTANCE_ 
# 86 "asf4/samd51/include/instance/sercom1.h"
#define REG_SERCOM1_I2CM_CTRLA (*(RwReg *)0x40003400UL)
#define REG_SERCOM1_I2CM_CTRLB (*(RwReg *)0x40003404UL)
#define REG_SERCOM1_I2CM_CTRLC (*(RwReg *)0x40003408UL)
#define REG_SERCOM1_I2CM_BAUD (*(RwReg *)0x4000340CUL)
#define REG_SERCOM1_I2CM_INTENCLR (*(RwReg8 *)0x40003414UL)
#define REG_SERCOM1_I2CM_INTENSET (*(RwReg8 *)0x40003416UL)
#define REG_SERCOM1_I2CM_INTFLAG (*(RwReg8 *)0x40003418UL)
#define REG_SERCOM1_I2CM_STATUS (*(RwReg16*)0x4000341AUL)
#define REG_SERCOM1_I2CM_SYNCBUSY (*(RoReg *)0x4000341CUL)
#define REG_SERCOM1_I2CM_ADDR (*(RwReg *)0x40003424UL)
#define REG_SERCOM1_I2CM_DATA (*(RwReg *)0x40003428UL)
#define REG_SERCOM1_I2CM_DBGCTRL (*(RwReg8 *)0x40003430UL)
#define REG_SERCOM1_I2CS_CTRLA (*(RwReg *)0x40003400UL)
#define REG_SERCOM1_I2CS_CTRLB (*(RwReg *)0x40003404UL)
#define REG_SERCOM1_I2CS_CTRLC (*(RwReg *)0x40003408UL)
#define REG_SERCOM1_I2CS_INTENCLR (*(RwReg8 *)0x40003414UL)
#define REG_SERCOM1_I2CS_INTENSET (*(RwReg8 *)0x40003416UL)
#define REG_SERCOM1_I2CS_INTFLAG (*(RwReg8 *)0x40003418UL)
#define REG_SERCOM1_I2CS_STATUS (*(RwReg16*)0x4000341AUL)
#define REG_SERCOM1_I2CS_SYNCBUSY (*(RoReg *)0x4000341CUL)
#define REG_SERCOM1_I2CS_LENGTH (*(RwReg16*)0x40003422UL)
#define REG_SERCOM1_I2CS_ADDR (*(RwReg *)0x40003424UL)
#define REG_SERCOM1_I2CS_DATA (*(RwReg *)0x40003428UL)
#define REG_SERCOM1_SPI_CTRLA (*(RwReg *)0x40003400UL)
#define REG_SERCOM1_SPI_CTRLB (*(RwReg *)0x40003404UL)
#define REG_SERCOM1_SPI_CTRLC (*(RwReg *)0x40003408UL)
#define REG_SERCOM1_SPI_BAUD (*(RwReg8 *)0x4000340CUL)
#define REG_SERCOM1_SPI_INTENCLR (*(RwReg8 *)0x40003414UL)
#define REG_SERCOM1_SPI_INTENSET (*(RwReg8 *)0x40003416UL)
#define REG_SERCOM1_SPI_INTFLAG (*(RwReg8 *)0x40003418UL)
#define REG_SERCOM1_SPI_STATUS (*(RwReg16*)0x4000341AUL)
#define REG_SERCOM1_SPI_SYNCBUSY (*(RoReg *)0x4000341CUL)
#define REG_SERCOM1_SPI_LENGTH (*(RwReg16*)0x40003422UL)
#define REG_SERCOM1_SPI_ADDR (*(RwReg *)0x40003424UL)
#define REG_SERCOM1_SPI_DATA (*(RwReg *)0x40003428UL)
#define REG_SERCOM1_SPI_DBGCTRL (*(RwReg8 *)0x40003430UL)
#define REG_SERCOM1_USART_CTRLA (*(RwReg *)0x40003400UL)
#define REG_SERCOM1_USART_CTRLB (*(RwReg *)0x40003404UL)
#define REG_SERCOM1_USART_CTRLC (*(RwReg *)0x40003408UL)
#define REG_SERCOM1_USART_BAUD (*(RwReg16*)0x4000340CUL)
#define REG_SERCOM1_USART_RXPL (*(RwReg8 *)0x4000340EUL)
#define REG_SERCOM1_USART_INTENCLR (*(RwReg8 *)0x40003414UL)
#define REG_SERCOM1_USART_INTENSET (*(RwReg8 *)0x40003416UL)
#define REG_SERCOM1_USART_INTFLAG (*(RwReg8 *)0x40003418UL)
#define REG_SERCOM1_USART_STATUS (*(RwReg16*)0x4000341AUL)
#define REG_SERCOM1_USART_SYNCBUSY (*(RoReg *)0x4000341CUL)
#define REG_SERCOM1_USART_RXERRCNT (*(RoReg8 *)0x40003420UL)
#define REG_SERCOM1_USART_LENGTH (*(RwReg16*)0x40003422UL)
#define REG_SERCOM1_USART_DATA (*(RwReg *)0x40003428UL)
#define REG_SERCOM1_USART_DBGCTRL (*(RwReg8 *)0x40003430UL)



#define SERCOM1_CLK_REDUCTION 1
#define SERCOM1_DLY_COMPENSATION 1
#define SERCOM1_DMA 1
#define SERCOM1_DMAC_ID_RX 6
#define SERCOM1_DMAC_ID_TX 7
#define SERCOM1_FIFO_DEPTH_POWER 1
#define SERCOM1_GCLK_ID_CORE 8
#define SERCOM1_GCLK_ID_SLOW 3
#define SERCOM1_INT_MSB 6
#define SERCOM1_PMSB 3
#define SERCOM1_RETENTION_SUPPORT 0
#define SERCOM1_SE_CNT 1
#define SERCOM1_SPI 1
#define SERCOM1_SPI_HW_SS_CTRL 1
#define SERCOM1_SPI_ICSPACE_EXT 1
#define SERCOM1_SPI_OZMO 0
#define SERCOM1_SPI_WAKE_ON_SSL 1
#define SERCOM1_TTBIT_EXTENSION 1
#define SERCOM1_TWIM 1
#define SERCOM1_TWIS 1
#define SERCOM1_TWIS_AUTO_ACK 1
#define SERCOM1_TWIS_GROUP_CMD 1
#define SERCOM1_TWIS_SDASETUP_CNT_SIZE 8
#define SERCOM1_TWIS_SDASETUP_SIZE 4
#define SERCOM1_TWIS_SUDAT 1
#define SERCOM1_TWI_FASTMP 1
#define SERCOM1_TWI_HSMODE 1
#define SERCOM1_TWI_SCLSM_MODE 1
#define SERCOM1_TWI_SMB_TIMEOUTS 1
#define SERCOM1_TWI_TENBIT_ADR 1
#define SERCOM1_USART 1
#define SERCOM1_USART_AUTOBAUD 1
#define SERCOM1_USART_COLDET 1
#define SERCOM1_USART_FLOW_CTRL 1
#define SERCOM1_USART_FRAC_BAUD 1
#define SERCOM1_USART_IRDA 1
#define SERCOM1_USART_ISO7816 1
#define SERCOM1_USART_LIN_MASTER 1
#define SERCOM1_USART_RS485 1
#define SERCOM1_USART_SAMPA_EXT 1
#define SERCOM1_USART_SAMPR_EXT 1
# 659 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/sercom2.h" 1
# 31 "asf4/samd51/include/instance/sercom2.h"
#define _SAMD51_SERCOM2_INSTANCE_ 
# 86 "asf4/samd51/include/instance/sercom2.h"
#define REG_SERCOM2_I2CM_CTRLA (*(RwReg *)0x41012000UL)
#define REG_SERCOM2_I2CM_CTRLB (*(RwReg *)0x41012004UL)
#define REG_SERCOM2_I2CM_CTRLC (*(RwReg *)0x41012008UL)
#define REG_SERCOM2_I2CM_BAUD (*(RwReg *)0x4101200CUL)
#define REG_SERCOM2_I2CM_INTENCLR (*(RwReg8 *)0x41012014UL)
#define REG_SERCOM2_I2CM_INTENSET (*(RwReg8 *)0x41012016UL)
#define REG_SERCOM2_I2CM_INTFLAG (*(RwReg8 *)0x41012018UL)
#define REG_SERCOM2_I2CM_STATUS (*(RwReg16*)0x4101201AUL)
#define REG_SERCOM2_I2CM_SYNCBUSY (*(RoReg *)0x4101201CUL)
#define REG_SERCOM2_I2CM_ADDR (*(RwReg *)0x41012024UL)
#define REG_SERCOM2_I2CM_DATA (*(RwReg *)0x41012028UL)
#define REG_SERCOM2_I2CM_DBGCTRL (*(RwReg8 *)0x41012030UL)
#define REG_SERCOM2_I2CS_CTRLA (*(RwReg *)0x41012000UL)
#define REG_SERCOM2_I2CS_CTRLB (*(RwReg *)0x41012004UL)
#define REG_SERCOM2_I2CS_CTRLC (*(RwReg *)0x41012008UL)
#define REG_SERCOM2_I2CS_INTENCLR (*(RwReg8 *)0x41012014UL)
#define REG_SERCOM2_I2CS_INTENSET (*(RwReg8 *)0x41012016UL)
#define REG_SERCOM2_I2CS_INTFLAG (*(RwReg8 *)0x41012018UL)
#define REG_SERCOM2_I2CS_STATUS (*(RwReg16*)0x4101201AUL)
#define REG_SERCOM2_I2CS_SYNCBUSY (*(RoReg *)0x4101201CUL)
#define REG_SERCOM2_I2CS_LENGTH (*(RwReg16*)0x41012022UL)
#define REG_SERCOM2_I2CS_ADDR (*(RwReg *)0x41012024UL)
#define REG_SERCOM2_I2CS_DATA (*(RwReg *)0x41012028UL)
#define REG_SERCOM2_SPI_CTRLA (*(RwReg *)0x41012000UL)
#define REG_SERCOM2_SPI_CTRLB (*(RwReg *)0x41012004UL)
#define REG_SERCOM2_SPI_CTRLC (*(RwReg *)0x41012008UL)
#define REG_SERCOM2_SPI_BAUD (*(RwReg8 *)0x4101200CUL)
#define REG_SERCOM2_SPI_INTENCLR (*(RwReg8 *)0x41012014UL)
#define REG_SERCOM2_SPI_INTENSET (*(RwReg8 *)0x41012016UL)
#define REG_SERCOM2_SPI_INTFLAG (*(RwReg8 *)0x41012018UL)
#define REG_SERCOM2_SPI_STATUS (*(RwReg16*)0x4101201AUL)
#define REG_SERCOM2_SPI_SYNCBUSY (*(RoReg *)0x4101201CUL)
#define REG_SERCOM2_SPI_LENGTH (*(RwReg16*)0x41012022UL)
#define REG_SERCOM2_SPI_ADDR (*(RwReg *)0x41012024UL)
#define REG_SERCOM2_SPI_DATA (*(RwReg *)0x41012028UL)
#define REG_SERCOM2_SPI_DBGCTRL (*(RwReg8 *)0x41012030UL)
#define REG_SERCOM2_USART_CTRLA (*(RwReg *)0x41012000UL)
#define REG_SERCOM2_USART_CTRLB (*(RwReg *)0x41012004UL)
#define REG_SERCOM2_USART_CTRLC (*(RwReg *)0x41012008UL)
#define REG_SERCOM2_USART_BAUD (*(RwReg16*)0x4101200CUL)
#define REG_SERCOM2_USART_RXPL (*(RwReg8 *)0x4101200EUL)
#define REG_SERCOM2_USART_INTENCLR (*(RwReg8 *)0x41012014UL)
#define REG_SERCOM2_USART_INTENSET (*(RwReg8 *)0x41012016UL)
#define REG_SERCOM2_USART_INTFLAG (*(RwReg8 *)0x41012018UL)
#define REG_SERCOM2_USART_STATUS (*(RwReg16*)0x4101201AUL)
#define REG_SERCOM2_USART_SYNCBUSY (*(RoReg *)0x4101201CUL)
#define REG_SERCOM2_USART_RXERRCNT (*(RoReg8 *)0x41012020UL)
#define REG_SERCOM2_USART_LENGTH (*(RwReg16*)0x41012022UL)
#define REG_SERCOM2_USART_DATA (*(RwReg *)0x41012028UL)
#define REG_SERCOM2_USART_DBGCTRL (*(RwReg8 *)0x41012030UL)



#define SERCOM2_CLK_REDUCTION 1
#define SERCOM2_DLY_COMPENSATION 1
#define SERCOM2_DMA 1
#define SERCOM2_DMAC_ID_RX 8
#define SERCOM2_DMAC_ID_TX 9
#define SERCOM2_FIFO_DEPTH_POWER 1
#define SERCOM2_GCLK_ID_CORE 23
#define SERCOM2_GCLK_ID_SLOW 3
#define SERCOM2_INT_MSB 6
#define SERCOM2_PMSB 3
#define SERCOM2_RETENTION_SUPPORT 0
#define SERCOM2_SE_CNT 1
#define SERCOM2_SPI 1
#define SERCOM2_SPI_HW_SS_CTRL 1
#define SERCOM2_SPI_ICSPACE_EXT 1
#define SERCOM2_SPI_OZMO 0
#define SERCOM2_SPI_WAKE_ON_SSL 1
#define SERCOM2_TTBIT_EXTENSION 1
#define SERCOM2_TWIM 1
#define SERCOM2_TWIS 1
#define SERCOM2_TWIS_AUTO_ACK 1
#define SERCOM2_TWIS_GROUP_CMD 1
#define SERCOM2_TWIS_SDASETUP_CNT_SIZE 8
#define SERCOM2_TWIS_SDASETUP_SIZE 4
#define SERCOM2_TWIS_SUDAT 1
#define SERCOM2_TWI_FASTMP 1
#define SERCOM2_TWI_HSMODE 1
#define SERCOM2_TWI_SCLSM_MODE 1
#define SERCOM2_TWI_SMB_TIMEOUTS 1
#define SERCOM2_TWI_TENBIT_ADR 1
#define SERCOM2_USART 1
#define SERCOM2_USART_AUTOBAUD 1
#define SERCOM2_USART_COLDET 1
#define SERCOM2_USART_FLOW_CTRL 1
#define SERCOM2_USART_FRAC_BAUD 1
#define SERCOM2_USART_IRDA 1
#define SERCOM2_USART_ISO7816 1
#define SERCOM2_USART_LIN_MASTER 1
#define SERCOM2_USART_RS485 1
#define SERCOM2_USART_SAMPA_EXT 1
#define SERCOM2_USART_SAMPR_EXT 1
# 660 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/sercom3.h" 1
# 31 "asf4/samd51/include/instance/sercom3.h"
#define _SAMD51_SERCOM3_INSTANCE_ 
# 86 "asf4/samd51/include/instance/sercom3.h"
#define REG_SERCOM3_I2CM_CTRLA (*(RwReg *)0x41014000UL)
#define REG_SERCOM3_I2CM_CTRLB (*(RwReg *)0x41014004UL)
#define REG_SERCOM3_I2CM_CTRLC (*(RwReg *)0x41014008UL)
#define REG_SERCOM3_I2CM_BAUD (*(RwReg *)0x4101400CUL)
#define REG_SERCOM3_I2CM_INTENCLR (*(RwReg8 *)0x41014014UL)
#define REG_SERCOM3_I2CM_INTENSET (*(RwReg8 *)0x41014016UL)
#define REG_SERCOM3_I2CM_INTFLAG (*(RwReg8 *)0x41014018UL)
#define REG_SERCOM3_I2CM_STATUS (*(RwReg16*)0x4101401AUL)
#define REG_SERCOM3_I2CM_SYNCBUSY (*(RoReg *)0x4101401CUL)
#define REG_SERCOM3_I2CM_ADDR (*(RwReg *)0x41014024UL)
#define REG_SERCOM3_I2CM_DATA (*(RwReg *)0x41014028UL)
#define REG_SERCOM3_I2CM_DBGCTRL (*(RwReg8 *)0x41014030UL)
#define REG_SERCOM3_I2CS_CTRLA (*(RwReg *)0x41014000UL)
#define REG_SERCOM3_I2CS_CTRLB (*(RwReg *)0x41014004UL)
#define REG_SERCOM3_I2CS_CTRLC (*(RwReg *)0x41014008UL)
#define REG_SERCOM3_I2CS_INTENCLR (*(RwReg8 *)0x41014014UL)
#define REG_SERCOM3_I2CS_INTENSET (*(RwReg8 *)0x41014016UL)
#define REG_SERCOM3_I2CS_INTFLAG (*(RwReg8 *)0x41014018UL)
#define REG_SERCOM3_I2CS_STATUS (*(RwReg16*)0x4101401AUL)
#define REG_SERCOM3_I2CS_SYNCBUSY (*(RoReg *)0x4101401CUL)
#define REG_SERCOM3_I2CS_LENGTH (*(RwReg16*)0x41014022UL)
#define REG_SERCOM3_I2CS_ADDR (*(RwReg *)0x41014024UL)
#define REG_SERCOM3_I2CS_DATA (*(RwReg *)0x41014028UL)
#define REG_SERCOM3_SPI_CTRLA (*(RwReg *)0x41014000UL)
#define REG_SERCOM3_SPI_CTRLB (*(RwReg *)0x41014004UL)
#define REG_SERCOM3_SPI_CTRLC (*(RwReg *)0x41014008UL)
#define REG_SERCOM3_SPI_BAUD (*(RwReg8 *)0x4101400CUL)
#define REG_SERCOM3_SPI_INTENCLR (*(RwReg8 *)0x41014014UL)
#define REG_SERCOM3_SPI_INTENSET (*(RwReg8 *)0x41014016UL)
#define REG_SERCOM3_SPI_INTFLAG (*(RwReg8 *)0x41014018UL)
#define REG_SERCOM3_SPI_STATUS (*(RwReg16*)0x4101401AUL)
#define REG_SERCOM3_SPI_SYNCBUSY (*(RoReg *)0x4101401CUL)
#define REG_SERCOM3_SPI_LENGTH (*(RwReg16*)0x41014022UL)
#define REG_SERCOM3_SPI_ADDR (*(RwReg *)0x41014024UL)
#define REG_SERCOM3_SPI_DATA (*(RwReg *)0x41014028UL)
#define REG_SERCOM3_SPI_DBGCTRL (*(RwReg8 *)0x41014030UL)
#define REG_SERCOM3_USART_CTRLA (*(RwReg *)0x41014000UL)
#define REG_SERCOM3_USART_CTRLB (*(RwReg *)0x41014004UL)
#define REG_SERCOM3_USART_CTRLC (*(RwReg *)0x41014008UL)
#define REG_SERCOM3_USART_BAUD (*(RwReg16*)0x4101400CUL)
#define REG_SERCOM3_USART_RXPL (*(RwReg8 *)0x4101400EUL)
#define REG_SERCOM3_USART_INTENCLR (*(RwReg8 *)0x41014014UL)
#define REG_SERCOM3_USART_INTENSET (*(RwReg8 *)0x41014016UL)
#define REG_SERCOM3_USART_INTFLAG (*(RwReg8 *)0x41014018UL)
#define REG_SERCOM3_USART_STATUS (*(RwReg16*)0x4101401AUL)
#define REG_SERCOM3_USART_SYNCBUSY (*(RoReg *)0x4101401CUL)
#define REG_SERCOM3_USART_RXERRCNT (*(RoReg8 *)0x41014020UL)
#define REG_SERCOM3_USART_LENGTH (*(RwReg16*)0x41014022UL)
#define REG_SERCOM3_USART_DATA (*(RwReg *)0x41014028UL)
#define REG_SERCOM3_USART_DBGCTRL (*(RwReg8 *)0x41014030UL)



#define SERCOM3_CLK_REDUCTION 1
#define SERCOM3_DLY_COMPENSATION 1
#define SERCOM3_DMA 1
#define SERCOM3_DMAC_ID_RX 10
#define SERCOM3_DMAC_ID_TX 11
#define SERCOM3_FIFO_DEPTH_POWER 1
#define SERCOM3_GCLK_ID_CORE 24
#define SERCOM3_GCLK_ID_SLOW 3
#define SERCOM3_INT_MSB 6
#define SERCOM3_PMSB 3
#define SERCOM3_RETENTION_SUPPORT 0
#define SERCOM3_SE_CNT 1
#define SERCOM3_SPI 1
#define SERCOM3_SPI_HW_SS_CTRL 1
#define SERCOM3_SPI_ICSPACE_EXT 1
#define SERCOM3_SPI_OZMO 0
#define SERCOM3_SPI_WAKE_ON_SSL 1
#define SERCOM3_TTBIT_EXTENSION 1
#define SERCOM3_TWIM 1
#define SERCOM3_TWIS 1
#define SERCOM3_TWIS_AUTO_ACK 1
#define SERCOM3_TWIS_GROUP_CMD 1
#define SERCOM3_TWIS_SDASETUP_CNT_SIZE 8
#define SERCOM3_TWIS_SDASETUP_SIZE 4
#define SERCOM3_TWIS_SUDAT 1
#define SERCOM3_TWI_FASTMP 1
#define SERCOM3_TWI_HSMODE 1
#define SERCOM3_TWI_SCLSM_MODE 1
#define SERCOM3_TWI_SMB_TIMEOUTS 1
#define SERCOM3_TWI_TENBIT_ADR 1
#define SERCOM3_USART 1
#define SERCOM3_USART_AUTOBAUD 1
#define SERCOM3_USART_COLDET 1
#define SERCOM3_USART_FLOW_CTRL 1
#define SERCOM3_USART_FRAC_BAUD 1
#define SERCOM3_USART_IRDA 1
#define SERCOM3_USART_ISO7816 1
#define SERCOM3_USART_LIN_MASTER 1
#define SERCOM3_USART_RS485 1
#define SERCOM3_USART_SAMPA_EXT 1
#define SERCOM3_USART_SAMPR_EXT 1
# 661 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/sercom4.h" 1
# 31 "asf4/samd51/include/instance/sercom4.h"
#define _SAMD51_SERCOM4_INSTANCE_ 
# 86 "asf4/samd51/include/instance/sercom4.h"
#define REG_SERCOM4_I2CM_CTRLA (*(RwReg *)0x43000000UL)
#define REG_SERCOM4_I2CM_CTRLB (*(RwReg *)0x43000004UL)
#define REG_SERCOM4_I2CM_CTRLC (*(RwReg *)0x43000008UL)
#define REG_SERCOM4_I2CM_BAUD (*(RwReg *)0x4300000CUL)
#define REG_SERCOM4_I2CM_INTENCLR (*(RwReg8 *)0x43000014UL)
#define REG_SERCOM4_I2CM_INTENSET (*(RwReg8 *)0x43000016UL)
#define REG_SERCOM4_I2CM_INTFLAG (*(RwReg8 *)0x43000018UL)
#define REG_SERCOM4_I2CM_STATUS (*(RwReg16*)0x4300001AUL)
#define REG_SERCOM4_I2CM_SYNCBUSY (*(RoReg *)0x4300001CUL)
#define REG_SERCOM4_I2CM_ADDR (*(RwReg *)0x43000024UL)
#define REG_SERCOM4_I2CM_DATA (*(RwReg *)0x43000028UL)
#define REG_SERCOM4_I2CM_DBGCTRL (*(RwReg8 *)0x43000030UL)
#define REG_SERCOM4_I2CS_CTRLA (*(RwReg *)0x43000000UL)
#define REG_SERCOM4_I2CS_CTRLB (*(RwReg *)0x43000004UL)
#define REG_SERCOM4_I2CS_CTRLC (*(RwReg *)0x43000008UL)
#define REG_SERCOM4_I2CS_INTENCLR (*(RwReg8 *)0x43000014UL)
#define REG_SERCOM4_I2CS_INTENSET (*(RwReg8 *)0x43000016UL)
#define REG_SERCOM4_I2CS_INTFLAG (*(RwReg8 *)0x43000018UL)
#define REG_SERCOM4_I2CS_STATUS (*(RwReg16*)0x4300001AUL)
#define REG_SERCOM4_I2CS_SYNCBUSY (*(RoReg *)0x4300001CUL)
#define REG_SERCOM4_I2CS_LENGTH (*(RwReg16*)0x43000022UL)
#define REG_SERCOM4_I2CS_ADDR (*(RwReg *)0x43000024UL)
#define REG_SERCOM4_I2CS_DATA (*(RwReg *)0x43000028UL)
#define REG_SERCOM4_SPI_CTRLA (*(RwReg *)0x43000000UL)
#define REG_SERCOM4_SPI_CTRLB (*(RwReg *)0x43000004UL)
#define REG_SERCOM4_SPI_CTRLC (*(RwReg *)0x43000008UL)
#define REG_SERCOM4_SPI_BAUD (*(RwReg8 *)0x4300000CUL)
#define REG_SERCOM4_SPI_INTENCLR (*(RwReg8 *)0x43000014UL)
#define REG_SERCOM4_SPI_INTENSET (*(RwReg8 *)0x43000016UL)
#define REG_SERCOM4_SPI_INTFLAG (*(RwReg8 *)0x43000018UL)
#define REG_SERCOM4_SPI_STATUS (*(RwReg16*)0x4300001AUL)
#define REG_SERCOM4_SPI_SYNCBUSY (*(RoReg *)0x4300001CUL)
#define REG_SERCOM4_SPI_LENGTH (*(RwReg16*)0x43000022UL)
#define REG_SERCOM4_SPI_ADDR (*(RwReg *)0x43000024UL)
#define REG_SERCOM4_SPI_DATA (*(RwReg *)0x43000028UL)
#define REG_SERCOM4_SPI_DBGCTRL (*(RwReg8 *)0x43000030UL)
#define REG_SERCOM4_USART_CTRLA (*(RwReg *)0x43000000UL)
#define REG_SERCOM4_USART_CTRLB (*(RwReg *)0x43000004UL)
#define REG_SERCOM4_USART_CTRLC (*(RwReg *)0x43000008UL)
#define REG_SERCOM4_USART_BAUD (*(RwReg16*)0x4300000CUL)
#define REG_SERCOM4_USART_RXPL (*(RwReg8 *)0x4300000EUL)
#define REG_SERCOM4_USART_INTENCLR (*(RwReg8 *)0x43000014UL)
#define REG_SERCOM4_USART_INTENSET (*(RwReg8 *)0x43000016UL)
#define REG_SERCOM4_USART_INTFLAG (*(RwReg8 *)0x43000018UL)
#define REG_SERCOM4_USART_STATUS (*(RwReg16*)0x4300001AUL)
#define REG_SERCOM4_USART_SYNCBUSY (*(RoReg *)0x4300001CUL)
#define REG_SERCOM4_USART_RXERRCNT (*(RoReg8 *)0x43000020UL)
#define REG_SERCOM4_USART_LENGTH (*(RwReg16*)0x43000022UL)
#define REG_SERCOM4_USART_DATA (*(RwReg *)0x43000028UL)
#define REG_SERCOM4_USART_DBGCTRL (*(RwReg8 *)0x43000030UL)



#define SERCOM4_CLK_REDUCTION 1
#define SERCOM4_DLY_COMPENSATION 1
#define SERCOM4_DMA 1
#define SERCOM4_DMAC_ID_RX 12
#define SERCOM4_DMAC_ID_TX 13
#define SERCOM4_FIFO_DEPTH_POWER 1
#define SERCOM4_GCLK_ID_CORE 34
#define SERCOM4_GCLK_ID_SLOW 3
#define SERCOM4_INT_MSB 6
#define SERCOM4_PMSB 3
#define SERCOM4_RETENTION_SUPPORT 0
#define SERCOM4_SE_CNT 1
#define SERCOM4_SPI 1
#define SERCOM4_SPI_HW_SS_CTRL 1
#define SERCOM4_SPI_ICSPACE_EXT 1
#define SERCOM4_SPI_OZMO 0
#define SERCOM4_SPI_WAKE_ON_SSL 1
#define SERCOM4_TTBIT_EXTENSION 1
#define SERCOM4_TWIM 1
#define SERCOM4_TWIS 1
#define SERCOM4_TWIS_AUTO_ACK 1
#define SERCOM4_TWIS_GROUP_CMD 1
#define SERCOM4_TWIS_SDASETUP_CNT_SIZE 8
#define SERCOM4_TWIS_SDASETUP_SIZE 4
#define SERCOM4_TWIS_SUDAT 1
#define SERCOM4_TWI_FASTMP 1
#define SERCOM4_TWI_HSMODE 1
#define SERCOM4_TWI_SCLSM_MODE 1
#define SERCOM4_TWI_SMB_TIMEOUTS 1
#define SERCOM4_TWI_TENBIT_ADR 1
#define SERCOM4_USART 1
#define SERCOM4_USART_AUTOBAUD 1
#define SERCOM4_USART_COLDET 1
#define SERCOM4_USART_FLOW_CTRL 1
#define SERCOM4_USART_FRAC_BAUD 1
#define SERCOM4_USART_IRDA 1
#define SERCOM4_USART_ISO7816 1
#define SERCOM4_USART_LIN_MASTER 1
#define SERCOM4_USART_RS485 1
#define SERCOM4_USART_SAMPA_EXT 1
#define SERCOM4_USART_SAMPR_EXT 1
# 662 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/sercom5.h" 1
# 31 "asf4/samd51/include/instance/sercom5.h"
#define _SAMD51_SERCOM5_INSTANCE_ 
# 86 "asf4/samd51/include/instance/sercom5.h"
#define REG_SERCOM5_I2CM_CTRLA (*(RwReg *)0x43000400UL)
#define REG_SERCOM5_I2CM_CTRLB (*(RwReg *)0x43000404UL)
#define REG_SERCOM5_I2CM_CTRLC (*(RwReg *)0x43000408UL)
#define REG_SERCOM5_I2CM_BAUD (*(RwReg *)0x4300040CUL)
#define REG_SERCOM5_I2CM_INTENCLR (*(RwReg8 *)0x43000414UL)
#define REG_SERCOM5_I2CM_INTENSET (*(RwReg8 *)0x43000416UL)
#define REG_SERCOM5_I2CM_INTFLAG (*(RwReg8 *)0x43000418UL)
#define REG_SERCOM5_I2CM_STATUS (*(RwReg16*)0x4300041AUL)
#define REG_SERCOM5_I2CM_SYNCBUSY (*(RoReg *)0x4300041CUL)
#define REG_SERCOM5_I2CM_ADDR (*(RwReg *)0x43000424UL)
#define REG_SERCOM5_I2CM_DATA (*(RwReg *)0x43000428UL)
#define REG_SERCOM5_I2CM_DBGCTRL (*(RwReg8 *)0x43000430UL)
#define REG_SERCOM5_I2CS_CTRLA (*(RwReg *)0x43000400UL)
#define REG_SERCOM5_I2CS_CTRLB (*(RwReg *)0x43000404UL)
#define REG_SERCOM5_I2CS_CTRLC (*(RwReg *)0x43000408UL)
#define REG_SERCOM5_I2CS_INTENCLR (*(RwReg8 *)0x43000414UL)
#define REG_SERCOM5_I2CS_INTENSET (*(RwReg8 *)0x43000416UL)
#define REG_SERCOM5_I2CS_INTFLAG (*(RwReg8 *)0x43000418UL)
#define REG_SERCOM5_I2CS_STATUS (*(RwReg16*)0x4300041AUL)
#define REG_SERCOM5_I2CS_SYNCBUSY (*(RoReg *)0x4300041CUL)
#define REG_SERCOM5_I2CS_LENGTH (*(RwReg16*)0x43000422UL)
#define REG_SERCOM5_I2CS_ADDR (*(RwReg *)0x43000424UL)
#define REG_SERCOM5_I2CS_DATA (*(RwReg *)0x43000428UL)
#define REG_SERCOM5_SPI_CTRLA (*(RwReg *)0x43000400UL)
#define REG_SERCOM5_SPI_CTRLB (*(RwReg *)0x43000404UL)
#define REG_SERCOM5_SPI_CTRLC (*(RwReg *)0x43000408UL)
#define REG_SERCOM5_SPI_BAUD (*(RwReg8 *)0x4300040CUL)
#define REG_SERCOM5_SPI_INTENCLR (*(RwReg8 *)0x43000414UL)
#define REG_SERCOM5_SPI_INTENSET (*(RwReg8 *)0x43000416UL)
#define REG_SERCOM5_SPI_INTFLAG (*(RwReg8 *)0x43000418UL)
#define REG_SERCOM5_SPI_STATUS (*(RwReg16*)0x4300041AUL)
#define REG_SERCOM5_SPI_SYNCBUSY (*(RoReg *)0x4300041CUL)
#define REG_SERCOM5_SPI_LENGTH (*(RwReg16*)0x43000422UL)
#define REG_SERCOM5_SPI_ADDR (*(RwReg *)0x43000424UL)
#define REG_SERCOM5_SPI_DATA (*(RwReg *)0x43000428UL)
#define REG_SERCOM5_SPI_DBGCTRL (*(RwReg8 *)0x43000430UL)
#define REG_SERCOM5_USART_CTRLA (*(RwReg *)0x43000400UL)
#define REG_SERCOM5_USART_CTRLB (*(RwReg *)0x43000404UL)
#define REG_SERCOM5_USART_CTRLC (*(RwReg *)0x43000408UL)
#define REG_SERCOM5_USART_BAUD (*(RwReg16*)0x4300040CUL)
#define REG_SERCOM5_USART_RXPL (*(RwReg8 *)0x4300040EUL)
#define REG_SERCOM5_USART_INTENCLR (*(RwReg8 *)0x43000414UL)
#define REG_SERCOM5_USART_INTENSET (*(RwReg8 *)0x43000416UL)
#define REG_SERCOM5_USART_INTFLAG (*(RwReg8 *)0x43000418UL)
#define REG_SERCOM5_USART_STATUS (*(RwReg16*)0x4300041AUL)
#define REG_SERCOM5_USART_SYNCBUSY (*(RoReg *)0x4300041CUL)
#define REG_SERCOM5_USART_RXERRCNT (*(RoReg8 *)0x43000420UL)
#define REG_SERCOM5_USART_LENGTH (*(RwReg16*)0x43000422UL)
#define REG_SERCOM5_USART_DATA (*(RwReg *)0x43000428UL)
#define REG_SERCOM5_USART_DBGCTRL (*(RwReg8 *)0x43000430UL)



#define SERCOM5_CLK_REDUCTION 1
#define SERCOM5_DLY_COMPENSATION 1
#define SERCOM5_DMA 1
#define SERCOM5_DMAC_ID_RX 14
#define SERCOM5_DMAC_ID_TX 15
#define SERCOM5_FIFO_DEPTH_POWER 1
#define SERCOM5_GCLK_ID_CORE 35
#define SERCOM5_GCLK_ID_SLOW 3
#define SERCOM5_INT_MSB 6
#define SERCOM5_PMSB 3
#define SERCOM5_RETENTION_SUPPORT 0
#define SERCOM5_SE_CNT 1
#define SERCOM5_SPI 1
#define SERCOM5_SPI_HW_SS_CTRL 1
#define SERCOM5_SPI_ICSPACE_EXT 1
#define SERCOM5_SPI_OZMO 0
#define SERCOM5_SPI_WAKE_ON_SSL 1
#define SERCOM5_TTBIT_EXTENSION 1
#define SERCOM5_TWIM 1
#define SERCOM5_TWIS 1
#define SERCOM5_TWIS_AUTO_ACK 1
#define SERCOM5_TWIS_GROUP_CMD 1
#define SERCOM5_TWIS_SDASETUP_CNT_SIZE 8
#define SERCOM5_TWIS_SDASETUP_SIZE 4
#define SERCOM5_TWIS_SUDAT 1
#define SERCOM5_TWI_FASTMP 1
#define SERCOM5_TWI_HSMODE 1
#define SERCOM5_TWI_SCLSM_MODE 1
#define SERCOM5_TWI_SMB_TIMEOUTS 1
#define SERCOM5_TWI_TENBIT_ADR 1
#define SERCOM5_USART 1
#define SERCOM5_USART_AUTOBAUD 1
#define SERCOM5_USART_COLDET 1
#define SERCOM5_USART_FLOW_CTRL 1
#define SERCOM5_USART_FRAC_BAUD 1
#define SERCOM5_USART_IRDA 1
#define SERCOM5_USART_ISO7816 1
#define SERCOM5_USART_LIN_MASTER 1
#define SERCOM5_USART_RS485 1
#define SERCOM5_USART_SAMPA_EXT 1
#define SERCOM5_USART_SAMPR_EXT 1
# 663 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/sercom6.h" 1
# 31 "asf4/samd51/include/instance/sercom6.h"
#define _SAMD51_SERCOM6_INSTANCE_ 
# 86 "asf4/samd51/include/instance/sercom6.h"
#define REG_SERCOM6_I2CM_CTRLA (*(RwReg *)0x43000800UL)
#define REG_SERCOM6_I2CM_CTRLB (*(RwReg *)0x43000804UL)
#define REG_SERCOM6_I2CM_CTRLC (*(RwReg *)0x43000808UL)
#define REG_SERCOM6_I2CM_BAUD (*(RwReg *)0x4300080CUL)
#define REG_SERCOM6_I2CM_INTENCLR (*(RwReg8 *)0x43000814UL)
#define REG_SERCOM6_I2CM_INTENSET (*(RwReg8 *)0x43000816UL)
#define REG_SERCOM6_I2CM_INTFLAG (*(RwReg8 *)0x43000818UL)
#define REG_SERCOM6_I2CM_STATUS (*(RwReg16*)0x4300081AUL)
#define REG_SERCOM6_I2CM_SYNCBUSY (*(RoReg *)0x4300081CUL)
#define REG_SERCOM6_I2CM_ADDR (*(RwReg *)0x43000824UL)
#define REG_SERCOM6_I2CM_DATA (*(RwReg *)0x43000828UL)
#define REG_SERCOM6_I2CM_DBGCTRL (*(RwReg8 *)0x43000830UL)
#define REG_SERCOM6_I2CS_CTRLA (*(RwReg *)0x43000800UL)
#define REG_SERCOM6_I2CS_CTRLB (*(RwReg *)0x43000804UL)
#define REG_SERCOM6_I2CS_CTRLC (*(RwReg *)0x43000808UL)
#define REG_SERCOM6_I2CS_INTENCLR (*(RwReg8 *)0x43000814UL)
#define REG_SERCOM6_I2CS_INTENSET (*(RwReg8 *)0x43000816UL)
#define REG_SERCOM6_I2CS_INTFLAG (*(RwReg8 *)0x43000818UL)
#define REG_SERCOM6_I2CS_STATUS (*(RwReg16*)0x4300081AUL)
#define REG_SERCOM6_I2CS_SYNCBUSY (*(RoReg *)0x4300081CUL)
#define REG_SERCOM6_I2CS_LENGTH (*(RwReg16*)0x43000822UL)
#define REG_SERCOM6_I2CS_ADDR (*(RwReg *)0x43000824UL)
#define REG_SERCOM6_I2CS_DATA (*(RwReg *)0x43000828UL)
#define REG_SERCOM6_SPI_CTRLA (*(RwReg *)0x43000800UL)
#define REG_SERCOM6_SPI_CTRLB (*(RwReg *)0x43000804UL)
#define REG_SERCOM6_SPI_CTRLC (*(RwReg *)0x43000808UL)
#define REG_SERCOM6_SPI_BAUD (*(RwReg8 *)0x4300080CUL)
#define REG_SERCOM6_SPI_INTENCLR (*(RwReg8 *)0x43000814UL)
#define REG_SERCOM6_SPI_INTENSET (*(RwReg8 *)0x43000816UL)
#define REG_SERCOM6_SPI_INTFLAG (*(RwReg8 *)0x43000818UL)
#define REG_SERCOM6_SPI_STATUS (*(RwReg16*)0x4300081AUL)
#define REG_SERCOM6_SPI_SYNCBUSY (*(RoReg *)0x4300081CUL)
#define REG_SERCOM6_SPI_LENGTH (*(RwReg16*)0x43000822UL)
#define REG_SERCOM6_SPI_ADDR (*(RwReg *)0x43000824UL)
#define REG_SERCOM6_SPI_DATA (*(RwReg *)0x43000828UL)
#define REG_SERCOM6_SPI_DBGCTRL (*(RwReg8 *)0x43000830UL)
#define REG_SERCOM6_USART_CTRLA (*(RwReg *)0x43000800UL)
#define REG_SERCOM6_USART_CTRLB (*(RwReg *)0x43000804UL)
#define REG_SERCOM6_USART_CTRLC (*(RwReg *)0x43000808UL)
#define REG_SERCOM6_USART_BAUD (*(RwReg16*)0x4300080CUL)
#define REG_SERCOM6_USART_RXPL (*(RwReg8 *)0x4300080EUL)
#define REG_SERCOM6_USART_INTENCLR (*(RwReg8 *)0x43000814UL)
#define REG_SERCOM6_USART_INTENSET (*(RwReg8 *)0x43000816UL)
#define REG_SERCOM6_USART_INTFLAG (*(RwReg8 *)0x43000818UL)
#define REG_SERCOM6_USART_STATUS (*(RwReg16*)0x4300081AUL)
#define REG_SERCOM6_USART_SYNCBUSY (*(RoReg *)0x4300081CUL)
#define REG_SERCOM6_USART_RXERRCNT (*(RoReg8 *)0x43000820UL)
#define REG_SERCOM6_USART_LENGTH (*(RwReg16*)0x43000822UL)
#define REG_SERCOM6_USART_DATA (*(RwReg *)0x43000828UL)
#define REG_SERCOM6_USART_DBGCTRL (*(RwReg8 *)0x43000830UL)



#define SERCOM6_CLK_REDUCTION 1
#define SERCOM6_DLY_COMPENSATION 1
#define SERCOM6_DMA 1
#define SERCOM6_DMAC_ID_RX 16
#define SERCOM6_DMAC_ID_TX 17
#define SERCOM6_FIFO_DEPTH_POWER 1
#define SERCOM6_GCLK_ID_CORE 36
#define SERCOM6_GCLK_ID_SLOW 3
#define SERCOM6_INT_MSB 6
#define SERCOM6_PMSB 3
#define SERCOM6_RETENTION_SUPPORT 0
#define SERCOM6_SE_CNT 1
#define SERCOM6_SPI 1
#define SERCOM6_SPI_HW_SS_CTRL 1
#define SERCOM6_SPI_ICSPACE_EXT 1
#define SERCOM6_SPI_OZMO 0
#define SERCOM6_SPI_WAKE_ON_SSL 1
#define SERCOM6_TTBIT_EXTENSION 1
#define SERCOM6_TWIM 1
#define SERCOM6_TWIS 1
#define SERCOM6_TWIS_AUTO_ACK 1
#define SERCOM6_TWIS_GROUP_CMD 1
#define SERCOM6_TWIS_SDASETUP_CNT_SIZE 8
#define SERCOM6_TWIS_SDASETUP_SIZE 4
#define SERCOM6_TWIS_SUDAT 1
#define SERCOM6_TWI_FASTMP 1
#define SERCOM6_TWI_HSMODE 1
#define SERCOM6_TWI_SCLSM_MODE 1
#define SERCOM6_TWI_SMB_TIMEOUTS 1
#define SERCOM6_TWI_TENBIT_ADR 1
#define SERCOM6_USART 1
#define SERCOM6_USART_AUTOBAUD 1
#define SERCOM6_USART_COLDET 1
#define SERCOM6_USART_FLOW_CTRL 1
#define SERCOM6_USART_FRAC_BAUD 1
#define SERCOM6_USART_IRDA 1
#define SERCOM6_USART_ISO7816 1
#define SERCOM6_USART_LIN_MASTER 1
#define SERCOM6_USART_RS485 1
#define SERCOM6_USART_SAMPA_EXT 1
#define SERCOM6_USART_SAMPR_EXT 1
# 664 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/sercom7.h" 1
# 31 "asf4/samd51/include/instance/sercom7.h"
#define _SAMD51_SERCOM7_INSTANCE_ 
# 86 "asf4/samd51/include/instance/sercom7.h"
#define REG_SERCOM7_I2CM_CTRLA (*(RwReg *)0x43000C00UL)
#define REG_SERCOM7_I2CM_CTRLB (*(RwReg *)0x43000C04UL)
#define REG_SERCOM7_I2CM_CTRLC (*(RwReg *)0x43000C08UL)
#define REG_SERCOM7_I2CM_BAUD (*(RwReg *)0x43000C0CUL)
#define REG_SERCOM7_I2CM_INTENCLR (*(RwReg8 *)0x43000C14UL)
#define REG_SERCOM7_I2CM_INTENSET (*(RwReg8 *)0x43000C16UL)
#define REG_SERCOM7_I2CM_INTFLAG (*(RwReg8 *)0x43000C18UL)
#define REG_SERCOM7_I2CM_STATUS (*(RwReg16*)0x43000C1AUL)
#define REG_SERCOM7_I2CM_SYNCBUSY (*(RoReg *)0x43000C1CUL)
#define REG_SERCOM7_I2CM_ADDR (*(RwReg *)0x43000C24UL)
#define REG_SERCOM7_I2CM_DATA (*(RwReg *)0x43000C28UL)
#define REG_SERCOM7_I2CM_DBGCTRL (*(RwReg8 *)0x43000C30UL)
#define REG_SERCOM7_I2CS_CTRLA (*(RwReg *)0x43000C00UL)
#define REG_SERCOM7_I2CS_CTRLB (*(RwReg *)0x43000C04UL)
#define REG_SERCOM7_I2CS_CTRLC (*(RwReg *)0x43000C08UL)
#define REG_SERCOM7_I2CS_INTENCLR (*(RwReg8 *)0x43000C14UL)
#define REG_SERCOM7_I2CS_INTENSET (*(RwReg8 *)0x43000C16UL)
#define REG_SERCOM7_I2CS_INTFLAG (*(RwReg8 *)0x43000C18UL)
#define REG_SERCOM7_I2CS_STATUS (*(RwReg16*)0x43000C1AUL)
#define REG_SERCOM7_I2CS_SYNCBUSY (*(RoReg *)0x43000C1CUL)
#define REG_SERCOM7_I2CS_LENGTH (*(RwReg16*)0x43000C22UL)
#define REG_SERCOM7_I2CS_ADDR (*(RwReg *)0x43000C24UL)
#define REG_SERCOM7_I2CS_DATA (*(RwReg *)0x43000C28UL)
#define REG_SERCOM7_SPI_CTRLA (*(RwReg *)0x43000C00UL)
#define REG_SERCOM7_SPI_CTRLB (*(RwReg *)0x43000C04UL)
#define REG_SERCOM7_SPI_CTRLC (*(RwReg *)0x43000C08UL)
#define REG_SERCOM7_SPI_BAUD (*(RwReg8 *)0x43000C0CUL)
#define REG_SERCOM7_SPI_INTENCLR (*(RwReg8 *)0x43000C14UL)
#define REG_SERCOM7_SPI_INTENSET (*(RwReg8 *)0x43000C16UL)
#define REG_SERCOM7_SPI_INTFLAG (*(RwReg8 *)0x43000C18UL)
#define REG_SERCOM7_SPI_STATUS (*(RwReg16*)0x43000C1AUL)
#define REG_SERCOM7_SPI_SYNCBUSY (*(RoReg *)0x43000C1CUL)
#define REG_SERCOM7_SPI_LENGTH (*(RwReg16*)0x43000C22UL)
#define REG_SERCOM7_SPI_ADDR (*(RwReg *)0x43000C24UL)
#define REG_SERCOM7_SPI_DATA (*(RwReg *)0x43000C28UL)
#define REG_SERCOM7_SPI_DBGCTRL (*(RwReg8 *)0x43000C30UL)
#define REG_SERCOM7_USART_CTRLA (*(RwReg *)0x43000C00UL)
#define REG_SERCOM7_USART_CTRLB (*(RwReg *)0x43000C04UL)
#define REG_SERCOM7_USART_CTRLC (*(RwReg *)0x43000C08UL)
#define REG_SERCOM7_USART_BAUD (*(RwReg16*)0x43000C0CUL)
#define REG_SERCOM7_USART_RXPL (*(RwReg8 *)0x43000C0EUL)
#define REG_SERCOM7_USART_INTENCLR (*(RwReg8 *)0x43000C14UL)
#define REG_SERCOM7_USART_INTENSET (*(RwReg8 *)0x43000C16UL)
#define REG_SERCOM7_USART_INTFLAG (*(RwReg8 *)0x43000C18UL)
#define REG_SERCOM7_USART_STATUS (*(RwReg16*)0x43000C1AUL)
#define REG_SERCOM7_USART_SYNCBUSY (*(RoReg *)0x43000C1CUL)
#define REG_SERCOM7_USART_RXERRCNT (*(RoReg8 *)0x43000C20UL)
#define REG_SERCOM7_USART_LENGTH (*(RwReg16*)0x43000C22UL)
#define REG_SERCOM7_USART_DATA (*(RwReg *)0x43000C28UL)
#define REG_SERCOM7_USART_DBGCTRL (*(RwReg8 *)0x43000C30UL)



#define SERCOM7_CLK_REDUCTION 1
#define SERCOM7_DLY_COMPENSATION 1
#define SERCOM7_DMA 1
#define SERCOM7_DMAC_ID_RX 18
#define SERCOM7_DMAC_ID_TX 19
#define SERCOM7_FIFO_DEPTH_POWER 1
#define SERCOM7_GCLK_ID_CORE 37
#define SERCOM7_GCLK_ID_SLOW 3
#define SERCOM7_INT_MSB 6
#define SERCOM7_PMSB 3
#define SERCOM7_RETENTION_SUPPORT 0
#define SERCOM7_SE_CNT 1
#define SERCOM7_SPI 1
#define SERCOM7_SPI_HW_SS_CTRL 1
#define SERCOM7_SPI_ICSPACE_EXT 1
#define SERCOM7_SPI_OZMO 0
#define SERCOM7_SPI_WAKE_ON_SSL 1
#define SERCOM7_TTBIT_EXTENSION 1
#define SERCOM7_TWIM 1
#define SERCOM7_TWIS 1
#define SERCOM7_TWIS_AUTO_ACK 1
#define SERCOM7_TWIS_GROUP_CMD 1
#define SERCOM7_TWIS_SDASETUP_CNT_SIZE 8
#define SERCOM7_TWIS_SDASETUP_SIZE 4
#define SERCOM7_TWIS_SUDAT 1
#define SERCOM7_TWI_FASTMP 1
#define SERCOM7_TWI_HSMODE 1
#define SERCOM7_TWI_SCLSM_MODE 1
#define SERCOM7_TWI_SMB_TIMEOUTS 1
#define SERCOM7_TWI_TENBIT_ADR 1
#define SERCOM7_USART 1
#define SERCOM7_USART_AUTOBAUD 1
#define SERCOM7_USART_COLDET 1
#define SERCOM7_USART_FLOW_CTRL 1
#define SERCOM7_USART_FRAC_BAUD 1
#define SERCOM7_USART_IRDA 1
#define SERCOM7_USART_ISO7816 1
#define SERCOM7_USART_LIN_MASTER 1
#define SERCOM7_USART_RS485 1
#define SERCOM7_USART_SAMPA_EXT 1
#define SERCOM7_USART_SAMPR_EXT 1
# 665 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/supc.h" 1
# 31 "asf4/samd51/include/instance/supc.h"
#define _SAMD51_SUPC_INSTANCE_ 
# 47 "asf4/samd51/include/instance/supc.h"
#define REG_SUPC_INTENCLR (*(RwReg *)0x40001800UL)
#define REG_SUPC_INTENSET (*(RwReg *)0x40001804UL)
#define REG_SUPC_INTFLAG (*(RwReg *)0x40001808UL)
#define REG_SUPC_STATUS (*(RoReg *)0x4000180CUL)
#define REG_SUPC_BOD33 (*(RwReg *)0x40001810UL)
#define REG_SUPC_BOD12 (*(RwReg *)0x40001814UL)
#define REG_SUPC_VREG (*(RwReg *)0x40001818UL)
#define REG_SUPC_VREF (*(RwReg *)0x4000181CUL)
#define REG_SUPC_BBPS (*(RwReg *)0x40001820UL)
#define REG_SUPC_BKOUT (*(RwReg *)0x40001824UL)
#define REG_SUPC_BKIN (*(RoReg *)0x40001828UL)



#define SUPC_BOD12_CALIB_MSB 5
#define SUPC_BOD33_CALIB_MSB 5
# 666 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/tal.h" 1
# 31 "asf4/samd51/include/instance/tal.h"
#define _SAMD51_TAL_INSTANCE_ 
# 280 "asf4/samd51/include/instance/tal.h"
#define REG_TAL_CTRLA (*(RwReg8 *)0x4101E000UL)
#define REG_TAL_EXTCTRL (*(RwReg8 *)0x4101E001UL)
#define REG_TAL_EVCTRL (*(RwReg16*)0x4101E004UL)
#define REG_TAL_INTENCLR (*(RwReg8 *)0x4101E008UL)
#define REG_TAL_INTENSET (*(RwReg8 *)0x4101E009UL)
#define REG_TAL_INTFLAG (*(RwReg8 *)0x4101E00AUL)
#define REG_TAL_GLOBMASK (*(RwReg8 *)0x4101E00BUL)
#define REG_TAL_HALT (*(WoReg8 *)0x4101E00CUL)
#define REG_TAL_RESTART (*(WoReg8 *)0x4101E00DUL)
#define REG_TAL_BRKSTATUS (*(RoReg16*)0x4101E00EUL)
#define REG_TAL_CTICTRLA0 (*(RwReg8 *)0x4101E010UL)
#define REG_TAL_CTIMASK0 (*(RwReg8 *)0x4101E011UL)
#define REG_TAL_CTICTRLA1 (*(RwReg8 *)0x4101E012UL)
#define REG_TAL_CTIMASK1 (*(RwReg8 *)0x4101E013UL)
#define REG_TAL_CTICTRLA2 (*(RwReg8 *)0x4101E014UL)
#define REG_TAL_CTIMASK2 (*(RwReg8 *)0x4101E015UL)
#define REG_TAL_CTICTRLA3 (*(RwReg8 *)0x4101E016UL)
#define REG_TAL_CTIMASK3 (*(RwReg8 *)0x4101E017UL)
#define REG_TAL_INTSTATUS0 (*(RoReg8 *)0x4101E020UL)
#define REG_TAL_INTSTATUS1 (*(RoReg8 *)0x4101E021UL)
#define REG_TAL_INTSTATUS2 (*(RoReg8 *)0x4101E022UL)
#define REG_TAL_INTSTATUS3 (*(RoReg8 *)0x4101E023UL)
#define REG_TAL_INTSTATUS4 (*(RoReg8 *)0x4101E024UL)
#define REG_TAL_INTSTATUS5 (*(RoReg8 *)0x4101E025UL)
#define REG_TAL_INTSTATUS6 (*(RoReg8 *)0x4101E026UL)
#define REG_TAL_INTSTATUS7 (*(RoReg8 *)0x4101E027UL)
#define REG_TAL_INTSTATUS8 (*(RoReg8 *)0x4101E028UL)
#define REG_TAL_INTSTATUS9 (*(RoReg8 *)0x4101E029UL)
#define REG_TAL_INTSTATUS10 (*(RoReg8 *)0x4101E02AUL)
#define REG_TAL_INTSTATUS11 (*(RoReg8 *)0x4101E02BUL)
#define REG_TAL_INTSTATUS12 (*(RoReg8 *)0x4101E02CUL)
#define REG_TAL_INTSTATUS13 (*(RoReg8 *)0x4101E02DUL)
#define REG_TAL_INTSTATUS14 (*(RoReg8 *)0x4101E02EUL)
#define REG_TAL_INTSTATUS15 (*(RoReg8 *)0x4101E02FUL)
#define REG_TAL_INTSTATUS16 (*(RoReg8 *)0x4101E030UL)
#define REG_TAL_INTSTATUS17 (*(RoReg8 *)0x4101E031UL)
#define REG_TAL_INTSTATUS18 (*(RoReg8 *)0x4101E032UL)
#define REG_TAL_INTSTATUS19 (*(RoReg8 *)0x4101E033UL)
#define REG_TAL_INTSTATUS20 (*(RoReg8 *)0x4101E034UL)
#define REG_TAL_INTSTATUS21 (*(RoReg8 *)0x4101E035UL)
#define REG_TAL_INTSTATUS22 (*(RoReg8 *)0x4101E036UL)
#define REG_TAL_INTSTATUS23 (*(RoReg8 *)0x4101E037UL)
#define REG_TAL_INTSTATUS24 (*(RoReg8 *)0x4101E038UL)
#define REG_TAL_INTSTATUS25 (*(RoReg8 *)0x4101E039UL)
#define REG_TAL_INTSTATUS26 (*(RoReg8 *)0x4101E03AUL)
#define REG_TAL_INTSTATUS27 (*(RoReg8 *)0x4101E03BUL)
#define REG_TAL_INTSTATUS28 (*(RoReg8 *)0x4101E03CUL)
#define REG_TAL_INTSTATUS29 (*(RoReg8 *)0x4101E03DUL)
#define REG_TAL_INTSTATUS30 (*(RoReg8 *)0x4101E03EUL)
#define REG_TAL_INTSTATUS31 (*(RoReg8 *)0x4101E03FUL)
#define REG_TAL_INTSTATUS32 (*(RoReg8 *)0x4101E040UL)
#define REG_TAL_INTSTATUS33 (*(RoReg8 *)0x4101E041UL)
#define REG_TAL_INTSTATUS34 (*(RoReg8 *)0x4101E042UL)
#define REG_TAL_INTSTATUS35 (*(RoReg8 *)0x4101E043UL)
#define REG_TAL_INTSTATUS36 (*(RoReg8 *)0x4101E044UL)
#define REG_TAL_INTSTATUS37 (*(RoReg8 *)0x4101E045UL)
#define REG_TAL_INTSTATUS38 (*(RoReg8 *)0x4101E046UL)
#define REG_TAL_INTSTATUS39 (*(RoReg8 *)0x4101E047UL)
#define REG_TAL_INTSTATUS40 (*(RoReg8 *)0x4101E048UL)
#define REG_TAL_INTSTATUS41 (*(RoReg8 *)0x4101E049UL)
#define REG_TAL_INTSTATUS42 (*(RoReg8 *)0x4101E04AUL)
#define REG_TAL_INTSTATUS43 (*(RoReg8 *)0x4101E04BUL)
#define REG_TAL_INTSTATUS44 (*(RoReg8 *)0x4101E04CUL)
#define REG_TAL_INTSTATUS45 (*(RoReg8 *)0x4101E04DUL)
#define REG_TAL_INTSTATUS46 (*(RoReg8 *)0x4101E04EUL)
#define REG_TAL_INTSTATUS47 (*(RoReg8 *)0x4101E04FUL)
#define REG_TAL_INTSTATUS48 (*(RoReg8 *)0x4101E050UL)
#define REG_TAL_INTSTATUS49 (*(RoReg8 *)0x4101E051UL)
#define REG_TAL_INTSTATUS50 (*(RoReg8 *)0x4101E052UL)
#define REG_TAL_INTSTATUS51 (*(RoReg8 *)0x4101E053UL)
#define REG_TAL_INTSTATUS52 (*(RoReg8 *)0x4101E054UL)
#define REG_TAL_INTSTATUS53 (*(RoReg8 *)0x4101E055UL)
#define REG_TAL_INTSTATUS54 (*(RoReg8 *)0x4101E056UL)
#define REG_TAL_INTSTATUS55 (*(RoReg8 *)0x4101E057UL)
#define REG_TAL_INTSTATUS56 (*(RoReg8 *)0x4101E058UL)
#define REG_TAL_INTSTATUS57 (*(RoReg8 *)0x4101E059UL)
#define REG_TAL_INTSTATUS58 (*(RoReg8 *)0x4101E05AUL)
#define REG_TAL_INTSTATUS59 (*(RoReg8 *)0x4101E05BUL)
#define REG_TAL_INTSTATUS60 (*(RoReg8 *)0x4101E05CUL)
#define REG_TAL_INTSTATUS61 (*(RoReg8 *)0x4101E05DUL)
#define REG_TAL_INTSTATUS62 (*(RoReg8 *)0x4101E05EUL)
#define REG_TAL_INTSTATUS63 (*(RoReg8 *)0x4101E05FUL)
#define REG_TAL_INTSTATUS64 (*(RoReg8 *)0x4101E060UL)
#define REG_TAL_INTSTATUS65 (*(RoReg8 *)0x4101E061UL)
#define REG_TAL_INTSTATUS66 (*(RoReg8 *)0x4101E062UL)
#define REG_TAL_INTSTATUS67 (*(RoReg8 *)0x4101E063UL)
#define REG_TAL_INTSTATUS68 (*(RoReg8 *)0x4101E064UL)
#define REG_TAL_INTSTATUS69 (*(RoReg8 *)0x4101E065UL)
#define REG_TAL_INTSTATUS70 (*(RoReg8 *)0x4101E066UL)
#define REG_TAL_INTSTATUS71 (*(RoReg8 *)0x4101E067UL)
#define REG_TAL_INTSTATUS72 (*(RoReg8 *)0x4101E068UL)
#define REG_TAL_INTSTATUS73 (*(RoReg8 *)0x4101E069UL)
#define REG_TAL_INTSTATUS74 (*(RoReg8 *)0x4101E06AUL)
#define REG_TAL_INTSTATUS75 (*(RoReg8 *)0x4101E06BUL)
#define REG_TAL_INTSTATUS76 (*(RoReg8 *)0x4101E06CUL)
#define REG_TAL_INTSTATUS77 (*(RoReg8 *)0x4101E06DUL)
#define REG_TAL_INTSTATUS78 (*(RoReg8 *)0x4101E06EUL)
#define REG_TAL_INTSTATUS79 (*(RoReg8 *)0x4101E06FUL)
#define REG_TAL_INTSTATUS80 (*(RoReg8 *)0x4101E070UL)
#define REG_TAL_INTSTATUS81 (*(RoReg8 *)0x4101E071UL)
#define REG_TAL_INTSTATUS82 (*(RoReg8 *)0x4101E072UL)
#define REG_TAL_INTSTATUS83 (*(RoReg8 *)0x4101E073UL)
#define REG_TAL_INTSTATUS84 (*(RoReg8 *)0x4101E074UL)
#define REG_TAL_INTSTATUS85 (*(RoReg8 *)0x4101E075UL)
#define REG_TAL_INTSTATUS86 (*(RoReg8 *)0x4101E076UL)
#define REG_TAL_INTSTATUS87 (*(RoReg8 *)0x4101E077UL)
#define REG_TAL_INTSTATUS88 (*(RoReg8 *)0x4101E078UL)
#define REG_TAL_INTSTATUS89 (*(RoReg8 *)0x4101E079UL)
#define REG_TAL_INTSTATUS90 (*(RoReg8 *)0x4101E07AUL)
#define REG_TAL_INTSTATUS91 (*(RoReg8 *)0x4101E07BUL)
#define REG_TAL_INTSTATUS92 (*(RoReg8 *)0x4101E07CUL)
#define REG_TAL_INTSTATUS93 (*(RoReg8 *)0x4101E07DUL)
#define REG_TAL_INTSTATUS94 (*(RoReg8 *)0x4101E07EUL)
#define REG_TAL_INTSTATUS95 (*(RoReg8 *)0x4101E07FUL)
#define REG_TAL_INTSTATUS96 (*(RoReg8 *)0x4101E080UL)
#define REG_TAL_INTSTATUS97 (*(RoReg8 *)0x4101E081UL)
#define REG_TAL_INTSTATUS98 (*(RoReg8 *)0x4101E082UL)
#define REG_TAL_INTSTATUS99 (*(RoReg8 *)0x4101E083UL)
#define REG_TAL_INTSTATUS100 (*(RoReg8 *)0x4101E084UL)
#define REG_TAL_INTSTATUS101 (*(RoReg8 *)0x4101E085UL)
#define REG_TAL_INTSTATUS102 (*(RoReg8 *)0x4101E086UL)
#define REG_TAL_INTSTATUS103 (*(RoReg8 *)0x4101E087UL)
#define REG_TAL_INTSTATUS104 (*(RoReg8 *)0x4101E088UL)
#define REG_TAL_INTSTATUS105 (*(RoReg8 *)0x4101E089UL)
#define REG_TAL_INTSTATUS106 (*(RoReg8 *)0x4101E08AUL)
#define REG_TAL_INTSTATUS107 (*(RoReg8 *)0x4101E08BUL)
#define REG_TAL_INTSTATUS108 (*(RoReg8 *)0x4101E08CUL)
#define REG_TAL_INTSTATUS109 (*(RoReg8 *)0x4101E08DUL)
#define REG_TAL_INTSTATUS110 (*(RoReg8 *)0x4101E08EUL)
#define REG_TAL_INTSTATUS111 (*(RoReg8 *)0x4101E08FUL)
#define REG_TAL_INTSTATUS112 (*(RoReg8 *)0x4101E090UL)
#define REG_TAL_INTSTATUS113 (*(RoReg8 *)0x4101E091UL)
#define REG_TAL_INTSTATUS114 (*(RoReg8 *)0x4101E092UL)
#define REG_TAL_INTSTATUS115 (*(RoReg8 *)0x4101E093UL)
#define REG_TAL_INTSTATUS116 (*(RoReg8 *)0x4101E094UL)
#define REG_TAL_INTSTATUS117 (*(RoReg8 *)0x4101E095UL)
#define REG_TAL_INTSTATUS118 (*(RoReg8 *)0x4101E096UL)
#define REG_TAL_INTSTATUS119 (*(RoReg8 *)0x4101E097UL)
#define REG_TAL_INTSTATUS120 (*(RoReg8 *)0x4101E098UL)
#define REG_TAL_INTSTATUS121 (*(RoReg8 *)0x4101E099UL)
#define REG_TAL_INTSTATUS122 (*(RoReg8 *)0x4101E09AUL)
#define REG_TAL_INTSTATUS123 (*(RoReg8 *)0x4101E09BUL)
#define REG_TAL_INTSTATUS124 (*(RoReg8 *)0x4101E09CUL)
#define REG_TAL_INTSTATUS125 (*(RoReg8 *)0x4101E09DUL)
#define REG_TAL_INTSTATUS126 (*(RoReg8 *)0x4101E09EUL)
#define REG_TAL_INTSTATUS127 (*(RoReg8 *)0x4101E09FUL)
#define REG_TAL_INTSTATUS128 (*(RoReg8 *)0x4101E0A0UL)
#define REG_TAL_INTSTATUS129 (*(RoReg8 *)0x4101E0A1UL)
#define REG_TAL_INTSTATUS130 (*(RoReg8 *)0x4101E0A2UL)
#define REG_TAL_INTSTATUS131 (*(RoReg8 *)0x4101E0A3UL)
#define REG_TAL_INTSTATUS132 (*(RoReg8 *)0x4101E0A4UL)
#define REG_TAL_INTSTATUS133 (*(RoReg8 *)0x4101E0A5UL)
#define REG_TAL_INTSTATUS134 (*(RoReg8 *)0x4101E0A6UL)
#define REG_TAL_INTSTATUS135 (*(RoReg8 *)0x4101E0A7UL)
#define REG_TAL_INTSTATUS136 (*(RoReg8 *)0x4101E0A8UL)
#define REG_TAL_DMACPUSEL0 (*(RwReg *)0x4101E110UL)
#define REG_TAL_DMACPUSEL1 (*(RwReg *)0x4101E114UL)
#define REG_TAL_EVCPUSEL0 (*(RwReg *)0x4101E118UL)
#define REG_TAL_EICCPUSEL0 (*(RwReg *)0x4101E120UL)
#define REG_TAL_INTCPUSEL0 (*(RwReg *)0x4101E128UL)
#define REG_TAL_INTCPUSEL1 (*(RwReg *)0x4101E12CUL)
#define REG_TAL_INTCPUSEL2 (*(RwReg *)0x4101E130UL)
#define REG_TAL_INTCPUSEL3 (*(RwReg *)0x4101E134UL)
#define REG_TAL_INTCPUSEL4 (*(RwReg *)0x4101E138UL)
#define REG_TAL_INTCPUSEL5 (*(RwReg *)0x4101E13CUL)
#define REG_TAL_INTCPUSEL6 (*(RwReg *)0x4101E140UL)
#define REG_TAL_INTCPUSEL7 (*(RwReg *)0x4101E144UL)
#define REG_TAL_INTCPUSEL8 (*(RwReg *)0x4101E148UL)
#define REG_TAL_IRQTRIG (*(RwReg *)0x4101E164UL)
#define REG_TAL_IRQMON0 (*(RwReg16*)0x4101E168UL)
#define REG_TAL_CPUIRQS0 (*(RoReg *)0x4101E180UL)
#define REG_TAL_CPUIRQS1 (*(RoReg *)0x4101E1A0UL)
#define REG_TAL_SMASK0 (*(RwReg *)0x4101E200UL)
#define REG_TAL_SMASK1 (*(RwReg *)0x4101E208UL)
#define REG_TAL_SFLAGCLR0 (*(WoReg *)0x4101E220UL)
#define REG_TAL_SFLAGCLR1 (*(WoReg *)0x4101E224UL)
#define REG_TAL_SFLAGSET0 (*(WoReg *)0x4101E228UL)
#define REG_TAL_SFLAGSET1 (*(WoReg *)0x4101E22CUL)
#define REG_TAL_SFLAG0 (*(RoReg *)0x4101E230UL)
#define REG_TAL_SFLAG1 (*(RoReg *)0x4101E234UL)
#define REG_TAL_SFLAGCLRR0 (*(RwReg8 *)0x4101E300UL)
#define REG_TAL_SFLAGCLRR1 (*(RwReg8 *)0x4101E301UL)
#define REG_TAL_SFLAGCLRR2 (*(RwReg8 *)0x4101E302UL)
#define REG_TAL_SFLAGCLRR3 (*(RwReg8 *)0x4101E303UL)
#define REG_TAL_SFLAGCLRR4 (*(RwReg8 *)0x4101E304UL)
#define REG_TAL_SFLAGCLRR5 (*(RwReg8 *)0x4101E305UL)
#define REG_TAL_SFLAGCLRR6 (*(RwReg8 *)0x4101E306UL)
#define REG_TAL_SFLAGCLRR7 (*(RwReg8 *)0x4101E307UL)
#define REG_TAL_SFLAGCLRR8 (*(RwReg8 *)0x4101E308UL)
#define REG_TAL_SFLAGCLRR9 (*(RwReg8 *)0x4101E309UL)
#define REG_TAL_SFLAGCLRR10 (*(RwReg8 *)0x4101E30AUL)
#define REG_TAL_SFLAGCLRR11 (*(RwReg8 *)0x4101E30BUL)
#define REG_TAL_SFLAGCLRR12 (*(RwReg8 *)0x4101E30CUL)
#define REG_TAL_SFLAGCLRR13 (*(RwReg8 *)0x4101E30DUL)
#define REG_TAL_SFLAGCLRR14 (*(RwReg8 *)0x4101E30EUL)
#define REG_TAL_SFLAGCLRR15 (*(RwReg8 *)0x4101E30FUL)
#define REG_TAL_SFLAGCLRR16 (*(RwReg8 *)0x4101E310UL)
#define REG_TAL_SFLAGCLRR17 (*(RwReg8 *)0x4101E311UL)
#define REG_TAL_SFLAGCLRR18 (*(RwReg8 *)0x4101E312UL)
#define REG_TAL_SFLAGCLRR19 (*(RwReg8 *)0x4101E313UL)
#define REG_TAL_SFLAGCLRR20 (*(RwReg8 *)0x4101E314UL)
#define REG_TAL_SFLAGCLRR21 (*(RwReg8 *)0x4101E315UL)
#define REG_TAL_SFLAGCLRR22 (*(RwReg8 *)0x4101E316UL)
#define REG_TAL_SFLAGCLRR23 (*(RwReg8 *)0x4101E317UL)
#define REG_TAL_SFLAGCLRR24 (*(RwReg8 *)0x4101E318UL)
#define REG_TAL_SFLAGCLRR25 (*(RwReg8 *)0x4101E319UL)
#define REG_TAL_SFLAGCLRR26 (*(RwReg8 *)0x4101E31AUL)
#define REG_TAL_SFLAGCLRR27 (*(RwReg8 *)0x4101E31BUL)
#define REG_TAL_SFLAGCLRR28 (*(RwReg8 *)0x4101E31CUL)
#define REG_TAL_SFLAGCLRR29 (*(RwReg8 *)0x4101E31DUL)
#define REG_TAL_SFLAGCLRR30 (*(RwReg8 *)0x4101E31EUL)
#define REG_TAL_SFLAGCLRR31 (*(RwReg8 *)0x4101E31FUL)
#define REG_TAL_SFLAGCLRR32 (*(RwReg8 *)0x4101E320UL)
#define REG_TAL_SFLAGCLRR33 (*(RwReg8 *)0x4101E321UL)
#define REG_TAL_SFLAGCLRR34 (*(RwReg8 *)0x4101E322UL)
#define REG_TAL_SFLAGCLRR35 (*(RwReg8 *)0x4101E323UL)
#define REG_TAL_SFLAGCLRR36 (*(RwReg8 *)0x4101E324UL)
#define REG_TAL_SFLAGCLRR37 (*(RwReg8 *)0x4101E325UL)
#define REG_TAL_SFLAGCLRR38 (*(RwReg8 *)0x4101E326UL)
#define REG_TAL_SFLAGCLRR39 (*(RwReg8 *)0x4101E327UL)
#define REG_TAL_SFLAGCLRR40 (*(RwReg8 *)0x4101E328UL)
#define REG_TAL_SFLAGCLRR41 (*(RwReg8 *)0x4101E329UL)
#define REG_TAL_SFLAGCLRR42 (*(RwReg8 *)0x4101E32AUL)
#define REG_TAL_SFLAGCLRR43 (*(RwReg8 *)0x4101E32BUL)
#define REG_TAL_SFLAGCLRR44 (*(RwReg8 *)0x4101E32CUL)
#define REG_TAL_SFLAGCLRR45 (*(RwReg8 *)0x4101E32DUL)
#define REG_TAL_SFLAGCLRR46 (*(RwReg8 *)0x4101E32EUL)
#define REG_TAL_SFLAGCLRR47 (*(RwReg8 *)0x4101E32FUL)
#define REG_TAL_SFLAGCLRR48 (*(RwReg8 *)0x4101E330UL)
#define REG_TAL_SFLAGCLRR49 (*(RwReg8 *)0x4101E331UL)
#define REG_TAL_SFLAGCLRR50 (*(RwReg8 *)0x4101E332UL)
#define REG_TAL_SFLAGCLRR51 (*(RwReg8 *)0x4101E333UL)
#define REG_TAL_SFLAGCLRR52 (*(RwReg8 *)0x4101E334UL)
#define REG_TAL_SFLAGCLRR53 (*(RwReg8 *)0x4101E335UL)
#define REG_TAL_SFLAGCLRR54 (*(RwReg8 *)0x4101E336UL)
#define REG_TAL_SFLAGCLRR55 (*(RwReg8 *)0x4101E337UL)
#define REG_TAL_SFLAGCLRR56 (*(RwReg8 *)0x4101E338UL)
#define REG_TAL_SFLAGCLRR57 (*(RwReg8 *)0x4101E339UL)
#define REG_TAL_SFLAGCLRR58 (*(RwReg8 *)0x4101E33AUL)
#define REG_TAL_SFLAGCLRR59 (*(RwReg8 *)0x4101E33BUL)
#define REG_TAL_SFLAGCLRR60 (*(RwReg8 *)0x4101E33CUL)
#define REG_TAL_SFLAGCLRR61 (*(RwReg8 *)0x4101E33DUL)
#define REG_TAL_SFLAGCLRR62 (*(RwReg8 *)0x4101E33EUL)
#define REG_TAL_SFLAGCLRR63 (*(RwReg8 *)0x4101E33FUL)



#define TAL_CPU_NUM 2
#define TAL_CTI_NUM 4
#define TAL_DMA_CH_NUM 32
#define TAL_EV_CH_NUM 12
#define TAL_EXTINT_NUM 16
#define TAL_ID_IN_INTCPUSEL 1
#define TAL_ID_NUM 130
#define TAL_INT_GRP_NUM 5
#define TAL_INT_NUM 137
#define TAL_INT_NUM_BITS 8
#define TAL_IPS_GRP_NUM 2
#define TAL_IPS_NUM 64
#define TAL_IRQMON_NUM 1
# 667 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/tc0.h" 1
# 31 "asf4/samd51/include/instance/tc0.h"
#define _SAMD51_TC0_INSTANCE_ 
# 65 "asf4/samd51/include/instance/tc0.h"
#define REG_TC0_CTRLA (*(RwReg *)0x40003800UL)
#define REG_TC0_CTRLBCLR (*(RwReg8 *)0x40003804UL)
#define REG_TC0_CTRLBSET (*(RwReg8 *)0x40003805UL)
#define REG_TC0_EVCTRL (*(RwReg16*)0x40003806UL)
#define REG_TC0_INTENCLR (*(RwReg8 *)0x40003808UL)
#define REG_TC0_INTENSET (*(RwReg8 *)0x40003809UL)
#define REG_TC0_INTFLAG (*(RwReg8 *)0x4000380AUL)
#define REG_TC0_STATUS (*(RwReg8 *)0x4000380BUL)
#define REG_TC0_WAVE (*(RwReg8 *)0x4000380CUL)
#define REG_TC0_DRVCTRL (*(RwReg8 *)0x4000380DUL)
#define REG_TC0_DBGCTRL (*(RwReg8 *)0x4000380FUL)
#define REG_TC0_SYNCBUSY (*(RoReg *)0x40003810UL)
#define REG_TC0_COUNT16_COUNT (*(RwReg16*)0x40003814UL)
#define REG_TC0_COUNT16_CC0 (*(RwReg16*)0x4000381CUL)
#define REG_TC0_COUNT16_CC1 (*(RwReg16*)0x4000381EUL)
#define REG_TC0_COUNT16_CCBUF0 (*(RwReg16*)0x40003830UL)
#define REG_TC0_COUNT16_CCBUF1 (*(RwReg16*)0x40003832UL)
#define REG_TC0_COUNT32_COUNT (*(RwReg *)0x40003814UL)
#define REG_TC0_COUNT32_CC0 (*(RwReg *)0x4000381CUL)
#define REG_TC0_COUNT32_CC1 (*(RwReg *)0x40003820UL)
#define REG_TC0_COUNT32_CCBUF0 (*(RwReg *)0x40003830UL)
#define REG_TC0_COUNT32_CCBUF1 (*(RwReg *)0x40003834UL)
#define REG_TC0_COUNT8_COUNT (*(RwReg8 *)0x40003814UL)
#define REG_TC0_COUNT8_PER (*(RwReg8 *)0x4000381BUL)
#define REG_TC0_COUNT8_CC0 (*(RwReg8 *)0x4000381CUL)
#define REG_TC0_COUNT8_CC1 (*(RwReg8 *)0x4000381DUL)
#define REG_TC0_COUNT8_PERBUF (*(RwReg8 *)0x4000382FUL)
#define REG_TC0_COUNT8_CCBUF0 (*(RwReg8 *)0x40003830UL)
#define REG_TC0_COUNT8_CCBUF1 (*(RwReg8 *)0x40003831UL)



#define TC0_CC_NUM 2
#define TC0_DMAC_ID_MC_0 45
#define TC0_DMAC_ID_MC_1 46
#define TC0_DMAC_ID_MC_LSB 45
#define TC0_DMAC_ID_MC_MSB 46
#define TC0_DMAC_ID_MC_SIZE 2
#define TC0_DMAC_ID_OVF 44
#define TC0_EXT 0
#define TC0_GCLK_ID 9
#define TC0_MASTER_SLAVE_MODE 1
#define TC0_OW_NUM 2
# 668 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/tc1.h" 1
# 31 "asf4/samd51/include/instance/tc1.h"
#define _SAMD51_TC1_INSTANCE_ 
# 65 "asf4/samd51/include/instance/tc1.h"
#define REG_TC1_CTRLA (*(RwReg *)0x40003C00UL)
#define REG_TC1_CTRLBCLR (*(RwReg8 *)0x40003C04UL)
#define REG_TC1_CTRLBSET (*(RwReg8 *)0x40003C05UL)
#define REG_TC1_EVCTRL (*(RwReg16*)0x40003C06UL)
#define REG_TC1_INTENCLR (*(RwReg8 *)0x40003C08UL)
#define REG_TC1_INTENSET (*(RwReg8 *)0x40003C09UL)
#define REG_TC1_INTFLAG (*(RwReg8 *)0x40003C0AUL)
#define REG_TC1_STATUS (*(RwReg8 *)0x40003C0BUL)
#define REG_TC1_WAVE (*(RwReg8 *)0x40003C0CUL)
#define REG_TC1_DRVCTRL (*(RwReg8 *)0x40003C0DUL)
#define REG_TC1_DBGCTRL (*(RwReg8 *)0x40003C0FUL)
#define REG_TC1_SYNCBUSY (*(RoReg *)0x40003C10UL)
#define REG_TC1_COUNT16_COUNT (*(RwReg16*)0x40003C14UL)
#define REG_TC1_COUNT16_CC0 (*(RwReg16*)0x40003C1CUL)
#define REG_TC1_COUNT16_CC1 (*(RwReg16*)0x40003C1EUL)
#define REG_TC1_COUNT16_CCBUF0 (*(RwReg16*)0x40003C30UL)
#define REG_TC1_COUNT16_CCBUF1 (*(RwReg16*)0x40003C32UL)
#define REG_TC1_COUNT32_COUNT (*(RwReg *)0x40003C14UL)
#define REG_TC1_COUNT32_CC0 (*(RwReg *)0x40003C1CUL)
#define REG_TC1_COUNT32_CC1 (*(RwReg *)0x40003C20UL)
#define REG_TC1_COUNT32_CCBUF0 (*(RwReg *)0x40003C30UL)
#define REG_TC1_COUNT32_CCBUF1 (*(RwReg *)0x40003C34UL)
#define REG_TC1_COUNT8_COUNT (*(RwReg8 *)0x40003C14UL)
#define REG_TC1_COUNT8_PER (*(RwReg8 *)0x40003C1BUL)
#define REG_TC1_COUNT8_CC0 (*(RwReg8 *)0x40003C1CUL)
#define REG_TC1_COUNT8_CC1 (*(RwReg8 *)0x40003C1DUL)
#define REG_TC1_COUNT8_PERBUF (*(RwReg8 *)0x40003C2FUL)
#define REG_TC1_COUNT8_CCBUF0 (*(RwReg8 *)0x40003C30UL)
#define REG_TC1_COUNT8_CCBUF1 (*(RwReg8 *)0x40003C31UL)



#define TC1_CC_NUM 2
#define TC1_DMAC_ID_MC_0 48
#define TC1_DMAC_ID_MC_1 49
#define TC1_DMAC_ID_MC_LSB 48
#define TC1_DMAC_ID_MC_MSB 49
#define TC1_DMAC_ID_MC_SIZE 2
#define TC1_DMAC_ID_OVF 47
#define TC1_EXT 0
#define TC1_GCLK_ID 9
#define TC1_MASTER_SLAVE_MODE 2
#define TC1_OW_NUM 2
# 669 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/tc2.h" 1
# 31 "asf4/samd51/include/instance/tc2.h"
#define _SAMD51_TC2_INSTANCE_ 
# 65 "asf4/samd51/include/instance/tc2.h"
#define REG_TC2_CTRLA (*(RwReg *)0x4101A000UL)
#define REG_TC2_CTRLBCLR (*(RwReg8 *)0x4101A004UL)
#define REG_TC2_CTRLBSET (*(RwReg8 *)0x4101A005UL)
#define REG_TC2_EVCTRL (*(RwReg16*)0x4101A006UL)
#define REG_TC2_INTENCLR (*(RwReg8 *)0x4101A008UL)
#define REG_TC2_INTENSET (*(RwReg8 *)0x4101A009UL)
#define REG_TC2_INTFLAG (*(RwReg8 *)0x4101A00AUL)
#define REG_TC2_STATUS (*(RwReg8 *)0x4101A00BUL)
#define REG_TC2_WAVE (*(RwReg8 *)0x4101A00CUL)
#define REG_TC2_DRVCTRL (*(RwReg8 *)0x4101A00DUL)
#define REG_TC2_DBGCTRL (*(RwReg8 *)0x4101A00FUL)
#define REG_TC2_SYNCBUSY (*(RoReg *)0x4101A010UL)
#define REG_TC2_COUNT16_COUNT (*(RwReg16*)0x4101A014UL)
#define REG_TC2_COUNT16_CC0 (*(RwReg16*)0x4101A01CUL)
#define REG_TC2_COUNT16_CC1 (*(RwReg16*)0x4101A01EUL)
#define REG_TC2_COUNT16_CCBUF0 (*(RwReg16*)0x4101A030UL)
#define REG_TC2_COUNT16_CCBUF1 (*(RwReg16*)0x4101A032UL)
#define REG_TC2_COUNT32_COUNT (*(RwReg *)0x4101A014UL)
#define REG_TC2_COUNT32_CC0 (*(RwReg *)0x4101A01CUL)
#define REG_TC2_COUNT32_CC1 (*(RwReg *)0x4101A020UL)
#define REG_TC2_COUNT32_CCBUF0 (*(RwReg *)0x4101A030UL)
#define REG_TC2_COUNT32_CCBUF1 (*(RwReg *)0x4101A034UL)
#define REG_TC2_COUNT8_COUNT (*(RwReg8 *)0x4101A014UL)
#define REG_TC2_COUNT8_PER (*(RwReg8 *)0x4101A01BUL)
#define REG_TC2_COUNT8_CC0 (*(RwReg8 *)0x4101A01CUL)
#define REG_TC2_COUNT8_CC1 (*(RwReg8 *)0x4101A01DUL)
#define REG_TC2_COUNT8_PERBUF (*(RwReg8 *)0x4101A02FUL)
#define REG_TC2_COUNT8_CCBUF0 (*(RwReg8 *)0x4101A030UL)
#define REG_TC2_COUNT8_CCBUF1 (*(RwReg8 *)0x4101A031UL)



#define TC2_CC_NUM 2
#define TC2_DMAC_ID_MC_0 51
#define TC2_DMAC_ID_MC_1 52
#define TC2_DMAC_ID_MC_LSB 51
#define TC2_DMAC_ID_MC_MSB 52
#define TC2_DMAC_ID_MC_SIZE 2
#define TC2_DMAC_ID_OVF 50
#define TC2_EXT 0
#define TC2_GCLK_ID 26
#define TC2_MASTER_SLAVE_MODE 1
#define TC2_OW_NUM 2
# 670 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/tc3.h" 1
# 31 "asf4/samd51/include/instance/tc3.h"
#define _SAMD51_TC3_INSTANCE_ 
# 65 "asf4/samd51/include/instance/tc3.h"
#define REG_TC3_CTRLA (*(RwReg *)0x4101C000UL)
#define REG_TC3_CTRLBCLR (*(RwReg8 *)0x4101C004UL)
#define REG_TC3_CTRLBSET (*(RwReg8 *)0x4101C005UL)
#define REG_TC3_EVCTRL (*(RwReg16*)0x4101C006UL)
#define REG_TC3_INTENCLR (*(RwReg8 *)0x4101C008UL)
#define REG_TC3_INTENSET (*(RwReg8 *)0x4101C009UL)
#define REG_TC3_INTFLAG (*(RwReg8 *)0x4101C00AUL)
#define REG_TC3_STATUS (*(RwReg8 *)0x4101C00BUL)
#define REG_TC3_WAVE (*(RwReg8 *)0x4101C00CUL)
#define REG_TC3_DRVCTRL (*(RwReg8 *)0x4101C00DUL)
#define REG_TC3_DBGCTRL (*(RwReg8 *)0x4101C00FUL)
#define REG_TC3_SYNCBUSY (*(RoReg *)0x4101C010UL)
#define REG_TC3_COUNT16_COUNT (*(RwReg16*)0x4101C014UL)
#define REG_TC3_COUNT16_CC0 (*(RwReg16*)0x4101C01CUL)
#define REG_TC3_COUNT16_CC1 (*(RwReg16*)0x4101C01EUL)
#define REG_TC3_COUNT16_CCBUF0 (*(RwReg16*)0x4101C030UL)
#define REG_TC3_COUNT16_CCBUF1 (*(RwReg16*)0x4101C032UL)
#define REG_TC3_COUNT32_COUNT (*(RwReg *)0x4101C014UL)
#define REG_TC3_COUNT32_CC0 (*(RwReg *)0x4101C01CUL)
#define REG_TC3_COUNT32_CC1 (*(RwReg *)0x4101C020UL)
#define REG_TC3_COUNT32_CCBUF0 (*(RwReg *)0x4101C030UL)
#define REG_TC3_COUNT32_CCBUF1 (*(RwReg *)0x4101C034UL)
#define REG_TC3_COUNT8_COUNT (*(RwReg8 *)0x4101C014UL)
#define REG_TC3_COUNT8_PER (*(RwReg8 *)0x4101C01BUL)
#define REG_TC3_COUNT8_CC0 (*(RwReg8 *)0x4101C01CUL)
#define REG_TC3_COUNT8_CC1 (*(RwReg8 *)0x4101C01DUL)
#define REG_TC3_COUNT8_PERBUF (*(RwReg8 *)0x4101C02FUL)
#define REG_TC3_COUNT8_CCBUF0 (*(RwReg8 *)0x4101C030UL)
#define REG_TC3_COUNT8_CCBUF1 (*(RwReg8 *)0x4101C031UL)



#define TC3_CC_NUM 2
#define TC3_DMAC_ID_MC_0 54
#define TC3_DMAC_ID_MC_1 55
#define TC3_DMAC_ID_MC_LSB 54
#define TC3_DMAC_ID_MC_MSB 55
#define TC3_DMAC_ID_MC_SIZE 2
#define TC3_DMAC_ID_OVF 53
#define TC3_EXT 0
#define TC3_GCLK_ID 26
#define TC3_MASTER_SLAVE_MODE 2
#define TC3_OW_NUM 2
# 671 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/tc4.h" 1
# 31 "asf4/samd51/include/instance/tc4.h"
#define _SAMD51_TC4_INSTANCE_ 
# 65 "asf4/samd51/include/instance/tc4.h"
#define REG_TC4_CTRLA (*(RwReg *)0x42001400UL)
#define REG_TC4_CTRLBCLR (*(RwReg8 *)0x42001404UL)
#define REG_TC4_CTRLBSET (*(RwReg8 *)0x42001405UL)
#define REG_TC4_EVCTRL (*(RwReg16*)0x42001406UL)
#define REG_TC4_INTENCLR (*(RwReg8 *)0x42001408UL)
#define REG_TC4_INTENSET (*(RwReg8 *)0x42001409UL)
#define REG_TC4_INTFLAG (*(RwReg8 *)0x4200140AUL)
#define REG_TC4_STATUS (*(RwReg8 *)0x4200140BUL)
#define REG_TC4_WAVE (*(RwReg8 *)0x4200140CUL)
#define REG_TC4_DRVCTRL (*(RwReg8 *)0x4200140DUL)
#define REG_TC4_DBGCTRL (*(RwReg8 *)0x4200140FUL)
#define REG_TC4_SYNCBUSY (*(RoReg *)0x42001410UL)
#define REG_TC4_COUNT16_COUNT (*(RwReg16*)0x42001414UL)
#define REG_TC4_COUNT16_CC0 (*(RwReg16*)0x4200141CUL)
#define REG_TC4_COUNT16_CC1 (*(RwReg16*)0x4200141EUL)
#define REG_TC4_COUNT16_CCBUF0 (*(RwReg16*)0x42001430UL)
#define REG_TC4_COUNT16_CCBUF1 (*(RwReg16*)0x42001432UL)
#define REG_TC4_COUNT32_COUNT (*(RwReg *)0x42001414UL)
#define REG_TC4_COUNT32_CC0 (*(RwReg *)0x4200141CUL)
#define REG_TC4_COUNT32_CC1 (*(RwReg *)0x42001420UL)
#define REG_TC4_COUNT32_CCBUF0 (*(RwReg *)0x42001430UL)
#define REG_TC4_COUNT32_CCBUF1 (*(RwReg *)0x42001434UL)
#define REG_TC4_COUNT8_COUNT (*(RwReg8 *)0x42001414UL)
#define REG_TC4_COUNT8_PER (*(RwReg8 *)0x4200141BUL)
#define REG_TC4_COUNT8_CC0 (*(RwReg8 *)0x4200141CUL)
#define REG_TC4_COUNT8_CC1 (*(RwReg8 *)0x4200141DUL)
#define REG_TC4_COUNT8_PERBUF (*(RwReg8 *)0x4200142FUL)
#define REG_TC4_COUNT8_CCBUF0 (*(RwReg8 *)0x42001430UL)
#define REG_TC4_COUNT8_CCBUF1 (*(RwReg8 *)0x42001431UL)



#define TC4_CC_NUM 2
#define TC4_DMAC_ID_MC_0 57
#define TC4_DMAC_ID_MC_1 58
#define TC4_DMAC_ID_MC_LSB 57
#define TC4_DMAC_ID_MC_MSB 58
#define TC4_DMAC_ID_MC_SIZE 2
#define TC4_DMAC_ID_OVF 56
#define TC4_EXT 0
#define TC4_GCLK_ID 30
#define TC4_MASTER_SLAVE_MODE 1
#define TC4_OW_NUM 2
# 672 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/tc5.h" 1
# 31 "asf4/samd51/include/instance/tc5.h"
#define _SAMD51_TC5_INSTANCE_ 
# 65 "asf4/samd51/include/instance/tc5.h"
#define REG_TC5_CTRLA (*(RwReg *)0x42001800UL)
#define REG_TC5_CTRLBCLR (*(RwReg8 *)0x42001804UL)
#define REG_TC5_CTRLBSET (*(RwReg8 *)0x42001805UL)
#define REG_TC5_EVCTRL (*(RwReg16*)0x42001806UL)
#define REG_TC5_INTENCLR (*(RwReg8 *)0x42001808UL)
#define REG_TC5_INTENSET (*(RwReg8 *)0x42001809UL)
#define REG_TC5_INTFLAG (*(RwReg8 *)0x4200180AUL)
#define REG_TC5_STATUS (*(RwReg8 *)0x4200180BUL)
#define REG_TC5_WAVE (*(RwReg8 *)0x4200180CUL)
#define REG_TC5_DRVCTRL (*(RwReg8 *)0x4200180DUL)
#define REG_TC5_DBGCTRL (*(RwReg8 *)0x4200180FUL)
#define REG_TC5_SYNCBUSY (*(RoReg *)0x42001810UL)
#define REG_TC5_COUNT16_COUNT (*(RwReg16*)0x42001814UL)
#define REG_TC5_COUNT16_CC0 (*(RwReg16*)0x4200181CUL)
#define REG_TC5_COUNT16_CC1 (*(RwReg16*)0x4200181EUL)
#define REG_TC5_COUNT16_CCBUF0 (*(RwReg16*)0x42001830UL)
#define REG_TC5_COUNT16_CCBUF1 (*(RwReg16*)0x42001832UL)
#define REG_TC5_COUNT32_COUNT (*(RwReg *)0x42001814UL)
#define REG_TC5_COUNT32_CC0 (*(RwReg *)0x4200181CUL)
#define REG_TC5_COUNT32_CC1 (*(RwReg *)0x42001820UL)
#define REG_TC5_COUNT32_CCBUF0 (*(RwReg *)0x42001830UL)
#define REG_TC5_COUNT32_CCBUF1 (*(RwReg *)0x42001834UL)
#define REG_TC5_COUNT8_COUNT (*(RwReg8 *)0x42001814UL)
#define REG_TC5_COUNT8_PER (*(RwReg8 *)0x4200181BUL)
#define REG_TC5_COUNT8_CC0 (*(RwReg8 *)0x4200181CUL)
#define REG_TC5_COUNT8_CC1 (*(RwReg8 *)0x4200181DUL)
#define REG_TC5_COUNT8_PERBUF (*(RwReg8 *)0x4200182FUL)
#define REG_TC5_COUNT8_CCBUF0 (*(RwReg8 *)0x42001830UL)
#define REG_TC5_COUNT8_CCBUF1 (*(RwReg8 *)0x42001831UL)



#define TC5_CC_NUM 2
#define TC5_DMAC_ID_MC_0 60
#define TC5_DMAC_ID_MC_1 61
#define TC5_DMAC_ID_MC_LSB 60
#define TC5_DMAC_ID_MC_MSB 61
#define TC5_DMAC_ID_MC_SIZE 2
#define TC5_DMAC_ID_OVF 59
#define TC5_EXT 0
#define TC5_GCLK_ID 30
#define TC5_MASTER_SLAVE_MODE 2
#define TC5_OW_NUM 2
# 673 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/tc6.h" 1
# 31 "asf4/samd51/include/instance/tc6.h"
#define _SAMD51_TC6_INSTANCE_ 
# 65 "asf4/samd51/include/instance/tc6.h"
#define REG_TC6_CTRLA (*(RwReg *)0x43001400UL)
#define REG_TC6_CTRLBCLR (*(RwReg8 *)0x43001404UL)
#define REG_TC6_CTRLBSET (*(RwReg8 *)0x43001405UL)
#define REG_TC6_EVCTRL (*(RwReg16*)0x43001406UL)
#define REG_TC6_INTENCLR (*(RwReg8 *)0x43001408UL)
#define REG_TC6_INTENSET (*(RwReg8 *)0x43001409UL)
#define REG_TC6_INTFLAG (*(RwReg8 *)0x4300140AUL)
#define REG_TC6_STATUS (*(RwReg8 *)0x4300140BUL)
#define REG_TC6_WAVE (*(RwReg8 *)0x4300140CUL)
#define REG_TC6_DRVCTRL (*(RwReg8 *)0x4300140DUL)
#define REG_TC6_DBGCTRL (*(RwReg8 *)0x4300140FUL)
#define REG_TC6_SYNCBUSY (*(RoReg *)0x43001410UL)
#define REG_TC6_COUNT16_COUNT (*(RwReg16*)0x43001414UL)
#define REG_TC6_COUNT16_CC0 (*(RwReg16*)0x4300141CUL)
#define REG_TC6_COUNT16_CC1 (*(RwReg16*)0x4300141EUL)
#define REG_TC6_COUNT16_CCBUF0 (*(RwReg16*)0x43001430UL)
#define REG_TC6_COUNT16_CCBUF1 (*(RwReg16*)0x43001432UL)
#define REG_TC6_COUNT32_COUNT (*(RwReg *)0x43001414UL)
#define REG_TC6_COUNT32_CC0 (*(RwReg *)0x4300141CUL)
#define REG_TC6_COUNT32_CC1 (*(RwReg *)0x43001420UL)
#define REG_TC6_COUNT32_CCBUF0 (*(RwReg *)0x43001430UL)
#define REG_TC6_COUNT32_CCBUF1 (*(RwReg *)0x43001434UL)
#define REG_TC6_COUNT8_COUNT (*(RwReg8 *)0x43001414UL)
#define REG_TC6_COUNT8_PER (*(RwReg8 *)0x4300141BUL)
#define REG_TC6_COUNT8_CC0 (*(RwReg8 *)0x4300141CUL)
#define REG_TC6_COUNT8_CC1 (*(RwReg8 *)0x4300141DUL)
#define REG_TC6_COUNT8_PERBUF (*(RwReg8 *)0x4300142FUL)
#define REG_TC6_COUNT8_CCBUF0 (*(RwReg8 *)0x43001430UL)
#define REG_TC6_COUNT8_CCBUF1 (*(RwReg8 *)0x43001431UL)



#define TC6_CC_NUM 2
#define TC6_DMAC_ID_MC_0 63
#define TC6_DMAC_ID_MC_1 64
#define TC6_DMAC_ID_MC_LSB 63
#define TC6_DMAC_ID_MC_MSB 64
#define TC6_DMAC_ID_MC_SIZE 2
#define TC6_DMAC_ID_OVF 62
#define TC6_EXT 0
#define TC6_GCLK_ID 39
#define TC6_MASTER_SLAVE_MODE 1
#define TC6_OW_NUM 2
# 674 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/tc7.h" 1
# 31 "asf4/samd51/include/instance/tc7.h"
#define _SAMD51_TC7_INSTANCE_ 
# 65 "asf4/samd51/include/instance/tc7.h"
#define REG_TC7_CTRLA (*(RwReg *)0x43001800UL)
#define REG_TC7_CTRLBCLR (*(RwReg8 *)0x43001804UL)
#define REG_TC7_CTRLBSET (*(RwReg8 *)0x43001805UL)
#define REG_TC7_EVCTRL (*(RwReg16*)0x43001806UL)
#define REG_TC7_INTENCLR (*(RwReg8 *)0x43001808UL)
#define REG_TC7_INTENSET (*(RwReg8 *)0x43001809UL)
#define REG_TC7_INTFLAG (*(RwReg8 *)0x4300180AUL)
#define REG_TC7_STATUS (*(RwReg8 *)0x4300180BUL)
#define REG_TC7_WAVE (*(RwReg8 *)0x4300180CUL)
#define REG_TC7_DRVCTRL (*(RwReg8 *)0x4300180DUL)
#define REG_TC7_DBGCTRL (*(RwReg8 *)0x4300180FUL)
#define REG_TC7_SYNCBUSY (*(RoReg *)0x43001810UL)
#define REG_TC7_COUNT16_COUNT (*(RwReg16*)0x43001814UL)
#define REG_TC7_COUNT16_CC0 (*(RwReg16*)0x4300181CUL)
#define REG_TC7_COUNT16_CC1 (*(RwReg16*)0x4300181EUL)
#define REG_TC7_COUNT16_CCBUF0 (*(RwReg16*)0x43001830UL)
#define REG_TC7_COUNT16_CCBUF1 (*(RwReg16*)0x43001832UL)
#define REG_TC7_COUNT32_COUNT (*(RwReg *)0x43001814UL)
#define REG_TC7_COUNT32_CC0 (*(RwReg *)0x4300181CUL)
#define REG_TC7_COUNT32_CC1 (*(RwReg *)0x43001820UL)
#define REG_TC7_COUNT32_CCBUF0 (*(RwReg *)0x43001830UL)
#define REG_TC7_COUNT32_CCBUF1 (*(RwReg *)0x43001834UL)
#define REG_TC7_COUNT8_COUNT (*(RwReg8 *)0x43001814UL)
#define REG_TC7_COUNT8_PER (*(RwReg8 *)0x4300181BUL)
#define REG_TC7_COUNT8_CC0 (*(RwReg8 *)0x4300181CUL)
#define REG_TC7_COUNT8_CC1 (*(RwReg8 *)0x4300181DUL)
#define REG_TC7_COUNT8_PERBUF (*(RwReg8 *)0x4300182FUL)
#define REG_TC7_COUNT8_CCBUF0 (*(RwReg8 *)0x43001830UL)
#define REG_TC7_COUNT8_CCBUF1 (*(RwReg8 *)0x43001831UL)



#define TC7_CC_NUM 2
#define TC7_DMAC_ID_MC_0 66
#define TC7_DMAC_ID_MC_1 67
#define TC7_DMAC_ID_MC_LSB 66
#define TC7_DMAC_ID_MC_MSB 67
#define TC7_DMAC_ID_MC_SIZE 2
#define TC7_DMAC_ID_OVF 65
#define TC7_EXT 0
#define TC7_GCLK_ID 39
#define TC7_MASTER_SLAVE_MODE 2
#define TC7_OW_NUM 2
# 675 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/tcc0.h" 1
# 31 "asf4/samd51/include/instance/tcc0.h"
#define _SAMD51_TCC0_INSTANCE_ 
# 68 "asf4/samd51/include/instance/tcc0.h"
#define REG_TCC0_CTRLA (*(RwReg *)0x41016000UL)
#define REG_TCC0_CTRLBCLR (*(RwReg8 *)0x41016004UL)
#define REG_TCC0_CTRLBSET (*(RwReg8 *)0x41016005UL)
#define REG_TCC0_SYNCBUSY (*(RoReg *)0x41016008UL)
#define REG_TCC0_FCTRLA (*(RwReg *)0x4101600CUL)
#define REG_TCC0_FCTRLB (*(RwReg *)0x41016010UL)
#define REG_TCC0_WEXCTRL (*(RwReg *)0x41016014UL)
#define REG_TCC0_DRVCTRL (*(RwReg *)0x41016018UL)
#define REG_TCC0_DBGCTRL (*(RwReg8 *)0x4101601EUL)
#define REG_TCC0_EVCTRL (*(RwReg *)0x41016020UL)
#define REG_TCC0_INTENCLR (*(RwReg *)0x41016024UL)
#define REG_TCC0_INTENSET (*(RwReg *)0x41016028UL)
#define REG_TCC0_INTFLAG (*(RwReg *)0x4101602CUL)
#define REG_TCC0_STATUS (*(RwReg *)0x41016030UL)
#define REG_TCC0_COUNT (*(RwReg *)0x41016034UL)
#define REG_TCC0_PATT (*(RwReg16*)0x41016038UL)
#define REG_TCC0_WAVE (*(RwReg *)0x4101603CUL)
#define REG_TCC0_PER (*(RwReg *)0x41016040UL)
#define REG_TCC0_CC0 (*(RwReg *)0x41016044UL)
#define REG_TCC0_CC1 (*(RwReg *)0x41016048UL)
#define REG_TCC0_CC2 (*(RwReg *)0x4101604CUL)
#define REG_TCC0_CC3 (*(RwReg *)0x41016050UL)
#define REG_TCC0_CC4 (*(RwReg *)0x41016054UL)
#define REG_TCC0_CC5 (*(RwReg *)0x41016058UL)
#define REG_TCC0_PATTBUF (*(RwReg16*)0x41016064UL)
#define REG_TCC0_PERBUF (*(RwReg *)0x4101606CUL)
#define REG_TCC0_CCBUF0 (*(RwReg *)0x41016070UL)
#define REG_TCC0_CCBUF1 (*(RwReg *)0x41016074UL)
#define REG_TCC0_CCBUF2 (*(RwReg *)0x41016078UL)
#define REG_TCC0_CCBUF3 (*(RwReg *)0x4101607CUL)
#define REG_TCC0_CCBUF4 (*(RwReg *)0x41016080UL)
#define REG_TCC0_CCBUF5 (*(RwReg *)0x41016084UL)



#define TCC0_CC_NUM 6
#define TCC0_DITHERING 1
#define TCC0_DMAC_ID_MC_0 23
#define TCC0_DMAC_ID_MC_1 24
#define TCC0_DMAC_ID_MC_2 25
#define TCC0_DMAC_ID_MC_3 26
#define TCC0_DMAC_ID_MC_4 27
#define TCC0_DMAC_ID_MC_5 28
#define TCC0_DMAC_ID_MC_LSB 23
#define TCC0_DMAC_ID_MC_MSB 28
#define TCC0_DMAC_ID_MC_SIZE 6
#define TCC0_DMAC_ID_OVF 22
#define TCC0_DTI 1
#define TCC0_EXT 31
#define TCC0_GCLK_ID 25
#define TCC0_MASTER_SLAVE_MODE 1
#define TCC0_OTMX 1
#define TCC0_OW_NUM 8
#define TCC0_PG 1
#define TCC0_SIZE 24
#define TCC0_SWAP 1
# 676 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/tcc1.h" 1
# 31 "asf4/samd51/include/instance/tcc1.h"
#define _SAMD51_TCC1_INSTANCE_ 
# 64 "asf4/samd51/include/instance/tcc1.h"
#define REG_TCC1_CTRLA (*(RwReg *)0x41018000UL)
#define REG_TCC1_CTRLBCLR (*(RwReg8 *)0x41018004UL)
#define REG_TCC1_CTRLBSET (*(RwReg8 *)0x41018005UL)
#define REG_TCC1_SYNCBUSY (*(RoReg *)0x41018008UL)
#define REG_TCC1_FCTRLA (*(RwReg *)0x4101800CUL)
#define REG_TCC1_FCTRLB (*(RwReg *)0x41018010UL)
#define REG_TCC1_WEXCTRL (*(RwReg *)0x41018014UL)
#define REG_TCC1_DRVCTRL (*(RwReg *)0x41018018UL)
#define REG_TCC1_DBGCTRL (*(RwReg8 *)0x4101801EUL)
#define REG_TCC1_EVCTRL (*(RwReg *)0x41018020UL)
#define REG_TCC1_INTENCLR (*(RwReg *)0x41018024UL)
#define REG_TCC1_INTENSET (*(RwReg *)0x41018028UL)
#define REG_TCC1_INTFLAG (*(RwReg *)0x4101802CUL)
#define REG_TCC1_STATUS (*(RwReg *)0x41018030UL)
#define REG_TCC1_COUNT (*(RwReg *)0x41018034UL)
#define REG_TCC1_PATT (*(RwReg16*)0x41018038UL)
#define REG_TCC1_WAVE (*(RwReg *)0x4101803CUL)
#define REG_TCC1_PER (*(RwReg *)0x41018040UL)
#define REG_TCC1_CC0 (*(RwReg *)0x41018044UL)
#define REG_TCC1_CC1 (*(RwReg *)0x41018048UL)
#define REG_TCC1_CC2 (*(RwReg *)0x4101804CUL)
#define REG_TCC1_CC3 (*(RwReg *)0x41018050UL)
#define REG_TCC1_PATTBUF (*(RwReg16*)0x41018064UL)
#define REG_TCC1_PERBUF (*(RwReg *)0x4101806CUL)
#define REG_TCC1_CCBUF0 (*(RwReg *)0x41018070UL)
#define REG_TCC1_CCBUF1 (*(RwReg *)0x41018074UL)
#define REG_TCC1_CCBUF2 (*(RwReg *)0x41018078UL)
#define REG_TCC1_CCBUF3 (*(RwReg *)0x4101807CUL)



#define TCC1_CC_NUM 4
#define TCC1_DITHERING 1
#define TCC1_DMAC_ID_MC_0 30
#define TCC1_DMAC_ID_MC_1 31
#define TCC1_DMAC_ID_MC_2 32
#define TCC1_DMAC_ID_MC_3 33
#define TCC1_DMAC_ID_MC_LSB 30
#define TCC1_DMAC_ID_MC_MSB 33
#define TCC1_DMAC_ID_MC_SIZE 4
#define TCC1_DMAC_ID_OVF 29
#define TCC1_DTI 1
#define TCC1_EXT 31
#define TCC1_GCLK_ID 25
#define TCC1_MASTER_SLAVE_MODE 2
#define TCC1_OTMX 1
#define TCC1_OW_NUM 8
#define TCC1_PG 1
#define TCC1_SIZE 24
#define TCC1_SWAP 1
# 677 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/tcc2.h" 1
# 31 "asf4/samd51/include/instance/tcc2.h"
#define _SAMD51_TCC2_INSTANCE_ 
# 60 "asf4/samd51/include/instance/tcc2.h"
#define REG_TCC2_CTRLA (*(RwReg *)0x42000C00UL)
#define REG_TCC2_CTRLBCLR (*(RwReg8 *)0x42000C04UL)
#define REG_TCC2_CTRLBSET (*(RwReg8 *)0x42000C05UL)
#define REG_TCC2_SYNCBUSY (*(RoReg *)0x42000C08UL)
#define REG_TCC2_FCTRLA (*(RwReg *)0x42000C0CUL)
#define REG_TCC2_FCTRLB (*(RwReg *)0x42000C10UL)
#define REG_TCC2_WEXCTRL (*(RwReg *)0x42000C14UL)
#define REG_TCC2_DRVCTRL (*(RwReg *)0x42000C18UL)
#define REG_TCC2_DBGCTRL (*(RwReg8 *)0x42000C1EUL)
#define REG_TCC2_EVCTRL (*(RwReg *)0x42000C20UL)
#define REG_TCC2_INTENCLR (*(RwReg *)0x42000C24UL)
#define REG_TCC2_INTENSET (*(RwReg *)0x42000C28UL)
#define REG_TCC2_INTFLAG (*(RwReg *)0x42000C2CUL)
#define REG_TCC2_STATUS (*(RwReg *)0x42000C30UL)
#define REG_TCC2_COUNT (*(RwReg *)0x42000C34UL)
#define REG_TCC2_WAVE (*(RwReg *)0x42000C3CUL)
#define REG_TCC2_PER (*(RwReg *)0x42000C40UL)
#define REG_TCC2_CC0 (*(RwReg *)0x42000C44UL)
#define REG_TCC2_CC1 (*(RwReg *)0x42000C48UL)
#define REG_TCC2_CC2 (*(RwReg *)0x42000C4CUL)
#define REG_TCC2_PERBUF (*(RwReg *)0x42000C6CUL)
#define REG_TCC2_CCBUF0 (*(RwReg *)0x42000C70UL)
#define REG_TCC2_CCBUF1 (*(RwReg *)0x42000C74UL)
#define REG_TCC2_CCBUF2 (*(RwReg *)0x42000C78UL)



#define TCC2_CC_NUM 3
#define TCC2_DITHERING 0
#define TCC2_DMAC_ID_MC_0 35
#define TCC2_DMAC_ID_MC_1 36
#define TCC2_DMAC_ID_MC_2 37
#define TCC2_DMAC_ID_MC_LSB 35
#define TCC2_DMAC_ID_MC_MSB 37
#define TCC2_DMAC_ID_MC_SIZE 3
#define TCC2_DMAC_ID_OVF 34
#define TCC2_DTI 0
#define TCC2_EXT 1
#define TCC2_GCLK_ID 29
#define TCC2_MASTER_SLAVE_MODE 0
#define TCC2_OTMX 1
#define TCC2_OW_NUM 3
#define TCC2_PG 0
#define TCC2_SIZE 16
#define TCC2_SWAP 0
# 678 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/tcc3.h" 1
# 31 "asf4/samd51/include/instance/tcc3.h"
#define _SAMD51_TCC3_INSTANCE_ 
# 57 "asf4/samd51/include/instance/tcc3.h"
#define REG_TCC3_CTRLA (*(RwReg *)0x42001000UL)
#define REG_TCC3_CTRLBCLR (*(RwReg8 *)0x42001004UL)
#define REG_TCC3_CTRLBSET (*(RwReg8 *)0x42001005UL)
#define REG_TCC3_SYNCBUSY (*(RoReg *)0x42001008UL)
#define REG_TCC3_FCTRLA (*(RwReg *)0x4200100CUL)
#define REG_TCC3_FCTRLB (*(RwReg *)0x42001010UL)
#define REG_TCC3_DRVCTRL (*(RwReg *)0x42001018UL)
#define REG_TCC3_DBGCTRL (*(RwReg8 *)0x4200101EUL)
#define REG_TCC3_EVCTRL (*(RwReg *)0x42001020UL)
#define REG_TCC3_INTENCLR (*(RwReg *)0x42001024UL)
#define REG_TCC3_INTENSET (*(RwReg *)0x42001028UL)
#define REG_TCC3_INTFLAG (*(RwReg *)0x4200102CUL)
#define REG_TCC3_STATUS (*(RwReg *)0x42001030UL)
#define REG_TCC3_COUNT (*(RwReg *)0x42001034UL)
#define REG_TCC3_WAVE (*(RwReg *)0x4200103CUL)
#define REG_TCC3_PER (*(RwReg *)0x42001040UL)
#define REG_TCC3_CC0 (*(RwReg *)0x42001044UL)
#define REG_TCC3_CC1 (*(RwReg *)0x42001048UL)
#define REG_TCC3_PERBUF (*(RwReg *)0x4200106CUL)
#define REG_TCC3_CCBUF0 (*(RwReg *)0x42001070UL)
#define REG_TCC3_CCBUF1 (*(RwReg *)0x42001074UL)



#define TCC3_CC_NUM 2
#define TCC3_DITHERING 0
#define TCC3_DMAC_ID_MC_0 39
#define TCC3_DMAC_ID_MC_1 40
#define TCC3_DMAC_ID_MC_LSB 39
#define TCC3_DMAC_ID_MC_MSB 40
#define TCC3_DMAC_ID_MC_SIZE 2
#define TCC3_DMAC_ID_OVF 38
#define TCC3_DTI 0
#define TCC3_EXT 0
#define TCC3_GCLK_ID 29
#define TCC3_MASTER_SLAVE_MODE 0
#define TCC3_OTMX 0
#define TCC3_OW_NUM 2
#define TCC3_PG 0
#define TCC3_SIZE 16
#define TCC3_SWAP 0
# 679 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/tcc4.h" 1
# 31 "asf4/samd51/include/instance/tcc4.h"
#define _SAMD51_TCC4_INSTANCE_ 
# 57 "asf4/samd51/include/instance/tcc4.h"
#define REG_TCC4_CTRLA (*(RwReg *)0x43001000UL)
#define REG_TCC4_CTRLBCLR (*(RwReg8 *)0x43001004UL)
#define REG_TCC4_CTRLBSET (*(RwReg8 *)0x43001005UL)
#define REG_TCC4_SYNCBUSY (*(RoReg *)0x43001008UL)
#define REG_TCC4_FCTRLA (*(RwReg *)0x4300100CUL)
#define REG_TCC4_FCTRLB (*(RwReg *)0x43001010UL)
#define REG_TCC4_DRVCTRL (*(RwReg *)0x43001018UL)
#define REG_TCC4_DBGCTRL (*(RwReg8 *)0x4300101EUL)
#define REG_TCC4_EVCTRL (*(RwReg *)0x43001020UL)
#define REG_TCC4_INTENCLR (*(RwReg *)0x43001024UL)
#define REG_TCC4_INTENSET (*(RwReg *)0x43001028UL)
#define REG_TCC4_INTFLAG (*(RwReg *)0x4300102CUL)
#define REG_TCC4_STATUS (*(RwReg *)0x43001030UL)
#define REG_TCC4_COUNT (*(RwReg *)0x43001034UL)
#define REG_TCC4_WAVE (*(RwReg *)0x4300103CUL)
#define REG_TCC4_PER (*(RwReg *)0x43001040UL)
#define REG_TCC4_CC0 (*(RwReg *)0x43001044UL)
#define REG_TCC4_CC1 (*(RwReg *)0x43001048UL)
#define REG_TCC4_PERBUF (*(RwReg *)0x4300106CUL)
#define REG_TCC4_CCBUF0 (*(RwReg *)0x43001070UL)
#define REG_TCC4_CCBUF1 (*(RwReg *)0x43001074UL)



#define TCC4_CC_NUM 2
#define TCC4_DITHERING 0
#define TCC4_DMAC_ID_MC_0 42
#define TCC4_DMAC_ID_MC_1 43
#define TCC4_DMAC_ID_MC_LSB 42
#define TCC4_DMAC_ID_MC_MSB 43
#define TCC4_DMAC_ID_MC_SIZE 2
#define TCC4_DMAC_ID_OVF 41
#define TCC4_DTI 0
#define TCC4_EXT 0
#define TCC4_GCLK_ID 38
#define TCC4_MASTER_SLAVE_MODE 0
#define TCC4_OTMX 0
#define TCC4_OW_NUM 2
#define TCC4_PG 0
#define TCC4_SIZE 16
#define TCC4_SWAP 0
# 680 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/trng.h" 1
# 31 "asf4/samd51/include/instance/trng.h"
#define _SAMD51_TRNG_INSTANCE_ 
# 42 "asf4/samd51/include/instance/trng.h"
#define REG_TRNG_CTRLA (*(RwReg8 *)0x42002800UL)
#define REG_TRNG_EVCTRL (*(RwReg8 *)0x42002804UL)
#define REG_TRNG_INTENCLR (*(RwReg8 *)0x42002808UL)
#define REG_TRNG_INTENSET (*(RwReg8 *)0x42002809UL)
#define REG_TRNG_INTFLAG (*(RwReg8 *)0x4200280AUL)
#define REG_TRNG_DATA (*(RoReg *)0x42002820UL)
# 681 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/usb.h" 1
# 31 "asf4/samd51/include/instance/usb.h"
#define _SAMD51_USB_INSTANCE_ 
# 179 "asf4/samd51/include/instance/usb.h"
#define REG_USB_CTRLA (*(RwReg8 *)0x41000000UL)
#define REG_USB_SYNCBUSY (*(RoReg8 *)0x41000002UL)
#define REG_USB_QOSCTRL (*(RwReg8 *)0x41000003UL)
#define REG_USB_FSMSTATUS (*(RoReg8 *)0x4100000DUL)
#define REG_USB_DESCADD (*(RwReg *)0x41000024UL)
#define REG_USB_PADCAL (*(RwReg16*)0x41000028UL)
#define REG_USB_DEVICE_CTRLB (*(RwReg16*)0x41000008UL)
#define REG_USB_DEVICE_DADD (*(RwReg8 *)0x4100000AUL)
#define REG_USB_DEVICE_STATUS (*(RoReg8 *)0x4100000CUL)
#define REG_USB_DEVICE_FNUM (*(RoReg16*)0x41000010UL)
#define REG_USB_DEVICE_INTENCLR (*(RwReg16*)0x41000014UL)
#define REG_USB_DEVICE_INTENSET (*(RwReg16*)0x41000018UL)
#define REG_USB_DEVICE_INTFLAG (*(RwReg16*)0x4100001CUL)
#define REG_USB_DEVICE_EPINTSMRY (*(RoReg16*)0x41000020UL)
#define REG_USB_DEVICE_ENDPOINT_EPCFG0 (*(RwReg8 *)0x41000100UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUSCLR0 (*(WoReg8 *)0x41000104UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUSSET0 (*(WoReg8 *)0x41000105UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUS0 (*(RoReg8 *)0x41000106UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTFLAG0 (*(RwReg8 *)0x41000107UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTENCLR0 (*(RwReg8 *)0x41000108UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTENSET0 (*(RwReg8 *)0x41000109UL)
#define REG_USB_DEVICE_ENDPOINT_EPCFG1 (*(RwReg8 *)0x41000120UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUSCLR1 (*(WoReg8 *)0x41000124UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUSSET1 (*(WoReg8 *)0x41000125UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUS1 (*(RoReg8 *)0x41000126UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTFLAG1 (*(RwReg8 *)0x41000127UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTENCLR1 (*(RwReg8 *)0x41000128UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTENSET1 (*(RwReg8 *)0x41000129UL)
#define REG_USB_DEVICE_ENDPOINT_EPCFG2 (*(RwReg8 *)0x41000140UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUSCLR2 (*(WoReg8 *)0x41000144UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUSSET2 (*(WoReg8 *)0x41000145UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUS2 (*(RoReg8 *)0x41000146UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTFLAG2 (*(RwReg8 *)0x41000147UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTENCLR2 (*(RwReg8 *)0x41000148UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTENSET2 (*(RwReg8 *)0x41000149UL)
#define REG_USB_DEVICE_ENDPOINT_EPCFG3 (*(RwReg8 *)0x41000160UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUSCLR3 (*(WoReg8 *)0x41000164UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUSSET3 (*(WoReg8 *)0x41000165UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUS3 (*(RoReg8 *)0x41000166UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTFLAG3 (*(RwReg8 *)0x41000167UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTENCLR3 (*(RwReg8 *)0x41000168UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTENSET3 (*(RwReg8 *)0x41000169UL)
#define REG_USB_DEVICE_ENDPOINT_EPCFG4 (*(RwReg8 *)0x41000180UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUSCLR4 (*(WoReg8 *)0x41000184UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUSSET4 (*(WoReg8 *)0x41000185UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUS4 (*(RoReg8 *)0x41000186UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTFLAG4 (*(RwReg8 *)0x41000187UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTENCLR4 (*(RwReg8 *)0x41000188UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTENSET4 (*(RwReg8 *)0x41000189UL)
#define REG_USB_DEVICE_ENDPOINT_EPCFG5 (*(RwReg8 *)0x410001A0UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUSCLR5 (*(WoReg8 *)0x410001A4UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUSSET5 (*(WoReg8 *)0x410001A5UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUS5 (*(RoReg8 *)0x410001A6UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTFLAG5 (*(RwReg8 *)0x410001A7UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTENCLR5 (*(RwReg8 *)0x410001A8UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTENSET5 (*(RwReg8 *)0x410001A9UL)
#define REG_USB_DEVICE_ENDPOINT_EPCFG6 (*(RwReg8 *)0x410001C0UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUSCLR6 (*(WoReg8 *)0x410001C4UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUSSET6 (*(WoReg8 *)0x410001C5UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUS6 (*(RoReg8 *)0x410001C6UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTFLAG6 (*(RwReg8 *)0x410001C7UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTENCLR6 (*(RwReg8 *)0x410001C8UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTENSET6 (*(RwReg8 *)0x410001C9UL)
#define REG_USB_DEVICE_ENDPOINT_EPCFG7 (*(RwReg8 *)0x410001E0UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUSCLR7 (*(WoReg8 *)0x410001E4UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUSSET7 (*(WoReg8 *)0x410001E5UL)
#define REG_USB_DEVICE_ENDPOINT_EPSTATUS7 (*(RoReg8 *)0x410001E6UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTFLAG7 (*(RwReg8 *)0x410001E7UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTENCLR7 (*(RwReg8 *)0x410001E8UL)
#define REG_USB_DEVICE_ENDPOINT_EPINTENSET7 (*(RwReg8 *)0x410001E9UL)
#define REG_USB_HOST_CTRLB (*(RwReg16*)0x41000008UL)
#define REG_USB_HOST_HSOFC (*(RwReg8 *)0x4100000AUL)
#define REG_USB_HOST_STATUS (*(RwReg8 *)0x4100000CUL)
#define REG_USB_HOST_FNUM (*(RwReg16*)0x41000010UL)
#define REG_USB_HOST_FLENHIGH (*(RoReg8 *)0x41000012UL)
#define REG_USB_HOST_INTENCLR (*(RwReg16*)0x41000014UL)
#define REG_USB_HOST_INTENSET (*(RwReg16*)0x41000018UL)
#define REG_USB_HOST_INTFLAG (*(RwReg16*)0x4100001CUL)
#define REG_USB_HOST_PINTSMRY (*(RoReg16*)0x41000020UL)
#define REG_USB_HOST_PIPE_PCFG0 (*(RwReg8 *)0x41000100UL)
#define REG_USB_HOST_PIPE_BINTERVAL0 (*(RwReg8 *)0x41000103UL)
#define REG_USB_HOST_PIPE_PSTATUSCLR0 (*(WoReg8 *)0x41000104UL)
#define REG_USB_HOST_PIPE_PSTATUSSET0 (*(WoReg8 *)0x41000105UL)
#define REG_USB_HOST_PIPE_PSTATUS0 (*(RoReg8 *)0x41000106UL)
#define REG_USB_HOST_PIPE_PINTFLAG0 (*(RwReg8 *)0x41000107UL)
#define REG_USB_HOST_PIPE_PINTENCLR0 (*(RwReg8 *)0x41000108UL)
#define REG_USB_HOST_PIPE_PINTENSET0 (*(RwReg8 *)0x41000109UL)
#define REG_USB_HOST_PIPE_PCFG1 (*(RwReg8 *)0x41000120UL)
#define REG_USB_HOST_PIPE_BINTERVAL1 (*(RwReg8 *)0x41000123UL)
#define REG_USB_HOST_PIPE_PSTATUSCLR1 (*(WoReg8 *)0x41000124UL)
#define REG_USB_HOST_PIPE_PSTATUSSET1 (*(WoReg8 *)0x41000125UL)
#define REG_USB_HOST_PIPE_PSTATUS1 (*(RoReg8 *)0x41000126UL)
#define REG_USB_HOST_PIPE_PINTFLAG1 (*(RwReg8 *)0x41000127UL)
#define REG_USB_HOST_PIPE_PINTENCLR1 (*(RwReg8 *)0x41000128UL)
#define REG_USB_HOST_PIPE_PINTENSET1 (*(RwReg8 *)0x41000129UL)
#define REG_USB_HOST_PIPE_PCFG2 (*(RwReg8 *)0x41000140UL)
#define REG_USB_HOST_PIPE_BINTERVAL2 (*(RwReg8 *)0x41000143UL)
#define REG_USB_HOST_PIPE_PSTATUSCLR2 (*(WoReg8 *)0x41000144UL)
#define REG_USB_HOST_PIPE_PSTATUSSET2 (*(WoReg8 *)0x41000145UL)
#define REG_USB_HOST_PIPE_PSTATUS2 (*(RoReg8 *)0x41000146UL)
#define REG_USB_HOST_PIPE_PINTFLAG2 (*(RwReg8 *)0x41000147UL)
#define REG_USB_HOST_PIPE_PINTENCLR2 (*(RwReg8 *)0x41000148UL)
#define REG_USB_HOST_PIPE_PINTENSET2 (*(RwReg8 *)0x41000149UL)
#define REG_USB_HOST_PIPE_PCFG3 (*(RwReg8 *)0x41000160UL)
#define REG_USB_HOST_PIPE_BINTERVAL3 (*(RwReg8 *)0x41000163UL)
#define REG_USB_HOST_PIPE_PSTATUSCLR3 (*(WoReg8 *)0x41000164UL)
#define REG_USB_HOST_PIPE_PSTATUSSET3 (*(WoReg8 *)0x41000165UL)
#define REG_USB_HOST_PIPE_PSTATUS3 (*(RoReg8 *)0x41000166UL)
#define REG_USB_HOST_PIPE_PINTFLAG3 (*(RwReg8 *)0x41000167UL)
#define REG_USB_HOST_PIPE_PINTENCLR3 (*(RwReg8 *)0x41000168UL)
#define REG_USB_HOST_PIPE_PINTENSET3 (*(RwReg8 *)0x41000169UL)
#define REG_USB_HOST_PIPE_PCFG4 (*(RwReg8 *)0x41000180UL)
#define REG_USB_HOST_PIPE_BINTERVAL4 (*(RwReg8 *)0x41000183UL)
#define REG_USB_HOST_PIPE_PSTATUSCLR4 (*(WoReg8 *)0x41000184UL)
#define REG_USB_HOST_PIPE_PSTATUSSET4 (*(WoReg8 *)0x41000185UL)
#define REG_USB_HOST_PIPE_PSTATUS4 (*(RoReg8 *)0x41000186UL)
#define REG_USB_HOST_PIPE_PINTFLAG4 (*(RwReg8 *)0x41000187UL)
#define REG_USB_HOST_PIPE_PINTENCLR4 (*(RwReg8 *)0x41000188UL)
#define REG_USB_HOST_PIPE_PINTENSET4 (*(RwReg8 *)0x41000189UL)
#define REG_USB_HOST_PIPE_PCFG5 (*(RwReg8 *)0x410001A0UL)
#define REG_USB_HOST_PIPE_BINTERVAL5 (*(RwReg8 *)0x410001A3UL)
#define REG_USB_HOST_PIPE_PSTATUSCLR5 (*(WoReg8 *)0x410001A4UL)
#define REG_USB_HOST_PIPE_PSTATUSSET5 (*(WoReg8 *)0x410001A5UL)
#define REG_USB_HOST_PIPE_PSTATUS5 (*(RoReg8 *)0x410001A6UL)
#define REG_USB_HOST_PIPE_PINTFLAG5 (*(RwReg8 *)0x410001A7UL)
#define REG_USB_HOST_PIPE_PINTENCLR5 (*(RwReg8 *)0x410001A8UL)
#define REG_USB_HOST_PIPE_PINTENSET5 (*(RwReg8 *)0x410001A9UL)
#define REG_USB_HOST_PIPE_PCFG6 (*(RwReg8 *)0x410001C0UL)
#define REG_USB_HOST_PIPE_BINTERVAL6 (*(RwReg8 *)0x410001C3UL)
#define REG_USB_HOST_PIPE_PSTATUSCLR6 (*(WoReg8 *)0x410001C4UL)
#define REG_USB_HOST_PIPE_PSTATUSSET6 (*(WoReg8 *)0x410001C5UL)
#define REG_USB_HOST_PIPE_PSTATUS6 (*(RoReg8 *)0x410001C6UL)
#define REG_USB_HOST_PIPE_PINTFLAG6 (*(RwReg8 *)0x410001C7UL)
#define REG_USB_HOST_PIPE_PINTENCLR6 (*(RwReg8 *)0x410001C8UL)
#define REG_USB_HOST_PIPE_PINTENSET6 (*(RwReg8 *)0x410001C9UL)
#define REG_USB_HOST_PIPE_PCFG7 (*(RwReg8 *)0x410001E0UL)
#define REG_USB_HOST_PIPE_BINTERVAL7 (*(RwReg8 *)0x410001E3UL)
#define REG_USB_HOST_PIPE_PSTATUSCLR7 (*(WoReg8 *)0x410001E4UL)
#define REG_USB_HOST_PIPE_PSTATUSSET7 (*(WoReg8 *)0x410001E5UL)
#define REG_USB_HOST_PIPE_PSTATUS7 (*(RoReg8 *)0x410001E6UL)
#define REG_USB_HOST_PIPE_PINTFLAG7 (*(RwReg8 *)0x410001E7UL)
#define REG_USB_HOST_PIPE_PINTENCLR7 (*(RwReg8 *)0x410001E8UL)
#define REG_USB_HOST_PIPE_PINTENSET7 (*(RwReg8 *)0x410001E9UL)



#define USB_AHB_2_USB_FIFO_DEPTH 4
#define USB_AHB_2_USB_RD_DATA_BITS 8
#define USB_AHB_2_USB_WR_DATA_BITS 32
#define USB_AHB_2_USB_WR_THRESHOLD 2
#define USB_DATA_BUS_16_8 0
#define USB_EPNUM 8
#define USB_EPT_NUM 8
#define USB_GCLK_ID 10
#define USB_INITIAL_CONTROL_QOS 3
#define USB_INITIAL_DATA_QOS 3
#define USB_MISSING_SOF_DET_IMPLEMENTED 1
#define USB_PIPE_NUM 8
#define USB_SYSTEM_CLOCK_IS_CKUSB 0
#define USB_USB_2_AHB_FIFO_DEPTH 4
#define USB_USB_2_AHB_RD_DATA_BITS 16
#define USB_USB_2_AHB_RD_THRESHOLD 2
#define USB_USB_2_AHB_WR_DATA_BITS 8
# 682 "asf4/samd51/include/samd51p20a.h" 2
# 1 "asf4/samd51/include/instance/wdt.h" 1
# 31 "asf4/samd51/include/instance/wdt.h"
#define _SAMD51_WDT_INSTANCE_ 
# 44 "asf4/samd51/include/instance/wdt.h"
#define REG_WDT_CTRLA (*(RwReg8 *)0x40002000UL)
#define REG_WDT_CONFIG (*(RwReg8 *)0x40002001UL)
#define REG_WDT_EWCTRL (*(RwReg8 *)0x40002002UL)
#define REG_WDT_INTENCLR (*(RwReg8 *)0x40002004UL)
#define REG_WDT_INTENSET (*(RwReg8 *)0x40002005UL)
#define REG_WDT_INTFLAG (*(RwReg8 *)0x40002006UL)
#define REG_WDT_SYNCBUSY (*(RoReg *)0x40002008UL)
#define REG_WDT_CLEAR (*(WoReg8 *)0x4000200CUL)
# 683 "asf4/samd51/include/samd51p20a.h" 2
# 692 "asf4/samd51/include/samd51p20a.h"
#define ID_PAC 0
#define ID_PM 1
#define ID_MCLK 2
#define ID_RSTC 3
#define ID_OSCCTRL 4
#define ID_OSC32KCTRL 5
#define ID_SUPC 6
#define ID_GCLK 7
#define ID_WDT 8
#define ID_RTC 9
#define ID_EIC 10
#define ID_FREQM 11
#define ID_SERCOM0 12
#define ID_SERCOM1 13
#define ID_TC0 14
#define ID_TC1 15


#define ID_USB 32
#define ID_DSU 33
#define ID_NVMCTRL 34
#define ID_CMCC 35
#define ID_PORT 36
#define ID_DMAC 37
#define ID_HMATRIX 38
#define ID_EVSYS 39
#define ID_SERCOM2 41
#define ID_SERCOM3 42
#define ID_TCC0 43
#define ID_TCC1 44
#define ID_TC2 45
#define ID_TC3 46
#define ID_TAL 47
#define ID_RAMECC 48
#define ID_TCC2 67
#define ID_TCC3 68
#define ID_TC4 69
#define ID_TC5 70
#define ID_PDEC 71
#define ID_AC 72
#define ID_AES 73
#define ID_TRNG 74
#define ID_ICM 75
#define ID_PUKCC 76
#define ID_QSPI 77
#define ID_CCL 78


#define ID_SERCOM4 96
#define ID_SERCOM5 97
#define ID_SERCOM6 98
#define ID_SERCOM7 99
#define ID_TCC4 100
#define ID_TC6 101
#define ID_TC7 102
#define ID_ADC0 103
#define ID_ADC1 104
#define ID_DAC 105
#define ID_I2S 106
#define ID_PCC 107


#define ID_SDHC0 128
#define ID_SDHC1 129

#define ID_PERIPH_COUNT 130
# 858 "asf4/samd51/include/samd51p20a.h"
#define AC ((Ac *)0x42002000UL)
#define AC_INST_NUM 1
#define AC_INSTS { AC }

#define ADC0 ((Adc *)0x43001C00UL)
#define ADC1 ((Adc *)0x43002000UL)
#define ADC_INST_NUM 2
#define ADC_INSTS { ADC0, ADC1 }

#define AES ((Aes *)0x42002400UL)
#define AES_INST_NUM 1
#define AES_INSTS { AES }

#define CCL ((Ccl *)0x42003800UL)
#define CCL_INST_NUM 1
#define CCL_INSTS { CCL }

#define CMCC ((Cmcc *)0x41006000UL)
#define CMCC_AHB (0x03000000UL)
#define CMCC_INST_NUM 1
#define CMCC_INSTS { CMCC }

#define DAC ((Dac *)0x43002400UL)
#define DAC_INST_NUM 1
#define DAC_INSTS { DAC }

#define DMAC ((Dmac *)0x4100A000UL)
#define DMAC_INST_NUM 1
#define DMAC_INSTS { DMAC }

#define DSU ((Dsu *)0x41002000UL)
#define DSU_INST_NUM 1
#define DSU_INSTS { DSU }

#define EIC ((Eic *)0x40002800UL)
#define EIC_INST_NUM 1
#define EIC_INSTS { EIC }

#define EVSYS ((Evsys *)0x4100E000UL)
#define EVSYS_INST_NUM 1
#define EVSYS_INSTS { EVSYS }

#define FREQM ((Freqm *)0x40002C00UL)
#define FREQM_INST_NUM 1
#define FREQM_INSTS { FREQM }

#define GCLK ((Gclk *)0x40001C00UL)
#define GCLK_INST_NUM 1
#define GCLK_INSTS { GCLK }

#define HMATRIX ((Hmatrixb *)0x4100C000UL)
#define HMATRIXB_INST_NUM 1
#define HMATRIXB_INSTS { HMATRIX }

#define ICM ((Icm *)0x42002C00UL)
#define ICM_INST_NUM 1
#define ICM_INSTS { ICM }

#define I2S ((I2s *)0x43002800UL)
#define I2S_INST_NUM 1
#define I2S_INSTS { I2S }

#define MCLK ((Mclk *)0x40000800UL)
#define MCLK_INST_NUM 1
#define MCLK_INSTS { MCLK }

#define NVMCTRL ((Nvmctrl *)0x41004000UL)
#define NVMCTRL_CB (0x00800000UL)
#define NVMCTRL_CBW0 (0x00800000UL)
#define NVMCTRL_CBW1 (0x00800010UL)
#define NVMCTRL_CBW2 (0x00800020UL)
#define NVMCTRL_CBW3 (0x00800030UL)
#define NVMCTRL_CBW4 (0x00800040UL)
#define NVMCTRL_CBW5 (0x00800050UL)
#define NVMCTRL_CBW6 (0x00800060UL)
#define NVMCTRL_CBW7 (0x00800070UL)
#define NVMCTRL_FS (0x00806000UL)
#define NVMCTRL_SW0 (0x00800080UL)
#define NVMCTRL_SW1 (0x00800090UL)
#define NVMCTRL_SW2 (0x008000A0UL)
#define NVMCTRL_SW3 (0x008000B0UL)
#define NVMCTRL_SW4 (0x008000C0UL)
#define NVMCTRL_SW5 (0x008000D0UL)
#define NVMCTRL_SW6 (0x008000E0UL)
#define NVMCTRL_SW7 (0x008000F0UL)
#define NVMCTRL_TEMP_LOG (0x00800100UL)
#define NVMCTRL_TEMP_LOG_W0 (0x00800100UL)
#define NVMCTRL_TEMP_LOG_W1 (0x00800110UL)
#define NVMCTRL_TEMP_LOG_W2 (0x00800120UL)
#define NVMCTRL_TEMP_LOG_W3 (0x00800130UL)
#define NVMCTRL_TEMP_LOG_W4 (0x00800140UL)
#define NVMCTRL_TEMP_LOG_W5 (0x00800150UL)
#define NVMCTRL_TEMP_LOG_W6 (0x00800160UL)
#define NVMCTRL_TEMP_LOG_W7 (0x00800170UL)
#define NVMCTRL_TLATCH (0x00802000UL)
#define NVMCTRL_USER (0x00804000UL)
#define NVMCTRL_INST_NUM 1
#define NVMCTRL_INSTS { NVMCTRL }

#define OSCCTRL ((Oscctrl *)0x40001000UL)
#define OSCCTRL_INST_NUM 1
#define OSCCTRL_INSTS { OSCCTRL }

#define OSC32KCTRL ((Osc32kctrl *)0x40001400UL)
#define OSC32KCTRL_INST_NUM 1
#define OSC32KCTRL_INSTS { OSC32KCTRL }

#define PAC ((Pac *)0x40000000UL)
#define PAC_INST_NUM 1
#define PAC_INSTS { PAC }

#define PCC ((Pcc *)0x43002C00UL)
#define PCC_INST_NUM 1
#define PCC_INSTS { PCC }

#define PDEC ((Pdec *)0x42001C00UL)
#define PDEC_INST_NUM 1
#define PDEC_INSTS { PDEC }

#define PM ((Pm *)0x40000400UL)
#define PM_INST_NUM 1
#define PM_INSTS { PM }

#define PORT ((Port *)0x41008000UL)
#define PORT_INST_NUM 1
#define PORT_INSTS { PORT }

#define PUKCC ((void *)0x42003000UL)
#define PUKCC_AHB ((void *)0x02000000UL)
#define PUKCC_INST_NUM 1
#define PUKCC_INSTS { PUKCC }

#define QSPI ((Qspi *)0x42003400UL)
#define QSPI_AHB (0x04000000UL)
#define QSPI_INST_NUM 1
#define QSPI_INSTS { QSPI }

#define RAMECC ((Ramecc *)0x41020000UL)
#define RAMECC_INST_NUM 1
#define RAMECC_INSTS { RAMECC }

#define RSTC ((Rstc *)0x40000C00UL)
#define RSTC_INST_NUM 1
#define RSTC_INSTS { RSTC }

#define RTC ((Rtc *)0x40002400UL)
#define RTC_INST_NUM 1
#define RTC_INSTS { RTC }

#define SDHC0 ((Sdhc *)0x45000000UL)
#define SDHC1 ((Sdhc *)0x46000000UL)
#define SDHC_INST_NUM 2
#define SDHC_INSTS { SDHC0, SDHC1 }

#define SERCOM0 ((Sercom *)0x40003000UL)
#define SERCOM1 ((Sercom *)0x40003400UL)
#define SERCOM2 ((Sercom *)0x41012000UL)
#define SERCOM3 ((Sercom *)0x41014000UL)
#define SERCOM4 ((Sercom *)0x43000000UL)
#define SERCOM5 ((Sercom *)0x43000400UL)
#define SERCOM6 ((Sercom *)0x43000800UL)
#define SERCOM7 ((Sercom *)0x43000C00UL)
#define SERCOM_INST_NUM 8
#define SERCOM_INSTS { SERCOM0, SERCOM1, SERCOM2, SERCOM3, SERCOM4, SERCOM5, SERCOM6, SERCOM7 }

#define SUPC ((Supc *)0x40001800UL)
#define SUPC_INST_NUM 1
#define SUPC_INSTS { SUPC }

#define TAL ((Tal *)0x4101E000UL)
#define TAL_INST_NUM 1
#define TAL_INSTS { TAL }

#define TC0 ((Tc *)0x40003800UL)
#define TC1 ((Tc *)0x40003C00UL)
#define TC2 ((Tc *)0x4101A000UL)
#define TC3 ((Tc *)0x4101C000UL)
#define TC4 ((Tc *)0x42001400UL)
#define TC5 ((Tc *)0x42001800UL)
#define TC6 ((Tc *)0x43001400UL)
#define TC7 ((Tc *)0x43001800UL)
#define TC_INST_NUM 8
#define TC_INSTS { TC0, TC1, TC2, TC3, TC4, TC5, TC6, TC7 }

#define TCC0 ((Tcc *)0x41016000UL)
#define TCC1 ((Tcc *)0x41018000UL)
#define TCC2 ((Tcc *)0x42000C00UL)
#define TCC3 ((Tcc *)0x42001000UL)
#define TCC4 ((Tcc *)0x43001000UL)
#define TCC_INST_NUM 5
#define TCC_INSTS { TCC0, TCC1, TCC2, TCC3, TCC4 }

#define TRNG ((Trng *)0x42002800UL)
#define TRNG_INST_NUM 1
#define TRNG_INSTS { TRNG }

#define USB ((Usb *)0x41000000UL)
#define USB_INST_NUM 1
#define USB_INSTS { USB }

#define WDT ((Wdt *)0x40002000UL)
#define WDT_INST_NUM 1
#define WDT_INSTS { WDT }
# 1071 "asf4/samd51/include/samd51p20a.h"
# 1 "asf4/samd51/include/pio/samd51p20a.h" 1
# 31 "asf4/samd51/include/pio/samd51p20a.h"
#define _SAMD51P20A_PIO_ 

#define PIN_PA00 0
#define PORT_PA00 (_UL_(1) << 0)
#define PIN_PA01 1
#define PORT_PA01 (_UL_(1) << 1)
#define PIN_PA02 2
#define PORT_PA02 (_UL_(1) << 2)
#define PIN_PA03 3
#define PORT_PA03 (_UL_(1) << 3)
#define PIN_PA04 4
#define PORT_PA04 (_UL_(1) << 4)
#define PIN_PA05 5
#define PORT_PA05 (_UL_(1) << 5)
#define PIN_PA06 6
#define PORT_PA06 (_UL_(1) << 6)
#define PIN_PA07 7
#define PORT_PA07 (_UL_(1) << 7)
#define PIN_PA08 8
#define PORT_PA08 (_UL_(1) << 8)
#define PIN_PA09 9
#define PORT_PA09 (_UL_(1) << 9)
#define PIN_PA10 10
#define PORT_PA10 (_UL_(1) << 10)
#define PIN_PA11 11
#define PORT_PA11 (_UL_(1) << 11)
#define PIN_PA12 12
#define PORT_PA12 (_UL_(1) << 12)
#define PIN_PA13 13
#define PORT_PA13 (_UL_(1) << 13)
#define PIN_PA14 14
#define PORT_PA14 (_UL_(1) << 14)
#define PIN_PA15 15
#define PORT_PA15 (_UL_(1) << 15)
#define PIN_PA16 16
#define PORT_PA16 (_UL_(1) << 16)
#define PIN_PA17 17
#define PORT_PA17 (_UL_(1) << 17)
#define PIN_PA18 18
#define PORT_PA18 (_UL_(1) << 18)
#define PIN_PA19 19
#define PORT_PA19 (_UL_(1) << 19)
#define PIN_PA20 20
#define PORT_PA20 (_UL_(1) << 20)
#define PIN_PA21 21
#define PORT_PA21 (_UL_(1) << 21)
#define PIN_PA22 22
#define PORT_PA22 (_UL_(1) << 22)
#define PIN_PA23 23
#define PORT_PA23 (_UL_(1) << 23)
#define PIN_PA24 24
#define PORT_PA24 (_UL_(1) << 24)
#define PIN_PA25 25
#define PORT_PA25 (_UL_(1) << 25)
#define PIN_PA27 27
#define PORT_PA27 (_UL_(1) << 27)
#define PIN_PA30 30
#define PORT_PA30 (_UL_(1) << 30)
#define PIN_PA31 31
#define PORT_PA31 (_UL_(1) << 31)
#define PIN_PB00 32
#define PORT_PB00 (_UL_(1) << 0)
#define PIN_PB01 33
#define PORT_PB01 (_UL_(1) << 1)
#define PIN_PB02 34
#define PORT_PB02 (_UL_(1) << 2)
#define PIN_PB03 35
#define PORT_PB03 (_UL_(1) << 3)
#define PIN_PB04 36
#define PORT_PB04 (_UL_(1) << 4)
#define PIN_PB05 37
#define PORT_PB05 (_UL_(1) << 5)
#define PIN_PB06 38
#define PORT_PB06 (_UL_(1) << 6)
#define PIN_PB07 39
#define PORT_PB07 (_UL_(1) << 7)
#define PIN_PB08 40
#define PORT_PB08 (_UL_(1) << 8)
#define PIN_PB09 41
#define PORT_PB09 (_UL_(1) << 9)
#define PIN_PB10 42
#define PORT_PB10 (_UL_(1) << 10)
#define PIN_PB11 43
#define PORT_PB11 (_UL_(1) << 11)
#define PIN_PB12 44
#define PORT_PB12 (_UL_(1) << 12)
#define PIN_PB13 45
#define PORT_PB13 (_UL_(1) << 13)
#define PIN_PB14 46
#define PORT_PB14 (_UL_(1) << 14)
#define PIN_PB15 47
#define PORT_PB15 (_UL_(1) << 15)
#define PIN_PB16 48
#define PORT_PB16 (_UL_(1) << 16)
#define PIN_PB17 49
#define PORT_PB17 (_UL_(1) << 17)
#define PIN_PB18 50
#define PORT_PB18 (_UL_(1) << 18)
#define PIN_PB19 51
#define PORT_PB19 (_UL_(1) << 19)
#define PIN_PB20 52
#define PORT_PB20 (_UL_(1) << 20)
#define PIN_PB21 53
#define PORT_PB21 (_UL_(1) << 21)
#define PIN_PB22 54
#define PORT_PB22 (_UL_(1) << 22)
#define PIN_PB23 55
#define PORT_PB23 (_UL_(1) << 23)
#define PIN_PB24 56
#define PORT_PB24 (_UL_(1) << 24)
#define PIN_PB25 57
#define PORT_PB25 (_UL_(1) << 25)
#define PIN_PB26 58
#define PORT_PB26 (_UL_(1) << 26)
#define PIN_PB27 59
#define PORT_PB27 (_UL_(1) << 27)
#define PIN_PB28 60
#define PORT_PB28 (_UL_(1) << 28)
#define PIN_PB29 61
#define PORT_PB29 (_UL_(1) << 29)
#define PIN_PB30 62
#define PORT_PB30 (_UL_(1) << 30)
#define PIN_PB31 63
#define PORT_PB31 (_UL_(1) << 31)
#define PIN_PC00 64
#define PORT_PC00 (_UL_(1) << 0)
#define PIN_PC01 65
#define PORT_PC01 (_UL_(1) << 1)
#define PIN_PC02 66
#define PORT_PC02 (_UL_(1) << 2)
#define PIN_PC03 67
#define PORT_PC03 (_UL_(1) << 3)
#define PIN_PC04 68
#define PORT_PC04 (_UL_(1) << 4)
#define PIN_PC05 69
#define PORT_PC05 (_UL_(1) << 5)
#define PIN_PC06 70
#define PORT_PC06 (_UL_(1) << 6)
#define PIN_PC07 71
#define PORT_PC07 (_UL_(1) << 7)
#define PIN_PC10 74
#define PORT_PC10 (_UL_(1) << 10)
#define PIN_PC11 75
#define PORT_PC11 (_UL_(1) << 11)
#define PIN_PC12 76
#define PORT_PC12 (_UL_(1) << 12)
#define PIN_PC13 77
#define PORT_PC13 (_UL_(1) << 13)
#define PIN_PC14 78
#define PORT_PC14 (_UL_(1) << 14)
#define PIN_PC15 79
#define PORT_PC15 (_UL_(1) << 15)
#define PIN_PC16 80
#define PORT_PC16 (_UL_(1) << 16)
#define PIN_PC17 81
#define PORT_PC17 (_UL_(1) << 17)
#define PIN_PC18 82
#define PORT_PC18 (_UL_(1) << 18)
#define PIN_PC19 83
#define PORT_PC19 (_UL_(1) << 19)
#define PIN_PC20 84
#define PORT_PC20 (_UL_(1) << 20)
#define PIN_PC21 85
#define PORT_PC21 (_UL_(1) << 21)
#define PIN_PC22 86
#define PORT_PC22 (_UL_(1) << 22)
#define PIN_PC23 87
#define PORT_PC23 (_UL_(1) << 23)
#define PIN_PC24 88
#define PORT_PC24 (_UL_(1) << 24)
#define PIN_PC25 89
#define PORT_PC25 (_UL_(1) << 25)
#define PIN_PC26 90
#define PORT_PC26 (_UL_(1) << 26)
#define PIN_PC27 91
#define PORT_PC27 (_UL_(1) << 27)
#define PIN_PC28 92
#define PORT_PC28 (_UL_(1) << 28)
#define PIN_PC30 94
#define PORT_PC30 (_UL_(1) << 30)
#define PIN_PC31 95
#define PORT_PC31 (_UL_(1) << 31)
#define PIN_PD00 96
#define PORT_PD00 (_UL_(1) << 0)
#define PIN_PD01 97
#define PORT_PD01 (_UL_(1) << 1)
#define PIN_PD08 104
#define PORT_PD08 (_UL_(1) << 8)
#define PIN_PD09 105
#define PORT_PD09 (_UL_(1) << 9)
#define PIN_PD10 106
#define PORT_PD10 (_UL_(1) << 10)
#define PIN_PD11 107
#define PORT_PD11 (_UL_(1) << 11)
#define PIN_PD12 108
#define PORT_PD12 (_UL_(1) << 12)
#define PIN_PD20 116
#define PORT_PD20 (_UL_(1) << 20)
#define PIN_PD21 117
#define PORT_PD21 (_UL_(1) << 21)

#define PIN_PA30H_CM4_SWCLK _L_(30)
#define MUX_PA30H_CM4_SWCLK _L_(7)
#define PINMUX_PA30H_CM4_SWCLK ((PIN_PA30H_CM4_SWCLK << 16) | MUX_PA30H_CM4_SWCLK)
#define PORT_PA30H_CM4_SWCLK (_UL_(1) << 30)
#define PIN_PC27M_CM4_SWO _L_(91)
#define MUX_PC27M_CM4_SWO _L_(12)
#define PINMUX_PC27M_CM4_SWO ((PIN_PC27M_CM4_SWO << 16) | MUX_PC27M_CM4_SWO)
#define PORT_PC27M_CM4_SWO (_UL_(1) << 27)
#define PIN_PB30H_CM4_SWO _L_(62)
#define MUX_PB30H_CM4_SWO _L_(7)
#define PINMUX_PB30H_CM4_SWO ((PIN_PB30H_CM4_SWO << 16) | MUX_PB30H_CM4_SWO)
#define PORT_PB30H_CM4_SWO (_UL_(1) << 30)
#define PIN_PC27H_CM4_TRACECLK _L_(91)
#define MUX_PC27H_CM4_TRACECLK _L_(7)
#define PINMUX_PC27H_CM4_TRACECLK ((PIN_PC27H_CM4_TRACECLK << 16) | MUX_PC27H_CM4_TRACECLK)
#define PORT_PC27H_CM4_TRACECLK (_UL_(1) << 27)
#define PIN_PC28H_CM4_TRACEDATA0 _L_(92)
#define MUX_PC28H_CM4_TRACEDATA0 _L_(7)
#define PINMUX_PC28H_CM4_TRACEDATA0 ((PIN_PC28H_CM4_TRACEDATA0 << 16) | MUX_PC28H_CM4_TRACEDATA0)
#define PORT_PC28H_CM4_TRACEDATA0 (_UL_(1) << 28)
#define PIN_PC26H_CM4_TRACEDATA1 _L_(90)
#define MUX_PC26H_CM4_TRACEDATA1 _L_(7)
#define PINMUX_PC26H_CM4_TRACEDATA1 ((PIN_PC26H_CM4_TRACEDATA1 << 16) | MUX_PC26H_CM4_TRACEDATA1)
#define PORT_PC26H_CM4_TRACEDATA1 (_UL_(1) << 26)
#define PIN_PC25H_CM4_TRACEDATA2 _L_(89)
#define MUX_PC25H_CM4_TRACEDATA2 _L_(7)
#define PINMUX_PC25H_CM4_TRACEDATA2 ((PIN_PC25H_CM4_TRACEDATA2 << 16) | MUX_PC25H_CM4_TRACEDATA2)
#define PORT_PC25H_CM4_TRACEDATA2 (_UL_(1) << 25)
#define PIN_PC24H_CM4_TRACEDATA3 _L_(88)
#define MUX_PC24H_CM4_TRACEDATA3 _L_(7)
#define PINMUX_PC24H_CM4_TRACEDATA3 ((PIN_PC24H_CM4_TRACEDATA3 << 16) | MUX_PC24H_CM4_TRACEDATA3)
#define PORT_PC24H_CM4_TRACEDATA3 (_UL_(1) << 24)

#define PIN_PA03B_ANAREF_VREF0 _L_(3)
#define MUX_PA03B_ANAREF_VREF0 _L_(1)
#define PINMUX_PA03B_ANAREF_VREF0 ((PIN_PA03B_ANAREF_VREF0 << 16) | MUX_PA03B_ANAREF_VREF0)
#define PORT_PA03B_ANAREF_VREF0 (_UL_(1) << 3)
#define PIN_PA04B_ANAREF_VREF1 _L_(4)
#define MUX_PA04B_ANAREF_VREF1 _L_(1)
#define PINMUX_PA04B_ANAREF_VREF1 ((PIN_PA04B_ANAREF_VREF1 << 16) | MUX_PA04B_ANAREF_VREF1)
#define PORT_PA04B_ANAREF_VREF1 (_UL_(1) << 4)
#define PIN_PA06B_ANAREF_VREF2 _L_(6)
#define MUX_PA06B_ANAREF_VREF2 _L_(1)
#define PINMUX_PA06B_ANAREF_VREF2 ((PIN_PA06B_ANAREF_VREF2 << 16) | MUX_PA06B_ANAREF_VREF2)
#define PORT_PA06B_ANAREF_VREF2 (_UL_(1) << 6)

#define PIN_PA30M_GCLK_IO0 _L_(30)
#define MUX_PA30M_GCLK_IO0 _L_(12)
#define PINMUX_PA30M_GCLK_IO0 ((PIN_PA30M_GCLK_IO0 << 16) | MUX_PA30M_GCLK_IO0)
#define PORT_PA30M_GCLK_IO0 (_UL_(1) << 30)
#define PIN_PB14M_GCLK_IO0 _L_(46)
#define MUX_PB14M_GCLK_IO0 _L_(12)
#define PINMUX_PB14M_GCLK_IO0 ((PIN_PB14M_GCLK_IO0 << 16) | MUX_PB14M_GCLK_IO0)
#define PORT_PB14M_GCLK_IO0 (_UL_(1) << 14)
#define PIN_PA14M_GCLK_IO0 _L_(14)
#define MUX_PA14M_GCLK_IO0 _L_(12)
#define PINMUX_PA14M_GCLK_IO0 ((PIN_PA14M_GCLK_IO0 << 16) | MUX_PA14M_GCLK_IO0)
#define PORT_PA14M_GCLK_IO0 (_UL_(1) << 14)
#define PIN_PB22M_GCLK_IO0 _L_(54)
#define MUX_PB22M_GCLK_IO0 _L_(12)
#define PINMUX_PB22M_GCLK_IO0 ((PIN_PB22M_GCLK_IO0 << 16) | MUX_PB22M_GCLK_IO0)
#define PORT_PB22M_GCLK_IO0 (_UL_(1) << 22)
#define PIN_PB15M_GCLK_IO1 _L_(47)
#define MUX_PB15M_GCLK_IO1 _L_(12)
#define PINMUX_PB15M_GCLK_IO1 ((PIN_PB15M_GCLK_IO1 << 16) | MUX_PB15M_GCLK_IO1)
#define PORT_PB15M_GCLK_IO1 (_UL_(1) << 15)
#define PIN_PA15M_GCLK_IO1 _L_(15)
#define MUX_PA15M_GCLK_IO1 _L_(12)
#define PINMUX_PA15M_GCLK_IO1 ((PIN_PA15M_GCLK_IO1 << 16) | MUX_PA15M_GCLK_IO1)
#define PORT_PA15M_GCLK_IO1 (_UL_(1) << 15)
#define PIN_PB23M_GCLK_IO1 _L_(55)
#define MUX_PB23M_GCLK_IO1 _L_(12)
#define PINMUX_PB23M_GCLK_IO1 ((PIN_PB23M_GCLK_IO1 << 16) | MUX_PB23M_GCLK_IO1)
#define PORT_PB23M_GCLK_IO1 (_UL_(1) << 23)
#define PIN_PA27M_GCLK_IO1 _L_(27)
#define MUX_PA27M_GCLK_IO1 _L_(12)
#define PINMUX_PA27M_GCLK_IO1 ((PIN_PA27M_GCLK_IO1 << 16) | MUX_PA27M_GCLK_IO1)
#define PORT_PA27M_GCLK_IO1 (_UL_(1) << 27)
#define PIN_PA16M_GCLK_IO2 _L_(16)
#define MUX_PA16M_GCLK_IO2 _L_(12)
#define PINMUX_PA16M_GCLK_IO2 ((PIN_PA16M_GCLK_IO2 << 16) | MUX_PA16M_GCLK_IO2)
#define PORT_PA16M_GCLK_IO2 (_UL_(1) << 16)
#define PIN_PB16M_GCLK_IO2 _L_(48)
#define MUX_PB16M_GCLK_IO2 _L_(12)
#define PINMUX_PB16M_GCLK_IO2 ((PIN_PB16M_GCLK_IO2 << 16) | MUX_PB16M_GCLK_IO2)
#define PORT_PB16M_GCLK_IO2 (_UL_(1) << 16)
#define PIN_PA17M_GCLK_IO3 _L_(17)
#define MUX_PA17M_GCLK_IO3 _L_(12)
#define PINMUX_PA17M_GCLK_IO3 ((PIN_PA17M_GCLK_IO3 << 16) | MUX_PA17M_GCLK_IO3)
#define PORT_PA17M_GCLK_IO3 (_UL_(1) << 17)
#define PIN_PB17M_GCLK_IO3 _L_(49)
#define MUX_PB17M_GCLK_IO3 _L_(12)
#define PINMUX_PB17M_GCLK_IO3 ((PIN_PB17M_GCLK_IO3 << 16) | MUX_PB17M_GCLK_IO3)
#define PORT_PB17M_GCLK_IO3 (_UL_(1) << 17)
#define PIN_PA10M_GCLK_IO4 _L_(10)
#define MUX_PA10M_GCLK_IO4 _L_(12)
#define PINMUX_PA10M_GCLK_IO4 ((PIN_PA10M_GCLK_IO4 << 16) | MUX_PA10M_GCLK_IO4)
#define PORT_PA10M_GCLK_IO4 (_UL_(1) << 10)
#define PIN_PB10M_GCLK_IO4 _L_(42)
#define MUX_PB10M_GCLK_IO4 _L_(12)
#define PINMUX_PB10M_GCLK_IO4 ((PIN_PB10M_GCLK_IO4 << 16) | MUX_PB10M_GCLK_IO4)
#define PORT_PB10M_GCLK_IO4 (_UL_(1) << 10)
#define PIN_PB18M_GCLK_IO4 _L_(50)
#define MUX_PB18M_GCLK_IO4 _L_(12)
#define PINMUX_PB18M_GCLK_IO4 ((PIN_PB18M_GCLK_IO4 << 16) | MUX_PB18M_GCLK_IO4)
#define PORT_PB18M_GCLK_IO4 (_UL_(1) << 18)
#define PIN_PA11M_GCLK_IO5 _L_(11)
#define MUX_PA11M_GCLK_IO5 _L_(12)
#define PINMUX_PA11M_GCLK_IO5 ((PIN_PA11M_GCLK_IO5 << 16) | MUX_PA11M_GCLK_IO5)
#define PORT_PA11M_GCLK_IO5 (_UL_(1) << 11)
#define PIN_PB11M_GCLK_IO5 _L_(43)
#define MUX_PB11M_GCLK_IO5 _L_(12)
#define PINMUX_PB11M_GCLK_IO5 ((PIN_PB11M_GCLK_IO5 << 16) | MUX_PB11M_GCLK_IO5)
#define PORT_PB11M_GCLK_IO5 (_UL_(1) << 11)
#define PIN_PB19M_GCLK_IO5 _L_(51)
#define MUX_PB19M_GCLK_IO5 _L_(12)
#define PINMUX_PB19M_GCLK_IO5 ((PIN_PB19M_GCLK_IO5 << 16) | MUX_PB19M_GCLK_IO5)
#define PORT_PB19M_GCLK_IO5 (_UL_(1) << 19)
#define PIN_PB12M_GCLK_IO6 _L_(44)
#define MUX_PB12M_GCLK_IO6 _L_(12)
#define PINMUX_PB12M_GCLK_IO6 ((PIN_PB12M_GCLK_IO6 << 16) | MUX_PB12M_GCLK_IO6)
#define PORT_PB12M_GCLK_IO6 (_UL_(1) << 12)
#define PIN_PB20M_GCLK_IO6 _L_(52)
#define MUX_PB20M_GCLK_IO6 _L_(12)
#define PINMUX_PB20M_GCLK_IO6 ((PIN_PB20M_GCLK_IO6 << 16) | MUX_PB20M_GCLK_IO6)
#define PORT_PB20M_GCLK_IO6 (_UL_(1) << 20)
#define PIN_PB13M_GCLK_IO7 _L_(45)
#define MUX_PB13M_GCLK_IO7 _L_(12)
#define PINMUX_PB13M_GCLK_IO7 ((PIN_PB13M_GCLK_IO7 << 16) | MUX_PB13M_GCLK_IO7)
#define PORT_PB13M_GCLK_IO7 (_UL_(1) << 13)
#define PIN_PB21M_GCLK_IO7 _L_(53)
#define MUX_PB21M_GCLK_IO7 _L_(12)
#define PINMUX_PB21M_GCLK_IO7 ((PIN_PB21M_GCLK_IO7 << 16) | MUX_PB21M_GCLK_IO7)
#define PORT_PB21M_GCLK_IO7 (_UL_(1) << 21)

#define PIN_PA00A_EIC_EXTINT0 _L_(0)
#define MUX_PA00A_EIC_EXTINT0 _L_(0)
#define PINMUX_PA00A_EIC_EXTINT0 ((PIN_PA00A_EIC_EXTINT0 << 16) | MUX_PA00A_EIC_EXTINT0)
#define PORT_PA00A_EIC_EXTINT0 (_UL_(1) << 0)
#define PIN_PA00A_EIC_EXTINT_NUM _L_(0)
#define PIN_PA16A_EIC_EXTINT0 _L_(16)
#define MUX_PA16A_EIC_EXTINT0 _L_(0)
#define PINMUX_PA16A_EIC_EXTINT0 ((PIN_PA16A_EIC_EXTINT0 << 16) | MUX_PA16A_EIC_EXTINT0)
#define PORT_PA16A_EIC_EXTINT0 (_UL_(1) << 16)
#define PIN_PA16A_EIC_EXTINT_NUM _L_(0)
#define PIN_PB00A_EIC_EXTINT0 _L_(32)
#define MUX_PB00A_EIC_EXTINT0 _L_(0)
#define PINMUX_PB00A_EIC_EXTINT0 ((PIN_PB00A_EIC_EXTINT0 << 16) | MUX_PB00A_EIC_EXTINT0)
#define PORT_PB00A_EIC_EXTINT0 (_UL_(1) << 0)
#define PIN_PB00A_EIC_EXTINT_NUM _L_(0)
#define PIN_PB16A_EIC_EXTINT0 _L_(48)
#define MUX_PB16A_EIC_EXTINT0 _L_(0)
#define PINMUX_PB16A_EIC_EXTINT0 ((PIN_PB16A_EIC_EXTINT0 << 16) | MUX_PB16A_EIC_EXTINT0)
#define PORT_PB16A_EIC_EXTINT0 (_UL_(1) << 16)
#define PIN_PB16A_EIC_EXTINT_NUM _L_(0)
#define PIN_PC00A_EIC_EXTINT0 _L_(64)
#define MUX_PC00A_EIC_EXTINT0 _L_(0)
#define PINMUX_PC00A_EIC_EXTINT0 ((PIN_PC00A_EIC_EXTINT0 << 16) | MUX_PC00A_EIC_EXTINT0)
#define PORT_PC00A_EIC_EXTINT0 (_UL_(1) << 0)
#define PIN_PC00A_EIC_EXTINT_NUM _L_(0)
#define PIN_PC16A_EIC_EXTINT0 _L_(80)
#define MUX_PC16A_EIC_EXTINT0 _L_(0)
#define PINMUX_PC16A_EIC_EXTINT0 ((PIN_PC16A_EIC_EXTINT0 << 16) | MUX_PC16A_EIC_EXTINT0)
#define PORT_PC16A_EIC_EXTINT0 (_UL_(1) << 16)
#define PIN_PC16A_EIC_EXTINT_NUM _L_(0)
#define PIN_PD00A_EIC_EXTINT0 _L_(96)
#define MUX_PD00A_EIC_EXTINT0 _L_(0)
#define PINMUX_PD00A_EIC_EXTINT0 ((PIN_PD00A_EIC_EXTINT0 << 16) | MUX_PD00A_EIC_EXTINT0)
#define PORT_PD00A_EIC_EXTINT0 (_UL_(1) << 0)
#define PIN_PD00A_EIC_EXTINT_NUM _L_(0)
#define PIN_PA01A_EIC_EXTINT1 _L_(1)
#define MUX_PA01A_EIC_EXTINT1 _L_(0)
#define PINMUX_PA01A_EIC_EXTINT1 ((PIN_PA01A_EIC_EXTINT1 << 16) | MUX_PA01A_EIC_EXTINT1)
#define PORT_PA01A_EIC_EXTINT1 (_UL_(1) << 1)
#define PIN_PA01A_EIC_EXTINT_NUM _L_(1)
#define PIN_PA17A_EIC_EXTINT1 _L_(17)
#define MUX_PA17A_EIC_EXTINT1 _L_(0)
#define PINMUX_PA17A_EIC_EXTINT1 ((PIN_PA17A_EIC_EXTINT1 << 16) | MUX_PA17A_EIC_EXTINT1)
#define PORT_PA17A_EIC_EXTINT1 (_UL_(1) << 17)
#define PIN_PA17A_EIC_EXTINT_NUM _L_(1)
#define PIN_PB01A_EIC_EXTINT1 _L_(33)
#define MUX_PB01A_EIC_EXTINT1 _L_(0)
#define PINMUX_PB01A_EIC_EXTINT1 ((PIN_PB01A_EIC_EXTINT1 << 16) | MUX_PB01A_EIC_EXTINT1)
#define PORT_PB01A_EIC_EXTINT1 (_UL_(1) << 1)
#define PIN_PB01A_EIC_EXTINT_NUM _L_(1)
#define PIN_PB17A_EIC_EXTINT1 _L_(49)
#define MUX_PB17A_EIC_EXTINT1 _L_(0)
#define PINMUX_PB17A_EIC_EXTINT1 ((PIN_PB17A_EIC_EXTINT1 << 16) | MUX_PB17A_EIC_EXTINT1)
#define PORT_PB17A_EIC_EXTINT1 (_UL_(1) << 17)
#define PIN_PB17A_EIC_EXTINT_NUM _L_(1)
#define PIN_PC01A_EIC_EXTINT1 _L_(65)
#define MUX_PC01A_EIC_EXTINT1 _L_(0)
#define PINMUX_PC01A_EIC_EXTINT1 ((PIN_PC01A_EIC_EXTINT1 << 16) | MUX_PC01A_EIC_EXTINT1)
#define PORT_PC01A_EIC_EXTINT1 (_UL_(1) << 1)
#define PIN_PC01A_EIC_EXTINT_NUM _L_(1)
#define PIN_PC17A_EIC_EXTINT1 _L_(81)
#define MUX_PC17A_EIC_EXTINT1 _L_(0)
#define PINMUX_PC17A_EIC_EXTINT1 ((PIN_PC17A_EIC_EXTINT1 << 16) | MUX_PC17A_EIC_EXTINT1)
#define PORT_PC17A_EIC_EXTINT1 (_UL_(1) << 17)
#define PIN_PC17A_EIC_EXTINT_NUM _L_(1)
#define PIN_PD01A_EIC_EXTINT1 _L_(97)
#define MUX_PD01A_EIC_EXTINT1 _L_(0)
#define PINMUX_PD01A_EIC_EXTINT1 ((PIN_PD01A_EIC_EXTINT1 << 16) | MUX_PD01A_EIC_EXTINT1)
#define PORT_PD01A_EIC_EXTINT1 (_UL_(1) << 1)
#define PIN_PD01A_EIC_EXTINT_NUM _L_(1)
#define PIN_PA02A_EIC_EXTINT2 _L_(2)
#define MUX_PA02A_EIC_EXTINT2 _L_(0)
#define PINMUX_PA02A_EIC_EXTINT2 ((PIN_PA02A_EIC_EXTINT2 << 16) | MUX_PA02A_EIC_EXTINT2)
#define PORT_PA02A_EIC_EXTINT2 (_UL_(1) << 2)
#define PIN_PA02A_EIC_EXTINT_NUM _L_(2)
#define PIN_PA18A_EIC_EXTINT2 _L_(18)
#define MUX_PA18A_EIC_EXTINT2 _L_(0)
#define PINMUX_PA18A_EIC_EXTINT2 ((PIN_PA18A_EIC_EXTINT2 << 16) | MUX_PA18A_EIC_EXTINT2)
#define PORT_PA18A_EIC_EXTINT2 (_UL_(1) << 18)
#define PIN_PA18A_EIC_EXTINT_NUM _L_(2)
#define PIN_PB02A_EIC_EXTINT2 _L_(34)
#define MUX_PB02A_EIC_EXTINT2 _L_(0)
#define PINMUX_PB02A_EIC_EXTINT2 ((PIN_PB02A_EIC_EXTINT2 << 16) | MUX_PB02A_EIC_EXTINT2)
#define PORT_PB02A_EIC_EXTINT2 (_UL_(1) << 2)
#define PIN_PB02A_EIC_EXTINT_NUM _L_(2)
#define PIN_PB18A_EIC_EXTINT2 _L_(50)
#define MUX_PB18A_EIC_EXTINT2 _L_(0)
#define PINMUX_PB18A_EIC_EXTINT2 ((PIN_PB18A_EIC_EXTINT2 << 16) | MUX_PB18A_EIC_EXTINT2)
#define PORT_PB18A_EIC_EXTINT2 (_UL_(1) << 18)
#define PIN_PB18A_EIC_EXTINT_NUM _L_(2)
#define PIN_PC02A_EIC_EXTINT2 _L_(66)
#define MUX_PC02A_EIC_EXTINT2 _L_(0)
#define PINMUX_PC02A_EIC_EXTINT2 ((PIN_PC02A_EIC_EXTINT2 << 16) | MUX_PC02A_EIC_EXTINT2)
#define PORT_PC02A_EIC_EXTINT2 (_UL_(1) << 2)
#define PIN_PC02A_EIC_EXTINT_NUM _L_(2)
#define PIN_PC18A_EIC_EXTINT2 _L_(82)
#define MUX_PC18A_EIC_EXTINT2 _L_(0)
#define PINMUX_PC18A_EIC_EXTINT2 ((PIN_PC18A_EIC_EXTINT2 << 16) | MUX_PC18A_EIC_EXTINT2)
#define PORT_PC18A_EIC_EXTINT2 (_UL_(1) << 18)
#define PIN_PC18A_EIC_EXTINT_NUM _L_(2)
#define PIN_PA03A_EIC_EXTINT3 _L_(3)
#define MUX_PA03A_EIC_EXTINT3 _L_(0)
#define PINMUX_PA03A_EIC_EXTINT3 ((PIN_PA03A_EIC_EXTINT3 << 16) | MUX_PA03A_EIC_EXTINT3)
#define PORT_PA03A_EIC_EXTINT3 (_UL_(1) << 3)
#define PIN_PA03A_EIC_EXTINT_NUM _L_(3)
#define PIN_PA19A_EIC_EXTINT3 _L_(19)
#define MUX_PA19A_EIC_EXTINT3 _L_(0)
#define PINMUX_PA19A_EIC_EXTINT3 ((PIN_PA19A_EIC_EXTINT3 << 16) | MUX_PA19A_EIC_EXTINT3)
#define PORT_PA19A_EIC_EXTINT3 (_UL_(1) << 19)
#define PIN_PA19A_EIC_EXTINT_NUM _L_(3)
#define PIN_PB03A_EIC_EXTINT3 _L_(35)
#define MUX_PB03A_EIC_EXTINT3 _L_(0)
#define PINMUX_PB03A_EIC_EXTINT3 ((PIN_PB03A_EIC_EXTINT3 << 16) | MUX_PB03A_EIC_EXTINT3)
#define PORT_PB03A_EIC_EXTINT3 (_UL_(1) << 3)
#define PIN_PB03A_EIC_EXTINT_NUM _L_(3)
#define PIN_PB19A_EIC_EXTINT3 _L_(51)
#define MUX_PB19A_EIC_EXTINT3 _L_(0)
#define PINMUX_PB19A_EIC_EXTINT3 ((PIN_PB19A_EIC_EXTINT3 << 16) | MUX_PB19A_EIC_EXTINT3)
#define PORT_PB19A_EIC_EXTINT3 (_UL_(1) << 19)
#define PIN_PB19A_EIC_EXTINT_NUM _L_(3)
#define PIN_PC03A_EIC_EXTINT3 _L_(67)
#define MUX_PC03A_EIC_EXTINT3 _L_(0)
#define PINMUX_PC03A_EIC_EXTINT3 ((PIN_PC03A_EIC_EXTINT3 << 16) | MUX_PC03A_EIC_EXTINT3)
#define PORT_PC03A_EIC_EXTINT3 (_UL_(1) << 3)
#define PIN_PC03A_EIC_EXTINT_NUM _L_(3)
#define PIN_PC19A_EIC_EXTINT3 _L_(83)
#define MUX_PC19A_EIC_EXTINT3 _L_(0)
#define PINMUX_PC19A_EIC_EXTINT3 ((PIN_PC19A_EIC_EXTINT3 << 16) | MUX_PC19A_EIC_EXTINT3)
#define PORT_PC19A_EIC_EXTINT3 (_UL_(1) << 19)
#define PIN_PC19A_EIC_EXTINT_NUM _L_(3)
#define PIN_PD08A_EIC_EXTINT3 _L_(104)
#define MUX_PD08A_EIC_EXTINT3 _L_(0)
#define PINMUX_PD08A_EIC_EXTINT3 ((PIN_PD08A_EIC_EXTINT3 << 16) | MUX_PD08A_EIC_EXTINT3)
#define PORT_PD08A_EIC_EXTINT3 (_UL_(1) << 8)
#define PIN_PD08A_EIC_EXTINT_NUM _L_(3)
#define PIN_PA04A_EIC_EXTINT4 _L_(4)
#define MUX_PA04A_EIC_EXTINT4 _L_(0)
#define PINMUX_PA04A_EIC_EXTINT4 ((PIN_PA04A_EIC_EXTINT4 << 16) | MUX_PA04A_EIC_EXTINT4)
#define PORT_PA04A_EIC_EXTINT4 (_UL_(1) << 4)
#define PIN_PA04A_EIC_EXTINT_NUM _L_(4)
#define PIN_PA20A_EIC_EXTINT4 _L_(20)
#define MUX_PA20A_EIC_EXTINT4 _L_(0)
#define PINMUX_PA20A_EIC_EXTINT4 ((PIN_PA20A_EIC_EXTINT4 << 16) | MUX_PA20A_EIC_EXTINT4)
#define PORT_PA20A_EIC_EXTINT4 (_UL_(1) << 20)
#define PIN_PA20A_EIC_EXTINT_NUM _L_(4)
#define PIN_PB04A_EIC_EXTINT4 _L_(36)
#define MUX_PB04A_EIC_EXTINT4 _L_(0)
#define PINMUX_PB04A_EIC_EXTINT4 ((PIN_PB04A_EIC_EXTINT4 << 16) | MUX_PB04A_EIC_EXTINT4)
#define PORT_PB04A_EIC_EXTINT4 (_UL_(1) << 4)
#define PIN_PB04A_EIC_EXTINT_NUM _L_(4)
#define PIN_PB20A_EIC_EXTINT4 _L_(52)
#define MUX_PB20A_EIC_EXTINT4 _L_(0)
#define PINMUX_PB20A_EIC_EXTINT4 ((PIN_PB20A_EIC_EXTINT4 << 16) | MUX_PB20A_EIC_EXTINT4)
#define PORT_PB20A_EIC_EXTINT4 (_UL_(1) << 20)
#define PIN_PB20A_EIC_EXTINT_NUM _L_(4)
#define PIN_PC04A_EIC_EXTINT4 _L_(68)
#define MUX_PC04A_EIC_EXTINT4 _L_(0)
#define PINMUX_PC04A_EIC_EXTINT4 ((PIN_PC04A_EIC_EXTINT4 << 16) | MUX_PC04A_EIC_EXTINT4)
#define PORT_PC04A_EIC_EXTINT4 (_UL_(1) << 4)
#define PIN_PC04A_EIC_EXTINT_NUM _L_(4)
#define PIN_PC20A_EIC_EXTINT4 _L_(84)
#define MUX_PC20A_EIC_EXTINT4 _L_(0)
#define PINMUX_PC20A_EIC_EXTINT4 ((PIN_PC20A_EIC_EXTINT4 << 16) | MUX_PC20A_EIC_EXTINT4)
#define PORT_PC20A_EIC_EXTINT4 (_UL_(1) << 20)
#define PIN_PC20A_EIC_EXTINT_NUM _L_(4)
#define PIN_PD09A_EIC_EXTINT4 _L_(105)
#define MUX_PD09A_EIC_EXTINT4 _L_(0)
#define PINMUX_PD09A_EIC_EXTINT4 ((PIN_PD09A_EIC_EXTINT4 << 16) | MUX_PD09A_EIC_EXTINT4)
#define PORT_PD09A_EIC_EXTINT4 (_UL_(1) << 9)
#define PIN_PD09A_EIC_EXTINT_NUM _L_(4)
#define PIN_PA05A_EIC_EXTINT5 _L_(5)
#define MUX_PA05A_EIC_EXTINT5 _L_(0)
#define PINMUX_PA05A_EIC_EXTINT5 ((PIN_PA05A_EIC_EXTINT5 << 16) | MUX_PA05A_EIC_EXTINT5)
#define PORT_PA05A_EIC_EXTINT5 (_UL_(1) << 5)
#define PIN_PA05A_EIC_EXTINT_NUM _L_(5)
#define PIN_PA21A_EIC_EXTINT5 _L_(21)
#define MUX_PA21A_EIC_EXTINT5 _L_(0)
#define PINMUX_PA21A_EIC_EXTINT5 ((PIN_PA21A_EIC_EXTINT5 << 16) | MUX_PA21A_EIC_EXTINT5)
#define PORT_PA21A_EIC_EXTINT5 (_UL_(1) << 21)
#define PIN_PA21A_EIC_EXTINT_NUM _L_(5)
#define PIN_PB05A_EIC_EXTINT5 _L_(37)
#define MUX_PB05A_EIC_EXTINT5 _L_(0)
#define PINMUX_PB05A_EIC_EXTINT5 ((PIN_PB05A_EIC_EXTINT5 << 16) | MUX_PB05A_EIC_EXTINT5)
#define PORT_PB05A_EIC_EXTINT5 (_UL_(1) << 5)
#define PIN_PB05A_EIC_EXTINT_NUM _L_(5)
#define PIN_PB21A_EIC_EXTINT5 _L_(53)
#define MUX_PB21A_EIC_EXTINT5 _L_(0)
#define PINMUX_PB21A_EIC_EXTINT5 ((PIN_PB21A_EIC_EXTINT5 << 16) | MUX_PB21A_EIC_EXTINT5)
#define PORT_PB21A_EIC_EXTINT5 (_UL_(1) << 21)
#define PIN_PB21A_EIC_EXTINT_NUM _L_(5)
#define PIN_PC05A_EIC_EXTINT5 _L_(69)
#define MUX_PC05A_EIC_EXTINT5 _L_(0)
#define PINMUX_PC05A_EIC_EXTINT5 ((PIN_PC05A_EIC_EXTINT5 << 16) | MUX_PC05A_EIC_EXTINT5)
#define PORT_PC05A_EIC_EXTINT5 (_UL_(1) << 5)
#define PIN_PC05A_EIC_EXTINT_NUM _L_(5)
#define PIN_PC21A_EIC_EXTINT5 _L_(85)
#define MUX_PC21A_EIC_EXTINT5 _L_(0)
#define PINMUX_PC21A_EIC_EXTINT5 ((PIN_PC21A_EIC_EXTINT5 << 16) | MUX_PC21A_EIC_EXTINT5)
#define PORT_PC21A_EIC_EXTINT5 (_UL_(1) << 21)
#define PIN_PC21A_EIC_EXTINT_NUM _L_(5)
#define PIN_PD10A_EIC_EXTINT5 _L_(106)
#define MUX_PD10A_EIC_EXTINT5 _L_(0)
#define PINMUX_PD10A_EIC_EXTINT5 ((PIN_PD10A_EIC_EXTINT5 << 16) | MUX_PD10A_EIC_EXTINT5)
#define PORT_PD10A_EIC_EXTINT5 (_UL_(1) << 10)
#define PIN_PD10A_EIC_EXTINT_NUM _L_(5)
#define PIN_PA06A_EIC_EXTINT6 _L_(6)
#define MUX_PA06A_EIC_EXTINT6 _L_(0)
#define PINMUX_PA06A_EIC_EXTINT6 ((PIN_PA06A_EIC_EXTINT6 << 16) | MUX_PA06A_EIC_EXTINT6)
#define PORT_PA06A_EIC_EXTINT6 (_UL_(1) << 6)
#define PIN_PA06A_EIC_EXTINT_NUM _L_(6)
#define PIN_PA22A_EIC_EXTINT6 _L_(22)
#define MUX_PA22A_EIC_EXTINT6 _L_(0)
#define PINMUX_PA22A_EIC_EXTINT6 ((PIN_PA22A_EIC_EXTINT6 << 16) | MUX_PA22A_EIC_EXTINT6)
#define PORT_PA22A_EIC_EXTINT6 (_UL_(1) << 22)
#define PIN_PA22A_EIC_EXTINT_NUM _L_(6)
#define PIN_PB06A_EIC_EXTINT6 _L_(38)
#define MUX_PB06A_EIC_EXTINT6 _L_(0)
#define PINMUX_PB06A_EIC_EXTINT6 ((PIN_PB06A_EIC_EXTINT6 << 16) | MUX_PB06A_EIC_EXTINT6)
#define PORT_PB06A_EIC_EXTINT6 (_UL_(1) << 6)
#define PIN_PB06A_EIC_EXTINT_NUM _L_(6)
#define PIN_PB22A_EIC_EXTINT6 _L_(54)
#define MUX_PB22A_EIC_EXTINT6 _L_(0)
#define PINMUX_PB22A_EIC_EXTINT6 ((PIN_PB22A_EIC_EXTINT6 << 16) | MUX_PB22A_EIC_EXTINT6)
#define PORT_PB22A_EIC_EXTINT6 (_UL_(1) << 22)
#define PIN_PB22A_EIC_EXTINT_NUM _L_(6)
#define PIN_PC06A_EIC_EXTINT6 _L_(70)
#define MUX_PC06A_EIC_EXTINT6 _L_(0)
#define PINMUX_PC06A_EIC_EXTINT6 ((PIN_PC06A_EIC_EXTINT6 << 16) | MUX_PC06A_EIC_EXTINT6)
#define PORT_PC06A_EIC_EXTINT6 (_UL_(1) << 6)
#define PIN_PC06A_EIC_EXTINT_NUM _L_(6)
#define PIN_PC22A_EIC_EXTINT6 _L_(86)
#define MUX_PC22A_EIC_EXTINT6 _L_(0)
#define PINMUX_PC22A_EIC_EXTINT6 ((PIN_PC22A_EIC_EXTINT6 << 16) | MUX_PC22A_EIC_EXTINT6)
#define PORT_PC22A_EIC_EXTINT6 (_UL_(1) << 22)
#define PIN_PC22A_EIC_EXTINT_NUM _L_(6)
#define PIN_PD11A_EIC_EXTINT6 _L_(107)
#define MUX_PD11A_EIC_EXTINT6 _L_(0)
#define PINMUX_PD11A_EIC_EXTINT6 ((PIN_PD11A_EIC_EXTINT6 << 16) | MUX_PD11A_EIC_EXTINT6)
#define PORT_PD11A_EIC_EXTINT6 (_UL_(1) << 11)
#define PIN_PD11A_EIC_EXTINT_NUM _L_(6)
#define PIN_PA07A_EIC_EXTINT7 _L_(7)
#define MUX_PA07A_EIC_EXTINT7 _L_(0)
#define PINMUX_PA07A_EIC_EXTINT7 ((PIN_PA07A_EIC_EXTINT7 << 16) | MUX_PA07A_EIC_EXTINT7)
#define PORT_PA07A_EIC_EXTINT7 (_UL_(1) << 7)
#define PIN_PA07A_EIC_EXTINT_NUM _L_(7)
#define PIN_PA23A_EIC_EXTINT7 _L_(23)
#define MUX_PA23A_EIC_EXTINT7 _L_(0)
#define PINMUX_PA23A_EIC_EXTINT7 ((PIN_PA23A_EIC_EXTINT7 << 16) | MUX_PA23A_EIC_EXTINT7)
#define PORT_PA23A_EIC_EXTINT7 (_UL_(1) << 23)
#define PIN_PA23A_EIC_EXTINT_NUM _L_(7)
#define PIN_PB07A_EIC_EXTINT7 _L_(39)
#define MUX_PB07A_EIC_EXTINT7 _L_(0)
#define PINMUX_PB07A_EIC_EXTINT7 ((PIN_PB07A_EIC_EXTINT7 << 16) | MUX_PB07A_EIC_EXTINT7)
#define PORT_PB07A_EIC_EXTINT7 (_UL_(1) << 7)
#define PIN_PB07A_EIC_EXTINT_NUM _L_(7)
#define PIN_PB23A_EIC_EXTINT7 _L_(55)
#define MUX_PB23A_EIC_EXTINT7 _L_(0)
#define PINMUX_PB23A_EIC_EXTINT7 ((PIN_PB23A_EIC_EXTINT7 << 16) | MUX_PB23A_EIC_EXTINT7)
#define PORT_PB23A_EIC_EXTINT7 (_UL_(1) << 23)
#define PIN_PB23A_EIC_EXTINT_NUM _L_(7)
#define PIN_PC23A_EIC_EXTINT7 _L_(87)
#define MUX_PC23A_EIC_EXTINT7 _L_(0)
#define PINMUX_PC23A_EIC_EXTINT7 ((PIN_PC23A_EIC_EXTINT7 << 16) | MUX_PC23A_EIC_EXTINT7)
#define PORT_PC23A_EIC_EXTINT7 (_UL_(1) << 23)
#define PIN_PC23A_EIC_EXTINT_NUM _L_(7)
#define PIN_PD12A_EIC_EXTINT7 _L_(108)
#define MUX_PD12A_EIC_EXTINT7 _L_(0)
#define PINMUX_PD12A_EIC_EXTINT7 ((PIN_PD12A_EIC_EXTINT7 << 16) | MUX_PD12A_EIC_EXTINT7)
#define PORT_PD12A_EIC_EXTINT7 (_UL_(1) << 12)
#define PIN_PD12A_EIC_EXTINT_NUM _L_(7)
#define PIN_PA24A_EIC_EXTINT8 _L_(24)
#define MUX_PA24A_EIC_EXTINT8 _L_(0)
#define PINMUX_PA24A_EIC_EXTINT8 ((PIN_PA24A_EIC_EXTINT8 << 16) | MUX_PA24A_EIC_EXTINT8)
#define PORT_PA24A_EIC_EXTINT8 (_UL_(1) << 24)
#define PIN_PA24A_EIC_EXTINT_NUM _L_(8)
#define PIN_PB08A_EIC_EXTINT8 _L_(40)
#define MUX_PB08A_EIC_EXTINT8 _L_(0)
#define PINMUX_PB08A_EIC_EXTINT8 ((PIN_PB08A_EIC_EXTINT8 << 16) | MUX_PB08A_EIC_EXTINT8)
#define PORT_PB08A_EIC_EXTINT8 (_UL_(1) << 8)
#define PIN_PB08A_EIC_EXTINT_NUM _L_(8)
#define PIN_PB24A_EIC_EXTINT8 _L_(56)
#define MUX_PB24A_EIC_EXTINT8 _L_(0)
#define PINMUX_PB24A_EIC_EXTINT8 ((PIN_PB24A_EIC_EXTINT8 << 16) | MUX_PB24A_EIC_EXTINT8)
#define PORT_PB24A_EIC_EXTINT8 (_UL_(1) << 24)
#define PIN_PB24A_EIC_EXTINT_NUM _L_(8)
#define PIN_PC24A_EIC_EXTINT8 _L_(88)
#define MUX_PC24A_EIC_EXTINT8 _L_(0)
#define PINMUX_PC24A_EIC_EXTINT8 ((PIN_PC24A_EIC_EXTINT8 << 16) | MUX_PC24A_EIC_EXTINT8)
#define PORT_PC24A_EIC_EXTINT8 (_UL_(1) << 24)
#define PIN_PC24A_EIC_EXTINT_NUM _L_(8)
#define PIN_PA09A_EIC_EXTINT9 _L_(9)
#define MUX_PA09A_EIC_EXTINT9 _L_(0)
#define PINMUX_PA09A_EIC_EXTINT9 ((PIN_PA09A_EIC_EXTINT9 << 16) | MUX_PA09A_EIC_EXTINT9)
#define PORT_PA09A_EIC_EXTINT9 (_UL_(1) << 9)
#define PIN_PA09A_EIC_EXTINT_NUM _L_(9)
#define PIN_PA25A_EIC_EXTINT9 _L_(25)
#define MUX_PA25A_EIC_EXTINT9 _L_(0)
#define PINMUX_PA25A_EIC_EXTINT9 ((PIN_PA25A_EIC_EXTINT9 << 16) | MUX_PA25A_EIC_EXTINT9)
#define PORT_PA25A_EIC_EXTINT9 (_UL_(1) << 25)
#define PIN_PA25A_EIC_EXTINT_NUM _L_(9)
#define PIN_PB09A_EIC_EXTINT9 _L_(41)
#define MUX_PB09A_EIC_EXTINT9 _L_(0)
#define PINMUX_PB09A_EIC_EXTINT9 ((PIN_PB09A_EIC_EXTINT9 << 16) | MUX_PB09A_EIC_EXTINT9)
#define PORT_PB09A_EIC_EXTINT9 (_UL_(1) << 9)
#define PIN_PB09A_EIC_EXTINT_NUM _L_(9)
#define PIN_PB25A_EIC_EXTINT9 _L_(57)
#define MUX_PB25A_EIC_EXTINT9 _L_(0)
#define PINMUX_PB25A_EIC_EXTINT9 ((PIN_PB25A_EIC_EXTINT9 << 16) | MUX_PB25A_EIC_EXTINT9)
#define PORT_PB25A_EIC_EXTINT9 (_UL_(1) << 25)
#define PIN_PB25A_EIC_EXTINT_NUM _L_(9)
#define PIN_PC07A_EIC_EXTINT9 _L_(71)
#define MUX_PC07A_EIC_EXTINT9 _L_(0)
#define PINMUX_PC07A_EIC_EXTINT9 ((PIN_PC07A_EIC_EXTINT9 << 16) | MUX_PC07A_EIC_EXTINT9)
#define PORT_PC07A_EIC_EXTINT9 (_UL_(1) << 7)
#define PIN_PC07A_EIC_EXTINT_NUM _L_(9)
#define PIN_PC25A_EIC_EXTINT9 _L_(89)
#define MUX_PC25A_EIC_EXTINT9 _L_(0)
#define PINMUX_PC25A_EIC_EXTINT9 ((PIN_PC25A_EIC_EXTINT9 << 16) | MUX_PC25A_EIC_EXTINT9)
#define PORT_PC25A_EIC_EXTINT9 (_UL_(1) << 25)
#define PIN_PC25A_EIC_EXTINT_NUM _L_(9)
#define PIN_PA10A_EIC_EXTINT10 _L_(10)
#define MUX_PA10A_EIC_EXTINT10 _L_(0)
#define PINMUX_PA10A_EIC_EXTINT10 ((PIN_PA10A_EIC_EXTINT10 << 16) | MUX_PA10A_EIC_EXTINT10)
#define PORT_PA10A_EIC_EXTINT10 (_UL_(1) << 10)
#define PIN_PA10A_EIC_EXTINT_NUM _L_(10)
#define PIN_PB10A_EIC_EXTINT10 _L_(42)
#define MUX_PB10A_EIC_EXTINT10 _L_(0)
#define PINMUX_PB10A_EIC_EXTINT10 ((PIN_PB10A_EIC_EXTINT10 << 16) | MUX_PB10A_EIC_EXTINT10)
#define PORT_PB10A_EIC_EXTINT10 (_UL_(1) << 10)
#define PIN_PB10A_EIC_EXTINT_NUM _L_(10)
#define PIN_PC10A_EIC_EXTINT10 _L_(74)
#define MUX_PC10A_EIC_EXTINT10 _L_(0)
#define PINMUX_PC10A_EIC_EXTINT10 ((PIN_PC10A_EIC_EXTINT10 << 16) | MUX_PC10A_EIC_EXTINT10)
#define PORT_PC10A_EIC_EXTINT10 (_UL_(1) << 10)
#define PIN_PC10A_EIC_EXTINT_NUM _L_(10)
#define PIN_PC26A_EIC_EXTINT10 _L_(90)
#define MUX_PC26A_EIC_EXTINT10 _L_(0)
#define PINMUX_PC26A_EIC_EXTINT10 ((PIN_PC26A_EIC_EXTINT10 << 16) | MUX_PC26A_EIC_EXTINT10)
#define PORT_PC26A_EIC_EXTINT10 (_UL_(1) << 26)
#define PIN_PC26A_EIC_EXTINT_NUM _L_(10)
#define PIN_PD20A_EIC_EXTINT10 _L_(116)
#define MUX_PD20A_EIC_EXTINT10 _L_(0)
#define PINMUX_PD20A_EIC_EXTINT10 ((PIN_PD20A_EIC_EXTINT10 << 16) | MUX_PD20A_EIC_EXTINT10)
#define PORT_PD20A_EIC_EXTINT10 (_UL_(1) << 20)
#define PIN_PD20A_EIC_EXTINT_NUM _L_(10)
#define PIN_PA11A_EIC_EXTINT11 _L_(11)
#define MUX_PA11A_EIC_EXTINT11 _L_(0)
#define PINMUX_PA11A_EIC_EXTINT11 ((PIN_PA11A_EIC_EXTINT11 << 16) | MUX_PA11A_EIC_EXTINT11)
#define PORT_PA11A_EIC_EXTINT11 (_UL_(1) << 11)
#define PIN_PA11A_EIC_EXTINT_NUM _L_(11)
#define PIN_PA27A_EIC_EXTINT11 _L_(27)
#define MUX_PA27A_EIC_EXTINT11 _L_(0)
#define PINMUX_PA27A_EIC_EXTINT11 ((PIN_PA27A_EIC_EXTINT11 << 16) | MUX_PA27A_EIC_EXTINT11)
#define PORT_PA27A_EIC_EXTINT11 (_UL_(1) << 27)
#define PIN_PA27A_EIC_EXTINT_NUM _L_(11)
#define PIN_PB11A_EIC_EXTINT11 _L_(43)
#define MUX_PB11A_EIC_EXTINT11 _L_(0)
#define PINMUX_PB11A_EIC_EXTINT11 ((PIN_PB11A_EIC_EXTINT11 << 16) | MUX_PB11A_EIC_EXTINT11)
#define PORT_PB11A_EIC_EXTINT11 (_UL_(1) << 11)
#define PIN_PB11A_EIC_EXTINT_NUM _L_(11)
#define PIN_PC11A_EIC_EXTINT11 _L_(75)
#define MUX_PC11A_EIC_EXTINT11 _L_(0)
#define PINMUX_PC11A_EIC_EXTINT11 ((PIN_PC11A_EIC_EXTINT11 << 16) | MUX_PC11A_EIC_EXTINT11)
#define PORT_PC11A_EIC_EXTINT11 (_UL_(1) << 11)
#define PIN_PC11A_EIC_EXTINT_NUM _L_(11)
#define PIN_PC27A_EIC_EXTINT11 _L_(91)
#define MUX_PC27A_EIC_EXTINT11 _L_(0)
#define PINMUX_PC27A_EIC_EXTINT11 ((PIN_PC27A_EIC_EXTINT11 << 16) | MUX_PC27A_EIC_EXTINT11)
#define PORT_PC27A_EIC_EXTINT11 (_UL_(1) << 27)
#define PIN_PC27A_EIC_EXTINT_NUM _L_(11)
#define PIN_PD21A_EIC_EXTINT11 _L_(117)
#define MUX_PD21A_EIC_EXTINT11 _L_(0)
#define PINMUX_PD21A_EIC_EXTINT11 ((PIN_PD21A_EIC_EXTINT11 << 16) | MUX_PD21A_EIC_EXTINT11)
#define PORT_PD21A_EIC_EXTINT11 (_UL_(1) << 21)
#define PIN_PD21A_EIC_EXTINT_NUM _L_(11)
#define PIN_PA12A_EIC_EXTINT12 _L_(12)
#define MUX_PA12A_EIC_EXTINT12 _L_(0)
#define PINMUX_PA12A_EIC_EXTINT12 ((PIN_PA12A_EIC_EXTINT12 << 16) | MUX_PA12A_EIC_EXTINT12)
#define PORT_PA12A_EIC_EXTINT12 (_UL_(1) << 12)
#define PIN_PA12A_EIC_EXTINT_NUM _L_(12)
#define PIN_PB12A_EIC_EXTINT12 _L_(44)
#define MUX_PB12A_EIC_EXTINT12 _L_(0)
#define PINMUX_PB12A_EIC_EXTINT12 ((PIN_PB12A_EIC_EXTINT12 << 16) | MUX_PB12A_EIC_EXTINT12)
#define PORT_PB12A_EIC_EXTINT12 (_UL_(1) << 12)
#define PIN_PB12A_EIC_EXTINT_NUM _L_(12)
#define PIN_PB26A_EIC_EXTINT12 _L_(58)
#define MUX_PB26A_EIC_EXTINT12 _L_(0)
#define PINMUX_PB26A_EIC_EXTINT12 ((PIN_PB26A_EIC_EXTINT12 << 16) | MUX_PB26A_EIC_EXTINT12)
#define PORT_PB26A_EIC_EXTINT12 (_UL_(1) << 26)
#define PIN_PB26A_EIC_EXTINT_NUM _L_(12)
#define PIN_PC12A_EIC_EXTINT12 _L_(76)
#define MUX_PC12A_EIC_EXTINT12 _L_(0)
#define PINMUX_PC12A_EIC_EXTINT12 ((PIN_PC12A_EIC_EXTINT12 << 16) | MUX_PC12A_EIC_EXTINT12)
#define PORT_PC12A_EIC_EXTINT12 (_UL_(1) << 12)
#define PIN_PC12A_EIC_EXTINT_NUM _L_(12)
#define PIN_PC28A_EIC_EXTINT12 _L_(92)
#define MUX_PC28A_EIC_EXTINT12 _L_(0)
#define PINMUX_PC28A_EIC_EXTINT12 ((PIN_PC28A_EIC_EXTINT12 << 16) | MUX_PC28A_EIC_EXTINT12)
#define PORT_PC28A_EIC_EXTINT12 (_UL_(1) << 28)
#define PIN_PC28A_EIC_EXTINT_NUM _L_(12)
#define PIN_PA13A_EIC_EXTINT13 _L_(13)
#define MUX_PA13A_EIC_EXTINT13 _L_(0)
#define PINMUX_PA13A_EIC_EXTINT13 ((PIN_PA13A_EIC_EXTINT13 << 16) | MUX_PA13A_EIC_EXTINT13)
#define PORT_PA13A_EIC_EXTINT13 (_UL_(1) << 13)
#define PIN_PA13A_EIC_EXTINT_NUM _L_(13)
#define PIN_PB13A_EIC_EXTINT13 _L_(45)
#define MUX_PB13A_EIC_EXTINT13 _L_(0)
#define PINMUX_PB13A_EIC_EXTINT13 ((PIN_PB13A_EIC_EXTINT13 << 16) | MUX_PB13A_EIC_EXTINT13)
#define PORT_PB13A_EIC_EXTINT13 (_UL_(1) << 13)
#define PIN_PB13A_EIC_EXTINT_NUM _L_(13)
#define PIN_PB27A_EIC_EXTINT13 _L_(59)
#define MUX_PB27A_EIC_EXTINT13 _L_(0)
#define PINMUX_PB27A_EIC_EXTINT13 ((PIN_PB27A_EIC_EXTINT13 << 16) | MUX_PB27A_EIC_EXTINT13)
#define PORT_PB27A_EIC_EXTINT13 (_UL_(1) << 27)
#define PIN_PB27A_EIC_EXTINT_NUM _L_(13)
#define PIN_PC13A_EIC_EXTINT13 _L_(77)
#define MUX_PC13A_EIC_EXTINT13 _L_(0)
#define PINMUX_PC13A_EIC_EXTINT13 ((PIN_PC13A_EIC_EXTINT13 << 16) | MUX_PC13A_EIC_EXTINT13)
#define PORT_PC13A_EIC_EXTINT13 (_UL_(1) << 13)
#define PIN_PC13A_EIC_EXTINT_NUM _L_(13)
#define PIN_PA30A_EIC_EXTINT14 _L_(30)
#define MUX_PA30A_EIC_EXTINT14 _L_(0)
#define PINMUX_PA30A_EIC_EXTINT14 ((PIN_PA30A_EIC_EXTINT14 << 16) | MUX_PA30A_EIC_EXTINT14)
#define PORT_PA30A_EIC_EXTINT14 (_UL_(1) << 30)
#define PIN_PA30A_EIC_EXTINT_NUM _L_(14)
#define PIN_PB14A_EIC_EXTINT14 _L_(46)
#define MUX_PB14A_EIC_EXTINT14 _L_(0)
#define PINMUX_PB14A_EIC_EXTINT14 ((PIN_PB14A_EIC_EXTINT14 << 16) | MUX_PB14A_EIC_EXTINT14)
#define PORT_PB14A_EIC_EXTINT14 (_UL_(1) << 14)
#define PIN_PB14A_EIC_EXTINT_NUM _L_(14)
#define PIN_PB28A_EIC_EXTINT14 _L_(60)
#define MUX_PB28A_EIC_EXTINT14 _L_(0)
#define PINMUX_PB28A_EIC_EXTINT14 ((PIN_PB28A_EIC_EXTINT14 << 16) | MUX_PB28A_EIC_EXTINT14)
#define PORT_PB28A_EIC_EXTINT14 (_UL_(1) << 28)
#define PIN_PB28A_EIC_EXTINT_NUM _L_(14)
#define PIN_PB30A_EIC_EXTINT14 _L_(62)
#define MUX_PB30A_EIC_EXTINT14 _L_(0)
#define PINMUX_PB30A_EIC_EXTINT14 ((PIN_PB30A_EIC_EXTINT14 << 16) | MUX_PB30A_EIC_EXTINT14)
#define PORT_PB30A_EIC_EXTINT14 (_UL_(1) << 30)
#define PIN_PB30A_EIC_EXTINT_NUM _L_(14)
#define PIN_PC14A_EIC_EXTINT14 _L_(78)
#define MUX_PC14A_EIC_EXTINT14 _L_(0)
#define PINMUX_PC14A_EIC_EXTINT14 ((PIN_PC14A_EIC_EXTINT14 << 16) | MUX_PC14A_EIC_EXTINT14)
#define PORT_PC14A_EIC_EXTINT14 (_UL_(1) << 14)
#define PIN_PC14A_EIC_EXTINT_NUM _L_(14)
#define PIN_PC30A_EIC_EXTINT14 _L_(94)
#define MUX_PC30A_EIC_EXTINT14 _L_(0)
#define PINMUX_PC30A_EIC_EXTINT14 ((PIN_PC30A_EIC_EXTINT14 << 16) | MUX_PC30A_EIC_EXTINT14)
#define PORT_PC30A_EIC_EXTINT14 (_UL_(1) << 30)
#define PIN_PC30A_EIC_EXTINT_NUM _L_(14)
#define PIN_PA14A_EIC_EXTINT14 _L_(14)
#define MUX_PA14A_EIC_EXTINT14 _L_(0)
#define PINMUX_PA14A_EIC_EXTINT14 ((PIN_PA14A_EIC_EXTINT14 << 16) | MUX_PA14A_EIC_EXTINT14)
#define PORT_PA14A_EIC_EXTINT14 (_UL_(1) << 14)
#define PIN_PA14A_EIC_EXTINT_NUM _L_(14)
#define PIN_PA15A_EIC_EXTINT15 _L_(15)
#define MUX_PA15A_EIC_EXTINT15 _L_(0)
#define PINMUX_PA15A_EIC_EXTINT15 ((PIN_PA15A_EIC_EXTINT15 << 16) | MUX_PA15A_EIC_EXTINT15)
#define PORT_PA15A_EIC_EXTINT15 (_UL_(1) << 15)
#define PIN_PA15A_EIC_EXTINT_NUM _L_(15)
#define PIN_PA31A_EIC_EXTINT15 _L_(31)
#define MUX_PA31A_EIC_EXTINT15 _L_(0)
#define PINMUX_PA31A_EIC_EXTINT15 ((PIN_PA31A_EIC_EXTINT15 << 16) | MUX_PA31A_EIC_EXTINT15)
#define PORT_PA31A_EIC_EXTINT15 (_UL_(1) << 31)
#define PIN_PA31A_EIC_EXTINT_NUM _L_(15)
#define PIN_PB15A_EIC_EXTINT15 _L_(47)
#define MUX_PB15A_EIC_EXTINT15 _L_(0)
#define PINMUX_PB15A_EIC_EXTINT15 ((PIN_PB15A_EIC_EXTINT15 << 16) | MUX_PB15A_EIC_EXTINT15)
#define PORT_PB15A_EIC_EXTINT15 (_UL_(1) << 15)
#define PIN_PB15A_EIC_EXTINT_NUM _L_(15)
#define PIN_PB29A_EIC_EXTINT15 _L_(61)
#define MUX_PB29A_EIC_EXTINT15 _L_(0)
#define PINMUX_PB29A_EIC_EXTINT15 ((PIN_PB29A_EIC_EXTINT15 << 16) | MUX_PB29A_EIC_EXTINT15)
#define PORT_PB29A_EIC_EXTINT15 (_UL_(1) << 29)
#define PIN_PB29A_EIC_EXTINT_NUM _L_(15)
#define PIN_PB31A_EIC_EXTINT15 _L_(63)
#define MUX_PB31A_EIC_EXTINT15 _L_(0)
#define PINMUX_PB31A_EIC_EXTINT15 ((PIN_PB31A_EIC_EXTINT15 << 16) | MUX_PB31A_EIC_EXTINT15)
#define PORT_PB31A_EIC_EXTINT15 (_UL_(1) << 31)
#define PIN_PB31A_EIC_EXTINT_NUM _L_(15)
#define PIN_PC15A_EIC_EXTINT15 _L_(79)
#define MUX_PC15A_EIC_EXTINT15 _L_(0)
#define PINMUX_PC15A_EIC_EXTINT15 ((PIN_PC15A_EIC_EXTINT15 << 16) | MUX_PC15A_EIC_EXTINT15)
#define PORT_PC15A_EIC_EXTINT15 (_UL_(1) << 15)
#define PIN_PC15A_EIC_EXTINT_NUM _L_(15)
#define PIN_PC31A_EIC_EXTINT15 _L_(95)
#define MUX_PC31A_EIC_EXTINT15 _L_(0)
#define PINMUX_PC31A_EIC_EXTINT15 ((PIN_PC31A_EIC_EXTINT15 << 16) | MUX_PC31A_EIC_EXTINT15)
#define PORT_PC31A_EIC_EXTINT15 (_UL_(1) << 31)
#define PIN_PC31A_EIC_EXTINT_NUM _L_(15)
#define PIN_PA08A_EIC_NMI _L_(8)
#define MUX_PA08A_EIC_NMI _L_(0)
#define PINMUX_PA08A_EIC_NMI ((PIN_PA08A_EIC_NMI << 16) | MUX_PA08A_EIC_NMI)
#define PORT_PA08A_EIC_NMI (_UL_(1) << 8)

#define PIN_PA04D_SERCOM0_PAD0 _L_(4)
#define MUX_PA04D_SERCOM0_PAD0 _L_(3)
#define PINMUX_PA04D_SERCOM0_PAD0 ((PIN_PA04D_SERCOM0_PAD0 << 16) | MUX_PA04D_SERCOM0_PAD0)
#define PORT_PA04D_SERCOM0_PAD0 (_UL_(1) << 4)
#define PIN_PC17D_SERCOM0_PAD0 _L_(81)
#define MUX_PC17D_SERCOM0_PAD0 _L_(3)
#define PINMUX_PC17D_SERCOM0_PAD0 ((PIN_PC17D_SERCOM0_PAD0 << 16) | MUX_PC17D_SERCOM0_PAD0)
#define PORT_PC17D_SERCOM0_PAD0 (_UL_(1) << 17)
#define PIN_PA08C_SERCOM0_PAD0 _L_(8)
#define MUX_PA08C_SERCOM0_PAD0 _L_(2)
#define PINMUX_PA08C_SERCOM0_PAD0 ((PIN_PA08C_SERCOM0_PAD0 << 16) | MUX_PA08C_SERCOM0_PAD0)
#define PORT_PA08C_SERCOM0_PAD0 (_UL_(1) << 8)
#define PIN_PB24C_SERCOM0_PAD0 _L_(56)
#define MUX_PB24C_SERCOM0_PAD0 _L_(2)
#define PINMUX_PB24C_SERCOM0_PAD0 ((PIN_PB24C_SERCOM0_PAD0 << 16) | MUX_PB24C_SERCOM0_PAD0)
#define PORT_PB24C_SERCOM0_PAD0 (_UL_(1) << 24)
#define PIN_PA05D_SERCOM0_PAD1 _L_(5)
#define MUX_PA05D_SERCOM0_PAD1 _L_(3)
#define PINMUX_PA05D_SERCOM0_PAD1 ((PIN_PA05D_SERCOM0_PAD1 << 16) | MUX_PA05D_SERCOM0_PAD1)
#define PORT_PA05D_SERCOM0_PAD1 (_UL_(1) << 5)
#define PIN_PC16D_SERCOM0_PAD1 _L_(80)
#define MUX_PC16D_SERCOM0_PAD1 _L_(3)
#define PINMUX_PC16D_SERCOM0_PAD1 ((PIN_PC16D_SERCOM0_PAD1 << 16) | MUX_PC16D_SERCOM0_PAD1)
#define PORT_PC16D_SERCOM0_PAD1 (_UL_(1) << 16)
#define PIN_PA09C_SERCOM0_PAD1 _L_(9)
#define MUX_PA09C_SERCOM0_PAD1 _L_(2)
#define PINMUX_PA09C_SERCOM0_PAD1 ((PIN_PA09C_SERCOM0_PAD1 << 16) | MUX_PA09C_SERCOM0_PAD1)
#define PORT_PA09C_SERCOM0_PAD1 (_UL_(1) << 9)
#define PIN_PB25C_SERCOM0_PAD1 _L_(57)
#define MUX_PB25C_SERCOM0_PAD1 _L_(2)
#define PINMUX_PB25C_SERCOM0_PAD1 ((PIN_PB25C_SERCOM0_PAD1 << 16) | MUX_PB25C_SERCOM0_PAD1)
#define PORT_PB25C_SERCOM0_PAD1 (_UL_(1) << 25)
#define PIN_PA06D_SERCOM0_PAD2 _L_(6)
#define MUX_PA06D_SERCOM0_PAD2 _L_(3)
#define PINMUX_PA06D_SERCOM0_PAD2 ((PIN_PA06D_SERCOM0_PAD2 << 16) | MUX_PA06D_SERCOM0_PAD2)
#define PORT_PA06D_SERCOM0_PAD2 (_UL_(1) << 6)
#define PIN_PC18D_SERCOM0_PAD2 _L_(82)
#define MUX_PC18D_SERCOM0_PAD2 _L_(3)
#define PINMUX_PC18D_SERCOM0_PAD2 ((PIN_PC18D_SERCOM0_PAD2 << 16) | MUX_PC18D_SERCOM0_PAD2)
#define PORT_PC18D_SERCOM0_PAD2 (_UL_(1) << 18)
#define PIN_PA10C_SERCOM0_PAD2 _L_(10)
#define MUX_PA10C_SERCOM0_PAD2 _L_(2)
#define PINMUX_PA10C_SERCOM0_PAD2 ((PIN_PA10C_SERCOM0_PAD2 << 16) | MUX_PA10C_SERCOM0_PAD2)
#define PORT_PA10C_SERCOM0_PAD2 (_UL_(1) << 10)
#define PIN_PC24C_SERCOM0_PAD2 _L_(88)
#define MUX_PC24C_SERCOM0_PAD2 _L_(2)
#define PINMUX_PC24C_SERCOM0_PAD2 ((PIN_PC24C_SERCOM0_PAD2 << 16) | MUX_PC24C_SERCOM0_PAD2)
#define PORT_PC24C_SERCOM0_PAD2 (_UL_(1) << 24)
#define PIN_PA07D_SERCOM0_PAD3 _L_(7)
#define MUX_PA07D_SERCOM0_PAD3 _L_(3)
#define PINMUX_PA07D_SERCOM0_PAD3 ((PIN_PA07D_SERCOM0_PAD3 << 16) | MUX_PA07D_SERCOM0_PAD3)
#define PORT_PA07D_SERCOM0_PAD3 (_UL_(1) << 7)
#define PIN_PC19D_SERCOM0_PAD3 _L_(83)
#define MUX_PC19D_SERCOM0_PAD3 _L_(3)
#define PINMUX_PC19D_SERCOM0_PAD3 ((PIN_PC19D_SERCOM0_PAD3 << 16) | MUX_PC19D_SERCOM0_PAD3)
#define PORT_PC19D_SERCOM0_PAD3 (_UL_(1) << 19)
#define PIN_PA11C_SERCOM0_PAD3 _L_(11)
#define MUX_PA11C_SERCOM0_PAD3 _L_(2)
#define PINMUX_PA11C_SERCOM0_PAD3 ((PIN_PA11C_SERCOM0_PAD3 << 16) | MUX_PA11C_SERCOM0_PAD3)
#define PORT_PA11C_SERCOM0_PAD3 (_UL_(1) << 11)
#define PIN_PC25C_SERCOM0_PAD3 _L_(89)
#define MUX_PC25C_SERCOM0_PAD3 _L_(2)
#define PINMUX_PC25C_SERCOM0_PAD3 ((PIN_PC25C_SERCOM0_PAD3 << 16) | MUX_PC25C_SERCOM0_PAD3)
#define PORT_PC25C_SERCOM0_PAD3 (_UL_(1) << 25)

#define PIN_PA00D_SERCOM1_PAD0 _L_(0)
#define MUX_PA00D_SERCOM1_PAD0 _L_(3)
#define PINMUX_PA00D_SERCOM1_PAD0 ((PIN_PA00D_SERCOM1_PAD0 << 16) | MUX_PA00D_SERCOM1_PAD0)
#define PORT_PA00D_SERCOM1_PAD0 (_UL_(1) << 0)
#define PIN_PA16C_SERCOM1_PAD0 _L_(16)
#define MUX_PA16C_SERCOM1_PAD0 _L_(2)
#define PINMUX_PA16C_SERCOM1_PAD0 ((PIN_PA16C_SERCOM1_PAD0 << 16) | MUX_PA16C_SERCOM1_PAD0)
#define PORT_PA16C_SERCOM1_PAD0 (_UL_(1) << 16)
#define PIN_PC22C_SERCOM1_PAD0 _L_(86)
#define MUX_PC22C_SERCOM1_PAD0 _L_(2)
#define PINMUX_PC22C_SERCOM1_PAD0 ((PIN_PC22C_SERCOM1_PAD0 << 16) | MUX_PC22C_SERCOM1_PAD0)
#define PORT_PC22C_SERCOM1_PAD0 (_UL_(1) << 22)
#define PIN_PC27C_SERCOM1_PAD0 _L_(91)
#define MUX_PC27C_SERCOM1_PAD0 _L_(2)
#define PINMUX_PC27C_SERCOM1_PAD0 ((PIN_PC27C_SERCOM1_PAD0 << 16) | MUX_PC27C_SERCOM1_PAD0)
#define PORT_PC27C_SERCOM1_PAD0 (_UL_(1) << 27)
#define PIN_PA01D_SERCOM1_PAD1 _L_(1)
#define MUX_PA01D_SERCOM1_PAD1 _L_(3)
#define PINMUX_PA01D_SERCOM1_PAD1 ((PIN_PA01D_SERCOM1_PAD1 << 16) | MUX_PA01D_SERCOM1_PAD1)
#define PORT_PA01D_SERCOM1_PAD1 (_UL_(1) << 1)
#define PIN_PA17C_SERCOM1_PAD1 _L_(17)
#define MUX_PA17C_SERCOM1_PAD1 _L_(2)
#define PINMUX_PA17C_SERCOM1_PAD1 ((PIN_PA17C_SERCOM1_PAD1 << 16) | MUX_PA17C_SERCOM1_PAD1)
#define PORT_PA17C_SERCOM1_PAD1 (_UL_(1) << 17)
#define PIN_PC23C_SERCOM1_PAD1 _L_(87)
#define MUX_PC23C_SERCOM1_PAD1 _L_(2)
#define PINMUX_PC23C_SERCOM1_PAD1 ((PIN_PC23C_SERCOM1_PAD1 << 16) | MUX_PC23C_SERCOM1_PAD1)
#define PORT_PC23C_SERCOM1_PAD1 (_UL_(1) << 23)
#define PIN_PC28C_SERCOM1_PAD1 _L_(92)
#define MUX_PC28C_SERCOM1_PAD1 _L_(2)
#define PINMUX_PC28C_SERCOM1_PAD1 ((PIN_PC28C_SERCOM1_PAD1 << 16) | MUX_PC28C_SERCOM1_PAD1)
#define PORT_PC28C_SERCOM1_PAD1 (_UL_(1) << 28)
#define PIN_PA30D_SERCOM1_PAD2 _L_(30)
#define MUX_PA30D_SERCOM1_PAD2 _L_(3)
#define PINMUX_PA30D_SERCOM1_PAD2 ((PIN_PA30D_SERCOM1_PAD2 << 16) | MUX_PA30D_SERCOM1_PAD2)
#define PORT_PA30D_SERCOM1_PAD2 (_UL_(1) << 30)
#define PIN_PA18C_SERCOM1_PAD2 _L_(18)
#define MUX_PA18C_SERCOM1_PAD2 _L_(2)
#define PINMUX_PA18C_SERCOM1_PAD2 ((PIN_PA18C_SERCOM1_PAD2 << 16) | MUX_PA18C_SERCOM1_PAD2)
#define PORT_PA18C_SERCOM1_PAD2 (_UL_(1) << 18)
#define PIN_PB22C_SERCOM1_PAD2 _L_(54)
#define MUX_PB22C_SERCOM1_PAD2 _L_(2)
#define PINMUX_PB22C_SERCOM1_PAD2 ((PIN_PB22C_SERCOM1_PAD2 << 16) | MUX_PB22C_SERCOM1_PAD2)
#define PORT_PB22C_SERCOM1_PAD2 (_UL_(1) << 22)
#define PIN_PD20C_SERCOM1_PAD2 _L_(116)
#define MUX_PD20C_SERCOM1_PAD2 _L_(2)
#define PINMUX_PD20C_SERCOM1_PAD2 ((PIN_PD20C_SERCOM1_PAD2 << 16) | MUX_PD20C_SERCOM1_PAD2)
#define PORT_PD20C_SERCOM1_PAD2 (_UL_(1) << 20)
#define PIN_PA31D_SERCOM1_PAD3 _L_(31)
#define MUX_PA31D_SERCOM1_PAD3 _L_(3)
#define PINMUX_PA31D_SERCOM1_PAD3 ((PIN_PA31D_SERCOM1_PAD3 << 16) | MUX_PA31D_SERCOM1_PAD3)
#define PORT_PA31D_SERCOM1_PAD3 (_UL_(1) << 31)
#define PIN_PA19C_SERCOM1_PAD3 _L_(19)
#define MUX_PA19C_SERCOM1_PAD3 _L_(2)
#define PINMUX_PA19C_SERCOM1_PAD3 ((PIN_PA19C_SERCOM1_PAD3 << 16) | MUX_PA19C_SERCOM1_PAD3)
#define PORT_PA19C_SERCOM1_PAD3 (_UL_(1) << 19)
#define PIN_PB23C_SERCOM1_PAD3 _L_(55)
#define MUX_PB23C_SERCOM1_PAD3 _L_(2)
#define PINMUX_PB23C_SERCOM1_PAD3 ((PIN_PB23C_SERCOM1_PAD3 << 16) | MUX_PB23C_SERCOM1_PAD3)
#define PORT_PB23C_SERCOM1_PAD3 (_UL_(1) << 23)
#define PIN_PD21C_SERCOM1_PAD3 _L_(117)
#define MUX_PD21C_SERCOM1_PAD3 _L_(2)
#define PINMUX_PD21C_SERCOM1_PAD3 ((PIN_PD21C_SERCOM1_PAD3 << 16) | MUX_PD21C_SERCOM1_PAD3)
#define PORT_PD21C_SERCOM1_PAD3 (_UL_(1) << 21)

#define PIN_PA04E_TC0_WO0 _L_(4)
#define MUX_PA04E_TC0_WO0 _L_(4)
#define PINMUX_PA04E_TC0_WO0 ((PIN_PA04E_TC0_WO0 << 16) | MUX_PA04E_TC0_WO0)
#define PORT_PA04E_TC0_WO0 (_UL_(1) << 4)
#define PIN_PA08E_TC0_WO0 _L_(8)
#define MUX_PA08E_TC0_WO0 _L_(4)
#define PINMUX_PA08E_TC0_WO0 ((PIN_PA08E_TC0_WO0 << 16) | MUX_PA08E_TC0_WO0)
#define PORT_PA08E_TC0_WO0 (_UL_(1) << 8)
#define PIN_PB30E_TC0_WO0 _L_(62)
#define MUX_PB30E_TC0_WO0 _L_(4)
#define PINMUX_PB30E_TC0_WO0 ((PIN_PB30E_TC0_WO0 << 16) | MUX_PB30E_TC0_WO0)
#define PORT_PB30E_TC0_WO0 (_UL_(1) << 30)
#define PIN_PA05E_TC0_WO1 _L_(5)
#define MUX_PA05E_TC0_WO1 _L_(4)
#define PINMUX_PA05E_TC0_WO1 ((PIN_PA05E_TC0_WO1 << 16) | MUX_PA05E_TC0_WO1)
#define PORT_PA05E_TC0_WO1 (_UL_(1) << 5)
#define PIN_PA09E_TC0_WO1 _L_(9)
#define MUX_PA09E_TC0_WO1 _L_(4)
#define PINMUX_PA09E_TC0_WO1 ((PIN_PA09E_TC0_WO1 << 16) | MUX_PA09E_TC0_WO1)
#define PORT_PA09E_TC0_WO1 (_UL_(1) << 9)
#define PIN_PB31E_TC0_WO1 _L_(63)
#define MUX_PB31E_TC0_WO1 _L_(4)
#define PINMUX_PB31E_TC0_WO1 ((PIN_PB31E_TC0_WO1 << 16) | MUX_PB31E_TC0_WO1)
#define PORT_PB31E_TC0_WO1 (_UL_(1) << 31)

#define PIN_PA06E_TC1_WO0 _L_(6)
#define MUX_PA06E_TC1_WO0 _L_(4)
#define PINMUX_PA06E_TC1_WO0 ((PIN_PA06E_TC1_WO0 << 16) | MUX_PA06E_TC1_WO0)
#define PORT_PA06E_TC1_WO0 (_UL_(1) << 6)
#define PIN_PA10E_TC1_WO0 _L_(10)
#define MUX_PA10E_TC1_WO0 _L_(4)
#define PINMUX_PA10E_TC1_WO0 ((PIN_PA10E_TC1_WO0 << 16) | MUX_PA10E_TC1_WO0)
#define PORT_PA10E_TC1_WO0 (_UL_(1) << 10)
#define PIN_PA07E_TC1_WO1 _L_(7)
#define MUX_PA07E_TC1_WO1 _L_(4)
#define PINMUX_PA07E_TC1_WO1 ((PIN_PA07E_TC1_WO1 << 16) | MUX_PA07E_TC1_WO1)
#define PORT_PA07E_TC1_WO1 (_UL_(1) << 7)
#define PIN_PA11E_TC1_WO1 _L_(11)
#define MUX_PA11E_TC1_WO1 _L_(4)
#define PINMUX_PA11E_TC1_WO1 ((PIN_PA11E_TC1_WO1 << 16) | MUX_PA11E_TC1_WO1)
#define PORT_PA11E_TC1_WO1 (_UL_(1) << 11)

#define PIN_PA24H_USB_DM _L_(24)
#define MUX_PA24H_USB_DM _L_(7)
#define PINMUX_PA24H_USB_DM ((PIN_PA24H_USB_DM << 16) | MUX_PA24H_USB_DM)
#define PORT_PA24H_USB_DM (_UL_(1) << 24)
#define PIN_PA25H_USB_DP _L_(25)
#define MUX_PA25H_USB_DP _L_(7)
#define PINMUX_PA25H_USB_DP ((PIN_PA25H_USB_DP << 16) | MUX_PA25H_USB_DP)
#define PORT_PA25H_USB_DP (_UL_(1) << 25)
#define PIN_PA23H_USB_SOF_1KHZ _L_(23)
#define MUX_PA23H_USB_SOF_1KHZ _L_(7)
#define PINMUX_PA23H_USB_SOF_1KHZ ((PIN_PA23H_USB_SOF_1KHZ << 16) | MUX_PA23H_USB_SOF_1KHZ)
#define PORT_PA23H_USB_SOF_1KHZ (_UL_(1) << 23)
#define PIN_PB22H_USB_SOF_1KHZ _L_(54)
#define MUX_PB22H_USB_SOF_1KHZ _L_(7)
#define PINMUX_PB22H_USB_SOF_1KHZ ((PIN_PB22H_USB_SOF_1KHZ << 16) | MUX_PB22H_USB_SOF_1KHZ)
#define PORT_PB22H_USB_SOF_1KHZ (_UL_(1) << 22)

#define PIN_PA09D_SERCOM2_PAD0 _L_(9)
#define MUX_PA09D_SERCOM2_PAD0 _L_(3)
#define PINMUX_PA09D_SERCOM2_PAD0 ((PIN_PA09D_SERCOM2_PAD0 << 16) | MUX_PA09D_SERCOM2_PAD0)
#define PORT_PA09D_SERCOM2_PAD0 (_UL_(1) << 9)
#define PIN_PB25D_SERCOM2_PAD0 _L_(57)
#define MUX_PB25D_SERCOM2_PAD0 _L_(3)
#define PINMUX_PB25D_SERCOM2_PAD0 ((PIN_PB25D_SERCOM2_PAD0 << 16) | MUX_PB25D_SERCOM2_PAD0)
#define PORT_PB25D_SERCOM2_PAD0 (_UL_(1) << 25)
#define PIN_PA12C_SERCOM2_PAD0 _L_(12)
#define MUX_PA12C_SERCOM2_PAD0 _L_(2)
#define PINMUX_PA12C_SERCOM2_PAD0 ((PIN_PA12C_SERCOM2_PAD0 << 16) | MUX_PA12C_SERCOM2_PAD0)
#define PORT_PA12C_SERCOM2_PAD0 (_UL_(1) << 12)
#define PIN_PB26C_SERCOM2_PAD0 _L_(58)
#define MUX_PB26C_SERCOM2_PAD0 _L_(2)
#define PINMUX_PB26C_SERCOM2_PAD0 ((PIN_PB26C_SERCOM2_PAD0 << 16) | MUX_PB26C_SERCOM2_PAD0)
#define PORT_PB26C_SERCOM2_PAD0 (_UL_(1) << 26)
#define PIN_PA08D_SERCOM2_PAD1 _L_(8)
#define MUX_PA08D_SERCOM2_PAD1 _L_(3)
#define PINMUX_PA08D_SERCOM2_PAD1 ((PIN_PA08D_SERCOM2_PAD1 << 16) | MUX_PA08D_SERCOM2_PAD1)
#define PORT_PA08D_SERCOM2_PAD1 (_UL_(1) << 8)
#define PIN_PB24D_SERCOM2_PAD1 _L_(56)
#define MUX_PB24D_SERCOM2_PAD1 _L_(3)
#define PINMUX_PB24D_SERCOM2_PAD1 ((PIN_PB24D_SERCOM2_PAD1 << 16) | MUX_PB24D_SERCOM2_PAD1)
#define PORT_PB24D_SERCOM2_PAD1 (_UL_(1) << 24)
#define PIN_PA13C_SERCOM2_PAD1 _L_(13)
#define MUX_PA13C_SERCOM2_PAD1 _L_(2)
#define PINMUX_PA13C_SERCOM2_PAD1 ((PIN_PA13C_SERCOM2_PAD1 << 16) | MUX_PA13C_SERCOM2_PAD1)
#define PORT_PA13C_SERCOM2_PAD1 (_UL_(1) << 13)
#define PIN_PB27C_SERCOM2_PAD1 _L_(59)
#define MUX_PB27C_SERCOM2_PAD1 _L_(2)
#define PINMUX_PB27C_SERCOM2_PAD1 ((PIN_PB27C_SERCOM2_PAD1 << 16) | MUX_PB27C_SERCOM2_PAD1)
#define PORT_PB27C_SERCOM2_PAD1 (_UL_(1) << 27)
#define PIN_PA10D_SERCOM2_PAD2 _L_(10)
#define MUX_PA10D_SERCOM2_PAD2 _L_(3)
#define PINMUX_PA10D_SERCOM2_PAD2 ((PIN_PA10D_SERCOM2_PAD2 << 16) | MUX_PA10D_SERCOM2_PAD2)
#define PORT_PA10D_SERCOM2_PAD2 (_UL_(1) << 10)
#define PIN_PC24D_SERCOM2_PAD2 _L_(88)
#define MUX_PC24D_SERCOM2_PAD2 _L_(3)
#define PINMUX_PC24D_SERCOM2_PAD2 ((PIN_PC24D_SERCOM2_PAD2 << 16) | MUX_PC24D_SERCOM2_PAD2)
#define PORT_PC24D_SERCOM2_PAD2 (_UL_(1) << 24)
#define PIN_PB28C_SERCOM2_PAD2 _L_(60)
#define MUX_PB28C_SERCOM2_PAD2 _L_(2)
#define PINMUX_PB28C_SERCOM2_PAD2 ((PIN_PB28C_SERCOM2_PAD2 << 16) | MUX_PB28C_SERCOM2_PAD2)
#define PORT_PB28C_SERCOM2_PAD2 (_UL_(1) << 28)
#define PIN_PA14C_SERCOM2_PAD2 _L_(14)
#define MUX_PA14C_SERCOM2_PAD2 _L_(2)
#define PINMUX_PA14C_SERCOM2_PAD2 ((PIN_PA14C_SERCOM2_PAD2 << 16) | MUX_PA14C_SERCOM2_PAD2)
#define PORT_PA14C_SERCOM2_PAD2 (_UL_(1) << 14)
#define PIN_PA11D_SERCOM2_PAD3 _L_(11)
#define MUX_PA11D_SERCOM2_PAD3 _L_(3)
#define PINMUX_PA11D_SERCOM2_PAD3 ((PIN_PA11D_SERCOM2_PAD3 << 16) | MUX_PA11D_SERCOM2_PAD3)
#define PORT_PA11D_SERCOM2_PAD3 (_UL_(1) << 11)
#define PIN_PC25D_SERCOM2_PAD3 _L_(89)
#define MUX_PC25D_SERCOM2_PAD3 _L_(3)
#define PINMUX_PC25D_SERCOM2_PAD3 ((PIN_PC25D_SERCOM2_PAD3 << 16) | MUX_PC25D_SERCOM2_PAD3)
#define PORT_PC25D_SERCOM2_PAD3 (_UL_(1) << 25)
#define PIN_PB29C_SERCOM2_PAD3 _L_(61)
#define MUX_PB29C_SERCOM2_PAD3 _L_(2)
#define PINMUX_PB29C_SERCOM2_PAD3 ((PIN_PB29C_SERCOM2_PAD3 << 16) | MUX_PB29C_SERCOM2_PAD3)
#define PORT_PB29C_SERCOM2_PAD3 (_UL_(1) << 29)
#define PIN_PA15C_SERCOM2_PAD3 _L_(15)
#define MUX_PA15C_SERCOM2_PAD3 _L_(2)
#define PINMUX_PA15C_SERCOM2_PAD3 ((PIN_PA15C_SERCOM2_PAD3 << 16) | MUX_PA15C_SERCOM2_PAD3)
#define PORT_PA15C_SERCOM2_PAD3 (_UL_(1) << 15)

#define PIN_PA17D_SERCOM3_PAD0 _L_(17)
#define MUX_PA17D_SERCOM3_PAD0 _L_(3)
#define PINMUX_PA17D_SERCOM3_PAD0 ((PIN_PA17D_SERCOM3_PAD0 << 16) | MUX_PA17D_SERCOM3_PAD0)
#define PORT_PA17D_SERCOM3_PAD0 (_UL_(1) << 17)
#define PIN_PC23D_SERCOM3_PAD0 _L_(87)
#define MUX_PC23D_SERCOM3_PAD0 _L_(3)
#define PINMUX_PC23D_SERCOM3_PAD0 ((PIN_PC23D_SERCOM3_PAD0 << 16) | MUX_PC23D_SERCOM3_PAD0)
#define PORT_PC23D_SERCOM3_PAD0 (_UL_(1) << 23)
#define PIN_PA22C_SERCOM3_PAD0 _L_(22)
#define MUX_PA22C_SERCOM3_PAD0 _L_(2)
#define PINMUX_PA22C_SERCOM3_PAD0 ((PIN_PA22C_SERCOM3_PAD0 << 16) | MUX_PA22C_SERCOM3_PAD0)
#define PORT_PA22C_SERCOM3_PAD0 (_UL_(1) << 22)
#define PIN_PB20C_SERCOM3_PAD0 _L_(52)
#define MUX_PB20C_SERCOM3_PAD0 _L_(2)
#define PINMUX_PB20C_SERCOM3_PAD0 ((PIN_PB20C_SERCOM3_PAD0 << 16) | MUX_PB20C_SERCOM3_PAD0)
#define PORT_PB20C_SERCOM3_PAD0 (_UL_(1) << 20)
#define PIN_PA16D_SERCOM3_PAD1 _L_(16)
#define MUX_PA16D_SERCOM3_PAD1 _L_(3)
#define PINMUX_PA16D_SERCOM3_PAD1 ((PIN_PA16D_SERCOM3_PAD1 << 16) | MUX_PA16D_SERCOM3_PAD1)
#define PORT_PA16D_SERCOM3_PAD1 (_UL_(1) << 16)
#define PIN_PC22D_SERCOM3_PAD1 _L_(86)
#define MUX_PC22D_SERCOM3_PAD1 _L_(3)
#define PINMUX_PC22D_SERCOM3_PAD1 ((PIN_PC22D_SERCOM3_PAD1 << 16) | MUX_PC22D_SERCOM3_PAD1)
#define PORT_PC22D_SERCOM3_PAD1 (_UL_(1) << 22)
#define PIN_PA23C_SERCOM3_PAD1 _L_(23)
#define MUX_PA23C_SERCOM3_PAD1 _L_(2)
#define PINMUX_PA23C_SERCOM3_PAD1 ((PIN_PA23C_SERCOM3_PAD1 << 16) | MUX_PA23C_SERCOM3_PAD1)
#define PORT_PA23C_SERCOM3_PAD1 (_UL_(1) << 23)
#define PIN_PB21C_SERCOM3_PAD1 _L_(53)
#define MUX_PB21C_SERCOM3_PAD1 _L_(2)
#define PINMUX_PB21C_SERCOM3_PAD1 ((PIN_PB21C_SERCOM3_PAD1 << 16) | MUX_PB21C_SERCOM3_PAD1)
#define PORT_PB21C_SERCOM3_PAD1 (_UL_(1) << 21)
#define PIN_PA18D_SERCOM3_PAD2 _L_(18)
#define MUX_PA18D_SERCOM3_PAD2 _L_(3)
#define PINMUX_PA18D_SERCOM3_PAD2 ((PIN_PA18D_SERCOM3_PAD2 << 16) | MUX_PA18D_SERCOM3_PAD2)
#define PORT_PA18D_SERCOM3_PAD2 (_UL_(1) << 18)
#define PIN_PA20D_SERCOM3_PAD2 _L_(20)
#define MUX_PA20D_SERCOM3_PAD2 _L_(3)
#define PINMUX_PA20D_SERCOM3_PAD2 ((PIN_PA20D_SERCOM3_PAD2 << 16) | MUX_PA20D_SERCOM3_PAD2)
#define PORT_PA20D_SERCOM3_PAD2 (_UL_(1) << 20)
#define PIN_PD20D_SERCOM3_PAD2 _L_(116)
#define MUX_PD20D_SERCOM3_PAD2 _L_(3)
#define PINMUX_PD20D_SERCOM3_PAD2 ((PIN_PD20D_SERCOM3_PAD2 << 16) | MUX_PD20D_SERCOM3_PAD2)
#define PORT_PD20D_SERCOM3_PAD2 (_UL_(1) << 20)
#define PIN_PA24C_SERCOM3_PAD2 _L_(24)
#define MUX_PA24C_SERCOM3_PAD2 _L_(2)
#define PINMUX_PA24C_SERCOM3_PAD2 ((PIN_PA24C_SERCOM3_PAD2 << 16) | MUX_PA24C_SERCOM3_PAD2)
#define PORT_PA24C_SERCOM3_PAD2 (_UL_(1) << 24)
#define PIN_PA19D_SERCOM3_PAD3 _L_(19)
#define MUX_PA19D_SERCOM3_PAD3 _L_(3)
#define PINMUX_PA19D_SERCOM3_PAD3 ((PIN_PA19D_SERCOM3_PAD3 << 16) | MUX_PA19D_SERCOM3_PAD3)
#define PORT_PA19D_SERCOM3_PAD3 (_UL_(1) << 19)
#define PIN_PA21D_SERCOM3_PAD3 _L_(21)
#define MUX_PA21D_SERCOM3_PAD3 _L_(3)
#define PINMUX_PA21D_SERCOM3_PAD3 ((PIN_PA21D_SERCOM3_PAD3 << 16) | MUX_PA21D_SERCOM3_PAD3)
#define PORT_PA21D_SERCOM3_PAD3 (_UL_(1) << 21)
#define PIN_PD21D_SERCOM3_PAD3 _L_(117)
#define MUX_PD21D_SERCOM3_PAD3 _L_(3)
#define PINMUX_PD21D_SERCOM3_PAD3 ((PIN_PD21D_SERCOM3_PAD3 << 16) | MUX_PD21D_SERCOM3_PAD3)
#define PORT_PD21D_SERCOM3_PAD3 (_UL_(1) << 21)
#define PIN_PA25C_SERCOM3_PAD3 _L_(25)
#define MUX_PA25C_SERCOM3_PAD3 _L_(2)
#define PINMUX_PA25C_SERCOM3_PAD3 ((PIN_PA25C_SERCOM3_PAD3 << 16) | MUX_PA25C_SERCOM3_PAD3)
#define PORT_PA25C_SERCOM3_PAD3 (_UL_(1) << 25)

#define PIN_PA20G_TCC0_WO0 _L_(20)
#define MUX_PA20G_TCC0_WO0 _L_(6)
#define PINMUX_PA20G_TCC0_WO0 ((PIN_PA20G_TCC0_WO0 << 16) | MUX_PA20G_TCC0_WO0)
#define PORT_PA20G_TCC0_WO0 (_UL_(1) << 20)
#define PIN_PB12G_TCC0_WO0 _L_(44)
#define MUX_PB12G_TCC0_WO0 _L_(6)
#define PINMUX_PB12G_TCC0_WO0 ((PIN_PB12G_TCC0_WO0 << 16) | MUX_PB12G_TCC0_WO0)
#define PORT_PB12G_TCC0_WO0 (_UL_(1) << 12)
#define PIN_PA08F_TCC0_WO0 _L_(8)
#define MUX_PA08F_TCC0_WO0 _L_(5)
#define PINMUX_PA08F_TCC0_WO0 ((PIN_PA08F_TCC0_WO0 << 16) | MUX_PA08F_TCC0_WO0)
#define PORT_PA08F_TCC0_WO0 (_UL_(1) << 8)
#define PIN_PC04F_TCC0_WO0 _L_(68)
#define MUX_PC04F_TCC0_WO0 _L_(5)
#define PINMUX_PC04F_TCC0_WO0 ((PIN_PC04F_TCC0_WO0 << 16) | MUX_PC04F_TCC0_WO0)
#define PORT_PC04F_TCC0_WO0 (_UL_(1) << 4)
#define PIN_PC10F_TCC0_WO0 _L_(74)
#define MUX_PC10F_TCC0_WO0 _L_(5)
#define PINMUX_PC10F_TCC0_WO0 ((PIN_PC10F_TCC0_WO0 << 16) | MUX_PC10F_TCC0_WO0)
#define PORT_PC10F_TCC0_WO0 (_UL_(1) << 10)
#define PIN_PC16F_TCC0_WO0 _L_(80)
#define MUX_PC16F_TCC0_WO0 _L_(5)
#define PINMUX_PC16F_TCC0_WO0 ((PIN_PC16F_TCC0_WO0 << 16) | MUX_PC16F_TCC0_WO0)
#define PORT_PC16F_TCC0_WO0 (_UL_(1) << 16)
#define PIN_PA21G_TCC0_WO1 _L_(21)
#define MUX_PA21G_TCC0_WO1 _L_(6)
#define PINMUX_PA21G_TCC0_WO1 ((PIN_PA21G_TCC0_WO1 << 16) | MUX_PA21G_TCC0_WO1)
#define PORT_PA21G_TCC0_WO1 (_UL_(1) << 21)
#define PIN_PB13G_TCC0_WO1 _L_(45)
#define MUX_PB13G_TCC0_WO1 _L_(6)
#define PINMUX_PB13G_TCC0_WO1 ((PIN_PB13G_TCC0_WO1 << 16) | MUX_PB13G_TCC0_WO1)
#define PORT_PB13G_TCC0_WO1 (_UL_(1) << 13)
#define PIN_PA09F_TCC0_WO1 _L_(9)
#define MUX_PA09F_TCC0_WO1 _L_(5)
#define PINMUX_PA09F_TCC0_WO1 ((PIN_PA09F_TCC0_WO1 << 16) | MUX_PA09F_TCC0_WO1)
#define PORT_PA09F_TCC0_WO1 (_UL_(1) << 9)
#define PIN_PC11F_TCC0_WO1 _L_(75)
#define MUX_PC11F_TCC0_WO1 _L_(5)
#define PINMUX_PC11F_TCC0_WO1 ((PIN_PC11F_TCC0_WO1 << 16) | MUX_PC11F_TCC0_WO1)
#define PORT_PC11F_TCC0_WO1 (_UL_(1) << 11)
#define PIN_PC17F_TCC0_WO1 _L_(81)
#define MUX_PC17F_TCC0_WO1 _L_(5)
#define PINMUX_PC17F_TCC0_WO1 ((PIN_PC17F_TCC0_WO1 << 16) | MUX_PC17F_TCC0_WO1)
#define PORT_PC17F_TCC0_WO1 (_UL_(1) << 17)
#define PIN_PD08F_TCC0_WO1 _L_(104)
#define MUX_PD08F_TCC0_WO1 _L_(5)
#define PINMUX_PD08F_TCC0_WO1 ((PIN_PD08F_TCC0_WO1 << 16) | MUX_PD08F_TCC0_WO1)
#define PORT_PD08F_TCC0_WO1 (_UL_(1) << 8)
#define PIN_PA22G_TCC0_WO2 _L_(22)
#define MUX_PA22G_TCC0_WO2 _L_(6)
#define PINMUX_PA22G_TCC0_WO2 ((PIN_PA22G_TCC0_WO2 << 16) | MUX_PA22G_TCC0_WO2)
#define PORT_PA22G_TCC0_WO2 (_UL_(1) << 22)
#define PIN_PB14G_TCC0_WO2 _L_(46)
#define MUX_PB14G_TCC0_WO2 _L_(6)
#define PINMUX_PB14G_TCC0_WO2 ((PIN_PB14G_TCC0_WO2 << 16) | MUX_PB14G_TCC0_WO2)
#define PORT_PB14G_TCC0_WO2 (_UL_(1) << 14)
#define PIN_PA10F_TCC0_WO2 _L_(10)
#define MUX_PA10F_TCC0_WO2 _L_(5)
#define PINMUX_PA10F_TCC0_WO2 ((PIN_PA10F_TCC0_WO2 << 16) | MUX_PA10F_TCC0_WO2)
#define PORT_PA10F_TCC0_WO2 (_UL_(1) << 10)
#define PIN_PC12F_TCC0_WO2 _L_(76)
#define MUX_PC12F_TCC0_WO2 _L_(5)
#define PINMUX_PC12F_TCC0_WO2 ((PIN_PC12F_TCC0_WO2 << 16) | MUX_PC12F_TCC0_WO2)
#define PORT_PC12F_TCC0_WO2 (_UL_(1) << 12)
#define PIN_PC18F_TCC0_WO2 _L_(82)
#define MUX_PC18F_TCC0_WO2 _L_(5)
#define PINMUX_PC18F_TCC0_WO2 ((PIN_PC18F_TCC0_WO2 << 16) | MUX_PC18F_TCC0_WO2)
#define PORT_PC18F_TCC0_WO2 (_UL_(1) << 18)
#define PIN_PD09F_TCC0_WO2 _L_(105)
#define MUX_PD09F_TCC0_WO2 _L_(5)
#define PINMUX_PD09F_TCC0_WO2 ((PIN_PD09F_TCC0_WO2 << 16) | MUX_PD09F_TCC0_WO2)
#define PORT_PD09F_TCC0_WO2 (_UL_(1) << 9)
#define PIN_PA23G_TCC0_WO3 _L_(23)
#define MUX_PA23G_TCC0_WO3 _L_(6)
#define PINMUX_PA23G_TCC0_WO3 ((PIN_PA23G_TCC0_WO3 << 16) | MUX_PA23G_TCC0_WO3)
#define PORT_PA23G_TCC0_WO3 (_UL_(1) << 23)
#define PIN_PB15G_TCC0_WO3 _L_(47)
#define MUX_PB15G_TCC0_WO3 _L_(6)
#define PINMUX_PB15G_TCC0_WO3 ((PIN_PB15G_TCC0_WO3 << 16) | MUX_PB15G_TCC0_WO3)
#define PORT_PB15G_TCC0_WO3 (_UL_(1) << 15)
#define PIN_PA11F_TCC0_WO3 _L_(11)
#define MUX_PA11F_TCC0_WO3 _L_(5)
#define PINMUX_PA11F_TCC0_WO3 ((PIN_PA11F_TCC0_WO3 << 16) | MUX_PA11F_TCC0_WO3)
#define PORT_PA11F_TCC0_WO3 (_UL_(1) << 11)
#define PIN_PC13F_TCC0_WO3 _L_(77)
#define MUX_PC13F_TCC0_WO3 _L_(5)
#define PINMUX_PC13F_TCC0_WO3 ((PIN_PC13F_TCC0_WO3 << 16) | MUX_PC13F_TCC0_WO3)
#define PORT_PC13F_TCC0_WO3 (_UL_(1) << 13)
#define PIN_PC19F_TCC0_WO3 _L_(83)
#define MUX_PC19F_TCC0_WO3 _L_(5)
#define PINMUX_PC19F_TCC0_WO3 ((PIN_PC19F_TCC0_WO3 << 16) | MUX_PC19F_TCC0_WO3)
#define PORT_PC19F_TCC0_WO3 (_UL_(1) << 19)
#define PIN_PD10F_TCC0_WO3 _L_(106)
#define MUX_PD10F_TCC0_WO3 _L_(5)
#define PINMUX_PD10F_TCC0_WO3 ((PIN_PD10F_TCC0_WO3 << 16) | MUX_PD10F_TCC0_WO3)
#define PORT_PD10F_TCC0_WO3 (_UL_(1) << 10)
#define PIN_PA16G_TCC0_WO4 _L_(16)
#define MUX_PA16G_TCC0_WO4 _L_(6)
#define PINMUX_PA16G_TCC0_WO4 ((PIN_PA16G_TCC0_WO4 << 16) | MUX_PA16G_TCC0_WO4)
#define PORT_PA16G_TCC0_WO4 (_UL_(1) << 16)
#define PIN_PB16G_TCC0_WO4 _L_(48)
#define MUX_PB16G_TCC0_WO4 _L_(6)
#define PINMUX_PB16G_TCC0_WO4 ((PIN_PB16G_TCC0_WO4 << 16) | MUX_PB16G_TCC0_WO4)
#define PORT_PB16G_TCC0_WO4 (_UL_(1) << 16)
#define PIN_PB10F_TCC0_WO4 _L_(42)
#define MUX_PB10F_TCC0_WO4 _L_(5)
#define PINMUX_PB10F_TCC0_WO4 ((PIN_PB10F_TCC0_WO4 << 16) | MUX_PB10F_TCC0_WO4)
#define PORT_PB10F_TCC0_WO4 (_UL_(1) << 10)
#define PIN_PC14F_TCC0_WO4 _L_(78)
#define MUX_PC14F_TCC0_WO4 _L_(5)
#define PINMUX_PC14F_TCC0_WO4 ((PIN_PC14F_TCC0_WO4 << 16) | MUX_PC14F_TCC0_WO4)
#define PORT_PC14F_TCC0_WO4 (_UL_(1) << 14)
#define PIN_PC20F_TCC0_WO4 _L_(84)
#define MUX_PC20F_TCC0_WO4 _L_(5)
#define PINMUX_PC20F_TCC0_WO4 ((PIN_PC20F_TCC0_WO4 << 16) | MUX_PC20F_TCC0_WO4)
#define PORT_PC20F_TCC0_WO4 (_UL_(1) << 20)
#define PIN_PD11F_TCC0_WO4 _L_(107)
#define MUX_PD11F_TCC0_WO4 _L_(5)
#define PINMUX_PD11F_TCC0_WO4 ((PIN_PD11F_TCC0_WO4 << 16) | MUX_PD11F_TCC0_WO4)
#define PORT_PD11F_TCC0_WO4 (_UL_(1) << 11)
#define PIN_PA17G_TCC0_WO5 _L_(17)
#define MUX_PA17G_TCC0_WO5 _L_(6)
#define PINMUX_PA17G_TCC0_WO5 ((PIN_PA17G_TCC0_WO5 << 16) | MUX_PA17G_TCC0_WO5)
#define PORT_PA17G_TCC0_WO5 (_UL_(1) << 17)
#define PIN_PB17G_TCC0_WO5 _L_(49)
#define MUX_PB17G_TCC0_WO5 _L_(6)
#define PINMUX_PB17G_TCC0_WO5 ((PIN_PB17G_TCC0_WO5 << 16) | MUX_PB17G_TCC0_WO5)
#define PORT_PB17G_TCC0_WO5 (_UL_(1) << 17)
#define PIN_PB11F_TCC0_WO5 _L_(43)
#define MUX_PB11F_TCC0_WO5 _L_(5)
#define PINMUX_PB11F_TCC0_WO5 ((PIN_PB11F_TCC0_WO5 << 16) | MUX_PB11F_TCC0_WO5)
#define PORT_PB11F_TCC0_WO5 (_UL_(1) << 11)
#define PIN_PC15F_TCC0_WO5 _L_(79)
#define MUX_PC15F_TCC0_WO5 _L_(5)
#define PINMUX_PC15F_TCC0_WO5 ((PIN_PC15F_TCC0_WO5 << 16) | MUX_PC15F_TCC0_WO5)
#define PORT_PC15F_TCC0_WO5 (_UL_(1) << 15)
#define PIN_PC21F_TCC0_WO5 _L_(85)
#define MUX_PC21F_TCC0_WO5 _L_(5)
#define PINMUX_PC21F_TCC0_WO5 ((PIN_PC21F_TCC0_WO5 << 16) | MUX_PC21F_TCC0_WO5)
#define PORT_PC21F_TCC0_WO5 (_UL_(1) << 21)
#define PIN_PD12F_TCC0_WO5 _L_(108)
#define MUX_PD12F_TCC0_WO5 _L_(5)
#define PINMUX_PD12F_TCC0_WO5 ((PIN_PD12F_TCC0_WO5 << 16) | MUX_PD12F_TCC0_WO5)
#define PORT_PD12F_TCC0_WO5 (_UL_(1) << 12)
#define PIN_PA18G_TCC0_WO6 _L_(18)
#define MUX_PA18G_TCC0_WO6 _L_(6)
#define PINMUX_PA18G_TCC0_WO6 ((PIN_PA18G_TCC0_WO6 << 16) | MUX_PA18G_TCC0_WO6)
#define PORT_PA18G_TCC0_WO6 (_UL_(1) << 18)
#define PIN_PB30G_TCC0_WO6 _L_(62)
#define MUX_PB30G_TCC0_WO6 _L_(6)
#define PINMUX_PB30G_TCC0_WO6 ((PIN_PB30G_TCC0_WO6 << 16) | MUX_PB30G_TCC0_WO6)
#define PORT_PB30G_TCC0_WO6 (_UL_(1) << 30)
#define PIN_PA12F_TCC0_WO6 _L_(12)
#define MUX_PA12F_TCC0_WO6 _L_(5)
#define PINMUX_PA12F_TCC0_WO6 ((PIN_PA12F_TCC0_WO6 << 16) | MUX_PA12F_TCC0_WO6)
#define PORT_PA12F_TCC0_WO6 (_UL_(1) << 12)
#define PIN_PC22F_TCC0_WO6 _L_(86)
#define MUX_PC22F_TCC0_WO6 _L_(5)
#define PINMUX_PC22F_TCC0_WO6 ((PIN_PC22F_TCC0_WO6 << 16) | MUX_PC22F_TCC0_WO6)
#define PORT_PC22F_TCC0_WO6 (_UL_(1) << 22)
#define PIN_PA19G_TCC0_WO7 _L_(19)
#define MUX_PA19G_TCC0_WO7 _L_(6)
#define PINMUX_PA19G_TCC0_WO7 ((PIN_PA19G_TCC0_WO7 << 16) | MUX_PA19G_TCC0_WO7)
#define PORT_PA19G_TCC0_WO7 (_UL_(1) << 19)
#define PIN_PB31G_TCC0_WO7 _L_(63)
#define MUX_PB31G_TCC0_WO7 _L_(6)
#define PINMUX_PB31G_TCC0_WO7 ((PIN_PB31G_TCC0_WO7 << 16) | MUX_PB31G_TCC0_WO7)
#define PORT_PB31G_TCC0_WO7 (_UL_(1) << 31)
#define PIN_PA13F_TCC0_WO7 _L_(13)
#define MUX_PA13F_TCC0_WO7 _L_(5)
#define PINMUX_PA13F_TCC0_WO7 ((PIN_PA13F_TCC0_WO7 << 16) | MUX_PA13F_TCC0_WO7)
#define PORT_PA13F_TCC0_WO7 (_UL_(1) << 13)
#define PIN_PC23F_TCC0_WO7 _L_(87)
#define MUX_PC23F_TCC0_WO7 _L_(5)
#define PINMUX_PC23F_TCC0_WO7 ((PIN_PC23F_TCC0_WO7 << 16) | MUX_PC23F_TCC0_WO7)
#define PORT_PC23F_TCC0_WO7 (_UL_(1) << 23)

#define PIN_PB10G_TCC1_WO0 _L_(42)
#define MUX_PB10G_TCC1_WO0 _L_(6)
#define PINMUX_PB10G_TCC1_WO0 ((PIN_PB10G_TCC1_WO0 << 16) | MUX_PB10G_TCC1_WO0)
#define PORT_PB10G_TCC1_WO0 (_UL_(1) << 10)
#define PIN_PC14G_TCC1_WO0 _L_(78)
#define MUX_PC14G_TCC1_WO0 _L_(6)
#define PINMUX_PC14G_TCC1_WO0 ((PIN_PC14G_TCC1_WO0 << 16) | MUX_PC14G_TCC1_WO0)
#define PORT_PC14G_TCC1_WO0 (_UL_(1) << 14)
#define PIN_PA16F_TCC1_WO0 _L_(16)
#define MUX_PA16F_TCC1_WO0 _L_(5)
#define PINMUX_PA16F_TCC1_WO0 ((PIN_PA16F_TCC1_WO0 << 16) | MUX_PA16F_TCC1_WO0)
#define PORT_PA16F_TCC1_WO0 (_UL_(1) << 16)
#define PIN_PB18F_TCC1_WO0 _L_(50)
#define MUX_PB18F_TCC1_WO0 _L_(5)
#define PINMUX_PB18F_TCC1_WO0 ((PIN_PB18F_TCC1_WO0 << 16) | MUX_PB18F_TCC1_WO0)
#define PORT_PB18F_TCC1_WO0 (_UL_(1) << 18)
#define PIN_PD20F_TCC1_WO0 _L_(116)
#define MUX_PD20F_TCC1_WO0 _L_(5)
#define PINMUX_PD20F_TCC1_WO0 ((PIN_PD20F_TCC1_WO0 << 16) | MUX_PD20F_TCC1_WO0)
#define PORT_PD20F_TCC1_WO0 (_UL_(1) << 20)
#define PIN_PB11G_TCC1_WO1 _L_(43)
#define MUX_PB11G_TCC1_WO1 _L_(6)
#define PINMUX_PB11G_TCC1_WO1 ((PIN_PB11G_TCC1_WO1 << 16) | MUX_PB11G_TCC1_WO1)
#define PORT_PB11G_TCC1_WO1 (_UL_(1) << 11)
#define PIN_PC15G_TCC1_WO1 _L_(79)
#define MUX_PC15G_TCC1_WO1 _L_(6)
#define PINMUX_PC15G_TCC1_WO1 ((PIN_PC15G_TCC1_WO1 << 16) | MUX_PC15G_TCC1_WO1)
#define PORT_PC15G_TCC1_WO1 (_UL_(1) << 15)
#define PIN_PA17F_TCC1_WO1 _L_(17)
#define MUX_PA17F_TCC1_WO1 _L_(5)
#define PINMUX_PA17F_TCC1_WO1 ((PIN_PA17F_TCC1_WO1 << 16) | MUX_PA17F_TCC1_WO1)
#define PORT_PA17F_TCC1_WO1 (_UL_(1) << 17)
#define PIN_PB19F_TCC1_WO1 _L_(51)
#define MUX_PB19F_TCC1_WO1 _L_(5)
#define PINMUX_PB19F_TCC1_WO1 ((PIN_PB19F_TCC1_WO1 << 16) | MUX_PB19F_TCC1_WO1)
#define PORT_PB19F_TCC1_WO1 (_UL_(1) << 19)
#define PIN_PD21F_TCC1_WO1 _L_(117)
#define MUX_PD21F_TCC1_WO1 _L_(5)
#define PINMUX_PD21F_TCC1_WO1 ((PIN_PD21F_TCC1_WO1 << 16) | MUX_PD21F_TCC1_WO1)
#define PORT_PD21F_TCC1_WO1 (_UL_(1) << 21)
#define PIN_PA12G_TCC1_WO2 _L_(12)
#define MUX_PA12G_TCC1_WO2 _L_(6)
#define PINMUX_PA12G_TCC1_WO2 ((PIN_PA12G_TCC1_WO2 << 16) | MUX_PA12G_TCC1_WO2)
#define PORT_PA12G_TCC1_WO2 (_UL_(1) << 12)
#define PIN_PA14G_TCC1_WO2 _L_(14)
#define MUX_PA14G_TCC1_WO2 _L_(6)
#define PINMUX_PA14G_TCC1_WO2 ((PIN_PA14G_TCC1_WO2 << 16) | MUX_PA14G_TCC1_WO2)
#define PORT_PA14G_TCC1_WO2 (_UL_(1) << 14)
#define PIN_PA18F_TCC1_WO2 _L_(18)
#define MUX_PA18F_TCC1_WO2 _L_(5)
#define PINMUX_PA18F_TCC1_WO2 ((PIN_PA18F_TCC1_WO2 << 16) | MUX_PA18F_TCC1_WO2)
#define PORT_PA18F_TCC1_WO2 (_UL_(1) << 18)
#define PIN_PB20F_TCC1_WO2 _L_(52)
#define MUX_PB20F_TCC1_WO2 _L_(5)
#define PINMUX_PB20F_TCC1_WO2 ((PIN_PB20F_TCC1_WO2 << 16) | MUX_PB20F_TCC1_WO2)
#define PORT_PB20F_TCC1_WO2 (_UL_(1) << 20)
#define PIN_PB26F_TCC1_WO2 _L_(58)
#define MUX_PB26F_TCC1_WO2 _L_(5)
#define PINMUX_PB26F_TCC1_WO2 ((PIN_PB26F_TCC1_WO2 << 16) | MUX_PB26F_TCC1_WO2)
#define PORT_PB26F_TCC1_WO2 (_UL_(1) << 26)
#define PIN_PA13G_TCC1_WO3 _L_(13)
#define MUX_PA13G_TCC1_WO3 _L_(6)
#define PINMUX_PA13G_TCC1_WO3 ((PIN_PA13G_TCC1_WO3 << 16) | MUX_PA13G_TCC1_WO3)
#define PORT_PA13G_TCC1_WO3 (_UL_(1) << 13)
#define PIN_PA15G_TCC1_WO3 _L_(15)
#define MUX_PA15G_TCC1_WO3 _L_(6)
#define PINMUX_PA15G_TCC1_WO3 ((PIN_PA15G_TCC1_WO3 << 16) | MUX_PA15G_TCC1_WO3)
#define PORT_PA15G_TCC1_WO3 (_UL_(1) << 15)
#define PIN_PA19F_TCC1_WO3 _L_(19)
#define MUX_PA19F_TCC1_WO3 _L_(5)
#define PINMUX_PA19F_TCC1_WO3 ((PIN_PA19F_TCC1_WO3 << 16) | MUX_PA19F_TCC1_WO3)
#define PORT_PA19F_TCC1_WO3 (_UL_(1) << 19)
#define PIN_PB21F_TCC1_WO3 _L_(53)
#define MUX_PB21F_TCC1_WO3 _L_(5)
#define PINMUX_PB21F_TCC1_WO3 ((PIN_PB21F_TCC1_WO3 << 16) | MUX_PB21F_TCC1_WO3)
#define PORT_PB21F_TCC1_WO3 (_UL_(1) << 21)
#define PIN_PB27F_TCC1_WO3 _L_(59)
#define MUX_PB27F_TCC1_WO3 _L_(5)
#define PINMUX_PB27F_TCC1_WO3 ((PIN_PB27F_TCC1_WO3 << 16) | MUX_PB27F_TCC1_WO3)
#define PORT_PB27F_TCC1_WO3 (_UL_(1) << 27)
#define PIN_PA08G_TCC1_WO4 _L_(8)
#define MUX_PA08G_TCC1_WO4 _L_(6)
#define PINMUX_PA08G_TCC1_WO4 ((PIN_PA08G_TCC1_WO4 << 16) | MUX_PA08G_TCC1_WO4)
#define PORT_PA08G_TCC1_WO4 (_UL_(1) << 8)
#define PIN_PC10G_TCC1_WO4 _L_(74)
#define MUX_PC10G_TCC1_WO4 _L_(6)
#define PINMUX_PC10G_TCC1_WO4 ((PIN_PC10G_TCC1_WO4 << 16) | MUX_PC10G_TCC1_WO4)
#define PORT_PC10G_TCC1_WO4 (_UL_(1) << 10)
#define PIN_PA20F_TCC1_WO4 _L_(20)
#define MUX_PA20F_TCC1_WO4 _L_(5)
#define PINMUX_PA20F_TCC1_WO4 ((PIN_PA20F_TCC1_WO4 << 16) | MUX_PA20F_TCC1_WO4)
#define PORT_PA20F_TCC1_WO4 (_UL_(1) << 20)
#define PIN_PB28F_TCC1_WO4 _L_(60)
#define MUX_PB28F_TCC1_WO4 _L_(5)
#define PINMUX_PB28F_TCC1_WO4 ((PIN_PB28F_TCC1_WO4 << 16) | MUX_PB28F_TCC1_WO4)
#define PORT_PB28F_TCC1_WO4 (_UL_(1) << 28)
#define PIN_PA09G_TCC1_WO5 _L_(9)
#define MUX_PA09G_TCC1_WO5 _L_(6)
#define PINMUX_PA09G_TCC1_WO5 ((PIN_PA09G_TCC1_WO5 << 16) | MUX_PA09G_TCC1_WO5)
#define PORT_PA09G_TCC1_WO5 (_UL_(1) << 9)
#define PIN_PC11G_TCC1_WO5 _L_(75)
#define MUX_PC11G_TCC1_WO5 _L_(6)
#define PINMUX_PC11G_TCC1_WO5 ((PIN_PC11G_TCC1_WO5 << 16) | MUX_PC11G_TCC1_WO5)
#define PORT_PC11G_TCC1_WO5 (_UL_(1) << 11)
#define PIN_PA21F_TCC1_WO5 _L_(21)
#define MUX_PA21F_TCC1_WO5 _L_(5)
#define PINMUX_PA21F_TCC1_WO5 ((PIN_PA21F_TCC1_WO5 << 16) | MUX_PA21F_TCC1_WO5)
#define PORT_PA21F_TCC1_WO5 (_UL_(1) << 21)
#define PIN_PB29F_TCC1_WO5 _L_(61)
#define MUX_PB29F_TCC1_WO5 _L_(5)
#define PINMUX_PB29F_TCC1_WO5 ((PIN_PB29F_TCC1_WO5 << 16) | MUX_PB29F_TCC1_WO5)
#define PORT_PB29F_TCC1_WO5 (_UL_(1) << 29)
#define PIN_PA10G_TCC1_WO6 _L_(10)
#define MUX_PA10G_TCC1_WO6 _L_(6)
#define PINMUX_PA10G_TCC1_WO6 ((PIN_PA10G_TCC1_WO6 << 16) | MUX_PA10G_TCC1_WO6)
#define PORT_PA10G_TCC1_WO6 (_UL_(1) << 10)
#define PIN_PC12G_TCC1_WO6 _L_(76)
#define MUX_PC12G_TCC1_WO6 _L_(6)
#define PINMUX_PC12G_TCC1_WO6 ((PIN_PC12G_TCC1_WO6 << 16) | MUX_PC12G_TCC1_WO6)
#define PORT_PC12G_TCC1_WO6 (_UL_(1) << 12)
#define PIN_PA22F_TCC1_WO6 _L_(22)
#define MUX_PA22F_TCC1_WO6 _L_(5)
#define PINMUX_PA22F_TCC1_WO6 ((PIN_PA22F_TCC1_WO6 << 16) | MUX_PA22F_TCC1_WO6)
#define PORT_PA22F_TCC1_WO6 (_UL_(1) << 22)
#define PIN_PA11G_TCC1_WO7 _L_(11)
#define MUX_PA11G_TCC1_WO7 _L_(6)
#define PINMUX_PA11G_TCC1_WO7 ((PIN_PA11G_TCC1_WO7 << 16) | MUX_PA11G_TCC1_WO7)
#define PORT_PA11G_TCC1_WO7 (_UL_(1) << 11)
#define PIN_PC13G_TCC1_WO7 _L_(77)
#define MUX_PC13G_TCC1_WO7 _L_(6)
#define PINMUX_PC13G_TCC1_WO7 ((PIN_PC13G_TCC1_WO7 << 16) | MUX_PC13G_TCC1_WO7)
#define PORT_PC13G_TCC1_WO7 (_UL_(1) << 13)
#define PIN_PA23F_TCC1_WO7 _L_(23)
#define MUX_PA23F_TCC1_WO7 _L_(5)
#define PINMUX_PA23F_TCC1_WO7 ((PIN_PA23F_TCC1_WO7 << 16) | MUX_PA23F_TCC1_WO7)
#define PORT_PA23F_TCC1_WO7 (_UL_(1) << 23)

#define PIN_PA12E_TC2_WO0 _L_(12)
#define MUX_PA12E_TC2_WO0 _L_(4)
#define PINMUX_PA12E_TC2_WO0 ((PIN_PA12E_TC2_WO0 << 16) | MUX_PA12E_TC2_WO0)
#define PORT_PA12E_TC2_WO0 (_UL_(1) << 12)
#define PIN_PA16E_TC2_WO0 _L_(16)
#define MUX_PA16E_TC2_WO0 _L_(4)
#define PINMUX_PA16E_TC2_WO0 ((PIN_PA16E_TC2_WO0 << 16) | MUX_PA16E_TC2_WO0)
#define PORT_PA16E_TC2_WO0 (_UL_(1) << 16)
#define PIN_PA00E_TC2_WO0 _L_(0)
#define MUX_PA00E_TC2_WO0 _L_(4)
#define PINMUX_PA00E_TC2_WO0 ((PIN_PA00E_TC2_WO0 << 16) | MUX_PA00E_TC2_WO0)
#define PORT_PA00E_TC2_WO0 (_UL_(1) << 0)
#define PIN_PA01E_TC2_WO1 _L_(1)
#define MUX_PA01E_TC2_WO1 _L_(4)
#define PINMUX_PA01E_TC2_WO1 ((PIN_PA01E_TC2_WO1 << 16) | MUX_PA01E_TC2_WO1)
#define PORT_PA01E_TC2_WO1 (_UL_(1) << 1)
#define PIN_PA13E_TC2_WO1 _L_(13)
#define MUX_PA13E_TC2_WO1 _L_(4)
#define PINMUX_PA13E_TC2_WO1 ((PIN_PA13E_TC2_WO1 << 16) | MUX_PA13E_TC2_WO1)
#define PORT_PA13E_TC2_WO1 (_UL_(1) << 13)
#define PIN_PA17E_TC2_WO1 _L_(17)
#define MUX_PA17E_TC2_WO1 _L_(4)
#define PINMUX_PA17E_TC2_WO1 ((PIN_PA17E_TC2_WO1 << 16) | MUX_PA17E_TC2_WO1)
#define PORT_PA17E_TC2_WO1 (_UL_(1) << 17)

#define PIN_PA18E_TC3_WO0 _L_(18)
#define MUX_PA18E_TC3_WO0 _L_(4)
#define PINMUX_PA18E_TC3_WO0 ((PIN_PA18E_TC3_WO0 << 16) | MUX_PA18E_TC3_WO0)
#define PORT_PA18E_TC3_WO0 (_UL_(1) << 18)
#define PIN_PA14E_TC3_WO0 _L_(14)
#define MUX_PA14E_TC3_WO0 _L_(4)
#define PINMUX_PA14E_TC3_WO0 ((PIN_PA14E_TC3_WO0 << 16) | MUX_PA14E_TC3_WO0)
#define PORT_PA14E_TC3_WO0 (_UL_(1) << 14)
#define PIN_PA15E_TC3_WO1 _L_(15)
#define MUX_PA15E_TC3_WO1 _L_(4)
#define PINMUX_PA15E_TC3_WO1 ((PIN_PA15E_TC3_WO1 << 16) | MUX_PA15E_TC3_WO1)
#define PORT_PA15E_TC3_WO1 (_UL_(1) << 15)
#define PIN_PA19E_TC3_WO1 _L_(19)
#define MUX_PA19E_TC3_WO1 _L_(4)
#define PINMUX_PA19E_TC3_WO1 ((PIN_PA19E_TC3_WO1 << 16) | MUX_PA19E_TC3_WO1)
#define PORT_PA19E_TC3_WO1 (_UL_(1) << 19)

#define PIN_PA27H_TAL_BRK _L_(27)
#define MUX_PA27H_TAL_BRK _L_(7)
#define PINMUX_PA27H_TAL_BRK ((PIN_PA27H_TAL_BRK << 16) | MUX_PA27H_TAL_BRK)
#define PORT_PA27H_TAL_BRK (_UL_(1) << 27)
#define PIN_PB31H_TAL_BRK _L_(63)
#define MUX_PB31H_TAL_BRK _L_(7)
#define PINMUX_PB31H_TAL_BRK ((PIN_PB31H_TAL_BRK << 16) | MUX_PB31H_TAL_BRK)
#define PORT_PB31H_TAL_BRK (_UL_(1) << 31)

#define PIN_PA14F_TCC2_WO0 _L_(14)
#define MUX_PA14F_TCC2_WO0 _L_(5)
#define PINMUX_PA14F_TCC2_WO0 ((PIN_PA14F_TCC2_WO0 << 16) | MUX_PA14F_TCC2_WO0)
#define PORT_PA14F_TCC2_WO0 (_UL_(1) << 14)
#define PIN_PA30F_TCC2_WO0 _L_(30)
#define MUX_PA30F_TCC2_WO0 _L_(5)
#define PINMUX_PA30F_TCC2_WO0 ((PIN_PA30F_TCC2_WO0 << 16) | MUX_PA30F_TCC2_WO0)
#define PORT_PA30F_TCC2_WO0 (_UL_(1) << 30)
#define PIN_PA15F_TCC2_WO1 _L_(15)
#define MUX_PA15F_TCC2_WO1 _L_(5)
#define PINMUX_PA15F_TCC2_WO1 ((PIN_PA15F_TCC2_WO1 << 16) | MUX_PA15F_TCC2_WO1)
#define PORT_PA15F_TCC2_WO1 (_UL_(1) << 15)
#define PIN_PA31F_TCC2_WO1 _L_(31)
#define MUX_PA31F_TCC2_WO1 _L_(5)
#define PINMUX_PA31F_TCC2_WO1 ((PIN_PA31F_TCC2_WO1 << 16) | MUX_PA31F_TCC2_WO1)
#define PORT_PA31F_TCC2_WO1 (_UL_(1) << 31)
#define PIN_PA24F_TCC2_WO2 _L_(24)
#define MUX_PA24F_TCC2_WO2 _L_(5)
#define PINMUX_PA24F_TCC2_WO2 ((PIN_PA24F_TCC2_WO2 << 16) | MUX_PA24F_TCC2_WO2)
#define PORT_PA24F_TCC2_WO2 (_UL_(1) << 24)
#define PIN_PB02F_TCC2_WO2 _L_(34)
#define MUX_PB02F_TCC2_WO2 _L_(5)
#define PINMUX_PB02F_TCC2_WO2 ((PIN_PB02F_TCC2_WO2 << 16) | MUX_PB02F_TCC2_WO2)
#define PORT_PB02F_TCC2_WO2 (_UL_(1) << 2)

#define PIN_PB12F_TCC3_WO0 _L_(44)
#define MUX_PB12F_TCC3_WO0 _L_(5)
#define PINMUX_PB12F_TCC3_WO0 ((PIN_PB12F_TCC3_WO0 << 16) | MUX_PB12F_TCC3_WO0)
#define PORT_PB12F_TCC3_WO0 (_UL_(1) << 12)
#define PIN_PB16F_TCC3_WO0 _L_(48)
#define MUX_PB16F_TCC3_WO0 _L_(5)
#define PINMUX_PB16F_TCC3_WO0 ((PIN_PB16F_TCC3_WO0 << 16) | MUX_PB16F_TCC3_WO0)
#define PORT_PB16F_TCC3_WO0 (_UL_(1) << 16)
#define PIN_PB13F_TCC3_WO1 _L_(45)
#define MUX_PB13F_TCC3_WO1 _L_(5)
#define PINMUX_PB13F_TCC3_WO1 ((PIN_PB13F_TCC3_WO1 << 16) | MUX_PB13F_TCC3_WO1)
#define PORT_PB13F_TCC3_WO1 (_UL_(1) << 13)
#define PIN_PB17F_TCC3_WO1 _L_(49)
#define MUX_PB17F_TCC3_WO1 _L_(5)
#define PINMUX_PB17F_TCC3_WO1 ((PIN_PB17F_TCC3_WO1 << 16) | MUX_PB17F_TCC3_WO1)
#define PORT_PB17F_TCC3_WO1 (_UL_(1) << 17)

#define PIN_PA22E_TC4_WO0 _L_(22)
#define MUX_PA22E_TC4_WO0 _L_(4)
#define PINMUX_PA22E_TC4_WO0 ((PIN_PA22E_TC4_WO0 << 16) | MUX_PA22E_TC4_WO0)
#define PORT_PA22E_TC4_WO0 (_UL_(1) << 22)
#define PIN_PB08E_TC4_WO0 _L_(40)
#define MUX_PB08E_TC4_WO0 _L_(4)
#define PINMUX_PB08E_TC4_WO0 ((PIN_PB08E_TC4_WO0 << 16) | MUX_PB08E_TC4_WO0)
#define PORT_PB08E_TC4_WO0 (_UL_(1) << 8)
#define PIN_PB12E_TC4_WO0 _L_(44)
#define MUX_PB12E_TC4_WO0 _L_(4)
#define PINMUX_PB12E_TC4_WO0 ((PIN_PB12E_TC4_WO0 << 16) | MUX_PB12E_TC4_WO0)
#define PORT_PB12E_TC4_WO0 (_UL_(1) << 12)
#define PIN_PA23E_TC4_WO1 _L_(23)
#define MUX_PA23E_TC4_WO1 _L_(4)
#define PINMUX_PA23E_TC4_WO1 ((PIN_PA23E_TC4_WO1 << 16) | MUX_PA23E_TC4_WO1)
#define PORT_PA23E_TC4_WO1 (_UL_(1) << 23)
#define PIN_PB09E_TC4_WO1 _L_(41)
#define MUX_PB09E_TC4_WO1 _L_(4)
#define PINMUX_PB09E_TC4_WO1 ((PIN_PB09E_TC4_WO1 << 16) | MUX_PB09E_TC4_WO1)
#define PORT_PB09E_TC4_WO1 (_UL_(1) << 9)
#define PIN_PB13E_TC4_WO1 _L_(45)
#define MUX_PB13E_TC4_WO1 _L_(4)
#define PINMUX_PB13E_TC4_WO1 ((PIN_PB13E_TC4_WO1 << 16) | MUX_PB13E_TC4_WO1)
#define PORT_PB13E_TC4_WO1 (_UL_(1) << 13)

#define PIN_PA24E_TC5_WO0 _L_(24)
#define MUX_PA24E_TC5_WO0 _L_(4)
#define PINMUX_PA24E_TC5_WO0 ((PIN_PA24E_TC5_WO0 << 16) | MUX_PA24E_TC5_WO0)
#define PORT_PA24E_TC5_WO0 (_UL_(1) << 24)
#define PIN_PB10E_TC5_WO0 _L_(42)
#define MUX_PB10E_TC5_WO0 _L_(4)
#define PINMUX_PB10E_TC5_WO0 ((PIN_PB10E_TC5_WO0 << 16) | MUX_PB10E_TC5_WO0)
#define PORT_PB10E_TC5_WO0 (_UL_(1) << 10)
#define PIN_PB14E_TC5_WO0 _L_(46)
#define MUX_PB14E_TC5_WO0 _L_(4)
#define PINMUX_PB14E_TC5_WO0 ((PIN_PB14E_TC5_WO0 << 16) | MUX_PB14E_TC5_WO0)
#define PORT_PB14E_TC5_WO0 (_UL_(1) << 14)
#define PIN_PA25E_TC5_WO1 _L_(25)
#define MUX_PA25E_TC5_WO1 _L_(4)
#define PINMUX_PA25E_TC5_WO1 ((PIN_PA25E_TC5_WO1 << 16) | MUX_PA25E_TC5_WO1)
#define PORT_PA25E_TC5_WO1 (_UL_(1) << 25)
#define PIN_PB11E_TC5_WO1 _L_(43)
#define MUX_PB11E_TC5_WO1 _L_(4)
#define PINMUX_PB11E_TC5_WO1 ((PIN_PB11E_TC5_WO1 << 16) | MUX_PB11E_TC5_WO1)
#define PORT_PB11E_TC5_WO1 (_UL_(1) << 11)
#define PIN_PB15E_TC5_WO1 _L_(47)
#define MUX_PB15E_TC5_WO1 _L_(4)
#define PINMUX_PB15E_TC5_WO1 ((PIN_PB15E_TC5_WO1 << 16) | MUX_PB15E_TC5_WO1)
#define PORT_PB15E_TC5_WO1 (_UL_(1) << 15)

#define PIN_PB18G_PDEC_QDI0 _L_(50)
#define MUX_PB18G_PDEC_QDI0 _L_(6)
#define PINMUX_PB18G_PDEC_QDI0 ((PIN_PB18G_PDEC_QDI0 << 16) | MUX_PB18G_PDEC_QDI0)
#define PORT_PB18G_PDEC_QDI0 (_UL_(1) << 18)
#define PIN_PB23G_PDEC_QDI0 _L_(55)
#define MUX_PB23G_PDEC_QDI0 _L_(6)
#define PINMUX_PB23G_PDEC_QDI0 ((PIN_PB23G_PDEC_QDI0 << 16) | MUX_PB23G_PDEC_QDI0)
#define PORT_PB23G_PDEC_QDI0 (_UL_(1) << 23)
#define PIN_PC16G_PDEC_QDI0 _L_(80)
#define MUX_PC16G_PDEC_QDI0 _L_(6)
#define PINMUX_PC16G_PDEC_QDI0 ((PIN_PC16G_PDEC_QDI0 << 16) | MUX_PC16G_PDEC_QDI0)
#define PORT_PC16G_PDEC_QDI0 (_UL_(1) << 16)
#define PIN_PA24G_PDEC_QDI0 _L_(24)
#define MUX_PA24G_PDEC_QDI0 _L_(6)
#define PINMUX_PA24G_PDEC_QDI0 ((PIN_PA24G_PDEC_QDI0 << 16) | MUX_PA24G_PDEC_QDI0)
#define PORT_PA24G_PDEC_QDI0 (_UL_(1) << 24)
#define PIN_PB19G_PDEC_QDI1 _L_(51)
#define MUX_PB19G_PDEC_QDI1 _L_(6)
#define PINMUX_PB19G_PDEC_QDI1 ((PIN_PB19G_PDEC_QDI1 << 16) | MUX_PB19G_PDEC_QDI1)
#define PORT_PB19G_PDEC_QDI1 (_UL_(1) << 19)
#define PIN_PB24G_PDEC_QDI1 _L_(56)
#define MUX_PB24G_PDEC_QDI1 _L_(6)
#define PINMUX_PB24G_PDEC_QDI1 ((PIN_PB24G_PDEC_QDI1 << 16) | MUX_PB24G_PDEC_QDI1)
#define PORT_PB24G_PDEC_QDI1 (_UL_(1) << 24)
#define PIN_PC17G_PDEC_QDI1 _L_(81)
#define MUX_PC17G_PDEC_QDI1 _L_(6)
#define PINMUX_PC17G_PDEC_QDI1 ((PIN_PC17G_PDEC_QDI1 << 16) | MUX_PC17G_PDEC_QDI1)
#define PORT_PC17G_PDEC_QDI1 (_UL_(1) << 17)
#define PIN_PA25G_PDEC_QDI1 _L_(25)
#define MUX_PA25G_PDEC_QDI1 _L_(6)
#define PINMUX_PA25G_PDEC_QDI1 ((PIN_PA25G_PDEC_QDI1 << 16) | MUX_PA25G_PDEC_QDI1)
#define PORT_PA25G_PDEC_QDI1 (_UL_(1) << 25)
#define PIN_PB20G_PDEC_QDI2 _L_(52)
#define MUX_PB20G_PDEC_QDI2 _L_(6)
#define PINMUX_PB20G_PDEC_QDI2 ((PIN_PB20G_PDEC_QDI2 << 16) | MUX_PB20G_PDEC_QDI2)
#define PORT_PB20G_PDEC_QDI2 (_UL_(1) << 20)
#define PIN_PB25G_PDEC_QDI2 _L_(57)
#define MUX_PB25G_PDEC_QDI2 _L_(6)
#define PINMUX_PB25G_PDEC_QDI2 ((PIN_PB25G_PDEC_QDI2 << 16) | MUX_PB25G_PDEC_QDI2)
#define PORT_PB25G_PDEC_QDI2 (_UL_(1) << 25)
#define PIN_PC18G_PDEC_QDI2 _L_(82)
#define MUX_PC18G_PDEC_QDI2 _L_(6)
#define PINMUX_PC18G_PDEC_QDI2 ((PIN_PC18G_PDEC_QDI2 << 16) | MUX_PC18G_PDEC_QDI2)
#define PORT_PC18G_PDEC_QDI2 (_UL_(1) << 18)
#define PIN_PB22G_PDEC_QDI2 _L_(54)
#define MUX_PB22G_PDEC_QDI2 _L_(6)
#define PINMUX_PB22G_PDEC_QDI2 ((PIN_PB22G_PDEC_QDI2 << 16) | MUX_PB22G_PDEC_QDI2)
#define PORT_PB22G_PDEC_QDI2 (_UL_(1) << 22)

#define PIN_PA04B_AC_AIN0 _L_(4)
#define MUX_PA04B_AC_AIN0 _L_(1)
#define PINMUX_PA04B_AC_AIN0 ((PIN_PA04B_AC_AIN0 << 16) | MUX_PA04B_AC_AIN0)
#define PORT_PA04B_AC_AIN0 (_UL_(1) << 4)
#define PIN_PA05B_AC_AIN1 _L_(5)
#define MUX_PA05B_AC_AIN1 _L_(1)
#define PINMUX_PA05B_AC_AIN1 ((PIN_PA05B_AC_AIN1 << 16) | MUX_PA05B_AC_AIN1)
#define PORT_PA05B_AC_AIN1 (_UL_(1) << 5)
#define PIN_PA06B_AC_AIN2 _L_(6)
#define MUX_PA06B_AC_AIN2 _L_(1)
#define PINMUX_PA06B_AC_AIN2 ((PIN_PA06B_AC_AIN2 << 16) | MUX_PA06B_AC_AIN2)
#define PORT_PA06B_AC_AIN2 (_UL_(1) << 6)
#define PIN_PA07B_AC_AIN3 _L_(7)
#define MUX_PA07B_AC_AIN3 _L_(1)
#define PINMUX_PA07B_AC_AIN3 ((PIN_PA07B_AC_AIN3 << 16) | MUX_PA07B_AC_AIN3)
#define PORT_PA07B_AC_AIN3 (_UL_(1) << 7)
#define PIN_PA12M_AC_CMP0 _L_(12)
#define MUX_PA12M_AC_CMP0 _L_(12)
#define PINMUX_PA12M_AC_CMP0 ((PIN_PA12M_AC_CMP0 << 16) | MUX_PA12M_AC_CMP0)
#define PORT_PA12M_AC_CMP0 (_UL_(1) << 12)
#define PIN_PA18M_AC_CMP0 _L_(18)
#define MUX_PA18M_AC_CMP0 _L_(12)
#define PINMUX_PA18M_AC_CMP0 ((PIN_PA18M_AC_CMP0 << 16) | MUX_PA18M_AC_CMP0)
#define PORT_PA18M_AC_CMP0 (_UL_(1) << 18)
#define PIN_PB24M_AC_CMP0 _L_(56)
#define MUX_PB24M_AC_CMP0 _L_(12)
#define PINMUX_PB24M_AC_CMP0 ((PIN_PB24M_AC_CMP0 << 16) | MUX_PB24M_AC_CMP0)
#define PORT_PB24M_AC_CMP0 (_UL_(1) << 24)
#define PIN_PA13M_AC_CMP1 _L_(13)
#define MUX_PA13M_AC_CMP1 _L_(12)
#define PINMUX_PA13M_AC_CMP1 ((PIN_PA13M_AC_CMP1 << 16) | MUX_PA13M_AC_CMP1)
#define PORT_PA13M_AC_CMP1 (_UL_(1) << 13)
#define PIN_PA19M_AC_CMP1 _L_(19)
#define MUX_PA19M_AC_CMP1 _L_(12)
#define PINMUX_PA19M_AC_CMP1 ((PIN_PA19M_AC_CMP1 << 16) | MUX_PA19M_AC_CMP1)
#define PORT_PA19M_AC_CMP1 (_UL_(1) << 19)
#define PIN_PB25M_AC_CMP1 _L_(57)
#define MUX_PB25M_AC_CMP1 _L_(12)
#define PINMUX_PB25M_AC_CMP1 ((PIN_PB25M_AC_CMP1 << 16) | MUX_PB25M_AC_CMP1)
#define PORT_PB25M_AC_CMP1 (_UL_(1) << 25)

#define PIN_PB11H_QSPI_CS _L_(43)
#define MUX_PB11H_QSPI_CS _L_(7)
#define PINMUX_PB11H_QSPI_CS ((PIN_PB11H_QSPI_CS << 16) | MUX_PB11H_QSPI_CS)
#define PORT_PB11H_QSPI_CS (_UL_(1) << 11)
#define PIN_PA08H_QSPI_DATA0 _L_(8)
#define MUX_PA08H_QSPI_DATA0 _L_(7)
#define PINMUX_PA08H_QSPI_DATA0 ((PIN_PA08H_QSPI_DATA0 << 16) | MUX_PA08H_QSPI_DATA0)
#define PORT_PA08H_QSPI_DATA0 (_UL_(1) << 8)
#define PIN_PA09H_QSPI_DATA1 _L_(9)
#define MUX_PA09H_QSPI_DATA1 _L_(7)
#define PINMUX_PA09H_QSPI_DATA1 ((PIN_PA09H_QSPI_DATA1 << 16) | MUX_PA09H_QSPI_DATA1)
#define PORT_PA09H_QSPI_DATA1 (_UL_(1) << 9)
#define PIN_PA10H_QSPI_DATA2 _L_(10)
#define MUX_PA10H_QSPI_DATA2 _L_(7)
#define PINMUX_PA10H_QSPI_DATA2 ((PIN_PA10H_QSPI_DATA2 << 16) | MUX_PA10H_QSPI_DATA2)
#define PORT_PA10H_QSPI_DATA2 (_UL_(1) << 10)
#define PIN_PA11H_QSPI_DATA3 _L_(11)
#define MUX_PA11H_QSPI_DATA3 _L_(7)
#define PINMUX_PA11H_QSPI_DATA3 ((PIN_PA11H_QSPI_DATA3 << 16) | MUX_PA11H_QSPI_DATA3)
#define PORT_PA11H_QSPI_DATA3 (_UL_(1) << 11)
#define PIN_PB10H_QSPI_SCK _L_(42)
#define MUX_PB10H_QSPI_SCK _L_(7)
#define PINMUX_PB10H_QSPI_SCK ((PIN_PB10H_QSPI_SCK << 16) | MUX_PB10H_QSPI_SCK)
#define PORT_PB10H_QSPI_SCK (_UL_(1) << 10)

#define PIN_PA04N_CCL_IN0 _L_(4)
#define MUX_PA04N_CCL_IN0 _L_(13)
#define PINMUX_PA04N_CCL_IN0 ((PIN_PA04N_CCL_IN0 << 16) | MUX_PA04N_CCL_IN0)
#define PORT_PA04N_CCL_IN0 (_UL_(1) << 4)
#define PIN_PA16N_CCL_IN0 _L_(16)
#define MUX_PA16N_CCL_IN0 _L_(13)
#define PINMUX_PA16N_CCL_IN0 ((PIN_PA16N_CCL_IN0 << 16) | MUX_PA16N_CCL_IN0)
#define PORT_PA16N_CCL_IN0 (_UL_(1) << 16)
#define PIN_PB22N_CCL_IN0 _L_(54)
#define MUX_PB22N_CCL_IN0 _L_(13)
#define PINMUX_PB22N_CCL_IN0 ((PIN_PB22N_CCL_IN0 << 16) | MUX_PB22N_CCL_IN0)
#define PORT_PB22N_CCL_IN0 (_UL_(1) << 22)
#define PIN_PA05N_CCL_IN1 _L_(5)
#define MUX_PA05N_CCL_IN1 _L_(13)
#define PINMUX_PA05N_CCL_IN1 ((PIN_PA05N_CCL_IN1 << 16) | MUX_PA05N_CCL_IN1)
#define PORT_PA05N_CCL_IN1 (_UL_(1) << 5)
#define PIN_PA17N_CCL_IN1 _L_(17)
#define MUX_PA17N_CCL_IN1 _L_(13)
#define PINMUX_PA17N_CCL_IN1 ((PIN_PA17N_CCL_IN1 << 16) | MUX_PA17N_CCL_IN1)
#define PORT_PA17N_CCL_IN1 (_UL_(1) << 17)
#define PIN_PB00N_CCL_IN1 _L_(32)
#define MUX_PB00N_CCL_IN1 _L_(13)
#define PINMUX_PB00N_CCL_IN1 ((PIN_PB00N_CCL_IN1 << 16) | MUX_PB00N_CCL_IN1)
#define PORT_PB00N_CCL_IN1 (_UL_(1) << 0)
#define PIN_PA06N_CCL_IN2 _L_(6)
#define MUX_PA06N_CCL_IN2 _L_(13)
#define PINMUX_PA06N_CCL_IN2 ((PIN_PA06N_CCL_IN2 << 16) | MUX_PA06N_CCL_IN2)
#define PORT_PA06N_CCL_IN2 (_UL_(1) << 6)
#define PIN_PA18N_CCL_IN2 _L_(18)
#define MUX_PA18N_CCL_IN2 _L_(13)
#define PINMUX_PA18N_CCL_IN2 ((PIN_PA18N_CCL_IN2 << 16) | MUX_PA18N_CCL_IN2)
#define PORT_PA18N_CCL_IN2 (_UL_(1) << 18)
#define PIN_PB01N_CCL_IN2 _L_(33)
#define MUX_PB01N_CCL_IN2 _L_(13)
#define PINMUX_PB01N_CCL_IN2 ((PIN_PB01N_CCL_IN2 << 16) | MUX_PB01N_CCL_IN2)
#define PORT_PB01N_CCL_IN2 (_UL_(1) << 1)
#define PIN_PA08N_CCL_IN3 _L_(8)
#define MUX_PA08N_CCL_IN3 _L_(13)
#define PINMUX_PA08N_CCL_IN3 ((PIN_PA08N_CCL_IN3 << 16) | MUX_PA08N_CCL_IN3)
#define PORT_PA08N_CCL_IN3 (_UL_(1) << 8)
#define PIN_PA30N_CCL_IN3 _L_(30)
#define MUX_PA30N_CCL_IN3 _L_(13)
#define PINMUX_PA30N_CCL_IN3 ((PIN_PA30N_CCL_IN3 << 16) | MUX_PA30N_CCL_IN3)
#define PORT_PA30N_CCL_IN3 (_UL_(1) << 30)
#define PIN_PA09N_CCL_IN4 _L_(9)
#define MUX_PA09N_CCL_IN4 _L_(13)
#define PINMUX_PA09N_CCL_IN4 ((PIN_PA09N_CCL_IN4 << 16) | MUX_PA09N_CCL_IN4)
#define PORT_PA09N_CCL_IN4 (_UL_(1) << 9)
#define PIN_PC27N_CCL_IN4 _L_(91)
#define MUX_PC27N_CCL_IN4 _L_(13)
#define PINMUX_PC27N_CCL_IN4 ((PIN_PC27N_CCL_IN4 << 16) | MUX_PC27N_CCL_IN4)
#define PORT_PC27N_CCL_IN4 (_UL_(1) << 27)
#define PIN_PA10N_CCL_IN5 _L_(10)
#define MUX_PA10N_CCL_IN5 _L_(13)
#define PINMUX_PA10N_CCL_IN5 ((PIN_PA10N_CCL_IN5 << 16) | MUX_PA10N_CCL_IN5)
#define PORT_PA10N_CCL_IN5 (_UL_(1) << 10)
#define PIN_PC28N_CCL_IN5 _L_(92)
#define MUX_PC28N_CCL_IN5 _L_(13)
#define PINMUX_PC28N_CCL_IN5 ((PIN_PC28N_CCL_IN5 << 16) | MUX_PC28N_CCL_IN5)
#define PORT_PC28N_CCL_IN5 (_UL_(1) << 28)
#define PIN_PA22N_CCL_IN6 _L_(22)
#define MUX_PA22N_CCL_IN6 _L_(13)
#define PINMUX_PA22N_CCL_IN6 ((PIN_PA22N_CCL_IN6 << 16) | MUX_PA22N_CCL_IN6)
#define PORT_PA22N_CCL_IN6 (_UL_(1) << 22)
#define PIN_PB06N_CCL_IN6 _L_(38)
#define MUX_PB06N_CCL_IN6 _L_(13)
#define PINMUX_PB06N_CCL_IN6 ((PIN_PB06N_CCL_IN6 << 16) | MUX_PB06N_CCL_IN6)
#define PORT_PB06N_CCL_IN6 (_UL_(1) << 6)
#define PIN_PA23N_CCL_IN7 _L_(23)
#define MUX_PA23N_CCL_IN7 _L_(13)
#define PINMUX_PA23N_CCL_IN7 ((PIN_PA23N_CCL_IN7 << 16) | MUX_PA23N_CCL_IN7)
#define PORT_PA23N_CCL_IN7 (_UL_(1) << 23)
#define PIN_PB07N_CCL_IN7 _L_(39)
#define MUX_PB07N_CCL_IN7 _L_(13)
#define PINMUX_PB07N_CCL_IN7 ((PIN_PB07N_CCL_IN7 << 16) | MUX_PB07N_CCL_IN7)
#define PORT_PB07N_CCL_IN7 (_UL_(1) << 7)
#define PIN_PA24N_CCL_IN8 _L_(24)
#define MUX_PA24N_CCL_IN8 _L_(13)
#define PINMUX_PA24N_CCL_IN8 ((PIN_PA24N_CCL_IN8 << 16) | MUX_PA24N_CCL_IN8)
#define PORT_PA24N_CCL_IN8 (_UL_(1) << 24)
#define PIN_PB08N_CCL_IN8 _L_(40)
#define MUX_PB08N_CCL_IN8 _L_(13)
#define PINMUX_PB08N_CCL_IN8 ((PIN_PB08N_CCL_IN8 << 16) | MUX_PB08N_CCL_IN8)
#define PORT_PB08N_CCL_IN8 (_UL_(1) << 8)
#define PIN_PB14N_CCL_IN9 _L_(46)
#define MUX_PB14N_CCL_IN9 _L_(13)
#define PINMUX_PB14N_CCL_IN9 ((PIN_PB14N_CCL_IN9 << 16) | MUX_PB14N_CCL_IN9)
#define PORT_PB14N_CCL_IN9 (_UL_(1) << 14)
#define PIN_PC20N_CCL_IN9 _L_(84)
#define MUX_PC20N_CCL_IN9 _L_(13)
#define PINMUX_PC20N_CCL_IN9 ((PIN_PC20N_CCL_IN9 << 16) | MUX_PC20N_CCL_IN9)
#define PORT_PC20N_CCL_IN9 (_UL_(1) << 20)
#define PIN_PB15N_CCL_IN10 _L_(47)
#define MUX_PB15N_CCL_IN10 _L_(13)
#define PINMUX_PB15N_CCL_IN10 ((PIN_PB15N_CCL_IN10 << 16) | MUX_PB15N_CCL_IN10)
#define PORT_PB15N_CCL_IN10 (_UL_(1) << 15)
#define PIN_PC21N_CCL_IN10 _L_(85)
#define MUX_PC21N_CCL_IN10 _L_(13)
#define PINMUX_PC21N_CCL_IN10 ((PIN_PC21N_CCL_IN10 << 16) | MUX_PC21N_CCL_IN10)
#define PORT_PC21N_CCL_IN10 (_UL_(1) << 21)
#define PIN_PB10N_CCL_IN11 _L_(42)
#define MUX_PB10N_CCL_IN11 _L_(13)
#define PINMUX_PB10N_CCL_IN11 ((PIN_PB10N_CCL_IN11 << 16) | MUX_PB10N_CCL_IN11)
#define PORT_PB10N_CCL_IN11 (_UL_(1) << 10)
#define PIN_PB16N_CCL_IN11 _L_(48)
#define MUX_PB16N_CCL_IN11 _L_(13)
#define PINMUX_PB16N_CCL_IN11 ((PIN_PB16N_CCL_IN11 << 16) | MUX_PB16N_CCL_IN11)
#define PORT_PB16N_CCL_IN11 (_UL_(1) << 16)
#define PIN_PA07N_CCL_OUT0 _L_(7)
#define MUX_PA07N_CCL_OUT0 _L_(13)
#define PINMUX_PA07N_CCL_OUT0 ((PIN_PA07N_CCL_OUT0 << 16) | MUX_PA07N_CCL_OUT0)
#define PORT_PA07N_CCL_OUT0 (_UL_(1) << 7)
#define PIN_PA19N_CCL_OUT0 _L_(19)
#define MUX_PA19N_CCL_OUT0 _L_(13)
#define PINMUX_PA19N_CCL_OUT0 ((PIN_PA19N_CCL_OUT0 << 16) | MUX_PA19N_CCL_OUT0)
#define PORT_PA19N_CCL_OUT0 (_UL_(1) << 19)
#define PIN_PB02N_CCL_OUT0 _L_(34)
#define MUX_PB02N_CCL_OUT0 _L_(13)
#define PINMUX_PB02N_CCL_OUT0 ((PIN_PB02N_CCL_OUT0 << 16) | MUX_PB02N_CCL_OUT0)
#define PORT_PB02N_CCL_OUT0 (_UL_(1) << 2)
#define PIN_PB23N_CCL_OUT0 _L_(55)
#define MUX_PB23N_CCL_OUT0 _L_(13)
#define PINMUX_PB23N_CCL_OUT0 ((PIN_PB23N_CCL_OUT0 << 16) | MUX_PB23N_CCL_OUT0)
#define PORT_PB23N_CCL_OUT0 (_UL_(1) << 23)
#define PIN_PA11N_CCL_OUT1 _L_(11)
#define MUX_PA11N_CCL_OUT1 _L_(13)
#define PINMUX_PA11N_CCL_OUT1 ((PIN_PA11N_CCL_OUT1 << 16) | MUX_PA11N_CCL_OUT1)
#define PORT_PA11N_CCL_OUT1 (_UL_(1) << 11)
#define PIN_PA31N_CCL_OUT1 _L_(31)
#define MUX_PA31N_CCL_OUT1 _L_(13)
#define PINMUX_PA31N_CCL_OUT1 ((PIN_PA31N_CCL_OUT1 << 16) | MUX_PA31N_CCL_OUT1)
#define PORT_PA31N_CCL_OUT1 (_UL_(1) << 31)
#define PIN_PB11N_CCL_OUT1 _L_(43)
#define MUX_PB11N_CCL_OUT1 _L_(13)
#define PINMUX_PB11N_CCL_OUT1 ((PIN_PB11N_CCL_OUT1 << 16) | MUX_PB11N_CCL_OUT1)
#define PORT_PB11N_CCL_OUT1 (_UL_(1) << 11)
#define PIN_PA25N_CCL_OUT2 _L_(25)
#define MUX_PA25N_CCL_OUT2 _L_(13)
#define PINMUX_PA25N_CCL_OUT2 ((PIN_PA25N_CCL_OUT2 << 16) | MUX_PA25N_CCL_OUT2)
#define PORT_PA25N_CCL_OUT2 (_UL_(1) << 25)
#define PIN_PB09N_CCL_OUT2 _L_(41)
#define MUX_PB09N_CCL_OUT2 _L_(13)
#define PINMUX_PB09N_CCL_OUT2 ((PIN_PB09N_CCL_OUT2 << 16) | MUX_PB09N_CCL_OUT2)
#define PORT_PB09N_CCL_OUT2 (_UL_(1) << 9)
#define PIN_PB17N_CCL_OUT3 _L_(49)
#define MUX_PB17N_CCL_OUT3 _L_(13)
#define PINMUX_PB17N_CCL_OUT3 ((PIN_PB17N_CCL_OUT3 << 16) | MUX_PB17N_CCL_OUT3)
#define PORT_PB17N_CCL_OUT3 (_UL_(1) << 17)

#define PIN_PA13D_SERCOM4_PAD0 _L_(13)
#define MUX_PA13D_SERCOM4_PAD0 _L_(3)
#define PINMUX_PA13D_SERCOM4_PAD0 ((PIN_PA13D_SERCOM4_PAD0 << 16) | MUX_PA13D_SERCOM4_PAD0)
#define PORT_PA13D_SERCOM4_PAD0 (_UL_(1) << 13)
#define PIN_PB08D_SERCOM4_PAD0 _L_(40)
#define MUX_PB08D_SERCOM4_PAD0 _L_(3)
#define PINMUX_PB08D_SERCOM4_PAD0 ((PIN_PB08D_SERCOM4_PAD0 << 16) | MUX_PB08D_SERCOM4_PAD0)
#define PORT_PB08D_SERCOM4_PAD0 (_UL_(1) << 8)
#define PIN_PB27D_SERCOM4_PAD0 _L_(59)
#define MUX_PB27D_SERCOM4_PAD0 _L_(3)
#define PINMUX_PB27D_SERCOM4_PAD0 ((PIN_PB27D_SERCOM4_PAD0 << 16) | MUX_PB27D_SERCOM4_PAD0)
#define PORT_PB27D_SERCOM4_PAD0 (_UL_(1) << 27)
#define PIN_PB12C_SERCOM4_PAD0 _L_(44)
#define MUX_PB12C_SERCOM4_PAD0 _L_(2)
#define PINMUX_PB12C_SERCOM4_PAD0 ((PIN_PB12C_SERCOM4_PAD0 << 16) | MUX_PB12C_SERCOM4_PAD0)
#define PORT_PB12C_SERCOM4_PAD0 (_UL_(1) << 12)
#define PIN_PA12D_SERCOM4_PAD1 _L_(12)
#define MUX_PA12D_SERCOM4_PAD1 _L_(3)
#define PINMUX_PA12D_SERCOM4_PAD1 ((PIN_PA12D_SERCOM4_PAD1 << 16) | MUX_PA12D_SERCOM4_PAD1)
#define PORT_PA12D_SERCOM4_PAD1 (_UL_(1) << 12)
#define PIN_PB09D_SERCOM4_PAD1 _L_(41)
#define MUX_PB09D_SERCOM4_PAD1 _L_(3)
#define PINMUX_PB09D_SERCOM4_PAD1 ((PIN_PB09D_SERCOM4_PAD1 << 16) | MUX_PB09D_SERCOM4_PAD1)
#define PORT_PB09D_SERCOM4_PAD1 (_UL_(1) << 9)
#define PIN_PB26D_SERCOM4_PAD1 _L_(58)
#define MUX_PB26D_SERCOM4_PAD1 _L_(3)
#define PINMUX_PB26D_SERCOM4_PAD1 ((PIN_PB26D_SERCOM4_PAD1 << 16) | MUX_PB26D_SERCOM4_PAD1)
#define PORT_PB26D_SERCOM4_PAD1 (_UL_(1) << 26)
#define PIN_PB13C_SERCOM4_PAD1 _L_(45)
#define MUX_PB13C_SERCOM4_PAD1 _L_(2)
#define PINMUX_PB13C_SERCOM4_PAD1 ((PIN_PB13C_SERCOM4_PAD1 << 16) | MUX_PB13C_SERCOM4_PAD1)
#define PORT_PB13C_SERCOM4_PAD1 (_UL_(1) << 13)
#define PIN_PA14D_SERCOM4_PAD2 _L_(14)
#define MUX_PA14D_SERCOM4_PAD2 _L_(3)
#define PINMUX_PA14D_SERCOM4_PAD2 ((PIN_PA14D_SERCOM4_PAD2 << 16) | MUX_PA14D_SERCOM4_PAD2)
#define PORT_PA14D_SERCOM4_PAD2 (_UL_(1) << 14)
#define PIN_PB10D_SERCOM4_PAD2 _L_(42)
#define MUX_PB10D_SERCOM4_PAD2 _L_(3)
#define PINMUX_PB10D_SERCOM4_PAD2 ((PIN_PB10D_SERCOM4_PAD2 << 16) | MUX_PB10D_SERCOM4_PAD2)
#define PORT_PB10D_SERCOM4_PAD2 (_UL_(1) << 10)
#define PIN_PB28D_SERCOM4_PAD2 _L_(60)
#define MUX_PB28D_SERCOM4_PAD2 _L_(3)
#define PINMUX_PB28D_SERCOM4_PAD2 ((PIN_PB28D_SERCOM4_PAD2 << 16) | MUX_PB28D_SERCOM4_PAD2)
#define PORT_PB28D_SERCOM4_PAD2 (_UL_(1) << 28)
#define PIN_PB14C_SERCOM4_PAD2 _L_(46)
#define MUX_PB14C_SERCOM4_PAD2 _L_(2)
#define PINMUX_PB14C_SERCOM4_PAD2 ((PIN_PB14C_SERCOM4_PAD2 << 16) | MUX_PB14C_SERCOM4_PAD2)
#define PORT_PB14C_SERCOM4_PAD2 (_UL_(1) << 14)
#define PIN_PB11D_SERCOM4_PAD3 _L_(43)
#define MUX_PB11D_SERCOM4_PAD3 _L_(3)
#define PINMUX_PB11D_SERCOM4_PAD3 ((PIN_PB11D_SERCOM4_PAD3 << 16) | MUX_PB11D_SERCOM4_PAD3)
#define PORT_PB11D_SERCOM4_PAD3 (_UL_(1) << 11)
#define PIN_PB29D_SERCOM4_PAD3 _L_(61)
#define MUX_PB29D_SERCOM4_PAD3 _L_(3)
#define PINMUX_PB29D_SERCOM4_PAD3 ((PIN_PB29D_SERCOM4_PAD3 << 16) | MUX_PB29D_SERCOM4_PAD3)
#define PORT_PB29D_SERCOM4_PAD3 (_UL_(1) << 29)
#define PIN_PA15D_SERCOM4_PAD3 _L_(15)
#define MUX_PA15D_SERCOM4_PAD3 _L_(3)
#define PINMUX_PA15D_SERCOM4_PAD3 ((PIN_PA15D_SERCOM4_PAD3 << 16) | MUX_PA15D_SERCOM4_PAD3)
#define PORT_PA15D_SERCOM4_PAD3 (_UL_(1) << 15)
#define PIN_PB15C_SERCOM4_PAD3 _L_(47)
#define MUX_PB15C_SERCOM4_PAD3 _L_(2)
#define PINMUX_PB15C_SERCOM4_PAD3 ((PIN_PB15C_SERCOM4_PAD3 << 16) | MUX_PB15C_SERCOM4_PAD3)
#define PORT_PB15C_SERCOM4_PAD3 (_UL_(1) << 15)

#define PIN_PA23D_SERCOM5_PAD0 _L_(23)
#define MUX_PA23D_SERCOM5_PAD0 _L_(3)
#define PINMUX_PA23D_SERCOM5_PAD0 ((PIN_PA23D_SERCOM5_PAD0 << 16) | MUX_PA23D_SERCOM5_PAD0)
#define PORT_PA23D_SERCOM5_PAD0 (_UL_(1) << 23)
#define PIN_PB02D_SERCOM5_PAD0 _L_(34)
#define MUX_PB02D_SERCOM5_PAD0 _L_(3)
#define PINMUX_PB02D_SERCOM5_PAD0 ((PIN_PB02D_SERCOM5_PAD0 << 16) | MUX_PB02D_SERCOM5_PAD0)
#define PORT_PB02D_SERCOM5_PAD0 (_UL_(1) << 2)
#define PIN_PB31D_SERCOM5_PAD0 _L_(63)
#define MUX_PB31D_SERCOM5_PAD0 _L_(3)
#define PINMUX_PB31D_SERCOM5_PAD0 ((PIN_PB31D_SERCOM5_PAD0 << 16) | MUX_PB31D_SERCOM5_PAD0)
#define PORT_PB31D_SERCOM5_PAD0 (_UL_(1) << 31)
#define PIN_PB16C_SERCOM5_PAD0 _L_(48)
#define MUX_PB16C_SERCOM5_PAD0 _L_(2)
#define PINMUX_PB16C_SERCOM5_PAD0 ((PIN_PB16C_SERCOM5_PAD0 << 16) | MUX_PB16C_SERCOM5_PAD0)
#define PORT_PB16C_SERCOM5_PAD0 (_UL_(1) << 16)
#define PIN_PA22D_SERCOM5_PAD1 _L_(22)
#define MUX_PA22D_SERCOM5_PAD1 _L_(3)
#define PINMUX_PA22D_SERCOM5_PAD1 ((PIN_PA22D_SERCOM5_PAD1 << 16) | MUX_PA22D_SERCOM5_PAD1)
#define PORT_PA22D_SERCOM5_PAD1 (_UL_(1) << 22)
#define PIN_PB03D_SERCOM5_PAD1 _L_(35)
#define MUX_PB03D_SERCOM5_PAD1 _L_(3)
#define PINMUX_PB03D_SERCOM5_PAD1 ((PIN_PB03D_SERCOM5_PAD1 << 16) | MUX_PB03D_SERCOM5_PAD1)
#define PORT_PB03D_SERCOM5_PAD1 (_UL_(1) << 3)
#define PIN_PB30D_SERCOM5_PAD1 _L_(62)
#define MUX_PB30D_SERCOM5_PAD1 _L_(3)
#define PINMUX_PB30D_SERCOM5_PAD1 ((PIN_PB30D_SERCOM5_PAD1 << 16) | MUX_PB30D_SERCOM5_PAD1)
#define PORT_PB30D_SERCOM5_PAD1 (_UL_(1) << 30)
#define PIN_PB17C_SERCOM5_PAD1 _L_(49)
#define MUX_PB17C_SERCOM5_PAD1 _L_(2)
#define PINMUX_PB17C_SERCOM5_PAD1 ((PIN_PB17C_SERCOM5_PAD1 << 16) | MUX_PB17C_SERCOM5_PAD1)
#define PORT_PB17C_SERCOM5_PAD1 (_UL_(1) << 17)
#define PIN_PA24D_SERCOM5_PAD2 _L_(24)
#define MUX_PA24D_SERCOM5_PAD2 _L_(3)
#define PINMUX_PA24D_SERCOM5_PAD2 ((PIN_PA24D_SERCOM5_PAD2 << 16) | MUX_PA24D_SERCOM5_PAD2)
#define PORT_PA24D_SERCOM5_PAD2 (_UL_(1) << 24)
#define PIN_PB00D_SERCOM5_PAD2 _L_(32)
#define MUX_PB00D_SERCOM5_PAD2 _L_(3)
#define PINMUX_PB00D_SERCOM5_PAD2 ((PIN_PB00D_SERCOM5_PAD2 << 16) | MUX_PB00D_SERCOM5_PAD2)
#define PORT_PB00D_SERCOM5_PAD2 (_UL_(1) << 0)
#define PIN_PB22D_SERCOM5_PAD2 _L_(54)
#define MUX_PB22D_SERCOM5_PAD2 _L_(3)
#define PINMUX_PB22D_SERCOM5_PAD2 ((PIN_PB22D_SERCOM5_PAD2 << 16) | MUX_PB22D_SERCOM5_PAD2)
#define PORT_PB22D_SERCOM5_PAD2 (_UL_(1) << 22)
#define PIN_PA20C_SERCOM5_PAD2 _L_(20)
#define MUX_PA20C_SERCOM5_PAD2 _L_(2)
#define PINMUX_PA20C_SERCOM5_PAD2 ((PIN_PA20C_SERCOM5_PAD2 << 16) | MUX_PA20C_SERCOM5_PAD2)
#define PORT_PA20C_SERCOM5_PAD2 (_UL_(1) << 20)
#define PIN_PB18C_SERCOM5_PAD2 _L_(50)
#define MUX_PB18C_SERCOM5_PAD2 _L_(2)
#define PINMUX_PB18C_SERCOM5_PAD2 ((PIN_PB18C_SERCOM5_PAD2 << 16) | MUX_PB18C_SERCOM5_PAD2)
#define PORT_PB18C_SERCOM5_PAD2 (_UL_(1) << 18)
#define PIN_PA25D_SERCOM5_PAD3 _L_(25)
#define MUX_PA25D_SERCOM5_PAD3 _L_(3)
#define PINMUX_PA25D_SERCOM5_PAD3 ((PIN_PA25D_SERCOM5_PAD3 << 16) | MUX_PA25D_SERCOM5_PAD3)
#define PORT_PA25D_SERCOM5_PAD3 (_UL_(1) << 25)
#define PIN_PB01D_SERCOM5_PAD3 _L_(33)
#define MUX_PB01D_SERCOM5_PAD3 _L_(3)
#define PINMUX_PB01D_SERCOM5_PAD3 ((PIN_PB01D_SERCOM5_PAD3 << 16) | MUX_PB01D_SERCOM5_PAD3)
#define PORT_PB01D_SERCOM5_PAD3 (_UL_(1) << 1)
#define PIN_PB23D_SERCOM5_PAD3 _L_(55)
#define MUX_PB23D_SERCOM5_PAD3 _L_(3)
#define PINMUX_PB23D_SERCOM5_PAD3 ((PIN_PB23D_SERCOM5_PAD3 << 16) | MUX_PB23D_SERCOM5_PAD3)
#define PORT_PB23D_SERCOM5_PAD3 (_UL_(1) << 23)
#define PIN_PA21C_SERCOM5_PAD3 _L_(21)
#define MUX_PA21C_SERCOM5_PAD3 _L_(2)
#define PINMUX_PA21C_SERCOM5_PAD3 ((PIN_PA21C_SERCOM5_PAD3 << 16) | MUX_PA21C_SERCOM5_PAD3)
#define PORT_PA21C_SERCOM5_PAD3 (_UL_(1) << 21)
#define PIN_PB19C_SERCOM5_PAD3 _L_(51)
#define MUX_PB19C_SERCOM5_PAD3 _L_(2)
#define PINMUX_PB19C_SERCOM5_PAD3 ((PIN_PB19C_SERCOM5_PAD3 << 16) | MUX_PB19C_SERCOM5_PAD3)
#define PORT_PB19C_SERCOM5_PAD3 (_UL_(1) << 19)

#define PIN_PD09D_SERCOM6_PAD0 _L_(105)
#define MUX_PD09D_SERCOM6_PAD0 _L_(3)
#define PINMUX_PD09D_SERCOM6_PAD0 ((PIN_PD09D_SERCOM6_PAD0 << 16) | MUX_PD09D_SERCOM6_PAD0)
#define PORT_PD09D_SERCOM6_PAD0 (_UL_(1) << 9)
#define PIN_PC13D_SERCOM6_PAD0 _L_(77)
#define MUX_PC13D_SERCOM6_PAD0 _L_(3)
#define PINMUX_PC13D_SERCOM6_PAD0 ((PIN_PC13D_SERCOM6_PAD0 << 16) | MUX_PC13D_SERCOM6_PAD0)
#define PORT_PC13D_SERCOM6_PAD0 (_UL_(1) << 13)
#define PIN_PC04C_SERCOM6_PAD0 _L_(68)
#define MUX_PC04C_SERCOM6_PAD0 _L_(2)
#define PINMUX_PC04C_SERCOM6_PAD0 ((PIN_PC04C_SERCOM6_PAD0 << 16) | MUX_PC04C_SERCOM6_PAD0)
#define PORT_PC04C_SERCOM6_PAD0 (_UL_(1) << 4)
#define PIN_PC16C_SERCOM6_PAD0 _L_(80)
#define MUX_PC16C_SERCOM6_PAD0 _L_(2)
#define PINMUX_PC16C_SERCOM6_PAD0 ((PIN_PC16C_SERCOM6_PAD0 << 16) | MUX_PC16C_SERCOM6_PAD0)
#define PORT_PC16C_SERCOM6_PAD0 (_UL_(1) << 16)
#define PIN_PD08D_SERCOM6_PAD1 _L_(104)
#define MUX_PD08D_SERCOM6_PAD1 _L_(3)
#define PINMUX_PD08D_SERCOM6_PAD1 ((PIN_PD08D_SERCOM6_PAD1 << 16) | MUX_PD08D_SERCOM6_PAD1)
#define PORT_PD08D_SERCOM6_PAD1 (_UL_(1) << 8)
#define PIN_PC12D_SERCOM6_PAD1 _L_(76)
#define MUX_PC12D_SERCOM6_PAD1 _L_(3)
#define PINMUX_PC12D_SERCOM6_PAD1 ((PIN_PC12D_SERCOM6_PAD1 << 16) | MUX_PC12D_SERCOM6_PAD1)
#define PORT_PC12D_SERCOM6_PAD1 (_UL_(1) << 12)
#define PIN_PC05C_SERCOM6_PAD1 _L_(69)
#define MUX_PC05C_SERCOM6_PAD1 _L_(2)
#define PINMUX_PC05C_SERCOM6_PAD1 ((PIN_PC05C_SERCOM6_PAD1 << 16) | MUX_PC05C_SERCOM6_PAD1)
#define PORT_PC05C_SERCOM6_PAD1 (_UL_(1) << 5)
#define PIN_PC17C_SERCOM6_PAD1 _L_(81)
#define MUX_PC17C_SERCOM6_PAD1 _L_(2)
#define PINMUX_PC17C_SERCOM6_PAD1 ((PIN_PC17C_SERCOM6_PAD1 << 16) | MUX_PC17C_SERCOM6_PAD1)
#define PORT_PC17C_SERCOM6_PAD1 (_UL_(1) << 17)
#define PIN_PC14D_SERCOM6_PAD2 _L_(78)
#define MUX_PC14D_SERCOM6_PAD2 _L_(3)
#define PINMUX_PC14D_SERCOM6_PAD2 ((PIN_PC14D_SERCOM6_PAD2 << 16) | MUX_PC14D_SERCOM6_PAD2)
#define PORT_PC14D_SERCOM6_PAD2 (_UL_(1) << 14)
#define PIN_PD10D_SERCOM6_PAD2 _L_(106)
#define MUX_PD10D_SERCOM6_PAD2 _L_(3)
#define PINMUX_PD10D_SERCOM6_PAD2 ((PIN_PD10D_SERCOM6_PAD2 << 16) | MUX_PD10D_SERCOM6_PAD2)
#define PORT_PD10D_SERCOM6_PAD2 (_UL_(1) << 10)
#define PIN_PC06C_SERCOM6_PAD2 _L_(70)
#define MUX_PC06C_SERCOM6_PAD2 _L_(2)
#define PINMUX_PC06C_SERCOM6_PAD2 ((PIN_PC06C_SERCOM6_PAD2 << 16) | MUX_PC06C_SERCOM6_PAD2)
#define PORT_PC06C_SERCOM6_PAD2 (_UL_(1) << 6)
#define PIN_PC10C_SERCOM6_PAD2 _L_(74)
#define MUX_PC10C_SERCOM6_PAD2 _L_(2)
#define PINMUX_PC10C_SERCOM6_PAD2 ((PIN_PC10C_SERCOM6_PAD2 << 16) | MUX_PC10C_SERCOM6_PAD2)
#define PORT_PC10C_SERCOM6_PAD2 (_UL_(1) << 10)
#define PIN_PC18C_SERCOM6_PAD2 _L_(82)
#define MUX_PC18C_SERCOM6_PAD2 _L_(2)
#define PINMUX_PC18C_SERCOM6_PAD2 ((PIN_PC18C_SERCOM6_PAD2 << 16) | MUX_PC18C_SERCOM6_PAD2)
#define PORT_PC18C_SERCOM6_PAD2 (_UL_(1) << 18)
#define PIN_PC15D_SERCOM6_PAD3 _L_(79)
#define MUX_PC15D_SERCOM6_PAD3 _L_(3)
#define PINMUX_PC15D_SERCOM6_PAD3 ((PIN_PC15D_SERCOM6_PAD3 << 16) | MUX_PC15D_SERCOM6_PAD3)
#define PORT_PC15D_SERCOM6_PAD3 (_UL_(1) << 15)
#define PIN_PD11D_SERCOM6_PAD3 _L_(107)
#define MUX_PD11D_SERCOM6_PAD3 _L_(3)
#define PINMUX_PD11D_SERCOM6_PAD3 ((PIN_PD11D_SERCOM6_PAD3 << 16) | MUX_PD11D_SERCOM6_PAD3)
#define PORT_PD11D_SERCOM6_PAD3 (_UL_(1) << 11)
#define PIN_PC07C_SERCOM6_PAD3 _L_(71)
#define MUX_PC07C_SERCOM6_PAD3 _L_(2)
#define PINMUX_PC07C_SERCOM6_PAD3 ((PIN_PC07C_SERCOM6_PAD3 << 16) | MUX_PC07C_SERCOM6_PAD3)
#define PORT_PC07C_SERCOM6_PAD3 (_UL_(1) << 7)
#define PIN_PC11C_SERCOM6_PAD3 _L_(75)
#define MUX_PC11C_SERCOM6_PAD3 _L_(2)
#define PINMUX_PC11C_SERCOM6_PAD3 ((PIN_PC11C_SERCOM6_PAD3 << 16) | MUX_PC11C_SERCOM6_PAD3)
#define PORT_PC11C_SERCOM6_PAD3 (_UL_(1) << 11)
#define PIN_PC19C_SERCOM6_PAD3 _L_(83)
#define MUX_PC19C_SERCOM6_PAD3 _L_(2)
#define PINMUX_PC19C_SERCOM6_PAD3 ((PIN_PC19C_SERCOM6_PAD3 << 16) | MUX_PC19C_SERCOM6_PAD3)
#define PORT_PC19C_SERCOM6_PAD3 (_UL_(1) << 19)

#define PIN_PB21D_SERCOM7_PAD0 _L_(53)
#define MUX_PB21D_SERCOM7_PAD0 _L_(3)
#define PINMUX_PB21D_SERCOM7_PAD0 ((PIN_PB21D_SERCOM7_PAD0 << 16) | MUX_PB21D_SERCOM7_PAD0)
#define PORT_PB21D_SERCOM7_PAD0 (_UL_(1) << 21)
#define PIN_PD08C_SERCOM7_PAD0 _L_(104)
#define MUX_PD08C_SERCOM7_PAD0 _L_(2)
#define PINMUX_PD08C_SERCOM7_PAD0 ((PIN_PD08C_SERCOM7_PAD0 << 16) | MUX_PD08C_SERCOM7_PAD0)
#define PORT_PD08C_SERCOM7_PAD0 (_UL_(1) << 8)
#define PIN_PB30C_SERCOM7_PAD0 _L_(62)
#define MUX_PB30C_SERCOM7_PAD0 _L_(2)
#define PINMUX_PB30C_SERCOM7_PAD0 ((PIN_PB30C_SERCOM7_PAD0 << 16) | MUX_PB30C_SERCOM7_PAD0)
#define PORT_PB30C_SERCOM7_PAD0 (_UL_(1) << 30)
#define PIN_PC12C_SERCOM7_PAD0 _L_(76)
#define MUX_PC12C_SERCOM7_PAD0 _L_(2)
#define PINMUX_PC12C_SERCOM7_PAD0 ((PIN_PC12C_SERCOM7_PAD0 << 16) | MUX_PC12C_SERCOM7_PAD0)
#define PORT_PC12C_SERCOM7_PAD0 (_UL_(1) << 12)
#define PIN_PB20D_SERCOM7_PAD1 _L_(52)
#define MUX_PB20D_SERCOM7_PAD1 _L_(3)
#define PINMUX_PB20D_SERCOM7_PAD1 ((PIN_PB20D_SERCOM7_PAD1 << 16) | MUX_PB20D_SERCOM7_PAD1)
#define PORT_PB20D_SERCOM7_PAD1 (_UL_(1) << 20)
#define PIN_PD09C_SERCOM7_PAD1 _L_(105)
#define MUX_PD09C_SERCOM7_PAD1 _L_(2)
#define PINMUX_PD09C_SERCOM7_PAD1 ((PIN_PD09C_SERCOM7_PAD1 << 16) | MUX_PD09C_SERCOM7_PAD1)
#define PORT_PD09C_SERCOM7_PAD1 (_UL_(1) << 9)
#define PIN_PB31C_SERCOM7_PAD1 _L_(63)
#define MUX_PB31C_SERCOM7_PAD1 _L_(2)
#define PINMUX_PB31C_SERCOM7_PAD1 ((PIN_PB31C_SERCOM7_PAD1 << 16) | MUX_PB31C_SERCOM7_PAD1)
#define PORT_PB31C_SERCOM7_PAD1 (_UL_(1) << 31)
#define PIN_PC13C_SERCOM7_PAD1 _L_(77)
#define MUX_PC13C_SERCOM7_PAD1 _L_(2)
#define PINMUX_PC13C_SERCOM7_PAD1 ((PIN_PC13C_SERCOM7_PAD1 << 16) | MUX_PC13C_SERCOM7_PAD1)
#define PORT_PC13C_SERCOM7_PAD1 (_UL_(1) << 13)
#define PIN_PB18D_SERCOM7_PAD2 _L_(50)
#define MUX_PB18D_SERCOM7_PAD2 _L_(3)
#define PINMUX_PB18D_SERCOM7_PAD2 ((PIN_PB18D_SERCOM7_PAD2 << 16) | MUX_PB18D_SERCOM7_PAD2)
#define PORT_PB18D_SERCOM7_PAD2 (_UL_(1) << 18)
#define PIN_PC10D_SERCOM7_PAD2 _L_(74)
#define MUX_PC10D_SERCOM7_PAD2 _L_(3)
#define PINMUX_PC10D_SERCOM7_PAD2 ((PIN_PC10D_SERCOM7_PAD2 << 16) | MUX_PC10D_SERCOM7_PAD2)
#define PORT_PC10D_SERCOM7_PAD2 (_UL_(1) << 10)
#define PIN_PC14C_SERCOM7_PAD2 _L_(78)
#define MUX_PC14C_SERCOM7_PAD2 _L_(2)
#define PINMUX_PC14C_SERCOM7_PAD2 ((PIN_PC14C_SERCOM7_PAD2 << 16) | MUX_PC14C_SERCOM7_PAD2)
#define PORT_PC14C_SERCOM7_PAD2 (_UL_(1) << 14)
#define PIN_PD10C_SERCOM7_PAD2 _L_(106)
#define MUX_PD10C_SERCOM7_PAD2 _L_(2)
#define PINMUX_PD10C_SERCOM7_PAD2 ((PIN_PD10C_SERCOM7_PAD2 << 16) | MUX_PD10C_SERCOM7_PAD2)
#define PORT_PD10C_SERCOM7_PAD2 (_UL_(1) << 10)
#define PIN_PA30C_SERCOM7_PAD2 _L_(30)
#define MUX_PA30C_SERCOM7_PAD2 _L_(2)
#define PINMUX_PA30C_SERCOM7_PAD2 ((PIN_PA30C_SERCOM7_PAD2 << 16) | MUX_PA30C_SERCOM7_PAD2)
#define PORT_PA30C_SERCOM7_PAD2 (_UL_(1) << 30)
#define PIN_PB19D_SERCOM7_PAD3 _L_(51)
#define MUX_PB19D_SERCOM7_PAD3 _L_(3)
#define PINMUX_PB19D_SERCOM7_PAD3 ((PIN_PB19D_SERCOM7_PAD3 << 16) | MUX_PB19D_SERCOM7_PAD3)
#define PORT_PB19D_SERCOM7_PAD3 (_UL_(1) << 19)
#define PIN_PC11D_SERCOM7_PAD3 _L_(75)
#define MUX_PC11D_SERCOM7_PAD3 _L_(3)
#define PINMUX_PC11D_SERCOM7_PAD3 ((PIN_PC11D_SERCOM7_PAD3 << 16) | MUX_PC11D_SERCOM7_PAD3)
#define PORT_PC11D_SERCOM7_PAD3 (_UL_(1) << 11)
#define PIN_PC15C_SERCOM7_PAD3 _L_(79)
#define MUX_PC15C_SERCOM7_PAD3 _L_(2)
#define PINMUX_PC15C_SERCOM7_PAD3 ((PIN_PC15C_SERCOM7_PAD3 << 16) | MUX_PC15C_SERCOM7_PAD3)
#define PORT_PC15C_SERCOM7_PAD3 (_UL_(1) << 15)
#define PIN_PD11C_SERCOM7_PAD3 _L_(107)
#define MUX_PD11C_SERCOM7_PAD3 _L_(2)
#define PINMUX_PD11C_SERCOM7_PAD3 ((PIN_PD11C_SERCOM7_PAD3 << 16) | MUX_PD11C_SERCOM7_PAD3)
#define PORT_PD11C_SERCOM7_PAD3 (_UL_(1) << 11)
#define PIN_PA31C_SERCOM7_PAD3 _L_(31)
#define MUX_PA31C_SERCOM7_PAD3 _L_(2)
#define PINMUX_PA31C_SERCOM7_PAD3 ((PIN_PA31C_SERCOM7_PAD3 << 16) | MUX_PA31C_SERCOM7_PAD3)
#define PORT_PA31C_SERCOM7_PAD3 (_UL_(1) << 31)

#define PIN_PB14F_TCC4_WO0 _L_(46)
#define MUX_PB14F_TCC4_WO0 _L_(5)
#define PINMUX_PB14F_TCC4_WO0 ((PIN_PB14F_TCC4_WO0 << 16) | MUX_PB14F_TCC4_WO0)
#define PORT_PB14F_TCC4_WO0 (_UL_(1) << 14)
#define PIN_PB30F_TCC4_WO0 _L_(62)
#define MUX_PB30F_TCC4_WO0 _L_(5)
#define PINMUX_PB30F_TCC4_WO0 ((PIN_PB30F_TCC4_WO0 << 16) | MUX_PB30F_TCC4_WO0)
#define PORT_PB30F_TCC4_WO0 (_UL_(1) << 30)
#define PIN_PB15F_TCC4_WO1 _L_(47)
#define MUX_PB15F_TCC4_WO1 _L_(5)
#define PINMUX_PB15F_TCC4_WO1 ((PIN_PB15F_TCC4_WO1 << 16) | MUX_PB15F_TCC4_WO1)
#define PORT_PB15F_TCC4_WO1 (_UL_(1) << 15)
#define PIN_PB31F_TCC4_WO1 _L_(63)
#define MUX_PB31F_TCC4_WO1 _L_(5)
#define PINMUX_PB31F_TCC4_WO1 ((PIN_PB31F_TCC4_WO1 << 16) | MUX_PB31F_TCC4_WO1)
#define PORT_PB31F_TCC4_WO1 (_UL_(1) << 31)

#define PIN_PA30E_TC6_WO0 _L_(30)
#define MUX_PA30E_TC6_WO0 _L_(4)
#define PINMUX_PA30E_TC6_WO0 ((PIN_PA30E_TC6_WO0 << 16) | MUX_PA30E_TC6_WO0)
#define PORT_PA30E_TC6_WO0 (_UL_(1) << 30)
#define PIN_PB02E_TC6_WO0 _L_(34)
#define MUX_PB02E_TC6_WO0 _L_(4)
#define PINMUX_PB02E_TC6_WO0 ((PIN_PB02E_TC6_WO0 << 16) | MUX_PB02E_TC6_WO0)
#define PORT_PB02E_TC6_WO0 (_UL_(1) << 2)
#define PIN_PB16E_TC6_WO0 _L_(48)
#define MUX_PB16E_TC6_WO0 _L_(4)
#define PINMUX_PB16E_TC6_WO0 ((PIN_PB16E_TC6_WO0 << 16) | MUX_PB16E_TC6_WO0)
#define PORT_PB16E_TC6_WO0 (_UL_(1) << 16)
#define PIN_PA31E_TC6_WO1 _L_(31)
#define MUX_PA31E_TC6_WO1 _L_(4)
#define PINMUX_PA31E_TC6_WO1 ((PIN_PA31E_TC6_WO1 << 16) | MUX_PA31E_TC6_WO1)
#define PORT_PA31E_TC6_WO1 (_UL_(1) << 31)
#define PIN_PB03E_TC6_WO1 _L_(35)
#define MUX_PB03E_TC6_WO1 _L_(4)
#define PINMUX_PB03E_TC6_WO1 ((PIN_PB03E_TC6_WO1 << 16) | MUX_PB03E_TC6_WO1)
#define PORT_PB03E_TC6_WO1 (_UL_(1) << 3)
#define PIN_PB17E_TC6_WO1 _L_(49)
#define MUX_PB17E_TC6_WO1 _L_(4)
#define PINMUX_PB17E_TC6_WO1 ((PIN_PB17E_TC6_WO1 << 16) | MUX_PB17E_TC6_WO1)
#define PORT_PB17E_TC6_WO1 (_UL_(1) << 17)

#define PIN_PA20E_TC7_WO0 _L_(20)
#define MUX_PA20E_TC7_WO0 _L_(4)
#define PINMUX_PA20E_TC7_WO0 ((PIN_PA20E_TC7_WO0 << 16) | MUX_PA20E_TC7_WO0)
#define PORT_PA20E_TC7_WO0 (_UL_(1) << 20)
#define PIN_PB00E_TC7_WO0 _L_(32)
#define MUX_PB00E_TC7_WO0 _L_(4)
#define PINMUX_PB00E_TC7_WO0 ((PIN_PB00E_TC7_WO0 << 16) | MUX_PB00E_TC7_WO0)
#define PORT_PB00E_TC7_WO0 (_UL_(1) << 0)
#define PIN_PB22E_TC7_WO0 _L_(54)
#define MUX_PB22E_TC7_WO0 _L_(4)
#define PINMUX_PB22E_TC7_WO0 ((PIN_PB22E_TC7_WO0 << 16) | MUX_PB22E_TC7_WO0)
#define PORT_PB22E_TC7_WO0 (_UL_(1) << 22)
#define PIN_PA21E_TC7_WO1 _L_(21)
#define MUX_PA21E_TC7_WO1 _L_(4)
#define PINMUX_PA21E_TC7_WO1 ((PIN_PA21E_TC7_WO1 << 16) | MUX_PA21E_TC7_WO1)
#define PORT_PA21E_TC7_WO1 (_UL_(1) << 21)
#define PIN_PB01E_TC7_WO1 _L_(33)
#define MUX_PB01E_TC7_WO1 _L_(4)
#define PINMUX_PB01E_TC7_WO1 ((PIN_PB01E_TC7_WO1 << 16) | MUX_PB01E_TC7_WO1)
#define PORT_PB01E_TC7_WO1 (_UL_(1) << 1)
#define PIN_PB23E_TC7_WO1 _L_(55)
#define MUX_PB23E_TC7_WO1 _L_(4)
#define PINMUX_PB23E_TC7_WO1 ((PIN_PB23E_TC7_WO1 << 16) | MUX_PB23E_TC7_WO1)
#define PORT_PB23E_TC7_WO1 (_UL_(1) << 23)

#define PIN_PA02B_ADC0_AIN0 _L_(2)
#define MUX_PA02B_ADC0_AIN0 _L_(1)
#define PINMUX_PA02B_ADC0_AIN0 ((PIN_PA02B_ADC0_AIN0 << 16) | MUX_PA02B_ADC0_AIN0)
#define PORT_PA02B_ADC0_AIN0 (_UL_(1) << 2)
#define PIN_PA03B_ADC0_AIN1 _L_(3)
#define MUX_PA03B_ADC0_AIN1 _L_(1)
#define PINMUX_PA03B_ADC0_AIN1 ((PIN_PA03B_ADC0_AIN1 << 16) | MUX_PA03B_ADC0_AIN1)
#define PORT_PA03B_ADC0_AIN1 (_UL_(1) << 3)
#define PIN_PB08B_ADC0_AIN2 _L_(40)
#define MUX_PB08B_ADC0_AIN2 _L_(1)
#define PINMUX_PB08B_ADC0_AIN2 ((PIN_PB08B_ADC0_AIN2 << 16) | MUX_PB08B_ADC0_AIN2)
#define PORT_PB08B_ADC0_AIN2 (_UL_(1) << 8)
#define PIN_PB09B_ADC0_AIN3 _L_(41)
#define MUX_PB09B_ADC0_AIN3 _L_(1)
#define PINMUX_PB09B_ADC0_AIN3 ((PIN_PB09B_ADC0_AIN3 << 16) | MUX_PB09B_ADC0_AIN3)
#define PORT_PB09B_ADC0_AIN3 (_UL_(1) << 9)
#define PIN_PA04B_ADC0_AIN4 _L_(4)
#define MUX_PA04B_ADC0_AIN4 _L_(1)
#define PINMUX_PA04B_ADC0_AIN4 ((PIN_PA04B_ADC0_AIN4 << 16) | MUX_PA04B_ADC0_AIN4)
#define PORT_PA04B_ADC0_AIN4 (_UL_(1) << 4)
#define PIN_PA05B_ADC0_AIN5 _L_(5)
#define MUX_PA05B_ADC0_AIN5 _L_(1)
#define PINMUX_PA05B_ADC0_AIN5 ((PIN_PA05B_ADC0_AIN5 << 16) | MUX_PA05B_ADC0_AIN5)
#define PORT_PA05B_ADC0_AIN5 (_UL_(1) << 5)
#define PIN_PA06B_ADC0_AIN6 _L_(6)
#define MUX_PA06B_ADC0_AIN6 _L_(1)
#define PINMUX_PA06B_ADC0_AIN6 ((PIN_PA06B_ADC0_AIN6 << 16) | MUX_PA06B_ADC0_AIN6)
#define PORT_PA06B_ADC0_AIN6 (_UL_(1) << 6)
#define PIN_PA07B_ADC0_AIN7 _L_(7)
#define MUX_PA07B_ADC0_AIN7 _L_(1)
#define PINMUX_PA07B_ADC0_AIN7 ((PIN_PA07B_ADC0_AIN7 << 16) | MUX_PA07B_ADC0_AIN7)
#define PORT_PA07B_ADC0_AIN7 (_UL_(1) << 7)
#define PIN_PA08B_ADC0_AIN8 _L_(8)
#define MUX_PA08B_ADC0_AIN8 _L_(1)
#define PINMUX_PA08B_ADC0_AIN8 ((PIN_PA08B_ADC0_AIN8 << 16) | MUX_PA08B_ADC0_AIN8)
#define PORT_PA08B_ADC0_AIN8 (_UL_(1) << 8)
#define PIN_PA09B_ADC0_AIN9 _L_(9)
#define MUX_PA09B_ADC0_AIN9 _L_(1)
#define PINMUX_PA09B_ADC0_AIN9 ((PIN_PA09B_ADC0_AIN9 << 16) | MUX_PA09B_ADC0_AIN9)
#define PORT_PA09B_ADC0_AIN9 (_UL_(1) << 9)
#define PIN_PA10B_ADC0_AIN10 _L_(10)
#define MUX_PA10B_ADC0_AIN10 _L_(1)
#define PINMUX_PA10B_ADC0_AIN10 ((PIN_PA10B_ADC0_AIN10 << 16) | MUX_PA10B_ADC0_AIN10)
#define PORT_PA10B_ADC0_AIN10 (_UL_(1) << 10)
#define PIN_PA11B_ADC0_AIN11 _L_(11)
#define MUX_PA11B_ADC0_AIN11 _L_(1)
#define PINMUX_PA11B_ADC0_AIN11 ((PIN_PA11B_ADC0_AIN11 << 16) | MUX_PA11B_ADC0_AIN11)
#define PORT_PA11B_ADC0_AIN11 (_UL_(1) << 11)
#define PIN_PB00B_ADC0_AIN12 _L_(32)
#define MUX_PB00B_ADC0_AIN12 _L_(1)
#define PINMUX_PB00B_ADC0_AIN12 ((PIN_PB00B_ADC0_AIN12 << 16) | MUX_PB00B_ADC0_AIN12)
#define PORT_PB00B_ADC0_AIN12 (_UL_(1) << 0)
#define PIN_PB01B_ADC0_AIN13 _L_(33)
#define MUX_PB01B_ADC0_AIN13 _L_(1)
#define PINMUX_PB01B_ADC0_AIN13 ((PIN_PB01B_ADC0_AIN13 << 16) | MUX_PB01B_ADC0_AIN13)
#define PORT_PB01B_ADC0_AIN13 (_UL_(1) << 1)
#define PIN_PB02B_ADC0_AIN14 _L_(34)
#define MUX_PB02B_ADC0_AIN14 _L_(1)
#define PINMUX_PB02B_ADC0_AIN14 ((PIN_PB02B_ADC0_AIN14 << 16) | MUX_PB02B_ADC0_AIN14)
#define PORT_PB02B_ADC0_AIN14 (_UL_(1) << 2)
#define PIN_PB03B_ADC0_AIN15 _L_(35)
#define MUX_PB03B_ADC0_AIN15 _L_(1)
#define PINMUX_PB03B_ADC0_AIN15 ((PIN_PB03B_ADC0_AIN15 << 16) | MUX_PB03B_ADC0_AIN15)
#define PORT_PB03B_ADC0_AIN15 (_UL_(1) << 3)
#define PIN_PA03O_ADC0_DRV0 _L_(3)
#define MUX_PA03O_ADC0_DRV0 _L_(14)
#define PINMUX_PA03O_ADC0_DRV0 ((PIN_PA03O_ADC0_DRV0 << 16) | MUX_PA03O_ADC0_DRV0)
#define PORT_PA03O_ADC0_DRV0 (_UL_(1) << 3)
#define PIN_PB08O_ADC0_DRV1 _L_(40)
#define MUX_PB08O_ADC0_DRV1 _L_(14)
#define PINMUX_PB08O_ADC0_DRV1 ((PIN_PB08O_ADC0_DRV1 << 16) | MUX_PB08O_ADC0_DRV1)
#define PORT_PB08O_ADC0_DRV1 (_UL_(1) << 8)
#define PIN_PB09O_ADC0_DRV2 _L_(41)
#define MUX_PB09O_ADC0_DRV2 _L_(14)
#define PINMUX_PB09O_ADC0_DRV2 ((PIN_PB09O_ADC0_DRV2 << 16) | MUX_PB09O_ADC0_DRV2)
#define PORT_PB09O_ADC0_DRV2 (_UL_(1) << 9)
#define PIN_PA04O_ADC0_DRV3 _L_(4)
#define MUX_PA04O_ADC0_DRV3 _L_(14)
#define PINMUX_PA04O_ADC0_DRV3 ((PIN_PA04O_ADC0_DRV3 << 16) | MUX_PA04O_ADC0_DRV3)
#define PORT_PA04O_ADC0_DRV3 (_UL_(1) << 4)
#define PIN_PA06O_ADC0_DRV4 _L_(6)
#define MUX_PA06O_ADC0_DRV4 _L_(14)
#define PINMUX_PA06O_ADC0_DRV4 ((PIN_PA06O_ADC0_DRV4 << 16) | MUX_PA06O_ADC0_DRV4)
#define PORT_PA06O_ADC0_DRV4 (_UL_(1) << 6)
#define PIN_PA07O_ADC0_DRV5 _L_(7)
#define MUX_PA07O_ADC0_DRV5 _L_(14)
#define PINMUX_PA07O_ADC0_DRV5 ((PIN_PA07O_ADC0_DRV5 << 16) | MUX_PA07O_ADC0_DRV5)
#define PORT_PA07O_ADC0_DRV5 (_UL_(1) << 7)
#define PIN_PA08O_ADC0_DRV6 _L_(8)
#define MUX_PA08O_ADC0_DRV6 _L_(14)
#define PINMUX_PA08O_ADC0_DRV6 ((PIN_PA08O_ADC0_DRV6 << 16) | MUX_PA08O_ADC0_DRV6)
#define PORT_PA08O_ADC0_DRV6 (_UL_(1) << 8)
#define PIN_PA09O_ADC0_DRV7 _L_(9)
#define MUX_PA09O_ADC0_DRV7 _L_(14)
#define PINMUX_PA09O_ADC0_DRV7 ((PIN_PA09O_ADC0_DRV7 << 16) | MUX_PA09O_ADC0_DRV7)
#define PORT_PA09O_ADC0_DRV7 (_UL_(1) << 9)
#define PIN_PA10O_ADC0_DRV8 _L_(10)
#define MUX_PA10O_ADC0_DRV8 _L_(14)
#define PINMUX_PA10O_ADC0_DRV8 ((PIN_PA10O_ADC0_DRV8 << 16) | MUX_PA10O_ADC0_DRV8)
#define PORT_PA10O_ADC0_DRV8 (_UL_(1) << 10)
#define PIN_PA11O_ADC0_DRV9 _L_(11)
#define MUX_PA11O_ADC0_DRV9 _L_(14)
#define PINMUX_PA11O_ADC0_DRV9 ((PIN_PA11O_ADC0_DRV9 << 16) | MUX_PA11O_ADC0_DRV9)
#define PORT_PA11O_ADC0_DRV9 (_UL_(1) << 11)
#define PIN_PA16O_ADC0_DRV10 _L_(16)
#define MUX_PA16O_ADC0_DRV10 _L_(14)
#define PINMUX_PA16O_ADC0_DRV10 ((PIN_PA16O_ADC0_DRV10 << 16) | MUX_PA16O_ADC0_DRV10)
#define PORT_PA16O_ADC0_DRV10 (_UL_(1) << 16)
#define PIN_PA17O_ADC0_DRV11 _L_(17)
#define MUX_PA17O_ADC0_DRV11 _L_(14)
#define PINMUX_PA17O_ADC0_DRV11 ((PIN_PA17O_ADC0_DRV11 << 16) | MUX_PA17O_ADC0_DRV11)
#define PORT_PA17O_ADC0_DRV11 (_UL_(1) << 17)
#define PIN_PA18O_ADC0_DRV12 _L_(18)
#define MUX_PA18O_ADC0_DRV12 _L_(14)
#define PINMUX_PA18O_ADC0_DRV12 ((PIN_PA18O_ADC0_DRV12 << 16) | MUX_PA18O_ADC0_DRV12)
#define PORT_PA18O_ADC0_DRV12 (_UL_(1) << 18)
#define PIN_PA19O_ADC0_DRV13 _L_(19)
#define MUX_PA19O_ADC0_DRV13 _L_(14)
#define PINMUX_PA19O_ADC0_DRV13 ((PIN_PA19O_ADC0_DRV13 << 16) | MUX_PA19O_ADC0_DRV13)
#define PORT_PA19O_ADC0_DRV13 (_UL_(1) << 19)
#define PIN_PA20O_ADC0_DRV14 _L_(20)
#define MUX_PA20O_ADC0_DRV14 _L_(14)
#define PINMUX_PA20O_ADC0_DRV14 ((PIN_PA20O_ADC0_DRV14 << 16) | MUX_PA20O_ADC0_DRV14)
#define PORT_PA20O_ADC0_DRV14 (_UL_(1) << 20)
#define PIN_PA21O_ADC0_DRV15 _L_(21)
#define MUX_PA21O_ADC0_DRV15 _L_(14)
#define PINMUX_PA21O_ADC0_DRV15 ((PIN_PA21O_ADC0_DRV15 << 16) | MUX_PA21O_ADC0_DRV15)
#define PORT_PA21O_ADC0_DRV15 (_UL_(1) << 21)
#define PIN_PA22O_ADC0_DRV16 _L_(22)
#define MUX_PA22O_ADC0_DRV16 _L_(14)
#define PINMUX_PA22O_ADC0_DRV16 ((PIN_PA22O_ADC0_DRV16 << 16) | MUX_PA22O_ADC0_DRV16)
#define PORT_PA22O_ADC0_DRV16 (_UL_(1) << 22)
#define PIN_PA23O_ADC0_DRV17 _L_(23)
#define MUX_PA23O_ADC0_DRV17 _L_(14)
#define PINMUX_PA23O_ADC0_DRV17 ((PIN_PA23O_ADC0_DRV17 << 16) | MUX_PA23O_ADC0_DRV17)
#define PORT_PA23O_ADC0_DRV17 (_UL_(1) << 23)
#define PIN_PA27O_ADC0_DRV18 _L_(27)
#define MUX_PA27O_ADC0_DRV18 _L_(14)
#define PINMUX_PA27O_ADC0_DRV18 ((PIN_PA27O_ADC0_DRV18 << 16) | MUX_PA27O_ADC0_DRV18)
#define PORT_PA27O_ADC0_DRV18 (_UL_(1) << 27)
#define PIN_PA30O_ADC0_DRV19 _L_(30)
#define MUX_PA30O_ADC0_DRV19 _L_(14)
#define PINMUX_PA30O_ADC0_DRV19 ((PIN_PA30O_ADC0_DRV19 << 16) | MUX_PA30O_ADC0_DRV19)
#define PORT_PA30O_ADC0_DRV19 (_UL_(1) << 30)
#define PIN_PB02O_ADC0_DRV20 _L_(34)
#define MUX_PB02O_ADC0_DRV20 _L_(14)
#define PINMUX_PB02O_ADC0_DRV20 ((PIN_PB02O_ADC0_DRV20 << 16) | MUX_PB02O_ADC0_DRV20)
#define PORT_PB02O_ADC0_DRV20 (_UL_(1) << 2)
#define PIN_PB03O_ADC0_DRV21 _L_(35)
#define MUX_PB03O_ADC0_DRV21 _L_(14)
#define PINMUX_PB03O_ADC0_DRV21 ((PIN_PB03O_ADC0_DRV21 << 16) | MUX_PB03O_ADC0_DRV21)
#define PORT_PB03O_ADC0_DRV21 (_UL_(1) << 3)
#define PIN_PB04O_ADC0_DRV22 _L_(36)
#define MUX_PB04O_ADC0_DRV22 _L_(14)
#define PINMUX_PB04O_ADC0_DRV22 ((PIN_PB04O_ADC0_DRV22 << 16) | MUX_PB04O_ADC0_DRV22)
#define PORT_PB04O_ADC0_DRV22 (_UL_(1) << 4)
#define PIN_PB05O_ADC0_DRV23 _L_(37)
#define MUX_PB05O_ADC0_DRV23 _L_(14)
#define PINMUX_PB05O_ADC0_DRV23 ((PIN_PB05O_ADC0_DRV23 << 16) | MUX_PB05O_ADC0_DRV23)
#define PORT_PB05O_ADC0_DRV23 (_UL_(1) << 5)
#define PIN_PB06O_ADC0_DRV24 _L_(38)
#define MUX_PB06O_ADC0_DRV24 _L_(14)
#define PINMUX_PB06O_ADC0_DRV24 ((PIN_PB06O_ADC0_DRV24 << 16) | MUX_PB06O_ADC0_DRV24)
#define PORT_PB06O_ADC0_DRV24 (_UL_(1) << 6)
#define PIN_PB07O_ADC0_DRV25 _L_(39)
#define MUX_PB07O_ADC0_DRV25 _L_(14)
#define PINMUX_PB07O_ADC0_DRV25 ((PIN_PB07O_ADC0_DRV25 << 16) | MUX_PB07O_ADC0_DRV25)
#define PORT_PB07O_ADC0_DRV25 (_UL_(1) << 7)
#define PIN_PB12O_ADC0_DRV26 _L_(44)
#define MUX_PB12O_ADC0_DRV26 _L_(14)
#define PINMUX_PB12O_ADC0_DRV26 ((PIN_PB12O_ADC0_DRV26 << 16) | MUX_PB12O_ADC0_DRV26)
#define PORT_PB12O_ADC0_DRV26 (_UL_(1) << 12)
#define PIN_PB13O_ADC0_DRV27 _L_(45)
#define MUX_PB13O_ADC0_DRV27 _L_(14)
#define PINMUX_PB13O_ADC0_DRV27 ((PIN_PB13O_ADC0_DRV27 << 16) | MUX_PB13O_ADC0_DRV27)
#define PORT_PB13O_ADC0_DRV27 (_UL_(1) << 13)
#define PIN_PB14O_ADC0_DRV28 _L_(46)
#define MUX_PB14O_ADC0_DRV28 _L_(14)
#define PINMUX_PB14O_ADC0_DRV28 ((PIN_PB14O_ADC0_DRV28 << 16) | MUX_PB14O_ADC0_DRV28)
#define PORT_PB14O_ADC0_DRV28 (_UL_(1) << 14)
#define PIN_PB15O_ADC0_DRV29 _L_(47)
#define MUX_PB15O_ADC0_DRV29 _L_(14)
#define PINMUX_PB15O_ADC0_DRV29 ((PIN_PB15O_ADC0_DRV29 << 16) | MUX_PB15O_ADC0_DRV29)
#define PORT_PB15O_ADC0_DRV29 (_UL_(1) << 15)
#define PIN_PB00O_ADC0_DRV30 _L_(32)
#define MUX_PB00O_ADC0_DRV30 _L_(14)
#define PINMUX_PB00O_ADC0_DRV30 ((PIN_PB00O_ADC0_DRV30 << 16) | MUX_PB00O_ADC0_DRV30)
#define PORT_PB00O_ADC0_DRV30 (_UL_(1) << 0)
#define PIN_PB01O_ADC0_DRV31 _L_(33)
#define MUX_PB01O_ADC0_DRV31 _L_(14)
#define PINMUX_PB01O_ADC0_DRV31 ((PIN_PB01O_ADC0_DRV31 << 16) | MUX_PB01O_ADC0_DRV31)
#define PORT_PB01O_ADC0_DRV31 (_UL_(1) << 1)
#define PIN_PA03B_ADC0_PTCXY0 _L_(3)
#define MUX_PA03B_ADC0_PTCXY0 _L_(1)
#define PINMUX_PA03B_ADC0_PTCXY0 ((PIN_PA03B_ADC0_PTCXY0 << 16) | MUX_PA03B_ADC0_PTCXY0)
#define PORT_PA03B_ADC0_PTCXY0 (_UL_(1) << 3)
#define PIN_PB08B_ADC0_PTCXY1 _L_(40)
#define MUX_PB08B_ADC0_PTCXY1 _L_(1)
#define PINMUX_PB08B_ADC0_PTCXY1 ((PIN_PB08B_ADC0_PTCXY1 << 16) | MUX_PB08B_ADC0_PTCXY1)
#define PORT_PB08B_ADC0_PTCXY1 (_UL_(1) << 8)
#define PIN_PB09B_ADC0_PTCXY2 _L_(41)
#define MUX_PB09B_ADC0_PTCXY2 _L_(1)
#define PINMUX_PB09B_ADC0_PTCXY2 ((PIN_PB09B_ADC0_PTCXY2 << 16) | MUX_PB09B_ADC0_PTCXY2)
#define PORT_PB09B_ADC0_PTCXY2 (_UL_(1) << 9)
#define PIN_PA04B_ADC0_PTCXY3 _L_(4)
#define MUX_PA04B_ADC0_PTCXY3 _L_(1)
#define PINMUX_PA04B_ADC0_PTCXY3 ((PIN_PA04B_ADC0_PTCXY3 << 16) | MUX_PA04B_ADC0_PTCXY3)
#define PORT_PA04B_ADC0_PTCXY3 (_UL_(1) << 4)
#define PIN_PA06B_ADC0_PTCXY4 _L_(6)
#define MUX_PA06B_ADC0_PTCXY4 _L_(1)
#define PINMUX_PA06B_ADC0_PTCXY4 ((PIN_PA06B_ADC0_PTCXY4 << 16) | MUX_PA06B_ADC0_PTCXY4)
#define PORT_PA06B_ADC0_PTCXY4 (_UL_(1) << 6)
#define PIN_PA07B_ADC0_PTCXY5 _L_(7)
#define MUX_PA07B_ADC0_PTCXY5 _L_(1)
#define PINMUX_PA07B_ADC0_PTCXY5 ((PIN_PA07B_ADC0_PTCXY5 << 16) | MUX_PA07B_ADC0_PTCXY5)
#define PORT_PA07B_ADC0_PTCXY5 (_UL_(1) << 7)
#define PIN_PA08B_ADC0_PTCXY6 _L_(8)
#define MUX_PA08B_ADC0_PTCXY6 _L_(1)
#define PINMUX_PA08B_ADC0_PTCXY6 ((PIN_PA08B_ADC0_PTCXY6 << 16) | MUX_PA08B_ADC0_PTCXY6)
#define PORT_PA08B_ADC0_PTCXY6 (_UL_(1) << 8)
#define PIN_PA09B_ADC0_PTCXY7 _L_(9)
#define MUX_PA09B_ADC0_PTCXY7 _L_(1)
#define PINMUX_PA09B_ADC0_PTCXY7 ((PIN_PA09B_ADC0_PTCXY7 << 16) | MUX_PA09B_ADC0_PTCXY7)
#define PORT_PA09B_ADC0_PTCXY7 (_UL_(1) << 9)
#define PIN_PA10B_ADC0_PTCXY8 _L_(10)
#define MUX_PA10B_ADC0_PTCXY8 _L_(1)
#define PINMUX_PA10B_ADC0_PTCXY8 ((PIN_PA10B_ADC0_PTCXY8 << 16) | MUX_PA10B_ADC0_PTCXY8)
#define PORT_PA10B_ADC0_PTCXY8 (_UL_(1) << 10)
#define PIN_PA11B_ADC0_PTCXY9 _L_(11)
#define MUX_PA11B_ADC0_PTCXY9 _L_(1)
#define PINMUX_PA11B_ADC0_PTCXY9 ((PIN_PA11B_ADC0_PTCXY9 << 16) | MUX_PA11B_ADC0_PTCXY9)
#define PORT_PA11B_ADC0_PTCXY9 (_UL_(1) << 11)
#define PIN_PA16B_ADC0_PTCXY10 _L_(16)
#define MUX_PA16B_ADC0_PTCXY10 _L_(1)
#define PINMUX_PA16B_ADC0_PTCXY10 ((PIN_PA16B_ADC0_PTCXY10 << 16) | MUX_PA16B_ADC0_PTCXY10)
#define PORT_PA16B_ADC0_PTCXY10 (_UL_(1) << 16)
#define PIN_PA17B_ADC0_PTCXY11 _L_(17)
#define MUX_PA17B_ADC0_PTCXY11 _L_(1)
#define PINMUX_PA17B_ADC0_PTCXY11 ((PIN_PA17B_ADC0_PTCXY11 << 16) | MUX_PA17B_ADC0_PTCXY11)
#define PORT_PA17B_ADC0_PTCXY11 (_UL_(1) << 17)
#define PIN_PA19B_ADC0_PTCXY13 _L_(19)
#define MUX_PA19B_ADC0_PTCXY13 _L_(1)
#define PINMUX_PA19B_ADC0_PTCXY13 ((PIN_PA19B_ADC0_PTCXY13 << 16) | MUX_PA19B_ADC0_PTCXY13)
#define PORT_PA19B_ADC0_PTCXY13 (_UL_(1) << 19)
#define PIN_PA20B_ADC0_PTCXY14 _L_(20)
#define MUX_PA20B_ADC0_PTCXY14 _L_(1)
#define PINMUX_PA20B_ADC0_PTCXY14 ((PIN_PA20B_ADC0_PTCXY14 << 16) | MUX_PA20B_ADC0_PTCXY14)
#define PORT_PA20B_ADC0_PTCXY14 (_UL_(1) << 20)
#define PIN_PA21B_ADC0_PTCXY15 _L_(21)
#define MUX_PA21B_ADC0_PTCXY15 _L_(1)
#define PINMUX_PA21B_ADC0_PTCXY15 ((PIN_PA21B_ADC0_PTCXY15 << 16) | MUX_PA21B_ADC0_PTCXY15)
#define PORT_PA21B_ADC0_PTCXY15 (_UL_(1) << 21)
#define PIN_PA22B_ADC0_PTCXY16 _L_(22)
#define MUX_PA22B_ADC0_PTCXY16 _L_(1)
#define PINMUX_PA22B_ADC0_PTCXY16 ((PIN_PA22B_ADC0_PTCXY16 << 16) | MUX_PA22B_ADC0_PTCXY16)
#define PORT_PA22B_ADC0_PTCXY16 (_UL_(1) << 22)
#define PIN_PA23B_ADC0_PTCXY17 _L_(23)
#define MUX_PA23B_ADC0_PTCXY17 _L_(1)
#define PINMUX_PA23B_ADC0_PTCXY17 ((PIN_PA23B_ADC0_PTCXY17 << 16) | MUX_PA23B_ADC0_PTCXY17)
#define PORT_PA23B_ADC0_PTCXY17 (_UL_(1) << 23)
#define PIN_PA27B_ADC0_PTCXY18 _L_(27)
#define MUX_PA27B_ADC0_PTCXY18 _L_(1)
#define PINMUX_PA27B_ADC0_PTCXY18 ((PIN_PA27B_ADC0_PTCXY18 << 16) | MUX_PA27B_ADC0_PTCXY18)
#define PORT_PA27B_ADC0_PTCXY18 (_UL_(1) << 27)
#define PIN_PA30B_ADC0_PTCXY19 _L_(30)
#define MUX_PA30B_ADC0_PTCXY19 _L_(1)
#define PINMUX_PA30B_ADC0_PTCXY19 ((PIN_PA30B_ADC0_PTCXY19 << 16) | MUX_PA30B_ADC0_PTCXY19)
#define PORT_PA30B_ADC0_PTCXY19 (_UL_(1) << 30)
#define PIN_PB02B_ADC0_PTCXY20 _L_(34)
#define MUX_PB02B_ADC0_PTCXY20 _L_(1)
#define PINMUX_PB02B_ADC0_PTCXY20 ((PIN_PB02B_ADC0_PTCXY20 << 16) | MUX_PB02B_ADC0_PTCXY20)
#define PORT_PB02B_ADC0_PTCXY20 (_UL_(1) << 2)
#define PIN_PB03B_ADC0_PTCXY21 _L_(35)
#define MUX_PB03B_ADC0_PTCXY21 _L_(1)
#define PINMUX_PB03B_ADC0_PTCXY21 ((PIN_PB03B_ADC0_PTCXY21 << 16) | MUX_PB03B_ADC0_PTCXY21)
#define PORT_PB03B_ADC0_PTCXY21 (_UL_(1) << 3)
#define PIN_PB04B_ADC0_PTCXY22 _L_(36)
#define MUX_PB04B_ADC0_PTCXY22 _L_(1)
#define PINMUX_PB04B_ADC0_PTCXY22 ((PIN_PB04B_ADC0_PTCXY22 << 16) | MUX_PB04B_ADC0_PTCXY22)
#define PORT_PB04B_ADC0_PTCXY22 (_UL_(1) << 4)
#define PIN_PB05B_ADC0_PTCXY23 _L_(37)
#define MUX_PB05B_ADC0_PTCXY23 _L_(1)
#define PINMUX_PB05B_ADC0_PTCXY23 ((PIN_PB05B_ADC0_PTCXY23 << 16) | MUX_PB05B_ADC0_PTCXY23)
#define PORT_PB05B_ADC0_PTCXY23 (_UL_(1) << 5)
#define PIN_PB06B_ADC0_PTCXY24 _L_(38)
#define MUX_PB06B_ADC0_PTCXY24 _L_(1)
#define PINMUX_PB06B_ADC0_PTCXY24 ((PIN_PB06B_ADC0_PTCXY24 << 16) | MUX_PB06B_ADC0_PTCXY24)
#define PORT_PB06B_ADC0_PTCXY24 (_UL_(1) << 6)
#define PIN_PB07B_ADC0_PTCXY25 _L_(39)
#define MUX_PB07B_ADC0_PTCXY25 _L_(1)
#define PINMUX_PB07B_ADC0_PTCXY25 ((PIN_PB07B_ADC0_PTCXY25 << 16) | MUX_PB07B_ADC0_PTCXY25)
#define PORT_PB07B_ADC0_PTCXY25 (_UL_(1) << 7)
#define PIN_PB12B_ADC0_PTCXY26 _L_(44)
#define MUX_PB12B_ADC0_PTCXY26 _L_(1)
#define PINMUX_PB12B_ADC0_PTCXY26 ((PIN_PB12B_ADC0_PTCXY26 << 16) | MUX_PB12B_ADC0_PTCXY26)
#define PORT_PB12B_ADC0_PTCXY26 (_UL_(1) << 12)
#define PIN_PB13B_ADC0_PTCXY27 _L_(45)
#define MUX_PB13B_ADC0_PTCXY27 _L_(1)
#define PINMUX_PB13B_ADC0_PTCXY27 ((PIN_PB13B_ADC0_PTCXY27 << 16) | MUX_PB13B_ADC0_PTCXY27)
#define PORT_PB13B_ADC0_PTCXY27 (_UL_(1) << 13)
#define PIN_PB14B_ADC0_PTCXY28 _L_(46)
#define MUX_PB14B_ADC0_PTCXY28 _L_(1)
#define PINMUX_PB14B_ADC0_PTCXY28 ((PIN_PB14B_ADC0_PTCXY28 << 16) | MUX_PB14B_ADC0_PTCXY28)
#define PORT_PB14B_ADC0_PTCXY28 (_UL_(1) << 14)
#define PIN_PB15B_ADC0_PTCXY29 _L_(47)
#define MUX_PB15B_ADC0_PTCXY29 _L_(1)
#define PINMUX_PB15B_ADC0_PTCXY29 ((PIN_PB15B_ADC0_PTCXY29 << 16) | MUX_PB15B_ADC0_PTCXY29)
#define PORT_PB15B_ADC0_PTCXY29 (_UL_(1) << 15)
#define PIN_PB00B_ADC0_PTCXY30 _L_(32)
#define MUX_PB00B_ADC0_PTCXY30 _L_(1)
#define PINMUX_PB00B_ADC0_PTCXY30 ((PIN_PB00B_ADC0_PTCXY30 << 16) | MUX_PB00B_ADC0_PTCXY30)
#define PORT_PB00B_ADC0_PTCXY30 (_UL_(1) << 0)
#define PIN_PB01B_ADC0_PTCXY31 _L_(33)
#define MUX_PB01B_ADC0_PTCXY31 _L_(1)
#define PINMUX_PB01B_ADC0_PTCXY31 ((PIN_PB01B_ADC0_PTCXY31 << 16) | MUX_PB01B_ADC0_PTCXY31)
#define PORT_PB01B_ADC0_PTCXY31 (_UL_(1) << 1)

#define PIN_PB08B_ADC1_AIN0 _L_(40)
#define MUX_PB08B_ADC1_AIN0 _L_(1)
#define PINMUX_PB08B_ADC1_AIN0 ((PIN_PB08B_ADC1_AIN0 << 16) | MUX_PB08B_ADC1_AIN0)
#define PORT_PB08B_ADC1_AIN0 (_UL_(1) << 8)
#define PIN_PB09B_ADC1_AIN1 _L_(41)
#define MUX_PB09B_ADC1_AIN1 _L_(1)
#define PINMUX_PB09B_ADC1_AIN1 ((PIN_PB09B_ADC1_AIN1 << 16) | MUX_PB09B_ADC1_AIN1)
#define PORT_PB09B_ADC1_AIN1 (_UL_(1) << 9)
#define PIN_PA08B_ADC1_AIN2 _L_(8)
#define MUX_PA08B_ADC1_AIN2 _L_(1)
#define PINMUX_PA08B_ADC1_AIN2 ((PIN_PA08B_ADC1_AIN2 << 16) | MUX_PA08B_ADC1_AIN2)
#define PORT_PA08B_ADC1_AIN2 (_UL_(1) << 8)
#define PIN_PA09B_ADC1_AIN3 _L_(9)
#define MUX_PA09B_ADC1_AIN3 _L_(1)
#define PINMUX_PA09B_ADC1_AIN3 ((PIN_PA09B_ADC1_AIN3 << 16) | MUX_PA09B_ADC1_AIN3)
#define PORT_PA09B_ADC1_AIN3 (_UL_(1) << 9)
#define PIN_PC02B_ADC1_AIN4 _L_(66)
#define MUX_PC02B_ADC1_AIN4 _L_(1)
#define PINMUX_PC02B_ADC1_AIN4 ((PIN_PC02B_ADC1_AIN4 << 16) | MUX_PC02B_ADC1_AIN4)
#define PORT_PC02B_ADC1_AIN4 (_UL_(1) << 2)
#define PIN_PC03B_ADC1_AIN5 _L_(67)
#define MUX_PC03B_ADC1_AIN5 _L_(1)
#define PINMUX_PC03B_ADC1_AIN5 ((PIN_PC03B_ADC1_AIN5 << 16) | MUX_PC03B_ADC1_AIN5)
#define PORT_PC03B_ADC1_AIN5 (_UL_(1) << 3)
#define PIN_PB04B_ADC1_AIN6 _L_(36)
#define MUX_PB04B_ADC1_AIN6 _L_(1)
#define PINMUX_PB04B_ADC1_AIN6 ((PIN_PB04B_ADC1_AIN6 << 16) | MUX_PB04B_ADC1_AIN6)
#define PORT_PB04B_ADC1_AIN6 (_UL_(1) << 4)
#define PIN_PB05B_ADC1_AIN7 _L_(37)
#define MUX_PB05B_ADC1_AIN7 _L_(1)
#define PINMUX_PB05B_ADC1_AIN7 ((PIN_PB05B_ADC1_AIN7 << 16) | MUX_PB05B_ADC1_AIN7)
#define PORT_PB05B_ADC1_AIN7 (_UL_(1) << 5)
#define PIN_PB06B_ADC1_AIN8 _L_(38)
#define MUX_PB06B_ADC1_AIN8 _L_(1)
#define PINMUX_PB06B_ADC1_AIN8 ((PIN_PB06B_ADC1_AIN8 << 16) | MUX_PB06B_ADC1_AIN8)
#define PORT_PB06B_ADC1_AIN8 (_UL_(1) << 6)
#define PIN_PB07B_ADC1_AIN9 _L_(39)
#define MUX_PB07B_ADC1_AIN9 _L_(1)
#define PINMUX_PB07B_ADC1_AIN9 ((PIN_PB07B_ADC1_AIN9 << 16) | MUX_PB07B_ADC1_AIN9)
#define PORT_PB07B_ADC1_AIN9 (_UL_(1) << 7)
#define PIN_PC00B_ADC1_AIN10 _L_(64)
#define MUX_PC00B_ADC1_AIN10 _L_(1)
#define PINMUX_PC00B_ADC1_AIN10 ((PIN_PC00B_ADC1_AIN10 << 16) | MUX_PC00B_ADC1_AIN10)
#define PORT_PC00B_ADC1_AIN10 (_UL_(1) << 0)
#define PIN_PC01B_ADC1_AIN11 _L_(65)
#define MUX_PC01B_ADC1_AIN11 _L_(1)
#define PINMUX_PC01B_ADC1_AIN11 ((PIN_PC01B_ADC1_AIN11 << 16) | MUX_PC01B_ADC1_AIN11)
#define PORT_PC01B_ADC1_AIN11 (_UL_(1) << 1)
#define PIN_PC30B_ADC1_AIN12 _L_(94)
#define MUX_PC30B_ADC1_AIN12 _L_(1)
#define PINMUX_PC30B_ADC1_AIN12 ((PIN_PC30B_ADC1_AIN12 << 16) | MUX_PC30B_ADC1_AIN12)
#define PORT_PC30B_ADC1_AIN12 (_UL_(1) << 30)
#define PIN_PC31B_ADC1_AIN13 _L_(95)
#define MUX_PC31B_ADC1_AIN13 _L_(1)
#define PINMUX_PC31B_ADC1_AIN13 ((PIN_PC31B_ADC1_AIN13 << 16) | MUX_PC31B_ADC1_AIN13)
#define PORT_PC31B_ADC1_AIN13 (_UL_(1) << 31)
#define PIN_PD00B_ADC1_AIN14 _L_(96)
#define MUX_PD00B_ADC1_AIN14 _L_(1)
#define PINMUX_PD00B_ADC1_AIN14 ((PIN_PD00B_ADC1_AIN14 << 16) | MUX_PD00B_ADC1_AIN14)
#define PORT_PD00B_ADC1_AIN14 (_UL_(1) << 0)
#define PIN_PD01B_ADC1_AIN15 _L_(97)
#define MUX_PD01B_ADC1_AIN15 _L_(1)
#define PINMUX_PD01B_ADC1_AIN15 ((PIN_PD01B_ADC1_AIN15 << 16) | MUX_PD01B_ADC1_AIN15)
#define PORT_PD01B_ADC1_AIN15 (_UL_(1) << 1)

#define PIN_PA02B_DAC_VOUT0 _L_(2)
#define MUX_PA02B_DAC_VOUT0 _L_(1)
#define PINMUX_PA02B_DAC_VOUT0 ((PIN_PA02B_DAC_VOUT0 << 16) | MUX_PA02B_DAC_VOUT0)
#define PORT_PA02B_DAC_VOUT0 (_UL_(1) << 2)
#define PIN_PA05B_DAC_VOUT1 _L_(5)
#define MUX_PA05B_DAC_VOUT1 _L_(1)
#define PINMUX_PA05B_DAC_VOUT1 ((PIN_PA05B_DAC_VOUT1 << 16) | MUX_PA05B_DAC_VOUT1)
#define PORT_PA05B_DAC_VOUT1 (_UL_(1) << 5)

#define PIN_PA09J_I2S_FS0 _L_(9)
#define MUX_PA09J_I2S_FS0 _L_(9)
#define PINMUX_PA09J_I2S_FS0 ((PIN_PA09J_I2S_FS0 << 16) | MUX_PA09J_I2S_FS0)
#define PORT_PA09J_I2S_FS0 (_UL_(1) << 9)
#define PIN_PA20J_I2S_FS0 _L_(20)
#define MUX_PA20J_I2S_FS0 _L_(9)
#define PINMUX_PA20J_I2S_FS0 ((PIN_PA20J_I2S_FS0 << 16) | MUX_PA20J_I2S_FS0)
#define PORT_PA20J_I2S_FS0 (_UL_(1) << 20)
#define PIN_PA23J_I2S_FS1 _L_(23)
#define MUX_PA23J_I2S_FS1 _L_(9)
#define PINMUX_PA23J_I2S_FS1 ((PIN_PA23J_I2S_FS1 << 16) | MUX_PA23J_I2S_FS1)
#define PORT_PA23J_I2S_FS1 (_UL_(1) << 23)
#define PIN_PB11J_I2S_FS1 _L_(43)
#define MUX_PB11J_I2S_FS1 _L_(9)
#define PINMUX_PB11J_I2S_FS1 ((PIN_PB11J_I2S_FS1 << 16) | MUX_PB11J_I2S_FS1)
#define PORT_PB11J_I2S_FS1 (_UL_(1) << 11)
#define PIN_PA08J_I2S_MCK0 _L_(8)
#define MUX_PA08J_I2S_MCK0 _L_(9)
#define PINMUX_PA08J_I2S_MCK0 ((PIN_PA08J_I2S_MCK0 << 16) | MUX_PA08J_I2S_MCK0)
#define PORT_PA08J_I2S_MCK0 (_UL_(1) << 8)
#define PIN_PB17J_I2S_MCK0 _L_(49)
#define MUX_PB17J_I2S_MCK0 _L_(9)
#define PINMUX_PB17J_I2S_MCK0 ((PIN_PB17J_I2S_MCK0 << 16) | MUX_PB17J_I2S_MCK0)
#define PORT_PB17J_I2S_MCK0 (_UL_(1) << 17)
#define PIN_PB29J_I2S_MCK1 _L_(61)
#define MUX_PB29J_I2S_MCK1 _L_(9)
#define PINMUX_PB29J_I2S_MCK1 ((PIN_PB29J_I2S_MCK1 << 16) | MUX_PB29J_I2S_MCK1)
#define PORT_PB29J_I2S_MCK1 (_UL_(1) << 29)
#define PIN_PB13J_I2S_MCK1 _L_(45)
#define MUX_PB13J_I2S_MCK1 _L_(9)
#define PINMUX_PB13J_I2S_MCK1 ((PIN_PB13J_I2S_MCK1 << 16) | MUX_PB13J_I2S_MCK1)
#define PORT_PB13J_I2S_MCK1 (_UL_(1) << 13)
#define PIN_PA10J_I2S_SCK0 _L_(10)
#define MUX_PA10J_I2S_SCK0 _L_(9)
#define PINMUX_PA10J_I2S_SCK0 ((PIN_PA10J_I2S_SCK0 << 16) | MUX_PA10J_I2S_SCK0)
#define PORT_PA10J_I2S_SCK0 (_UL_(1) << 10)
#define PIN_PB16J_I2S_SCK0 _L_(48)
#define MUX_PB16J_I2S_SCK0 _L_(9)
#define PINMUX_PB16J_I2S_SCK0 ((PIN_PB16J_I2S_SCK0 << 16) | MUX_PB16J_I2S_SCK0)
#define PORT_PB16J_I2S_SCK0 (_UL_(1) << 16)
#define PIN_PB28J_I2S_SCK1 _L_(60)
#define MUX_PB28J_I2S_SCK1 _L_(9)
#define PINMUX_PB28J_I2S_SCK1 ((PIN_PB28J_I2S_SCK1 << 16) | MUX_PB28J_I2S_SCK1)
#define PORT_PB28J_I2S_SCK1 (_UL_(1) << 28)
#define PIN_PB12J_I2S_SCK1 _L_(44)
#define MUX_PB12J_I2S_SCK1 _L_(9)
#define PINMUX_PB12J_I2S_SCK1 ((PIN_PB12J_I2S_SCK1 << 16) | MUX_PB12J_I2S_SCK1)
#define PORT_PB12J_I2S_SCK1 (_UL_(1) << 12)
#define PIN_PA22J_I2S_SDI _L_(22)
#define MUX_PA22J_I2S_SDI _L_(9)
#define PINMUX_PA22J_I2S_SDI ((PIN_PA22J_I2S_SDI << 16) | MUX_PA22J_I2S_SDI)
#define PORT_PA22J_I2S_SDI (_UL_(1) << 22)
#define PIN_PB10J_I2S_SDI _L_(42)
#define MUX_PB10J_I2S_SDI _L_(9)
#define PINMUX_PB10J_I2S_SDI ((PIN_PB10J_I2S_SDI << 16) | MUX_PB10J_I2S_SDI)
#define PORT_PB10J_I2S_SDI (_UL_(1) << 10)
#define PIN_PA11J_I2S_SDO _L_(11)
#define MUX_PA11J_I2S_SDO _L_(9)
#define PINMUX_PA11J_I2S_SDO ((PIN_PA11J_I2S_SDO << 16) | MUX_PA11J_I2S_SDO)
#define PORT_PA11J_I2S_SDO (_UL_(1) << 11)
#define PIN_PA21J_I2S_SDO _L_(21)
#define MUX_PA21J_I2S_SDO _L_(9)
#define PINMUX_PA21J_I2S_SDO ((PIN_PA21J_I2S_SDO << 16) | MUX_PA21J_I2S_SDO)
#define PORT_PA21J_I2S_SDO (_UL_(1) << 21)

#define PIN_PA14K_PCC_CLK _L_(14)
#define MUX_PA14K_PCC_CLK _L_(10)
#define PINMUX_PA14K_PCC_CLK ((PIN_PA14K_PCC_CLK << 16) | MUX_PA14K_PCC_CLK)
#define PORT_PA14K_PCC_CLK (_UL_(1) << 14)
#define PIN_PA16K_PCC_DATA0 _L_(16)
#define MUX_PA16K_PCC_DATA0 _L_(10)
#define PINMUX_PA16K_PCC_DATA0 ((PIN_PA16K_PCC_DATA0 << 16) | MUX_PA16K_PCC_DATA0)
#define PORT_PA16K_PCC_DATA0 (_UL_(1) << 16)
#define PIN_PA17K_PCC_DATA1 _L_(17)
#define MUX_PA17K_PCC_DATA1 _L_(10)
#define PINMUX_PA17K_PCC_DATA1 ((PIN_PA17K_PCC_DATA1 << 16) | MUX_PA17K_PCC_DATA1)
#define PORT_PA17K_PCC_DATA1 (_UL_(1) << 17)
#define PIN_PA18K_PCC_DATA2 _L_(18)
#define MUX_PA18K_PCC_DATA2 _L_(10)
#define PINMUX_PA18K_PCC_DATA2 ((PIN_PA18K_PCC_DATA2 << 16) | MUX_PA18K_PCC_DATA2)
#define PORT_PA18K_PCC_DATA2 (_UL_(1) << 18)
#define PIN_PA19K_PCC_DATA3 _L_(19)
#define MUX_PA19K_PCC_DATA3 _L_(10)
#define PINMUX_PA19K_PCC_DATA3 ((PIN_PA19K_PCC_DATA3 << 16) | MUX_PA19K_PCC_DATA3)
#define PORT_PA19K_PCC_DATA3 (_UL_(1) << 19)
#define PIN_PA20K_PCC_DATA4 _L_(20)
#define MUX_PA20K_PCC_DATA4 _L_(10)
#define PINMUX_PA20K_PCC_DATA4 ((PIN_PA20K_PCC_DATA4 << 16) | MUX_PA20K_PCC_DATA4)
#define PORT_PA20K_PCC_DATA4 (_UL_(1) << 20)
#define PIN_PA21K_PCC_DATA5 _L_(21)
#define MUX_PA21K_PCC_DATA5 _L_(10)
#define PINMUX_PA21K_PCC_DATA5 ((PIN_PA21K_PCC_DATA5 << 16) | MUX_PA21K_PCC_DATA5)
#define PORT_PA21K_PCC_DATA5 (_UL_(1) << 21)
#define PIN_PA22K_PCC_DATA6 _L_(22)
#define MUX_PA22K_PCC_DATA6 _L_(10)
#define PINMUX_PA22K_PCC_DATA6 ((PIN_PA22K_PCC_DATA6 << 16) | MUX_PA22K_PCC_DATA6)
#define PORT_PA22K_PCC_DATA6 (_UL_(1) << 22)
#define PIN_PA23K_PCC_DATA7 _L_(23)
#define MUX_PA23K_PCC_DATA7 _L_(10)
#define PINMUX_PA23K_PCC_DATA7 ((PIN_PA23K_PCC_DATA7 << 16) | MUX_PA23K_PCC_DATA7)
#define PORT_PA23K_PCC_DATA7 (_UL_(1) << 23)
#define PIN_PB14K_PCC_DATA8 _L_(46)
#define MUX_PB14K_PCC_DATA8 _L_(10)
#define PINMUX_PB14K_PCC_DATA8 ((PIN_PB14K_PCC_DATA8 << 16) | MUX_PB14K_PCC_DATA8)
#define PORT_PB14K_PCC_DATA8 (_UL_(1) << 14)
#define PIN_PB15K_PCC_DATA9 _L_(47)
#define MUX_PB15K_PCC_DATA9 _L_(10)
#define PINMUX_PB15K_PCC_DATA9 ((PIN_PB15K_PCC_DATA9 << 16) | MUX_PB15K_PCC_DATA9)
#define PORT_PB15K_PCC_DATA9 (_UL_(1) << 15)
#define PIN_PC12K_PCC_DATA10 _L_(76)
#define MUX_PC12K_PCC_DATA10 _L_(10)
#define PINMUX_PC12K_PCC_DATA10 ((PIN_PC12K_PCC_DATA10 << 16) | MUX_PC12K_PCC_DATA10)
#define PORT_PC12K_PCC_DATA10 (_UL_(1) << 12)
#define PIN_PC13K_PCC_DATA11 _L_(77)
#define MUX_PC13K_PCC_DATA11 _L_(10)
#define PINMUX_PC13K_PCC_DATA11 ((PIN_PC13K_PCC_DATA11 << 16) | MUX_PC13K_PCC_DATA11)
#define PORT_PC13K_PCC_DATA11 (_UL_(1) << 13)
#define PIN_PC14K_PCC_DATA12 _L_(78)
#define MUX_PC14K_PCC_DATA12 _L_(10)
#define PINMUX_PC14K_PCC_DATA12 ((PIN_PC14K_PCC_DATA12 << 16) | MUX_PC14K_PCC_DATA12)
#define PORT_PC14K_PCC_DATA12 (_UL_(1) << 14)
#define PIN_PC15K_PCC_DATA13 _L_(79)
#define MUX_PC15K_PCC_DATA13 _L_(10)
#define PINMUX_PC15K_PCC_DATA13 ((PIN_PC15K_PCC_DATA13 << 16) | MUX_PC15K_PCC_DATA13)
#define PORT_PC15K_PCC_DATA13 (_UL_(1) << 15)
#define PIN_PA12K_PCC_DEN1 _L_(12)
#define MUX_PA12K_PCC_DEN1 _L_(10)
#define PINMUX_PA12K_PCC_DEN1 ((PIN_PA12K_PCC_DEN1 << 16) | MUX_PA12K_PCC_DEN1)
#define PORT_PA12K_PCC_DEN1 (_UL_(1) << 12)
#define PIN_PA13K_PCC_DEN2 _L_(13)
#define MUX_PA13K_PCC_DEN2 _L_(10)
#define PINMUX_PA13K_PCC_DEN2 ((PIN_PA13K_PCC_DEN2 << 16) | MUX_PA13K_PCC_DEN2)
#define PORT_PA13K_PCC_DEN2 (_UL_(1) << 13)

#define PIN_PA06I_SDHC0_SDCD _L_(6)
#define MUX_PA06I_SDHC0_SDCD _L_(8)
#define PINMUX_PA06I_SDHC0_SDCD ((PIN_PA06I_SDHC0_SDCD << 16) | MUX_PA06I_SDHC0_SDCD)
#define PORT_PA06I_SDHC0_SDCD (_UL_(1) << 6)
#define PIN_PA12I_SDHC0_SDCD _L_(12)
#define MUX_PA12I_SDHC0_SDCD _L_(8)
#define PINMUX_PA12I_SDHC0_SDCD ((PIN_PA12I_SDHC0_SDCD << 16) | MUX_PA12I_SDHC0_SDCD)
#define PORT_PA12I_SDHC0_SDCD (_UL_(1) << 12)
#define PIN_PB12I_SDHC0_SDCD _L_(44)
#define MUX_PB12I_SDHC0_SDCD _L_(8)
#define PINMUX_PB12I_SDHC0_SDCD ((PIN_PB12I_SDHC0_SDCD << 16) | MUX_PB12I_SDHC0_SDCD)
#define PORT_PB12I_SDHC0_SDCD (_UL_(1) << 12)
#define PIN_PC06I_SDHC0_SDCD _L_(70)
#define MUX_PC06I_SDHC0_SDCD _L_(8)
#define PINMUX_PC06I_SDHC0_SDCD ((PIN_PC06I_SDHC0_SDCD << 16) | MUX_PC06I_SDHC0_SDCD)
#define PORT_PC06I_SDHC0_SDCD (_UL_(1) << 6)
#define PIN_PB11I_SDHC0_SDCK _L_(43)
#define MUX_PB11I_SDHC0_SDCK _L_(8)
#define PINMUX_PB11I_SDHC0_SDCK ((PIN_PB11I_SDHC0_SDCK << 16) | MUX_PB11I_SDHC0_SDCK)
#define PORT_PB11I_SDHC0_SDCK (_UL_(1) << 11)
#define PIN_PA08I_SDHC0_SDCMD _L_(8)
#define MUX_PA08I_SDHC0_SDCMD _L_(8)
#define PINMUX_PA08I_SDHC0_SDCMD ((PIN_PA08I_SDHC0_SDCMD << 16) | MUX_PA08I_SDHC0_SDCMD)
#define PORT_PA08I_SDHC0_SDCMD (_UL_(1) << 8)
#define PIN_PA09I_SDHC0_SDDAT0 _L_(9)
#define MUX_PA09I_SDHC0_SDDAT0 _L_(8)
#define PINMUX_PA09I_SDHC0_SDDAT0 ((PIN_PA09I_SDHC0_SDDAT0 << 16) | MUX_PA09I_SDHC0_SDDAT0)
#define PORT_PA09I_SDHC0_SDDAT0 (_UL_(1) << 9)
#define PIN_PA10I_SDHC0_SDDAT1 _L_(10)
#define MUX_PA10I_SDHC0_SDDAT1 _L_(8)
#define PINMUX_PA10I_SDHC0_SDDAT1 ((PIN_PA10I_SDHC0_SDDAT1 << 16) | MUX_PA10I_SDHC0_SDDAT1)
#define PORT_PA10I_SDHC0_SDDAT1 (_UL_(1) << 10)
#define PIN_PA11I_SDHC0_SDDAT2 _L_(11)
#define MUX_PA11I_SDHC0_SDDAT2 _L_(8)
#define PINMUX_PA11I_SDHC0_SDDAT2 ((PIN_PA11I_SDHC0_SDDAT2 << 16) | MUX_PA11I_SDHC0_SDDAT2)
#define PORT_PA11I_SDHC0_SDDAT2 (_UL_(1) << 11)
#define PIN_PB10I_SDHC0_SDDAT3 _L_(42)
#define MUX_PB10I_SDHC0_SDDAT3 _L_(8)
#define PINMUX_PB10I_SDHC0_SDDAT3 ((PIN_PB10I_SDHC0_SDDAT3 << 16) | MUX_PB10I_SDHC0_SDDAT3)
#define PORT_PB10I_SDHC0_SDDAT3 (_UL_(1) << 10)
#define PIN_PA07I_SDHC0_SDWP _L_(7)
#define MUX_PA07I_SDHC0_SDWP _L_(8)
#define PINMUX_PA07I_SDHC0_SDWP ((PIN_PA07I_SDHC0_SDWP << 16) | MUX_PA07I_SDHC0_SDWP)
#define PORT_PA07I_SDHC0_SDWP (_UL_(1) << 7)
#define PIN_PA13I_SDHC0_SDWP _L_(13)
#define MUX_PA13I_SDHC0_SDWP _L_(8)
#define PINMUX_PA13I_SDHC0_SDWP ((PIN_PA13I_SDHC0_SDWP << 16) | MUX_PA13I_SDHC0_SDWP)
#define PORT_PA13I_SDHC0_SDWP (_UL_(1) << 13)
#define PIN_PB13I_SDHC0_SDWP _L_(45)
#define MUX_PB13I_SDHC0_SDWP _L_(8)
#define PINMUX_PB13I_SDHC0_SDWP ((PIN_PB13I_SDHC0_SDWP << 16) | MUX_PB13I_SDHC0_SDWP)
#define PORT_PB13I_SDHC0_SDWP (_UL_(1) << 13)
#define PIN_PC07I_SDHC0_SDWP _L_(71)
#define MUX_PC07I_SDHC0_SDWP _L_(8)
#define PINMUX_PC07I_SDHC0_SDWP ((PIN_PC07I_SDHC0_SDWP << 16) | MUX_PC07I_SDHC0_SDWP)
#define PORT_PC07I_SDHC0_SDWP (_UL_(1) << 7)

#define PIN_PB16I_SDHC1_SDCD _L_(48)
#define MUX_PB16I_SDHC1_SDCD _L_(8)
#define PINMUX_PB16I_SDHC1_SDCD ((PIN_PB16I_SDHC1_SDCD << 16) | MUX_PB16I_SDHC1_SDCD)
#define PORT_PB16I_SDHC1_SDCD (_UL_(1) << 16)
#define PIN_PC20I_SDHC1_SDCD _L_(84)
#define MUX_PC20I_SDHC1_SDCD _L_(8)
#define PINMUX_PC20I_SDHC1_SDCD ((PIN_PC20I_SDHC1_SDCD << 16) | MUX_PC20I_SDHC1_SDCD)
#define PORT_PC20I_SDHC1_SDCD (_UL_(1) << 20)
#define PIN_PD20I_SDHC1_SDCD _L_(116)
#define MUX_PD20I_SDHC1_SDCD _L_(8)
#define PINMUX_PD20I_SDHC1_SDCD ((PIN_PD20I_SDHC1_SDCD << 16) | MUX_PD20I_SDHC1_SDCD)
#define PORT_PD20I_SDHC1_SDCD (_UL_(1) << 20)
#define PIN_PA21I_SDHC1_SDCK _L_(21)
#define MUX_PA21I_SDHC1_SDCK _L_(8)
#define PINMUX_PA21I_SDHC1_SDCK ((PIN_PA21I_SDHC1_SDCK << 16) | MUX_PA21I_SDHC1_SDCK)
#define PORT_PA21I_SDHC1_SDCK (_UL_(1) << 21)
#define PIN_PA20I_SDHC1_SDCMD _L_(20)
#define MUX_PA20I_SDHC1_SDCMD _L_(8)
#define PINMUX_PA20I_SDHC1_SDCMD ((PIN_PA20I_SDHC1_SDCMD << 16) | MUX_PA20I_SDHC1_SDCMD)
#define PORT_PA20I_SDHC1_SDCMD (_UL_(1) << 20)
#define PIN_PB18I_SDHC1_SDDAT0 _L_(50)
#define MUX_PB18I_SDHC1_SDDAT0 _L_(8)
#define PINMUX_PB18I_SDHC1_SDDAT0 ((PIN_PB18I_SDHC1_SDDAT0 << 16) | MUX_PB18I_SDHC1_SDDAT0)
#define PORT_PB18I_SDHC1_SDDAT0 (_UL_(1) << 18)
#define PIN_PB19I_SDHC1_SDDAT1 _L_(51)
#define MUX_PB19I_SDHC1_SDDAT1 _L_(8)
#define PINMUX_PB19I_SDHC1_SDDAT1 ((PIN_PB19I_SDHC1_SDDAT1 << 16) | MUX_PB19I_SDHC1_SDDAT1)
#define PORT_PB19I_SDHC1_SDDAT1 (_UL_(1) << 19)
#define PIN_PB20I_SDHC1_SDDAT2 _L_(52)
#define MUX_PB20I_SDHC1_SDDAT2 _L_(8)
#define PINMUX_PB20I_SDHC1_SDDAT2 ((PIN_PB20I_SDHC1_SDDAT2 << 16) | MUX_PB20I_SDHC1_SDDAT2)
#define PORT_PB20I_SDHC1_SDDAT2 (_UL_(1) << 20)
#define PIN_PB21I_SDHC1_SDDAT3 _L_(53)
#define MUX_PB21I_SDHC1_SDDAT3 _L_(8)
#define PINMUX_PB21I_SDHC1_SDDAT3 ((PIN_PB21I_SDHC1_SDDAT3 << 16) | MUX_PB21I_SDHC1_SDDAT3)
#define PORT_PB21I_SDHC1_SDDAT3 (_UL_(1) << 21)
#define PIN_PB17I_SDHC1_SDWP _L_(49)
#define MUX_PB17I_SDHC1_SDWP _L_(8)
#define PINMUX_PB17I_SDHC1_SDWP ((PIN_PB17I_SDHC1_SDWP << 16) | MUX_PB17I_SDHC1_SDWP)
#define PORT_PB17I_SDHC1_SDWP (_UL_(1) << 17)
#define PIN_PC21I_SDHC1_SDWP _L_(85)
#define MUX_PC21I_SDHC1_SDWP _L_(8)
#define PINMUX_PC21I_SDHC1_SDWP ((PIN_PC21I_SDHC1_SDWP << 16) | MUX_PC21I_SDHC1_SDWP)
#define PORT_PC21I_SDHC1_SDWP (_UL_(1) << 21)
#define PIN_PD21I_SDHC1_SDWP _L_(117)
#define MUX_PD21I_SDHC1_SDWP _L_(8)
#define PINMUX_PD21I_SDHC1_SDWP ((PIN_PD21I_SDHC1_SDWP << 16) | MUX_PD21I_SDHC1_SDWP)
#define PORT_PD21I_SDHC1_SDWP (_UL_(1) << 21)
# 1072 "asf4/samd51/include/samd51p20a.h" 2






#define HSRAM_SIZE _UL_(0x00040000)
#define FLASH_SIZE _UL_(0x00100000)
#define FLASH_PAGE_SIZE 512
#define FLASH_NB_OF_PAGES 2048
#define FLASH_USER_PAGE_SIZE 512
#define BKUPRAM_SIZE _UL_(0x00002000)
#define QSPI_SIZE _UL_(0x01000000)

#define FLASH_ADDR _UL_(0x00000000)
#define CMCC_DATARAM_ADDR _UL_(0x03000000)
#define CMCC_DATARAM_SIZE _UL_(0x00001000)
#define CMCC_TAGRAM_ADDR _UL_(0x03001000)
#define CMCC_TAGRAM_SIZE _UL_(0x00000400)
#define CMCC_VALIDRAM_ADDR _UL_(0x03002000)
#define CMCC_VALIDRAM_SIZE _UL_(0x00000040)
#define HSRAM_ADDR _UL_(0x20000000)
#define HSRAM_ETB_ADDR _UL_(0x20000000)
#define HSRAM_ETB_SIZE _UL_(0x00008000)
#define HSRAM_RET1_ADDR _UL_(0x20000000)
#define HSRAM_RET1_SIZE _UL_(0x00008000)
#define HPB0_ADDR _UL_(0x40000000)
#define HPB1_ADDR _UL_(0x41000000)
#define HPB2_ADDR _UL_(0x42000000)
#define HPB3_ADDR _UL_(0x43000000)
#define SEEPROM_ADDR _UL_(0x44000000)
#define BKUPRAM_ADDR _UL_(0x47000000)
#define PPB_ADDR _UL_(0xE0000000)

#define DSU_DID_RESETVALUE _UL_(0x60060000)
#define ADC0_TOUCH_LINES_NUM 32
#define PORT_GROUPS 4
# 49 "asf4/samd51/include/sam.h" 2
# 11 "./mpconfigport.h" 2
# 62 "./mpconfigport.h"
#define RAM_SIZE HSRAM_SIZE
#define BOOTLOADER_SIZE (16 * 1024)
#define CIRCUITPY_MCU_FAMILY samd51

#define MICROPY_PY_SYS_PLATFORM "MicroChip SAMD51"



#define SPI_FLASH_MAX_BAUDRATE 24000000
# 79 "./mpconfigport.h"
# 1 "../../py/circuitpy_mpconfig.h" 1
# 11 "../../py/circuitpy_mpconfig.h"
       


# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stdatomic.h" 1 3 4
# 27 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stdatomic.h" 3 4
#define _STDATOMIC_H 


# 29 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stdatomic.h" 3 4
typedef enum
  {
    memory_order_relaxed = 0,
    memory_order_consume = 1,
    memory_order_acquire = 2,
    memory_order_release = 3,
    memory_order_acq_rel = 4,
    memory_order_seq_cst = 5
  } memory_order;


typedef _Atomic _Bool atomic_bool;
typedef _Atomic char atomic_char;
typedef _Atomic signed char atomic_schar;
typedef _Atomic unsigned char atomic_uchar;
typedef _Atomic short atomic_short;
typedef _Atomic unsigned short atomic_ushort;
typedef _Atomic int atomic_int;
typedef _Atomic unsigned int atomic_uint;
typedef _Atomic long atomic_long;
typedef _Atomic unsigned long atomic_ulong;
typedef _Atomic long long atomic_llong;
typedef _Atomic unsigned long long atomic_ullong;



typedef _Atomic short unsigned int atomic_char16_t;
typedef _Atomic long unsigned int atomic_char32_t;
typedef _Atomic unsigned int atomic_wchar_t;
typedef _Atomic signed char atomic_int_least8_t;
typedef _Atomic unsigned char atomic_uint_least8_t;
typedef _Atomic short int atomic_int_least16_t;
typedef _Atomic short unsigned int atomic_uint_least16_t;
typedef _Atomic long int atomic_int_least32_t;
typedef _Atomic long unsigned int atomic_uint_least32_t;
typedef _Atomic long long int atomic_int_least64_t;
typedef _Atomic long long unsigned int atomic_uint_least64_t;
typedef _Atomic int atomic_int_fast8_t;
typedef _Atomic unsigned int atomic_uint_fast8_t;
typedef _Atomic int atomic_int_fast16_t;
typedef _Atomic unsigned int atomic_uint_fast16_t;
typedef _Atomic int atomic_int_fast32_t;
typedef _Atomic unsigned int atomic_uint_fast32_t;
typedef _Atomic long long int atomic_int_fast64_t;
typedef _Atomic long long unsigned int atomic_uint_fast64_t;
typedef _Atomic int atomic_intptr_t;
typedef _Atomic unsigned int atomic_uintptr_t;
typedef _Atomic unsigned int atomic_size_t;
typedef _Atomic int atomic_ptrdiff_t;
typedef _Atomic long long int atomic_intmax_t;
typedef _Atomic long long unsigned int atomic_uintmax_t;



#define ATOMIC_VAR_INIT(VALUE) (VALUE)



#define atomic_init(PTR,VAL) atomic_store_explicit (PTR, VAL, __ATOMIC_RELAXED)


#define kill_dependency(Y) __extension__ ({ __auto_type __kill_dependency_tmp = (Y); __kill_dependency_tmp; })






extern void atomic_thread_fence (memory_order);
#define atomic_thread_fence(MO) __atomic_thread_fence (MO)
extern void atomic_signal_fence (memory_order);
#define atomic_signal_fence(MO) __atomic_signal_fence (MO)
#define atomic_is_lock_free(OBJ) __atomic_is_lock_free (sizeof (*(OBJ)), (OBJ))

#define ATOMIC_BOOL_LOCK_FREE __GCC_ATOMIC_BOOL_LOCK_FREE
#define ATOMIC_CHAR_LOCK_FREE __GCC_ATOMIC_CHAR_LOCK_FREE



#define ATOMIC_CHAR16_T_LOCK_FREE __GCC_ATOMIC_CHAR16_T_LOCK_FREE
#define ATOMIC_CHAR32_T_LOCK_FREE __GCC_ATOMIC_CHAR32_T_LOCK_FREE
#define ATOMIC_WCHAR_T_LOCK_FREE __GCC_ATOMIC_WCHAR_T_LOCK_FREE
#define ATOMIC_SHORT_LOCK_FREE __GCC_ATOMIC_SHORT_LOCK_FREE
#define ATOMIC_INT_LOCK_FREE __GCC_ATOMIC_INT_LOCK_FREE
#define ATOMIC_LONG_LOCK_FREE __GCC_ATOMIC_LONG_LOCK_FREE
#define ATOMIC_LLONG_LOCK_FREE __GCC_ATOMIC_LLONG_LOCK_FREE
#define ATOMIC_POINTER_LOCK_FREE __GCC_ATOMIC_POINTER_LOCK_FREE
# 129 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stdatomic.h" 3 4
#define atomic_store_explicit(PTR,VAL,MO) __extension__ ({ __auto_type __atomic_store_ptr = (PTR); __typeof__ ((void)0, *__atomic_store_ptr) __atomic_store_tmp = (VAL); __atomic_store (__atomic_store_ptr, &__atomic_store_tmp, (MO)); })







#define atomic_store(PTR,VAL) atomic_store_explicit (PTR, VAL, __ATOMIC_SEQ_CST)



#define atomic_load_explicit(PTR,MO) __extension__ ({ __auto_type __atomic_load_ptr = (PTR); __typeof__ ((void)0, *__atomic_load_ptr) __atomic_load_tmp; __atomic_load (__atomic_load_ptr, &__atomic_load_tmp, (MO)); __atomic_load_tmp; })
# 150 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stdatomic.h" 3 4
#define atomic_load(PTR) atomic_load_explicit (PTR, __ATOMIC_SEQ_CST)


#define atomic_exchange_explicit(PTR,VAL,MO) __extension__ ({ __auto_type __atomic_exchange_ptr = (PTR); __typeof__ ((void)0, *__atomic_exchange_ptr) __atomic_exchange_val = (VAL); __typeof__ ((void)0, *__atomic_exchange_ptr) __atomic_exchange_tmp; __atomic_exchange (__atomic_exchange_ptr, &__atomic_exchange_val, &__atomic_exchange_tmp, (MO)); __atomic_exchange_tmp; })
# 164 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stdatomic.h" 3 4
#define atomic_exchange(PTR,VAL) atomic_exchange_explicit (PTR, VAL, __ATOMIC_SEQ_CST)



#define atomic_compare_exchange_strong_explicit(PTR,VAL,DES,SUC,FAIL) __extension__ ({ __auto_type __atomic_compare_exchange_ptr = (PTR); __typeof__ ((void)0, *__atomic_compare_exchange_ptr) __atomic_compare_exchange_tmp = (DES); __atomic_compare_exchange (__atomic_compare_exchange_ptr, (VAL), &__atomic_compare_exchange_tmp, 0, (SUC), (FAIL)); })
# 179 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stdatomic.h" 3 4
#define atomic_compare_exchange_strong(PTR,VAL,DES) atomic_compare_exchange_strong_explicit (PTR, VAL, DES, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST)



#define atomic_compare_exchange_weak_explicit(PTR,VAL,DES,SUC,FAIL) __extension__ ({ __auto_type __atomic_compare_exchange_ptr = (PTR); __typeof__ ((void)0, *__atomic_compare_exchange_ptr) __atomic_compare_exchange_tmp = (DES); __atomic_compare_exchange (__atomic_compare_exchange_ptr, (VAL), &__atomic_compare_exchange_tmp, 1, (SUC), (FAIL)); })
# 194 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stdatomic.h" 3 4
#define atomic_compare_exchange_weak(PTR,VAL,DES) atomic_compare_exchange_weak_explicit (PTR, VAL, DES, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST)





#define atomic_fetch_add(PTR,VAL) __atomic_fetch_add ((PTR), (VAL), __ATOMIC_SEQ_CST)

#define atomic_fetch_add_explicit(PTR,VAL,MO) __atomic_fetch_add ((PTR), (VAL), (MO))


#define atomic_fetch_sub(PTR,VAL) __atomic_fetch_sub ((PTR), (VAL), __ATOMIC_SEQ_CST)

#define atomic_fetch_sub_explicit(PTR,VAL,MO) __atomic_fetch_sub ((PTR), (VAL), (MO))


#define atomic_fetch_or(PTR,VAL) __atomic_fetch_or ((PTR), (VAL), __ATOMIC_SEQ_CST)

#define atomic_fetch_or_explicit(PTR,VAL,MO) __atomic_fetch_or ((PTR), (VAL), (MO))


#define atomic_fetch_xor(PTR,VAL) __atomic_fetch_xor ((PTR), (VAL), __ATOMIC_SEQ_CST)

#define atomic_fetch_xor_explicit(PTR,VAL,MO) __atomic_fetch_xor ((PTR), (VAL), (MO))


#define atomic_fetch_and(PTR,VAL) __atomic_fetch_and ((PTR), (VAL), __ATOMIC_SEQ_CST)

#define atomic_fetch_and_explicit(PTR,VAL,MO) __atomic_fetch_and ((PTR), (VAL), (MO))



typedef _Atomic struct
{

  _Bool __val;



} atomic_flag;

#define ATOMIC_FLAG_INIT { 0 }


extern _Bool atomic_flag_test_and_set (volatile atomic_flag *);
#define atomic_flag_test_and_set(PTR) __atomic_test_and_set ((PTR), __ATOMIC_SEQ_CST)

extern _Bool atomic_flag_test_and_set_explicit (volatile atomic_flag *,
      memory_order);
#define atomic_flag_test_and_set_explicit(PTR,MO) __atomic_test_and_set ((PTR), (MO))


extern void atomic_flag_clear (volatile atomic_flag *);
#define atomic_flag_clear(PTR) __atomic_clear ((PTR), __ATOMIC_SEQ_CST)
extern void atomic_flag_clear_explicit (volatile atomic_flag *, memory_order);
#define atomic_flag_clear_explicit(PTR,MO) __atomic_clear ((PTR), (MO))
# 15 "../../py/circuitpy_mpconfig.h" 2







#define MICROPY_OBJ_REPR (MICROPY_OBJ_REPR_C)
# 32 "../../py/circuitpy_mpconfig.h"

# 32 "../../py/circuitpy_mpconfig.h"
extern void common_hal_mcu_disable_interrupts(void);
extern void common_hal_mcu_enable_interrupts(void);
#define MICROPY_BEGIN_ATOMIC_SECTION() (common_hal_mcu_disable_interrupts(), 0)
#define MICROPY_END_ATOMIC_SECTION(state) ((void)state, common_hal_mcu_enable_interrupts())



#define MICROPY_ENABLE_DYNRUNTIME (0)
#define MICROPY_HW_ENABLE_USB_RUNTIME_DEVICE (0)
#define MICROPY_PY_BLUETOOTH (0)
#define MICROPY_PY_LWIP_SLIP (0)
#define MICROPY_PY_OS_DUPTERM (0)
#define MICROPY_ROM_TEXT_COMPRESSION (0)
#define MICROPY_VFS_LFS1 (0)
#define MICROPY_VFS_LFS2 (0)




#define MICROPY_ALLOC_PARSE_CHUNK_INIT (16)

#define MICROPY_ALLOC_PATH_MAX (96)
#define MICROPY_CAN_OVERRIDE_BUILTINS (1)
#define MICROPY_COMP_CONST (1)
#define MICROPY_COMP_DOUBLE_TUPLE_ASSIGN (1)
#define MICROPY_COMP_MODULE_CONST (1)
#define MICROPY_COMP_TRIPLE_TUPLE_ASSIGN (0)
#define MICROPY_DEBUG_PRINTERS (0)
#define MICROPY_EMIT_INLINE_THUMB (CIRCUITPY_ENABLE_MPY_NATIVE)
#define MICROPY_EMIT_THUMB (CIRCUITPY_ENABLE_MPY_NATIVE)
#define MICROPY_EMIT_X64 (0)
#define MICROPY_ENABLE_DOC_STRING (0)
#define MICROPY_ENABLE_FINALISER (1)
#define MICROPY_ENABLE_GC (1)
#define MICROPY_ENABLE_PYSTACK (1)
#define MICROPY_TRACKED_ALLOC (CIRCUITPY_SSL_MBEDTLS)
#define MICROPY_ENABLE_SOURCE_LINE (1)
#define MICROPY_EPOCH_IS_1970 (1)
#define MICROPY_ERROR_REPORTING (CIRCUITPY_FULL_BUILD ? MICROPY_ERROR_REPORTING_NORMAL : MICROPY_ERROR_REPORTING_TERSE)
#define MICROPY_FLOAT_HIGH_QUALITY_HASH (0)
#define MICROPY_FLOAT_IMPL (MICROPY_FLOAT_IMPL_FLOAT)
#define MICROPY_GC_ALLOC_THRESHOLD (0)
#define MICROPY_GC_SPLIT_HEAP (1)
#define MICROPY_GC_SPLIT_HEAP_AUTO (1)
#define MP_PLAT_ALLOC_HEAP(size) port_malloc(size, false)
#define MP_PLAT_FREE_HEAP(ptr) port_free(ptr)
# 1 "../../supervisor/port_heap.h" 1






       

# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stdbool.h" 1 3 4
# 29 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stdbool.h" 3 4
#define _STDBOOL_H 






#define bool _Bool
#define true 1
#define false 0
# 49 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stdbool.h" 3 4
#define __bool_true_false_are_defined 1
# 10 "../../supervisor/port_heap.h" 2
# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 1 3 4
# 39 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 3 4
#define _STDDEF_H 
#define _STDDEF_H_ 

#define _ANSI_STDDEF_H 
# 132 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 3 4
#define _PTRDIFF_T 
#define _T_PTRDIFF_ 
#define _T_PTRDIFF 
#define __PTRDIFF_T 
#define _PTRDIFF_T_ 
#define _BSD_PTRDIFF_T_ 
#define ___int_ptrdiff_t_h 
#define _GCC_PTRDIFF_T 
#define _PTRDIFF_T_DECLARED 
#define __DEFINED_ptrdiff_t 




# 145 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 158 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 185 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 3 4
#define __size_t__ 
#define __SIZE_T__ 
#define _SIZE_T 
#define _SYS_SIZE_T_H 
#define _T_SIZE_ 
#define _T_SIZE 
#define __SIZE_T 
#define _SIZE_T_ 
#define _BSD_SIZE_T_ 
#define _SIZE_T_DEFINED_ 
#define _SIZE_T_DEFINED 
#define _BSD_SIZE_T_DEFINED_ 
#define _SIZE_T_DECLARED 
#define __DEFINED_size_t 
#define ___int_size_t_h 
#define _GCC_SIZE_T 
#define _SIZET_ 






#define __size_t 





typedef unsigned int size_t;
# 237 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 3 4
#undef __need_size_t
# 267 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 3 4
#define __wchar_t__ 
#define __WCHAR_T__ 
#define _WCHAR_T 
#define _T_WCHAR_ 
#define _T_WCHAR 
#define __WCHAR_T 
#define _WCHAR_T_ 
#define _BSD_WCHAR_T_ 
#define _WCHAR_T_DEFINED_ 
#define _WCHAR_T_DEFINED 
#define _WCHAR_T_H 
#define ___int_wchar_t_h 
#define __INT_WCHAR_T_H 
#define _GCC_WCHAR_T 
#define _WCHAR_T_DECLARED 
#define __DEFINED_wchar_t 
# 295 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 3 4
#undef _BSD_WCHAR_T_
# 329 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 3 4
typedef unsigned int wchar_t;
# 349 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 399 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#undef offsetof
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)




#define _GCC_MAX_ALIGN_T 



typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 436 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 3 4
} max_align_t;
# 11 "../../supervisor/port_heap.h" 2
# 21 "../../supervisor/port_heap.h"

# 21 "../../supervisor/port_heap.h"
void port_heap_init(void);

void *port_malloc(size_t size, 
# 23 "../../supervisor/port_heap.h" 3 4
                              _Bool 
# 23 "../../supervisor/port_heap.h"
                                   dma_capable);

void port_free(void *ptr);

void *port_realloc(void *ptr, size_t size, 
# 27 "../../supervisor/port_heap.h" 3 4
                                          _Bool 
# 27 "../../supervisor/port_heap.h"
                                               dma_capable);

size_t port_heap_get_largest_free_size(void);
# 79 "../../py/circuitpy_mpconfig.h" 2
#define MICROPY_HELPER_LEXER_UNIX (0)
#define MICROPY_HELPER_REPL (1)
#define MICROPY_KBD_EXCEPTION (1)
#define MICROPY_MEM_STATS (0)
#define MICROPY_MODULE_BUILTIN_INIT (1)
#define MICROPY_MODULE_BUILTIN_SUBPACKAGES (1)
#define MICROPY_NONSTANDARD_TYPECODES (0)
#define MICROPY_OPT_COMPUTED_GOTO (1)
#define MICROPY_OPT_COMPUTED_GOTO_SAVE_SPACE (CIRCUITPY_COMPUTED_GOTO_SAVE_SPACE)
#define MICROPY_OPT_LOAD_ATTR_FAST_PATH (CIRCUITPY_OPT_LOAD_ATTR_FAST_PATH)
#define MICROPY_OPT_MAP_LOOKUP_CACHE (CIRCUITPY_OPT_MAP_LOOKUP_CACHE)
#define MICROPY_OPT_MPZ_BITWISE (0)
#define MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE (CIRCUITPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE)
#define MICROPY_PERSISTENT_CODE_LOAD (1)

#define MICROPY_PY_ARRAY (CIRCUITPY_ARRAY)
#define MICROPY_PY_ARRAY_SLICE_ASSIGN (1)
#define MICROPY_PY_ATTRTUPLE (1)
#define MICROPY_PY_BUILTINS_BYTEARRAY (1)
#define MICROPY_PY_BUILTINS_BYTES_HEX (1)
#define MICROPY_PY_BUILTINS_ENUMERATE (1)
#define MICROPY_PY_BUILTINS_FILTER (1)
#define MICROPY_PY_BUILTINS_HELP (1)
#define MICROPY_PY_BUILTINS_HELP_MODULES (1)
#define MICROPY_PY_BUILTINS_INPUT (1)
#define MICROPY_PY_BUILTINS_MEMORYVIEW (1)
#define MICROPY_PY_BUILTINS_MIN_MAX (1)
#define MICROPY_PY_BUILTINS_PROPERTY (1)
#define MICROPY_PY_BUILTINS_REVERSED (1)
#define MICROPY_PY_BUILTINS_ROUND_INT (1)
#define MICROPY_PY_BUILTINS_SET (1)
#define MICROPY_PY_BUILTINS_SLICE (1)
#define MICROPY_PY_BUILTINS_SLICE_ATTRS (1)
#define MICROPY_PY_BUILTINS_SLICE_INDICES (1)
#define MICROPY_PY_BUILTINS_STR_UNICODE (1)

#define MICROPY_PY_BINASCII (CIRCUITPY_BINASCII)
#define MICROPY_PY_BINASCII_CRC32 (CIRCUITPY_BINASCII && CIRCUITPY_ZLIB)
#define MICROPY_PY_CMATH (0)
#define MICROPY_PY_COLLECTIONS (CIRCUITPY_COLLECTIONS)
#define MICROPY_PY_DESCRIPTORS (1)

#define MICROPY_PY_ERRNO (CIRCUITPY_ERRNO)

#define MICROPY_PY_ERRNO_ERRORCODE (CIRCUITPY_ERRNO)
#define MICROPY_PY_GC (1)

#define MICROPY_PY_IO (CIRCUITPY_IO)
#define MICROPY_PY_IO_IOBASE (CIRCUITPY_IO_IOBASE)

#define MICROPY_PY_JSON (CIRCUITPY_JSON)
#define MICROPY_PY_MATH (0)
#define MICROPY_PY_MICROPYTHON_MEM_INFO (0)

#define MICROPY_PY_RANDOM (0)
#define MICROPY_PY_RANDOM_EXTRA_FUNCS (0)
#define MICROPY_PY_RE (CIRCUITPY_RE)

#define MICROPY_PY_STRUCT (0)
#define MICROPY_PY_SYS (CIRCUITPY_SYS)
#define MICROPY_PY_SYS_MAXSIZE (1)
#define MICROPY_PY_SYS_STDFILES (1)
#define MICROPY_PY_UCTYPES (0)
#define MICROPY_PY___FILE__ (1)

#define MICROPY_QSTR_BYTES_IN_HASH (1)
#define MICROPY_REPL_AUTO_INDENT (1)
#define MICROPY_REPL_EVENT_DRIVEN (0)
#define MICROPY_STACK_CHECK (1)
#define MICROPY_STREAMS_NON_BLOCK (1)

#define MICROPY_USE_INTERNAL_PRINTF (1)





#define MICROPY_FATFS_ENABLE_LFN (1)



#define MICROPY_FATFS_LFN_CODE_PAGE 437
#define MICROPY_FATFS_USE_LABEL (1)
#define MICROPY_FATFS_RPATH (2)
#define MICROPY_FATFS_MULTI_PARTITION (1)
#define MICROPY_FATFS_LFN_UNICODE 2




#define FILESYSTEM_BLOCK_SIZE (512)

#define MICROPY_VFS (1)
#define MICROPY_VFS_FAT (MICROPY_VFS)
#define MICROPY_READER_VFS (MICROPY_VFS)



#define BYTES_PER_WORD (4)

#define MICROPY_MAKE_POINTER_CALLABLE(p) ((void *)((mp_uint_t)(p) | 1))


#define MICROPY_MAX_STACK_USAGE (0)

#define UINT_FMT "%u"
#define INT_FMT "%d"






typedef int mp_int_t;
typedef unsigned int mp_uint_t;


_Static_assert(sizeof(mp_int_t) == sizeof(void *));
_Static_assert(sizeof(mp_uint_t) == sizeof(void *));

typedef long mp_off_t;

#define MP_PLAT_PRINT_STRN(str,len) mp_hal_stdout_tx_strn_cooked(str, len)

#define mp_type_fileio mp_type_vfs_fat_fileio
#define mp_type_textio mp_type_vfs_fat_textio

#define mp_builtin_open_obj mp_vfs_open_obj




#define MICROPY_PORT_BUILTINS { MP_OBJ_NEW_QSTR(MP_QSTR_help), (mp_obj_t)&mp_builtin_help_obj }, { MP_OBJ_NEW_QSTR(MP_QSTR_input), (mp_obj_t)&mp_builtin_input_obj }, { MP_OBJ_NEW_QSTR(MP_QSTR_open), (mp_obj_t)&mp_builtin_open_obj },






# 1 "boards/grandcentral_m4_express/mpconfigboard.h" 1






       

#define MICROPY_HW_BOARD_NAME "Adafruit Grand Central M4 Express"
#define MICROPY_HW_MCU_NAME "samd51p20"

#define CIRCUITPY_MCU_FAMILY samd51



#define MICROPY_HW_LED_STATUS (&pin_PB01)

#define MICROPY_HW_LED_TX &(pin_PC30)
#define MICROPY_HW_LED_RX &(pin_PC31)

#define MICROPY_HW_NEOPIXEL (&pin_PC24)

#define BOARD_HAS_CRYSTAL 1

#define DEFAULT_I2C_BUS_SCL (&pin_PB21)
#define DEFAULT_I2C_BUS_SDA (&pin_PB20)

#define DEFAULT_SPI_BUS_SCK (&pin_PD09)
#define DEFAULT_SPI_BUS_MOSI (&pin_PD08)
#define DEFAULT_SPI_BUS_MISO (&pin_PD11)

#define DEFAULT_UART_BUS_RX (&pin_PB25)
#define DEFAULT_UART_BUS_TX (&pin_PB24)


#define IGNORE_PIN_PA24 1
#define IGNORE_PIN_PA25 1


#define MICROPY_DEBUG_VERBOSE 1
#define MICROPY_ENABLE_DEBUGGING 1


#define BOARD_HAS_JTAG 1


#define CIRCUITPY_ENABLE_GDB 1
#define CIRCUITPY_ENABLE_OPENOCD 1
# 219 "../../py/circuitpy_mpconfig.h" 2


#define MICROPY_BUILTIN_METHOD_CHECK_SELF_ARG (CIRCUITPY_FULL_BUILD)


#define MICROPY_CPYTHON_COMPAT (CIRCUITPY_FULL_BUILD)



#define MICROPY_CPYTHON_EXCEPTION_CHAIN (CIRCUITPY_FULL_BUILD)


#define MICROPY_PY_BUILTINS_POW3 (CIRCUITPY_BUILTINS_POW3)
#define MICROPY_PY_FSTRINGS (1)
#define MICROPY_MODULE_WEAK_LINKS (0)
#define MICROPY_PY_ALL_SPECIAL_METHODS (CIRCUITPY_FULL_BUILD)


#define MICROPY_PY_BUILTINS_COMPLEX (CIRCUITPY_FULL_BUILD)


#define MICROPY_PY_BUILTINS_FROZENSET (CIRCUITPY_FULL_BUILD)


#define MICROPY_PY_BUILTINS_NOTIMPLEMENTED (CIRCUITPY_FULL_BUILD)


#define MICROPY_PY_BUILTINS_STR_CENTER (CIRCUITPY_FULL_BUILD)
#define MICROPY_PY_BUILTINS_STR_PARTITION (CIRCUITPY_FULL_BUILD)
#define MICROPY_PY_BUILTINS_STR_SPLITLINES (CIRCUITPY_FULL_BUILD)


#define MICROPY_PY_COLLECTIONS_ORDEREDDICT (CIRCUITPY_FULL_BUILD)



#define MICROPY_PY_COLLECTIONS_DEQUE (CIRCUITPY_FULL_BUILD)
#define MICROPY_PY_COLLECTIONS_DEQUE_ITER (CIRCUITPY_FULL_BUILD)
#define MICROPY_PY_COLLECTIONS_DEQUE_SUBSCR (CIRCUITPY_FULL_BUILD)



#define MICROPY_PY_FUNCTION_ATTRS (CIRCUITPY_FULL_BUILD)



#define MICROPY_PY_REVERSE_SPECIAL_METHODS (CIRCUITPY_FULL_BUILD)


#define MICROPY_PY_RE_MATCH_GROUPS (CIRCUITPY_RE)
#define MICROPY_PY_RE_MATCH_SPAN_START_END (CIRCUITPY_RE)
#define MICROPY_PY_RE_SUB (CIRCUITPY_RE)

#define CIRCUITPY_MICROPYTHON_ADVANCED (0)


#define MICROPY_FATFS_EXFAT (CIRCUITPY_FULL_BUILD)



#define MICROPY_FATFS_MKFS_FAT32 (CIRCUITPY_FULL_BUILD)
# 289 "../../py/circuitpy_mpconfig.h"
#define MICROPY_LONGINT_IMPL (MICROPY_LONGINT_IMPL_MPZ)
#define MP_SSIZE_MAX (0x7fffffff)
# 310 "../../py/circuitpy_mpconfig.h"
#define CIRCUITPY_BOARD_I2C (1)
#define CIRCUITPY_BOARD_I2C_PIN {{.scl = DEFAULT_I2C_BUS_SCL, .sda = DEFAULT_I2C_BUS_SDA}}







#define CIRCUITPY_BOARD_SPI (1)
#define CIRCUITPY_BOARD_SPI_PIN {{.clock = DEFAULT_SPI_BUS_SCK, .mosi = DEFAULT_SPI_BUS_MOSI, .miso = DEFAULT_SPI_BUS_MISO}}







#define CIRCUITPY_BOARD_UART (1)
#define CIRCUITPY_BOARD_UART_PIN {{.tx = DEFAULT_UART_BUS_TX, .rx = DEFAULT_UART_BUS_RX}}
# 358 "../../py/circuitpy_mpconfig.h"
#define CIRCUITPY_CONSOLE_UART (0)
#define CIRCUITPY_CONSOLE_UART_PRINTF(...) (void)0
#define CIRCUITPY_CONSOLE_UART_HEXDUMP(...) (void)0







#define CIRCUITPY_DISPLAY_LIMIT (1)




#define CIRCUITPY_DISPLAY_AREA_BUFFER_SIZE (128)
# 383 "../../py/circuitpy_mpconfig.h"
extern const struct _mp_obj_module_t nvm_module;



#define ULAB_SUPPORTS_COMPLEX (0)




#define ULAB_NUMPY_HAS_RANDOM_MODULE (0)
# 405 "../../py/circuitpy_mpconfig.h"
#define MICROPY_PORT_BUILTIN_MODULE_WEAK_LINKS 






#define MICROPY_PORT_BUILTIN_MODULE_ALT_NAMES 






#define MICROPY_PORT_BUILTIN_MODULES_STRONG_LINKS 
# 429 "../../py/circuitpy_mpconfig.h"
#define MICROPY_PORT_BUILTIN_MODULES MICROPY_PORT_BUILTIN_MODULES_STRONG_LINKS MICROPY_PORT_BUILTIN_MODULE_WEAK_LINKS





# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/alloca.h" 1 3







#define _NEWLIB_ALLOCA_H 

# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/_ansi.h" 1 3







#define _ANSIDECL_H_ 

# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/newlib.h" 1 3






#define __NEWLIB_H__ 1
# 27 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/newlib.h" 3
#define _ATEXIT_DYNAMIC_ALLOC 1





#define _FSEEK_OPTIMIZATION 1


#define _FVWRITE_IN_STREAMIO 1


#define _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL 1



#define _HAVE_INITFINI_ARRAY 1


#define _HAVE_LONG_DOUBLE 1
# 355 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/newlib.h" 3
#define _LDBL_EQ_DBL 1





#define _MB_CAPABLE 1


#define _MB_LEN_MAX 8
# 375 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/newlib.h" 3
#define _REENT_CHECK_VERIFY 1


#define _RETARGETABLE_LOCKING 1


#define _UNBUF_STREAM_OPT 1



#define _WANT_IO_C99_FORMATS 1







#define _WANT_IO_LONG_LONG 1
# 410 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/newlib.h" 3
#define _WANT_REGISTER_FINI 1


#define _WANT_USE_GDTOA 1





#define _WIDE_ORIENT 1
# 11 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/_ansi.h" 2 3
# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/config.h" 1 3

#define __SYS_CONFIG_H__ 

# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 77 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/machine/ieeefp.h" 3
#define __IEEE_LITTLE_ENDIAN 
# 91 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/machine/ieeefp.h" 3
#define _SUPPORTS_ERREXCEPT 






#define __DOUBLE_TYPE double
#define __FLOAT_TYPE float
# 523 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/machine/ieeefp.h" 3
#define __OBSOLETE_MATH_DEFAULT 1


#define __OBSOLETE_MATH __OBSOLETE_MATH_DEFAULT
# 5 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/config.h" 2 3
# 224 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/config.h" 3
#define _POINTER_INT long





#undef __RAND_MAX



#define __RAND_MAX 0x7fffffff
# 248 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/config.h" 3
#define __EXPORT 



#define __IMPORT 






#define _READ_WRITE_RETURN_TYPE int





#define _READ_WRITE_BUFSIZE_TYPE int
# 290 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/config.h" 3
#define _USE_GDTOA 
# 12 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/_ansi.h" 2 3
# 31 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/_ansi.h" 3
#define _BEGIN_STD_C 
#define _END_STD_C 
#define _NOTHROW 



#define _LONG_DOUBLE long double





#define _ATTRIBUTE(attrs) __attribute__ (attrs)
# 69 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/_ansi.h" 3
#define _ELIDABLE_INLINE static __inline__



#define _NOINLINE __attribute__ ((__noinline__))
#define _NOINLINE_STATIC _NOINLINE static
# 11 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/alloca.h" 2 3
# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 1 3
# 11 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 3
#define _SYS_REENT_H_ 

# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/_ansi.h" 1 3
# 14 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 2 3
# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 1 3 4
# 15 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 2 3
# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 1 3
# 43 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define _SYS_CDEFS_H_ 



# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 1 3 4
# 48 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 2 3

#define __PMT(args) args
#define __DOTS , ...
#define __THROW 


#define __ASMNAME(cname) __XSTRING (__USER_LABEL_PREFIX__) cname


#define __ptr_t void *
#define __long_double_t long double

#define __attribute_malloc__ 
#define __attribute_pure__ 
#define __attribute_format_strfmon__(a,b) 
#define __flexarr [0]


#define __bounded 
#define __unbounded 
#define __ptrvalue 
# 94 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define __BEGIN_DECLS 
#define __END_DECLS 
# 107 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define __GNUCLIKE_ASM 3
#define __GNUCLIKE_MATH_BUILTIN_CONSTANTS 



#define __GNUCLIKE___TYPEOF 1
#define __GNUCLIKE___SECTION 1

#define __GNUCLIKE_CTOR_SECTION_HANDLING 1

#define __GNUCLIKE_BUILTIN_CONSTANT_P 1


#define __GNUCLIKE_BUILTIN_VARARGS 1
#define __GNUCLIKE_BUILTIN_STDARG 1
#define __GNUCLIKE_BUILTIN_VAALIST 1


#define __GNUC_VA_LIST_COMPATIBILITY 1




#define __compiler_membar() __asm __volatile(" " : : : "memory")

#define __GNUCLIKE_BUILTIN_NEXT_ARG 1
#define __GNUCLIKE_MATH_BUILTIN_RELOPS 

#define __GNUCLIKE_BUILTIN_MEMCPY 1


#define __CC_SUPPORTS_INLINE 1
#define __CC_SUPPORTS___INLINE 1
#define __CC_SUPPORTS___INLINE__ 1

#define __CC_SUPPORTS___FUNC__ 1
#define __CC_SUPPORTS_WARNING 1

#define __CC_SUPPORTS_VARADIC_XXX 1

#define __CC_SUPPORTS_DYNAMIC_ARRAY_INIT 1
# 164 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define __P(protos) protos
#define __CONCAT1(x,y) x ## y
#define __CONCAT(x,y) __CONCAT1(x,y)
#define __STRING(x) #x
#define __XSTRING(x) __STRING(x)

#define __const const
#define __signed signed
#define __volatile volatile
# 217 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define __weak_symbol __attribute__((__weak__))
# 230 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define __dead2 __attribute__((__noreturn__))
#define __pure2 __attribute__((__const__))
#define __unused __attribute__((__unused__))
#define __used __attribute__((__used__))
#define __packed __attribute__((__packed__))
#define __aligned(x) __attribute__((__aligned__(x)))
#define __section(x) __attribute__((__section__(x)))


#define __alloc_size(x) __attribute__((__alloc_size__(x)))
#define __alloc_size2(n,x) __attribute__((__alloc_size__(n, x)))





#define __alloc_align(x) __attribute__((__alloc_align__(x)))
# 338 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define __generic(expr,t,yes,no) _Generic(expr, t: yes, default: no)
# 356 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define __min_size(x) static (x)





#define __malloc_like __attribute__((__malloc__))
#define __pure __attribute__((__pure__))






#define __always_inline __inline__ __attribute__((__always_inline__))





#define __noinline __attribute__ ((__noinline__))





#define __nonnull(x) __attribute__((__nonnull__ x))
#define __nonnull_all __attribute__((__nonnull__))






#define __fastcall __attribute__((__fastcall__))
#define __result_use_check __attribute__((__warn_unused_result__))






#define __returns_twice __attribute__((__returns_twice__))





#define __unreachable() __builtin_unreachable()
# 421 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define __restrict restrict
# 434 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define __restrict_arr restrict
# 468 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define __predict_true(exp) __builtin_expect((exp), 1)
#define __predict_false(exp) __builtin_expect((exp), 0)






#define __null_sentinel __attribute__((__sentinel__))
#define __exported __attribute__((__visibility__("default")))


#define __hidden __attribute__((__visibility__("hidden")))
# 490 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define __offsetof(type,field) offsetof(type, field)
#define __rangeof(type,start,end) (__offsetof(type, end) - __offsetof(type, start))
# 501 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define __containerof(x,s,m) ({ const volatile __typeof(((s *)0)->m) *__x = (x); __DEQUALIFY(s *, (const volatile char *)__x - __offsetof(s, m));})
# 523 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define __printflike(fmtarg,firstvararg) __attribute__((__format__ (__printf__, fmtarg, firstvararg)))

#define __scanflike(fmtarg,firstvararg) __attribute__((__format__ (__scanf__, fmtarg, firstvararg)))

#define __format_arg(fmtarg) __attribute__((__format_arg__ (fmtarg)))
#define __strfmonlike(fmtarg,firstvararg) __attribute__((__format__ (__strfmon__, fmtarg, firstvararg)))

#define __strftimelike(fmtarg,firstvararg) __attribute__((__format__ (__strftime__, fmtarg, firstvararg)))
# 540 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define __printf0like(fmtarg,firstvararg) 



#define __strong_reference(sym,aliassym) extern __typeof (sym) aliassym __attribute__ ((__alias__ (#sym)))



#define __weak_reference(sym,alias) __asm__(".weak " #alias); __asm__(".equ " #alias ", " #sym)


#define __warn_references(sym,msg) __asm__(".section .gnu.warning." #sym); __asm__(".asciz \"" msg "\""); __asm__(".previous")



#define __sym_compat(sym,impl,verid) __asm__(".symver " #impl ", " #sym "@" #verid)

#define __sym_default(sym,impl,verid) __asm__(".symver " #impl ", " #sym "@@" #verid)
# 592 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define __FBSDID(s) struct __hack



#define __RCSID(s) struct __hack



#define __RCSID_SOURCE(s) struct __hack



#define __SCCSID(s) struct __hack



#define __COPYRIGHT(s) struct __hack



#define __DECONST(type,var) ((type)(__uintptr_t)(const void *)(var))



#define __DEVOLATILE(type,var) ((type)(__uintptr_t)(volatile void *)(var))



#define __DEQUALIFY(type,var) ((type)(__uintptr_t)(const volatile void *)(var))






#define _Nonnull 
#define _Nullable 
#define _Null_unspecified 
#define __NULLABILITY_PRAGMA_PUSH 
#define __NULLABILITY_PRAGMA_POP 
# 652 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define __arg_type_tag(arg_kind,arg_idx,type_tag_idx) 
#define __datatype_type_tag(kind,type) 
# 671 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define __lock_annotate(x) 





#define __lockable __lock_annotate(lockable)


#define __locks_exclusive(...) __lock_annotate(exclusive_lock_function(__VA_ARGS__))

#define __locks_shared(...) __lock_annotate(shared_lock_function(__VA_ARGS__))



#define __trylocks_exclusive(...) __lock_annotate(exclusive_trylock_function(__VA_ARGS__))

#define __trylocks_shared(...) __lock_annotate(shared_trylock_function(__VA_ARGS__))



#define __unlocks(...) __lock_annotate(unlock_function(__VA_ARGS__))


#define __asserts_exclusive(...) __lock_annotate(assert_exclusive_lock(__VA_ARGS__))

#define __asserts_shared(...) __lock_annotate(assert_shared_lock(__VA_ARGS__))



#define __requires_exclusive(...) __lock_annotate(exclusive_locks_required(__VA_ARGS__))

#define __requires_shared(...) __lock_annotate(shared_locks_required(__VA_ARGS__))

#define __requires_unlocked(...) __lock_annotate(locks_excluded(__VA_ARGS__))



#define __no_lock_analysis __lock_annotate(no_thread_safety_analysis)
# 726 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/cdefs.h" 3
#define __nosanitizeaddress 
#define __nosanitizememory 
#define __nosanitizethread 



#define __guarded_by(x) __lock_annotate(guarded_by(x))
#define __pt_guarded_by(x) __lock_annotate(pt_guarded_by(x))




#define __builtin_is_aligned(x,align) (((__uintptr_t)x & ((align) - 1)) == 0)



#define __builtin_align_up(x,align) ((__typeof__(x))(((__uintptr_t)(x)+((align)-1))&(~((align)-1))))



#define __builtin_align_down(x,align) ((__typeof__(x))((x)&(~((align)-1))))



#define __align_up(x,y) __builtin_align_up(x, y)
#define __align_down(x,y) __builtin_align_down(x, y)
#define __is_aligned(x,y) __builtin_is_aligned(x, y)
# 16 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 2 3
# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_types.h" 1 3
# 20 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_types.h" 3
#define _SYS__TYPES_H 

#define __need_size_t 
#define __need_wint_t 
# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 1 3 4
# 158 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 237 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 3 4
#undef __need_size_t
# 349 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 3 4
#undef __need_wchar_t




#define _WINT_T 





# 359 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 3 4
typedef unsigned int wint_t;

#undef __need_wint_t
# 399 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#undef offsetof
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 25 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_types.h" 2 3


# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/machine/_types.h" 1 3





#define _MACHINE__TYPES_H 
# 28 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_types.h" 2 3


typedef long __blkcnt_t;



typedef long __blksize_t;



typedef __uint64_t __fsblkcnt_t;



typedef __uint32_t __fsfilcnt_t;



typedef long _off_t;





typedef int __pid_t;



typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



typedef __uint32_t __id_t;







typedef unsigned short __ino_t;
# 90 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_types.h" 3
typedef __uint32_t __mode_t;





__extension__ typedef long long _off64_t;





typedef _off_t __off_t;


typedef _off64_t __loff_t;


typedef long __key_t;







typedef long _fpos_t;
# 127 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_types.h" 3
#undef __size_t



typedef unsigned int __size_t;
# 146 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_types.h" 3
#define unsigned signed
typedef signed int _ssize_t;
#undef unsigned
# 158 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_types.h" 3
typedef _ssize_t __ssize_t;



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;




typedef void *_iconv_t;



#define _CLOCK_T_ unsigned long


typedef unsigned long __clock_t;




#define _TIME_T_ __int_least64_t

typedef __int_least64_t __time_t;


#define _CLOCKID_T_ unsigned long


typedef unsigned long __clockid_t;


typedef long __daddr_t;


#define _TIMER_T_ unsigned long
typedef unsigned long __timer_t;


typedef __uint8_t __sa_family_t;



typedef __uint32_t __socklen_t;


typedef int __nl_item;
typedef unsigned short __nlink_t;
typedef long __suseconds_t;
typedef unsigned long __useconds_t;







typedef __builtin_va_list __va_list;
# 17 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 2 3

#define _NULL 0



#define __Long long
typedef unsigned long __ULong;
# 35 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 3
# 1 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/lock.h" 1 3

#define __SYS_LOCK_H__ 
# 33 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/lock.h" 3
struct __lock;
typedef struct __lock * _LOCK_T;
#define _LOCK_RECURSIVE_T _LOCK_T

#define __LOCK_INIT(class,lock) extern struct __lock __lock_ ## lock; class _LOCK_T lock = &__lock_ ## lock

#define __LOCK_INIT_RECURSIVE(class,lock) __LOCK_INIT(class,lock)

extern void __retarget_lock_init(_LOCK_T *lock);
#define __lock_init(lock) __retarget_lock_init(&lock)
extern void __retarget_lock_init_recursive(_LOCK_T *lock);
#define __lock_init_recursive(lock) __retarget_lock_init_recursive(&lock)
extern void __retarget_lock_close(_LOCK_T lock);
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
#define __lock_acquire_recursive(lock) __retarget_lock_acquire_recursive(lock)
extern int __retarget_lock_try_acquire(_LOCK_T lock);
#define __lock_try_acquire(lock) __retarget_lock_try_acquire(lock)
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) __retarget_lock_try_acquire_recursive(lock)

extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
#define __lock_release_recursive(lock) __retarget_lock_release_recursive(lock)
# 36 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 2 3
typedef _LOCK_T _flock_t;







struct _reent;

struct __locale_t;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};





#define _ATEXIT_SIZE 32

struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};
# 99 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 3
struct _atexit {
 struct _atexit *_next;
 int _ind;

 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
#define _ATEXIT_INIT {_NULL, 0, {_NULL}, {{_NULL}, {_NULL}, 0, 0}}
# 116 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 3
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 146 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 3
#define _REENT_SMALL_CHECK_INIT(ptr) 






struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (*_read) (struct _reent *, void *,
        char *, int);
  int (*_write) (struct _reent *, void *,
         const char *,
         int);
  _fpos_t (*_seek) (struct _reent *, void *, _fpos_t, int);
  int (*_close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;


  struct _reent *_data;



  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 270 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 3
typedef struct __sFILE __FILE;



extern __FILE __sf[3];

struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};

extern struct _glue __sglue;
# 299 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 3
#define _RAND48_SEED_0 (0x330e)
#define _RAND48_SEED_1 (0xabcd)
#define _RAND48_SEED_2 (0x1234)
#define _RAND48_MULT_0 (0xe66d)
#define _RAND48_MULT_1 (0xdeec)
#define _RAND48_MULT_2 (0x0005)
#define _RAND48_ADD (0x000b)
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};


#define _REENT_EMERGENCY_SIZE 25
#define _REENT_ASCTIME_SIZE 26
#define _REENT_SIGNAL_SIZE 24
# 330 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 3
#define _REENT_INIT_RESERVED_0 
#define _REENT_INIT_RESERVED_1 
#define _REENT_INIT_RESERVED_2 
#define _REENT_INIT_RESERVED_6_7 
#define _REENT_INIT_RESERVED_8 
# 578 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 3
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];




  struct __locale_t *_locale;





  void (*__cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {



          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
# 647 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 3
   char _getlocalename_l_buf[32 ];
        } _reent;







    } _new;







  void (**_sig_func)(int);
};

#define _REENT_INIT(var) { 0, &__sf[0], &__sf[1], &__sf[2], 0, "", _REENT_INIT_RESERVED_1 _NULL, _REENT_INIT_RESERVED_0 _NULL, _NULL, 0, _NULL, _NULL, 0, _NULL, { { _REENT_INIT_RESERVED_2 _NULL, "", {0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 1, { {_RAND48_SEED_0, _RAND48_SEED_1, _RAND48_SEED_2}, {_RAND48_MULT_0, _RAND48_MULT_1, _RAND48_MULT_2}, _RAND48_ADD }, {0, {0}}, {0, {0}}, {0, {0}}, "", "", 0, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}} } }, _REENT_INIT_RESERVED_6_7 _NULL }
# 714 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 3
#define _REENT_INIT_PTR_ZEROED(var) { (var)->_stdin = &__sf[0]; (var)->_stdout = &__sf[1]; (var)->_stderr = &__sf[2]; (var)->_new._reent._rand_next = 1; (var)->_new._reent._r48._seed[0] = _RAND48_SEED_0; (var)->_new._reent._r48._seed[1] = _RAND48_SEED_1; (var)->_new._reent._r48._seed[2] = _RAND48_SEED_2; (var)->_new._reent._r48._mult[0] = _RAND48_MULT_0; (var)->_new._reent._r48._mult[1] = _RAND48_MULT_1; (var)->_new._reent._r48._mult[2] = _RAND48_MULT_2; (var)->_new._reent._r48._add = _RAND48_ADD; }
# 728 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 3
#define _REENT_CHECK_RAND48(ptr) 
#define _REENT_CHECK_MP(ptr) 
#define _REENT_CHECK_TM(ptr) 
#define _REENT_CHECK_ASCTIME_BUF(ptr) 
#define _REENT_CHECK_EMERGENCY(ptr) 
#define _REENT_CHECK_MISC(ptr) 
#define _REENT_CHECK_SIGNAL_BUF(ptr) 

#define _REENT_SIGNGAM(ptr) ((ptr)->_new._reent._gamma_signgam)
#define _REENT_RAND_NEXT(ptr) ((ptr)->_new._reent._rand_next)
#define _REENT_RAND48_SEED(ptr) ((ptr)->_new._reent._r48._seed)
#define _REENT_RAND48_MULT(ptr) ((ptr)->_new._reent._r48._mult)
#define _REENT_RAND48_ADD(ptr) ((ptr)->_new._reent._r48._add)
#define _REENT_MP_RESULT(ptr) ((ptr)->_result)
#define _REENT_MP_RESULT_K(ptr) ((ptr)->_result_k)
#define _REENT_MP_P5S(ptr) ((ptr)->_p5s)
#define _REENT_MP_FREELIST(ptr) ((ptr)->_freelist)
#define _REENT_ASCTIME_BUF(ptr) ((ptr)->_new._reent._asctime_buf)
#define _REENT_TM(ptr) (&(ptr)->_new._reent._localtime_buf)
#define _REENT_STRTOK_LAST(ptr) ((ptr)->_new._reent._strtok_last)
#define _REENT_MBLEN_STATE(ptr) ((ptr)->_new._reent._mblen_state)
#define _REENT_MBTOWC_STATE(ptr) ((ptr)->_new._reent._mbtowc_state)
#define _REENT_WCTOMB_STATE(ptr) ((ptr)->_new._reent._wctomb_state)
#define _REENT_MBRLEN_STATE(ptr) ((ptr)->_new._reent._mbrlen_state)
#define _REENT_MBRTOWC_STATE(ptr) ((ptr)->_new._reent._mbrtowc_state)
#define _REENT_MBSRTOWCS_STATE(ptr) ((ptr)->_new._reent._mbsrtowcs_state)
#define _REENT_WCRTOMB_STATE(ptr) ((ptr)->_new._reent._wcrtomb_state)
#define _REENT_WCSRTOMBS_STATE(ptr) ((ptr)->_new._reent._wcsrtombs_state)
# 764 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 3
#define _REENT_L64A_BUF(ptr) ((ptr)->_new._reent._l64a_buf)
#define _REENT_SIGNAL_BUF(ptr) ((ptr)->_new._reent._signal_buf)
#define _REENT_GETDATE_ERR_P(ptr) (&((ptr)->_new._reent._getdate_err))
#define _REENT_GETLOCALENAME_L_BUF(ptr) ((ptr)->_new._reent._getlocalename_l_buf)



#define _REENT_CLEANUP(_ptr) ((_ptr)->__cleanup)
#define _REENT_CVTBUF(_ptr) ((_ptr)->_cvtbuf)
#define _REENT_CVTLEN(_ptr) ((_ptr)->_cvtlen)
#define _REENT_EMERGENCY(_ptr) ((_ptr)->_emergency)
#define _REENT_ERRNO(_ptr) ((_ptr)->_errno)
#define _REENT_INC(_ptr) ((_ptr)->_inc)
#define _REENT_LOCALE(_ptr) ((_ptr)->_locale)
#define _REENT_SIG_FUNC(_ptr) ((_ptr)->_sig_func)
#define _REENT_STDIN(_ptr) ((_ptr)->_stdin)
#define _REENT_STDOUT(_ptr) ((_ptr)->_stdout)
#define _REENT_STDERR(_ptr) ((_ptr)->_stderr)

#define _REENT_INIT_PTR(var) { memset((var), 0, sizeof(*(var))); _REENT_INIT_PTR_ZEROED(var); }
# 794 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 3
#define __ATTRIBUTE_IMPURE_PTR__ 


extern struct _reent *_impure_ptr ;


#define __ATTRIBUTE_IMPURE_DATA__ 


extern struct _reent _impure_data ;
# 813 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 3
#define _REENT _impure_ptr


#define _REENT_IS_NULL(_ptr) ((_ptr) == NULL)

#define _GLOBAL_REENT (&_impure_data)
# 915 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/reent.h" 3
#define _Kmax (sizeof (size_t) << 3)

extern struct _atexit *__atexit;
extern struct _atexit __atexit0;

extern void (*__stdio_exit_handler) (void);

void _reclaim_reent (struct _reent *);

extern int _fwalk_sglue (struct _reent *, int (*)(struct _reent *, __FILE *),
    struct _glue *);
# 12 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/alloca.h" 2 3

#undef alloca


#define alloca(size) __builtin_alloca(size)
# 436 "../../py/circuitpy_mpconfig.h" 2

#define MP_STATE_PORT MP_STATE_VM


# 439 "../../py/circuitpy_mpconfig.h"
void background_callback_run_all(void);
#define RUN_BACKGROUND_TASKS (background_callback_run_all())

#define MICROPY_VM_HOOK_LOOP RUN_BACKGROUND_TASKS;
#define MICROPY_VM_HOOK_RETURN RUN_BACKGROUND_TASKS;



#define CIRCUITPY_AUTORELOAD_DELAY_MS 750



#define CIRCUITPY_FILESYSTEM_FLUSH_INTERVAL_MS 1000



#define CIRCUITPY_PYSTACK_SIZE 2048






#define CIRCUITPY_HEAP_START_SIZE (8 * 1024)




#define CIRCUITPY_EXCEPTION_STACK_SIZE 1024




#define CIRCUITPY_WORKFLOW_CONNECTION_SLEEP_DELAY 5



#define CIRCUITPY_PROCESSOR_COUNT (1)



#define CIRCUITPY_STATUS_LED_POWER_INVERTED (0)


#define CIRCUITPY_BOOT_OUTPUT_FILE "/boot_out.txt"


#define CIRCUITPY_BOOT_COUNTER 0







#define CIRCUITPY_VERBOSE_BLE 0




#define CIRCUITPY_REPL_LOGO (1)







#define CIRCUITPY_DEBUG_TINYUSB 0



#define CIRCUITPY_USB_DEVICE_INSTANCE 0



#define CIRCUITPY_USB_HOST_INSTANCE -1





#define USB_CDC_EP_NUM_NOTIFICATION (0)



#define USB_CDC_EP_NUM_DATA_OUT (0)



#define USB_CDC_EP_NUM_DATA_IN (0)



#define USB_CDC2_EP_NUM_NOTIFICATION (0)



#define USB_CDC2_EP_NUM_DATA_OUT (0)



#define USB_CDC2_EP_NUM_DATA_IN (0)



#define USB_MSC_EP_NUM_OUT (0)



#define USB_MSC_EP_NUM_IN (0)



#define USB_HID_EP_NUM_OUT (0)



#define USB_HID_EP_NUM_IN (0)







#define CIRCUITPY_USB_HID_MAX_REPORT_IDS_PER_DESCRIPTOR (6)





#define USB_MIDI_EP_NUM_OUT (0)



#define USB_MIDI_EP_NUM_IN (0)



#define MICROPY_WRAP_MP_MAP_LOOKUP PLACE_IN_ITCM



#define MICROPY_WRAP_MP_BINARY_OP PLACE_IN_ITCM



#define MICROPY_WRAP_MP_EXECUTE_BYTECODE PLACE_IN_ITCM



#define MICROPY_WRAP_MP_LOAD_GLOBAL PLACE_IN_ITCM



#define MICROPY_WRAP_MP_LOAD_NAME PLACE_IN_ITCM



#define MICROPY_WRAP_MP_OBJ_GET_TYPE PLACE_IN_ITCM



#define CIRCUITPY_DIGITALIO_HAVE_INPUT_ONLY (0)



#define CIRCUITPY_DIGITALIO_HAVE_INVALID_PULL (0)



#define CIRCUITPY_DIGITALIO_HAVE_INVALID_DRIVE_MODE (0)





#define MICROPY_FATFS_WINDOW_ALIGNMENT CIRCUITPY_TUSB_MEM_ALIGN


#define FF_FS_CASE_INSENSITIVE_COMPARISON_ASCII_ONLY (1)

#define FF_FS_MAKE_VOLID (1)

#define MICROPY_PY_OPTIMIZE_PROPERTY_FLASH_SIZE (CIRCUITPY_OPTIMIZE_PROPERTY_FLASH_SIZE)


#define MICROPY_ENABLE_COMPILER (1)
#define MICROPY_PY_BUILTINS_COMPILE (1)






#define CIRCUITPY_SAVES_PARTITION_SIZE 0
# 80 "./mpconfigport.h" 2
# 126 "./mpconfigport.h"
#define CIRCUITPY_INTERNAL_NVM_SIZE (8192)



#define CIRCUITPY_DEFAULT_STACK_SIZE (24 * 1024)






#define SAMD5x_E5x_BOD33_LEVEL (200)




#define FLASH_ERASE_SIZE NVMCTRL_BLOCK_SIZE







#define CIRCUITPY_INTERNAL_FLASH_FILESYSTEM_SIZE (0)







#define CALIBRATE_CRYSTALLESS (0)
# 167 "./mpconfigport.h"
#define BOARD_XOSC_FREQ_HZ (0)
# 186 "./mpconfigport.h"
#define BOARD_XOSC_IS_CRYSTAL (0)
# 195 "./mpconfigport.h"
#define CIRCUITPY_INTERNAL_CONFIG_SIZE (0)
# 209 "./mpconfigport.h"
#define BOOTLOADER_START_ADDR (0x00000000)

#define CIRCUITPY_FIRMWARE_START_ADDR (BOOTLOADER_START_ADDR + BOOTLOADER_SIZE)



#define CIRCUITPY_INTERNAL_NVM_START_ADDR (FLASH_SIZE - CIRCUITPY_INTERNAL_NVM_SIZE)


#define CIRCUITPY_INTERNAL_CONFIG_START_ADDR (CIRCUITPY_INTERNAL_NVM_START_ADDR - CIRCUITPY_INTERNAL_CONFIG_SIZE)


#define CIRCUITPY_INTERNAL_FLASH_FILESYSTEM_START_ADDR (CIRCUITPY_INTERNAL_CONFIG_START_ADDR - CIRCUITPY_INTERNAL_FLASH_FILESYSTEM_SIZE)



#define CIRCUITPY_FIRMWARE_SIZE (CIRCUITPY_INTERNAL_FLASH_FILESYSTEM_START_ADDR - CIRCUITPY_FIRMWARE_START_ADDR)
# 260 "./mpconfigport.h"
# 1 "./peripherals/samd/dma.h" 1
# 28 "./peripherals/samd/dma.h"
#define MICROPY_INCLUDED_ATMEL_SAMD_PERIPHERALS_DMA_H 
# 38 "./peripherals/samd/dma.h"
#define AUDIO_DMA_CHANNEL_COUNT 4
#define DMA_CHANNEL_COUNT 32

uint8_t dma_allocate_channel(
# 41 "./peripherals/samd/dma.h" 3 4
                            _Bool 
# 41 "./peripherals/samd/dma.h"
                                 audio_channel);
void dma_free_channel(uint8_t channel);

void init_shared_dma(void);


int32_t qspi_dma_write(uint32_t address, const uint8_t* buffer, uint32_t length);
int32_t qspi_dma_read(uint32_t address, uint8_t* buffer, uint32_t length);


uint8_t sercom_index(Sercom* sercom);

int32_t sercom_dma_write(Sercom* sercom, const uint8_t* buffer, uint32_t length);
int32_t sercom_dma_read(Sercom* sercom, uint8_t* buffer, uint32_t length, uint8_t tx);
int32_t sercom_dma_transfer(Sercom* sercom, const uint8_t* buffer_out, uint8_t* buffer_in, uint32_t length);

typedef struct {
    void* peripheral;
    uint32_t length;
    uint8_t progress;
    uint8_t rx_channel;
    uint8_t tx_channel;
    
# 63 "./peripherals/samd/dma.h" 3 4
   _Bool 
# 63 "./peripherals/samd/dma.h"
        rx_active;
    
# 64 "./peripherals/samd/dma.h" 3 4
   _Bool 
# 64 "./peripherals/samd/dma.h"
        tx_active;
    
# 65 "./peripherals/samd/dma.h" 3 4
   _Bool 
# 65 "./peripherals/samd/dma.h"
        sercom;
    int8_t failure;
} dma_descr_t;

dma_descr_t shared_dma_transfer_start(void* peripheral,
                                   const uint8_t* buffer_out, volatile uint32_t* dest,
                                   volatile uint32_t* src, uint8_t* buffer_in,
                                   uint32_t length, uint8_t tx);

# 73 "./peripherals/samd/dma.h" 3 4
_Bool 
# 73 "./peripherals/samd/dma.h"
    shared_dma_transfer_finished(dma_descr_t descr);
int shared_dma_transfer_close(dma_descr_t descr);

void dma_configure(uint8_t channel_number, uint8_t trigsrc, 
# 76 "./peripherals/samd/dma.h" 3 4
                                                           _Bool 
# 76 "./peripherals/samd/dma.h"
                                                                output_event);
void dma_enable_channel(uint8_t channel_number);
void dma_disable_channel(uint8_t channel_number);
void dma_suspend_channel(uint8_t channel_number);
void dma_resume_channel(uint8_t channel_number);

# 81 "./peripherals/samd/dma.h" 3 4
_Bool 
# 81 "./peripherals/samd/dma.h"
    dma_channel_free(uint8_t channel_number);

# 82 "./peripherals/samd/dma.h" 3 4
_Bool 
# 82 "./peripherals/samd/dma.h"
    dma_channel_enabled(uint8_t channel_number);
uint8_t dma_transfer_status(uint8_t channel_number);
DmacDescriptor* dma_descriptor(uint8_t channel_number);
DmacDescriptor* dma_write_back_descriptor(uint8_t channel_number);
# 261 "./mpconfigport.h" 2
# 104 "../../py/mpconfig.h" 2




#define MICROPY_CONFIG_ROM_LEVEL (MICROPY_CONFIG_ROM_LEVEL_CORE_FEATURES)



#define MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES (MICROPY_CONFIG_ROM_LEVEL >= MICROPY_CONFIG_ROM_LEVEL_CORE_FEATURES)
#define MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_BASIC_FEATURES (MICROPY_CONFIG_ROM_LEVEL >= MICROPY_CONFIG_ROM_LEVEL_BASIC_FEATURES)
#define MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES (MICROPY_CONFIG_ROM_LEVEL >= MICROPY_CONFIG_ROM_LEVEL_EXTRA_FEATURES)
#define MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_FULL_FEATURES (MICROPY_CONFIG_ROM_LEVEL >= MICROPY_CONFIG_ROM_LEVEL_FULL_FEATURES)
#define MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING (MICROPY_CONFIG_ROM_LEVEL >= MICROPY_CONFIG_ROM_LEVEL_EVERYTHING)
# 129 "../../py/mpconfig.h"
#define MICROPY_OBJ_REPR_A (0)






#define MICROPY_OBJ_REPR_B (1)
# 149 "../../py/mpconfig.h"
#define MICROPY_OBJ_REPR_C (2)
# 163 "../../py/mpconfig.h"
#define MICROPY_OBJ_REPR_D (3)
# 173 "../../py/mpconfig.h"
#define MICROPY_OBJ_IMMEDIATE_OBJS (MICROPY_OBJ_REPR != MICROPY_OBJ_REPR_D)
# 182 "../../py/mpconfig.h"
#define MICROPY_BYTES_PER_GC_BLOCK (4 * MP_BYTES_PER_OBJ_WORD)




#define MICROPY_ALLOC_GC_STACK_SIZE (64)
# 196 "../../py/mpconfig.h"
#define MICROPY_GC_STACK_ENTRY_TYPE size_t
# 206 "../../py/mpconfig.h"
#define MICROPY_GC_CONSERVATIVE_CLEAR (MICROPY_ENABLE_GC)
# 220 "../../py/mpconfig.h"
#define MICROPY_ALLOC_QSTR_CHUNK_INIT (128)




#define MICROPY_ALLOC_LEXER_INDENT_INIT (10)




#define MICROPY_ALLOC_LEXEL_INDENT_INC (8)




#define MICROPY_ALLOC_PARSE_RULE_INIT (64)




#define MICROPY_ALLOC_PARSE_RULE_INC (16)




#define MICROPY_ALLOC_PARSE_RESULT_INIT (32)




#define MICROPY_ALLOC_PARSE_RESULT_INC (16)




#define MICROPY_ALLOC_PARSE_INTERN_STRING_LEN (10)
# 266 "../../py/mpconfig.h"
#define MICROPY_ALLOC_SCOPE_ID_INIT (4)




#define MICROPY_ALLOC_SCOPE_ID_INC (6)
# 282 "../../py/mpconfig.h"
#define MICROPY_MODULE_DICT_SIZE (1)




#define MICROPY_LOADED_MODULES_DICT_SIZE (3)





#define MICROPY_MALLOC_USES_ALLOCATED_SIZE (0)






#define MICROPY_QSTR_BYTES_IN_LEN (1)
# 317 "../../py/mpconfig.h"
#define MICROPY_STACKLESS (0)






#define MICROPY_STACKLESS_STRICT (0)
# 349 "../../py/mpconfig.h"
#define MICROPY_PERSISTENT_CODE_SAVE (MICROPY_PY_SYS_SETTRACE)




#define MICROPY_PERSISTENT_CODE_SAVE_FILE (0)





#define MICROPY_PERSISTENT_CODE (MICROPY_PERSISTENT_CODE_LOAD || MICROPY_PERSISTENT_CODE_SAVE || MICROPY_MODULE_FROZEN_MPY)







#define MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE (MICROPY_PERSISTENT_CODE)
# 378 "../../py/mpconfig.h"
#define MICROPY_EMIT_X86 (0)
# 388 "../../py/mpconfig.h"
#define MICROPY_EMIT_THUMB_ARMV7M (1)
# 398 "../../py/mpconfig.h"
#define MICROPY_EMIT_INLINE_THUMB_FLOAT (1)




#define MICROPY_EMIT_ARM (0)




#define MICROPY_EMIT_XTENSA (0)




#define MICROPY_EMIT_INLINE_XTENSA (0)




#define MICROPY_EMIT_XTENSAWIN (0)



#define MICROPY_EMIT_NATIVE (MICROPY_EMIT_X64 || MICROPY_EMIT_X86 || MICROPY_EMIT_THUMB || MICROPY_EMIT_ARM || MICROPY_EMIT_XTENSA || MICROPY_EMIT_XTENSAWIN)




#define MICROPY_EMIT_NATIVE_PRELUDE_SEPARATE_FROM_MACHINE_CODE (MICROPY_EMIT_XTENSAWIN)


#define MICROPY_EMIT_INLINE_ASM (MICROPY_EMIT_INLINE_THUMB || MICROPY_EMIT_INLINE_XTENSA)


#define MICROPY_EMIT_MACHINE_CODE (MICROPY_EMIT_NATIVE || MICROPY_EMIT_INLINE_ASM)







#define MICROPY_PERSISTENT_CODE_TRACK_RELOC_CODE (0)
# 458 "../../py/mpconfig.h"
#define MICROPY_DYNAMIC_COMPILER (0)




#define MICROPY_COMP_ALLOW_TOP_LEVEL_AWAIT (0)




#define MICROPY_COMP_CONST_FOLDING (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES)





#define MICROPY_COMP_CONST_TUPLE (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES)




#define MICROPY_COMP_CONST_LITERAL (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES)
# 507 "../../py/mpconfig.h"
#define MICROPY_COMP_RETURN_IF_EXPR (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)
# 520 "../../py/mpconfig.h"
#define MICROPY_DEBUG_PRINTER (&mp_plat_print)
# 537 "../../py/mpconfig.h"
#define MICROPY_DEBUG_MP_OBJ_SENTINELS (0)




#define MICROPY_DEBUG_PARSE_RULE_NAME (0)




#define MICROPY_DEBUG_VM_STACK_OVERFLOW (0)




#define MICROPY_DEBUG_VALGRIND (0)
# 593 "../../py/mpconfig.h"
#define MICROPY_OPT_MAP_LOOKUP_CACHE_SIZE (128)
# 605 "../../py/mpconfig.h"
#define MICROPY_OPT_MATH_FACTORIAL (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)
# 614 "../../py/mpconfig.h"
#define MICROPY_NLR_THUMB_USE_LONG_JUMP (0)






#define MICROPY_ENABLE_EXTERNAL_IMPORT (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES)




#define MICROPY_READER_POSIX (0)
# 636 "../../py/mpconfig.h"
#define MICROPY_HAS_FILE_READER (MICROPY_READER_POSIX || MICROPY_READER_VFS)





#define MICROPY_FATFS_NUM_PERSISTENT (0)





#define MICROPY_VM_HOOK_INIT 
# 664 "../../py/mpconfig.h"
#define MICROPY_SCHED_HOOK_SCHEDULED 
# 685 "../../py/mpconfig.h"
#define MICROPY_GC_HOOK_LOOP(i) 
# 706 "../../py/mpconfig.h"
#define MICROPY_PYSTACK_ALIGN (8)
# 717 "../../py/mpconfig.h"
#define MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF (0)
# 733 "../../py/mpconfig.h"
#define MICROPY_ASYNC_KBD_INTR (0)
# 743 "../../py/mpconfig.h"
#define MICROPY_REPL_INFO (0)




#define MICROPY_REPL_EMACS_KEYS (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)






#define MICROPY_REPL_EMACS_WORDS_MOVE (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING)







#define MICROPY_REPL_EMACS_EXTRA_WORDS_MOVE (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING)
# 778 "../../py/mpconfig.h"
#define MICROPY_READLINE_HISTORY_SIZE (8)
# 787 "../../py/mpconfig.h"
#define MICROPY_LONGINT_IMPL_NONE (0)
#define MICROPY_LONGINT_IMPL_LONGLONG (1)
#define MICROPY_LONGINT_IMPL_MPZ (2)
# 811 "../../py/mpconfig.h"
#define MICROPY_ERROR_REPORTING_NONE (0)

#define MICROPY_ERROR_REPORTING_TERSE (1)

#define MICROPY_ERROR_REPORTING_NORMAL (2)

#define MICROPY_ERROR_REPORTING_DETAILED (3)
# 831 "../../py/mpconfig.h"
#define MICROPY_WARNINGS (0)




#define MICROPY_WARNINGS_CATEGORY (0)




#define MICROPY_ERROR_PRINTER (&mp_plat_print)
# 853 "../../py/mpconfig.h"
#define MICROPY_CONST_GENERATOREXIT_OBJ (!MICROPY_CPYTHON_EXCEPTION_CHAIN)




#define MICROPY_FLOAT_IMPL_NONE (0)
#define MICROPY_FLOAT_IMPL_FLOAT (1)
#define MICROPY_FLOAT_IMPL_DOUBLE (2)






#define MICROPY_PY_BUILTINS_FLOAT (1)
#define MICROPY_FLOAT_CONST(x) x ##F
#define MICROPY_FLOAT_C_FUN(fun) fun ##f
typedef float mp_float_t;
# 889 "../../py/mpconfig.h"
#define MICROPY_FLOAT_USE_NATIVE_FLT16 (0)
# 913 "../../py/mpconfig.h"
#define MICROPY_FULL_CHECKS (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES)
# 924 "../../py/mpconfig.h"
#define MICROPY_STREAMS_POSIX_API (0)





#define MICROPY_MODULE_ATTR_DELEGATION (MICROPY_PY_SYS_ATTR_DELEGATION || MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)
# 956 "../../py/mpconfig.h"
#define MICROPY_MODULE_GETATTR (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES)





#define MICROPY_MODULE_OVERRIDE_MAIN_IMPORT (0)




#define MICROPY_MODULE_FROZEN_STR (0)




#define MICROPY_MODULE_FROZEN_MPY (0)




#define MICROPY_MODULE_FROZEN (MICROPY_MODULE_FROZEN_STR || MICROPY_MODULE_FROZEN_MPY)
# 996 "../../py/mpconfig.h"
#define MICROPY_USE_INTERNAL_ERRNO (0)
# 1006 "../../py/mpconfig.h"
#define MICROPY_INTERNAL_PRINTF_PRINTER (&mp_plat_print)




#define MICROPY_ENABLE_VM_ABORT (0)




#define MICROPY_ENABLE_SCHEDULER (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)




#define MICROPY_SCHEDULER_STATIC_NODES (0)




#define MICROPY_SCHEDULER_DEPTH (4)
# 1036 "../../py/mpconfig.h"
#define MICROPY_VFS_POSIX (0)
# 1061 "../../py/mpconfig.h"
#define MICROPY_MULTIPLE_INHERITANCE (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES)
# 1080 "../../py/mpconfig.h"
#define MICROPY_PY_DELATTR_SETATTR (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)
# 1095 "../../py/mpconfig.h"
#define MICROPY_PY_ASSIGN_EXPR (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES)
# 1104 "../../py/mpconfig.h"
#define MICROPY_PY_GENERATOR_PEND_THROW (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES)




#define MICROPY_PY_STR_BYTES_CMP_WARN (0)
# 1124 "../../py/mpconfig.h"
#define MICROPY_PY_BUILTINS_STR_UNICODE_CHECK (MICROPY_PY_BUILTINS_STR_UNICODE)
# 1134 "../../py/mpconfig.h"
#define MICROPY_PY_BUILTINS_STR_COUNT (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES)




#define MICROPY_PY_BUILTINS_STR_OP_MODULO (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES)
# 1159 "../../py/mpconfig.h"
#define MICROPY_PY_BUILTINS_DICT_FROMKEYS (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES)
# 1169 "../../py/mpconfig.h"
#define MICROPY_PY_BUILTINS_MEMORYVIEW_ITEMSIZE (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING)
# 1206 "../../py/mpconfig.h"
#define MICROPY_PY_BUILTINS_RANGE_ATTRS (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES)







#define MICROPY_PY_BUILTINS_RANGE_BINOP (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING)




#define MICROPY_PY_BUILTINS_NEXT2 (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING)
# 1239 "../../py/mpconfig.h"
#define MICROPY_PY_ALL_INPLACE_SPECIAL_METHODS (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING)
# 1262 "../../py/mpconfig.h"
#define MICROPY_PY_BUILTINS_EVAL_EXEC (MICROPY_ENABLE_COMPILER)




#define MICROPY_PY_BUILTINS_EXECFILE (MICROPY_ENABLE_COMPILER && MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)
# 1309 "../../py/mpconfig.h"
#define MICROPY_PY_BUILTINS_HELP_TEXT mp_help_default_text
# 1329 "../../py/mpconfig.h"
#define MICROPY_PY_MICROPYTHON_STACK_USE (MICROPY_PY_MICROPYTHON_MEM_INFO)




#define MICROPY_PY_MICROPYTHON_HEAP_LOCKED (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING)
# 1383 "../../py/mpconfig.h"
#define MICROPY_PY_COLLECTIONS_NAMEDTUPLE__ASDICT (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING)
# 1393 "../../py/mpconfig.h"
#define MICROPY_PY_MATH_CONSTANTS (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)




#define MICROPY_PY_MATH_SPECIAL_FUNCTIONS (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)




#define MICROPY_PY_MATH_FACTORIAL (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)




#define MICROPY_PY_MATH_ISCLOSE (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)




#define MICROPY_PY_MATH_ATAN2_FIX_INFNAN (0)




#define MICROPY_PY_MATH_FMOD_FIX_INFNAN (0)




#define MICROPY_PY_MATH_MODF_FIX_NEGZERO (0)




#define MICROPY_PY_MATH_POW_FIX_NAN (0)
# 1438 "../../py/mpconfig.h"
#define MICROPY_PY_MICROPYTHON (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES)
# 1448 "../../py/mpconfig.h"
#define MICROPY_PY_GC_COLLECT_RETVAL (0)
# 1463 "../../py/mpconfig.h"
#define MICROPY_PY_IO_BYTESIO (1)




#define MICROPY_PY_IO_BUFFEREDWRITER (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING)
# 1489 "../../py/mpconfig.h"
#define MICROPY_PY_SYS_PATH_ARGV_DEFAULTS (MICROPY_PY_SYS)
# 1499 "../../py/mpconfig.h"
#define MICROPY_PY_SYS_MODULES (1)





#define MICROPY_PY_SYS_EXC_INFO (0)






#define MICROPY_PY_SYS_EXECUTABLE (0)




#define MICROPY_PY_SYS_INTERN (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING)




#define MICROPY_PY_SYS_EXIT (1)




#define MICROPY_PY_SYS_ATEXIT (0)
# 1536 "../../py/mpconfig.h"
#define MICROPY_PY_SYS_PATH (1)







#define MICROPY_PY_SYS_ARGV (1)




#define MICROPY_PY_SYS_PS1_PS2 (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)




#define MICROPY_PY_SYS_SETTRACE (0)




#define MICROPY_PY_SYS_GETSIZEOF (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING)
# 1570 "../../py/mpconfig.h"
#define MICROPY_PY_SYS_STDIO_BUFFER (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)




#define MICROPY_PY_SYS_TRACEBACKLIMIT (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING)





#define MICROPY_PY_SYS_ATTR_DELEGATION (MICROPY_PY_SYS_PATH || MICROPY_PY_SYS_PS1_PS2 || MICROPY_PY_SYS_TRACEBACKLIMIT)
# 1601 "../../py/mpconfig.h"
#define MICROPY_PY_SELECT_POSIX_OPTIMISATIONS (0)
# 1613 "../../py/mpconfig.h"
#define MICROPY_PY_TIME (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_BASIC_FEATURES)




#define MICROPY_PY_TIME_GMTIME_LOCALTIME_MKTIME (0)




#define MICROPY_PY_TIME_TIME_TIME_NS (0)
# 1633 "../../py/mpconfig.h"
#define MICROPY_PY_TIME_TICKS_PERIOD (MP_SMALL_INT_POSITIVE_MASK + 1)




#define MICROPY_PY_THREAD (0)





#define MICROPY_PY_THREAD_GIL (MICROPY_PY_THREAD)





#define MICROPY_PY_THREAD_GIL_VM_DIVISOR (32)
# 1666 "../../py/mpconfig.h"
#define MICROPY_PY_UCTYPES_NATIVE_C_TYPES (1)





#define MICROPY_PY_ZLIB (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)




#define MICROPY_PY_DEFLATE (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)




#define MICROPY_PY_DEFLATE_COMPRESS (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_FULL_FEATURES)
# 1691 "../../py/mpconfig.h"
#define MICROPY_PY_JSON_SEPARATORS (1)



#define MICROPY_PY_OS (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)



#define MICROPY_PY_OS_STATVFS (MICROPY_PY_OS)







#define MICROPY_PY_RE_DEBUG (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING)
# 1723 "../../py/mpconfig.h"
#define MICROPY_PY_HEAPQ (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)



#define MICROPY_PY_HASHLIB (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)



#define MICROPY_PY_HASHLIB_MD5 (0)



#define MICROPY_PY_HASHLIB_SHA1 (0)



#define MICROPY_PY_HASHLIB_SHA256 (1)



#define MICROPY_PY_CRYPTOLIB (0)




#define MICROPY_PY_CRYPTOLIB_CTR (0)



#define MICROPY_PY_CRYPTOLIB_CONSTS (0)
# 1774 "../../py/mpconfig.h"
#define MICROPY_PY_MACHINE (0)




#define MICROPY_PY_MACHINE_RESET (0)




#define MICROPY_PY_MACHINE_BITSTREAM (0)




#define MICROPY_PY_MACHINE_PULSE (0)




#define MICROPY_PY_MACHINE_MEMX (MICROPY_PY_MACHINE)




#define MICROPY_PY_MACHINE_SIGNAL (MICROPY_PY_MACHINE)



#define MICROPY_PY_MACHINE_I2C (0)




#define MICROPY_PY_MACHINE_I2C_TRANSFER_WRITE1 (0)




#define MICROPY_PY_MACHINE_SOFTI2C (0)



#define MICROPY_PY_MACHINE_SPI (0)




#define MICROPY_PY_MACHINE_SOFTSPI (0)




#define MICROPY_PY_MACHINE_TIMER (0)




#define MICROPY_PY_SOCKET_LISTEN_BACKLOG_DEFAULT (2)



#define MICROPY_PY_SSL (0)




#define MICROPY_PY_SSL_FINALISER (MICROPY_ENABLE_FINALISER)




#define MICROPY_PY_VFS (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES && MICROPY_VFS)



#define MICROPY_PY_WEBSOCKET (0)



#define MICROPY_PY_FRAMEBUF (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)



#define MICROPY_PY_BTREE (0)




#define MICROPY_PY_ONEWIRE (0)




#define MICROPY_PY_PLATFORM (MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES)
# 1882 "../../py/mpconfig.h"
#define MICROPY_PORT_EXTRA_BUILTINS 




#define MICROPY_PORT_CONSTANTS 
# 1918 "../../py/mpconfig.h"
#define MICROPY_WRAP_MP_SCHED_EXCEPTION(f) f



#define MICROPY_WRAP_MP_SCHED_KEYBOARD_INTERRUPT(f) f



#define MICROPY_WRAP_MP_SCHED_SCHEDULE(f) f



#define MICROPY_WRAP_MP_SCHED_VM_ABORT(f) f
# 1941 "../../py/mpconfig.h"
#define MICROPY_OBJ_BASE_ALIGNMENT 
# 1950 "../../py/mpconfig.h"
#define MICROPY_BANNER_NAME_AND_VERSION "CircuitPython " MICROPY_GIT_TAG " on " MICROPY_BUILD_DATE






#define MICROPY_BANNER_MACHINE MICROPY_HW_BOARD_NAME " with " MICROPY_HW_MCU_NAME







#define MP_BYTES_PER_OBJ_WORD (sizeof(mp_uint_t))




#define MP_BITS_PER_BYTE (8)


#define MP_OBJ_WORD_MSBIT_HIGH (((mp_uint_t)1) << (MP_BYTES_PER_OBJ_WORD * MP_BITS_PER_BYTE - 1))
# 1985 "../../py/mpconfig.h"
#define MP_ENDIANNESS_LITTLE (1)
# 2002 "../../py/mpconfig.h"
#define MP_ENDIANNESS_BIG (!MP_ENDIANNESS_LITTLE)
# 2015 "../../py/mpconfig.h"
#define MP_PLAT_ALLOC_EXEC(min_size,ptr,size) do { *ptr = m_new(byte, min_size); *size = min_size; } while (0)



#define MP_PLAT_FREE_EXEC(ptr,size) m_del(byte, ptr, size)
# 2059 "../../py/mpconfig.h"
#define NORETURN __attribute__((noreturn))




#define MP_WEAK __attribute__((weak))






#define MP_NO_INSTRUMENT __attribute__((no_instrument_function))





#define MP_INLINE inline MP_NO_INSTRUMENT




#define MP_NOINLINE __attribute__((noinline))




#define MP_ALWAYSINLINE __attribute__((always_inline))




#define MP_LIKELY(x) __builtin_expect((x), 1)




#define MP_UNLIKELY(x) __builtin_expect((x), 0)






#define MP_COLD __attribute__((cold))





#define MP_UNREACHABLE __builtin_unreachable();







#define MP_FALLTHROUGH __attribute__((fallthrough));






#define MP_HTOBE16(x) ((uint16_t)((((x) & 0xff) << 8) | (((x) >> 8) & 0xff)))
#define MP_BE16TOH(x) MP_HTOBE16(x)
# 2135 "../../py/mpconfig.h"
#define MP_HTOBE32(x) ((uint32_t)((((x) & 0xff) << 24) | (((x) & 0xff00) << 8) | (((x) >> 8) & 0xff00) | (((x) >> 24) & 0xff)))
#define MP_BE32TOH(x) MP_HTOBE32(x)
# 2150 "../../py/mpconfig.h"
#undef MP_WARN_CAT
#define MP_WARN_CAT(x) (NULL)
# 30 "<stdin>" 2





QCFG(BYTES_IN_LEN, (1))
QCFG(BYTES_IN_HASH, (1))



Q()
Q(*)
Q(_)
Q(/)





Q(%#o)
Q(%#x)




Q({:#b})
Q( )
Q(\n)
Q(<module>)
Q(<lambda>)
Q(<listcomp>)
Q(<dictcomp>)
Q(<setcomp>)
Q(<genexpr>)
Q(<string>)
Q(<stdin>)
Q(utf-8)
# 81 "<stdin>"
Q( )

Q(%#o)

Q(%#x)

Q(*)

Q(*)

Q(/)

Q(/)

Q(/)

Q(/)

Q(/)

Q(/)

Q(/)

Q(/)

Q(/lib)

Q(<dictcomp>)

Q(<dictcomp>)

Q(<genexpr>)

Q(<genexpr>)

Q(<input>)

Q(<lambda>)

Q(<lambda>)

Q(<listcomp>)

Q(<listcomp>)

Q(<module>)

Q(<module>)

Q(<setcomp>)

Q(<setcomp>)

Q(<stdin>)

Q(<stdin>)

Q(<string>)

Q(A)

Q(A)

Q(A)

Q(A0)

Q(A1)

Q(A10)

Q(A11)

Q(A12)

Q(A13)

Q(A14)

Q(A15)

Q(A2)

Q(A3)

Q(A4)

Q(A5)

Q(A6)

Q(A7)

Q(A8)

Q(A9)

Q(ABS)

Q(ABS)

Q(ADC0)

Q(ADC0)

Q(ADC1)

Q(ADC1)

Q(ADD_DIV)

Q(ADD_DIV)

Q(ADD_SUB)

Q(ADD_SUB)

Q(AES)

Q(AES)

Q(AES)

Q(AREF)

Q(ATTACK)

Q(ATTACK)

Q(AUTO_RELOAD)

Q(AUTO_RELOAD)

Q(Adapter)

Q(Adapter)

Q(Address)

Q(Address)

Q(Alarm)

Q(AnalogIn)

Q(AnalogIn)

Q(AnalogOut)

Q(AnalogOut)

Q(AnyDisplay)

Q(ArithmeticError)

Q(ArithmeticError)

Q(AssertionError)

Q(AssertionError)

Q(AssertionError)

Q(Atkinson)

Q(Atkinson)

Q(Attribute)

Q(Attribute)

Q(AttributeError)

Q(AttributeError)

Q(AudioOut)

Q(AudioOut)

Q(BAND_PASS)

Q(BAND_PASS)

Q(BGR)

Q(BGR555)

Q(BGR555)

Q(BGR555_SWAPPED)

Q(BGR555_SWAPPED)

Q(BGR565)

Q(BGR565)

Q(BGR565_SWAPPED)

Q(BGR565_SWAPPED)

Q(BOOTLOADER)

Q(BOOTLOADER)

Q(BROADCAST)

Q(BROWNOUT)

Q(BROWNOUT)

Q(BROWNOUT)

Q(BROWNOUT)

Q(BaseException)

Q(BaseException)

Q(BaseException)

Q(BaseException)

Q(BaseException)

Q(Biquad)

Q(Biquad)

Q(Biquad)

Q(Bitmap)

Q(Bitmap)

Q(BlendMode)

Q(BlendMode)

Q(BlockInput)

Q(BluetoothError)

Q(BluetoothError)

Q(BrokenPipeError)

Q(BrokenPipeError)

Q(BuiltinFont)

Q(BuiltinFont)

Q(BusDisplay)

Q(BusDisplay)

Q(BusDisplay)

Q(ByteArray)

Q(ByteArray)

Q(BytesIO)

Q(BytesIO)

Q(BytesIO)

Q(C)

Q(CAN0)

Q(CAN0)

Q(CAN1)

Q(CAN1)

Q(CIRCUITPYTHON_TERMINAL)

Q(CIRCUITPY_BLE_NAME)

Q(CONSTRAINED_LERP)

Q(CONSTRAINED_LERP)

Q(CONSUMER_CONTROL)

Q(CPU)

Q(CPU)

Q(CancelledError)

Q(Characteristic)

Q(Characteristic)

Q(CharacteristicBuffer)

Q(CharacteristicBuffer)

Q(Circle)

Q(Circle)

Q(Clock)

Q(ColorConverter)

Q(ColorConverter)

Q(ColorSpace)

Q(Colorspace)

Q(Connection)

Q(Connection)

Q(ConnectionError)

Q(ConnectionError)

Q(Counter)

Q(Counter)

Q(D0)

Q(D1)

Q(D10)

Q(D11)

Q(D12)

Q(D13)

Q(D14)

Q(D15)

Q(D16)

Q(D17)

Q(D18)

Q(D19)

Q(D2)

Q(D20)

Q(D21)

Q(D22)

Q(D23)

Q(D24)

Q(D25)

Q(D26)

Q(D27)

Q(D28)

Q(D29)

Q(D3)

Q(D30)

Q(D31)

Q(D32)

Q(D33)

Q(D34)

Q(D35)

Q(D36)

Q(D37)

Q(D38)

Q(D39)

Q(D4)

Q(D40)

Q(D41)

Q(D42)

Q(D43)

Q(D44)

Q(D45)

Q(D46)

Q(D47)

Q(D48)

Q(D49)

Q(D5)

Q(D50)

Q(D51)

Q(D52)

Q(D53)

Q(D6)

Q(D7)

Q(D8)

Q(D9)

Q(DAC)

Q(DAC)

Q(DECAY)

Q(DECAY)

Q(DEEP_SLEEP_ALARM)

Q(DEEP_SLEEP_ALARM)

Q(DFLL)

Q(DFLL)

Q(DIV_ADD)

Q(DIV_ADD)

Q(DOWN)

Q(DOWN)

Q(DPLL0)

Q(DPLL0)

Q(DPLL1)

Q(DPLL1)

Q(DeepSleepRequest)

Q(Descriptor)

Q(Descriptor)

Q(Device)

Q(Device)

Q(Device)

Q(Device)

Q(DigitalInOut)

Q(DigitalInOut)

Q(Direction)

Q(Direction)

Q(Direction)

Q(Display)

Q(Display)

Q(Display)

Q(DitherAlgorithm)

Q(DitherAlgorithm)

Q(DriveMode)

Q(DriveMode)

Q(DriveMode)

Q(EACCES)

Q(EACCES)

Q(EADDRINUSE)

Q(EADDRINUSE)

Q(EAGAIN)

Q(EAGAIN)

Q(EALREADY)

Q(EALREADY)

Q(EBADF)

Q(EBADF)

Q(ECONNABORTED)

Q(ECONNABORTED)

Q(ECONNREFUSED)

Q(ECONNREFUSED)

Q(ECONNRESET)

Q(ECONNRESET)

Q(EEXIST)

Q(EEXIST)

Q(EHOSTUNREACH)

Q(EHOSTUNREACH)

Q(EIC)

Q(EIC)

Q(EINPROGRESS)

Q(EINPROGRESS)

Q(EINVAL)

Q(EINVAL)

Q(EIO)

Q(EIO)

Q(EISDIR)

Q(EISDIR)

Q(ENCRYPT_NO_MITM)

Q(ENCRYPT_WITH_MITM)

Q(ENOBUFS)

Q(ENOBUFS)

Q(ENODEV)

Q(ENODEV)

Q(ENOENT)

Q(ENOENT)

Q(ENOMEM)

Q(ENOMEM)

Q(ENOSPC)

Q(ENOSPC)

Q(ENOTCONN)

Q(ENOTCONN)

Q(EOFError)

Q(EOFError)

Q(EOPNOTSUPP)

Q(EOPNOTSUPP)

Q(EPERM)

Q(EPERM)

Q(EPaperDisplay)

Q(EPaperDisplay)

Q(EPaperDisplay)

Q(EROFS)

Q(EROFS)

Q(ETIMEDOUT)

Q(ETIMEDOUT)

Q(EVEN)

Q(EVEN)

Q(EVEN_BYTES)

Q(EVEN_BYTES)

Q(EVERY_BYTE)

Q(EVERY_BYTE)

Q(EVSYS_0)

Q(EVSYS_0)

Q(EVSYS_1)

Q(EVSYS_1)

Q(EVSYS_10)

Q(EVSYS_10)

Q(EVSYS_11)

Q(EVSYS_11)

Q(EVSYS_2)

Q(EVSYS_2)

Q(EVSYS_3)

Q(EVSYS_3)

Q(EVSYS_4)

Q(EVSYS_4)

Q(EVSYS_5)

Q(EVSYS_5)

Q(EVSYS_6)

Q(EVSYS_6)

Q(EVSYS_7)

Q(EVSYS_7)

Q(EVSYS_8)

Q(EVSYS_8)

Q(EVSYS_9)

Q(EVSYS_9)

Q(Edge)

Q(Edge)

Q(Ellipsis)

Q(Ellipsis)

Q(Envelope)

Q(Envelope)

Q(EnvelopeState)

Q(EnvelopeState)

Q(Event)

Q(Event)

Q(EventQueue)

Q(EventQueue)

Q(Exception)

Q(Exception)

Q(ExtType)

Q(ExtType)

Q(FALL)

Q(FALL)

Q(FLASH_WRITE_FAIL)

Q(FLASH_WRITE_FAIL)

Q(FONT)

Q(FREQM_MSR)

Q(FREQM_MSR)

Q(False)

Q(FileIO)

Q(FilterMode)

Q(FilterMode)

Q(Flash)

Q(FloydStenberg)

Q(FloydStenberg)

Q(FourWire)

Q(FourWire)

Q(FourWire)

Q(FramebufferDisplay)

Q(FramebufferDisplay)

Q(FrequencyIn)

Q(FutureWarning)

Q(FutureWarning)

Q(GCLKGEN1)

Q(GCLKGEN1)

Q(GCLKIN)

Q(GCLKIN)

Q(GC_ALLOC_OUTSIDE_VM)

Q(GC_ALLOC_OUTSIDE_VM)

Q(Generator)

Q(GeneratorExit)

Q(GeneratorExit)

Q(GifWriter)

Q(GifWriter)

Q(GifWriter)

Q(Glyph)

Q(Glyph)

Q(Group)

Q(Group)

Q(Group)

Q(HARD_FAULT)

Q(HARD_FAULT)

Q(HIGH_PASS)

Q(HIGH_PASS)

Q(HIGH_SHELF)

Q(HIGH_SHELF)

Q(I2C)

Q(I2C)

Q(I2C)

Q(I2C)

Q(I2C)

Q(I2CDevice)

Q(I2CDevice)

Q(I2CDisplay)

Q(I2CDisplay)

Q(I2CDisplayBus)

Q(I2CDisplayBus)

Q(I2CDisplayBus)

Q(I2CTarget)

Q(I2CTarget)

Q(I2CTargetRequest)

Q(I2SOut)

Q(I2SOut)

Q(I2S_0)

Q(I2S_0)

Q(I2S_1)

Q(I2S_1)

Q(INDICATE)

Q(INPUT)

Q(INPUT)

Q(INTERRUPT_ERROR)

Q(INTERRUPT_ERROR)

Q(IOBase)

Q(IOBase)

Q(IV)

Q(IV)

Q(IV)

Q(IV)

Q(ImportError)

Q(ImportError)

Q(IncrementalEncoder)

Q(IncrementalEncoder)

Q(IndentationError)

Q(IndentationError)

Q(IndexError)

Q(IndexError)

Q(JpegDecoder)

Q(JpegDecoder)

Q(KEYBOARD)

Q(KeyError)

Q(KeyError)

Q(KeyMatrix)

Q(KeyMatrix)

Q(KeyboardInterrupt)

Q(KeyboardInterrupt)

Q(Keys)

Q(Keys)

Q(L8)

Q(L8)

Q(LED)

Q(LED_RX)

Q(LED_TX)

Q(LERP)

Q(LERP)

Q(LESC_ENCRYPT_WITH_MITM)

Q(LFO)

Q(LFO)

Q(LOW_PASS)

Q(LOW_PASS)

Q(LOW_SHELF)

Q(LOW_SHELF)

Q(LookupError)

Q(LookupError)

Q(M)

Q(MAX)

Q(MAX)

Q(MID)

Q(MID)

Q(MIN)

Q(MIN)

Q(MISO)

Q(MISO)

Q(MISO)

Q(MODE_CBC)

Q(MODE_CTR)

Q(MODE_ECB)

Q(MOSI)

Q(MOSI)

Q(MOSI)

Q(MOUSE)

Q(MP3Decoder)

Q(MP3Decoder)

Q(MUL_DIV)

Q(MUL_DIV)

Q(Math)

Q(Math)

Q(MathOperation)

Q(MathOperation)

Q(Max3421E)

Q(Max3421E)

Q(MemoryError)

Q(MemoryError)

Q(MidiTrack)

Q(MidiTrack)

Q(Mixer)

Q(Mixer)

Q(MixerVoice)

Q(NEOPIXEL)

Q(NLR_JUMP_FAIL)

Q(NLR_JUMP_FAIL)

Q(NONE)

Q(NONE)

Q(NORMAL)

Q(NORMAL)

Q(NOTCH)

Q(NOTCH)

Q(NOTIFY)

Q(NO_ACCESS)

Q(NO_CIRCUITPY)

Q(NO_CIRCUITPY)

Q(NO_HEAP)

Q(NO_HEAP)

Q(NameError)

Q(NameError)

Q(None)

Q(None)

Q(None)

Q(None)

Q(None)

Q(None)

Q(None)

Q(NoneType)

Q(Normal)

Q(Normal)

Q(NotImplemented)

Q(NotImplemented)

Q(NotImplementedError)

Q(NotImplementedError)

Q(Note)

Q(Note)

Q(Note)

Q(ODD)

Q(ODD)

Q(ODD_BYTES)

Q(ODD_BYTES)

Q(OFFSET_SCALE)

Q(OFFSET_SCALE)

Q(OPEN)

Q(OPEN_DRAIN)

Q(OPEN_DRAIN)

Q(OSCCTRL_DFLL48)

Q(OSCCTRL_DFLL48)

Q(OSCCTRL_FDPLL0)

Q(OSCCTRL_FDPLL0)

Q(OSCCTRL_FDPLL032K)

Q(OSCCTRL_FDPLL032K)

Q(OSCCTRL_FDPLL1)

Q(OSCCTRL_FDPLL1)

Q(OSCULP32K)

Q(OSCULP32K)

Q(OSError)

Q(OSError)

Q(OUTPUT)

Q(OUTPUT)

Q(OnDiskBitmap)

Q(OnDiskBitmap)

Q(OnDiskGif)

Q(OnDiskGif)

Q(OneWire)

Q(OneWire)

Q(OrderedDict)

Q(OrderedDict)

Q(OrderedDict)

Q(OverflowError)

Q(OverflowError)

Q(PA00)

Q(PA01)

Q(PA02)

Q(PA03)

Q(PA04)

Q(PA05)

Q(PA06)

Q(PA07)

Q(PA08)

Q(PA09)

Q(PA10)

Q(PA11)

Q(PA12)

Q(PA13)

Q(PA14)

Q(PA15)

Q(PA16)

Q(PA17)

Q(PA18)

Q(PA19)

Q(PA20)

Q(PA21)

Q(PA22)

Q(PA23)

Q(PA27)

Q(PA30)

Q(PA31)

Q(PB00)

Q(PB01)

Q(PB02)

Q(PB03)

Q(PB04)

Q(PB05)

Q(PB06)

Q(PB07)

Q(PB08)

Q(PB09)

Q(PB10)

Q(PB11)

Q(PB12)

Q(PB13)

Q(PB14)

Q(PB15)

Q(PB16)

Q(PB17)

Q(PB18)

Q(PB19)

Q(PB20)

Q(PB21)

Q(PB22)

Q(PB23)

Q(PB24)

Q(PB25)

Q(PB26)

Q(PB27)

Q(PB28)

Q(PB29)

Q(PB30)

Q(PB31)

Q(PC00)

Q(PC01)

Q(PC02)

Q(PC03)

Q(PC04)

Q(PC05)

Q(PC06)

Q(PC07)

Q(PC10)

Q(PC11)

Q(PC12)

Q(PC13)

Q(PC14)

Q(PC15)

Q(PC16)

Q(PC17)

Q(PC18)

Q(PC19)

Q(PC20)

Q(PC21)

Q(PC22)

Q(PC23)

Q(PC24)

Q(PC25)

Q(PC26)

Q(PC27)

Q(PC28)

Q(PC30)

Q(PC31)

Q(PCC_CLK)

Q(PCC_D0)

Q(PCC_D1)

Q(PCC_D10)

Q(PCC_D11)

Q(PCC_D12)

Q(PCC_D13)

Q(PCC_D2)

Q(PCC_D3)

Q(PCC_D4)

Q(PCC_D5)

Q(PCC_D6)

Q(PCC_D7)

Q(PCC_D8)

Q(PCC_D9)

Q(PCC_DEN1)

Q(PCC_DEN2)

Q(PCC_XCLK)

Q(PD00)

Q(PD01)

Q(PD08)

Q(PD09)

Q(PD10)

Q(PD11)

Q(PD12)

Q(PD20)

Q(PD21)

Q(PDMIn)

Q(PDMIn)

Q(PEAKING_EQ)

Q(PEAKING_EQ)

Q(POLLERR)

Q(POLLHUP)

Q(POLLIN)

Q(POLLOUT)

Q(POWER_ON)

Q(POWER_ON)

Q(PRODUCT)

Q(PRODUCT)

Q(PROGRAMMATIC)

Q(PROGRAMMATIC)

Q(PUBLIC)

Q(PUSH_PULL)

Q(PUSH_PULL)

Q(PWMOut)

Q(PWMOut)

Q(PacketBuffer)

Q(PacketBuffer)

Q(Palette)

Q(Palette)

Q(ParallelBus)

Q(ParallelBus)

Q(ParallelImageCapture)

Q(ParallelImageCapture)

Q(Parity)

Q(Parity)

Q(Parity)

Q(Pin)

Q(Pin)

Q(Pin)

Q(Pin)

Q(Pin)

Q(Pin)

Q(PinAlarm)

Q(PinAlarm)

Q(PixelBuf)

Q(PixelBuf)

Q(PixelMap)

Q(PixelMap)

Q(PixelPolicy)

Q(PixelPolicy)

Q(Polygon)

Q(Polygon)

Q(PortIn)

Q(PortIn)

Q(PortOut)

Q(PortOut)

Q(Processor)

Q(Processor)

Q(Ps2 buffer)

Q(Ps2)

Q(Ps2)

Q(Pull)

Q(Pull)

Q(Pull)

Q(Pull)

Q(PulseIn)

Q(PulseIn)

Q(PulseIn)

Q(PulseOut)

Q(PulseOut)

Q(Q)

Q(Q)

Q(Q)

Q(QRDecoder)

Q(QRDecoder)

Q(QRDecoder)

Q(QRInfo)

Q(QRInfo)

Q(QRPosition)

Q(RAISE)

Q(RAISE)

Q(RANDOM_PRIVATE_NON_RESOLVABLE)

Q(RANDOM_PRIVATE_RESOLVABLE)

Q(RANDOM_STATIC)

Q(READ)

Q(RELEASE)

Q(RELEASE)

Q(REPL_RELOAD)

Q(REPL_RELOAD)

Q(RESCUE_DEBUG)

Q(RESCUE_DEBUG)

Q(RESET)

Q(RESET)

Q(RESET_PIN)

Q(RESET_PIN)

Q(RGB555)

Q(RGB555)

Q(RGB555_SWAPPED)

Q(RGB555_SWAPPED)

Q(RGB565)

Q(RGB565)

Q(RGB565)

Q(RGB565)

Q(RGB565_SWAPPED)

Q(RGB565_SWAPPED)

Q(RGB565_SWAPPED)

Q(RGB565_SWAPPED)

Q(RGB888)

Q(RGB888)

Q(RGBMatrix)

Q(RGBMatrix)

Q(RGBMatrix)

Q(RISE)

Q(RISE)

Q(RISE_AND_FALL)

Q(RISE_AND_FALL)

Q(RTC)

Q(RTC)

Q(RTC)

Q(RTC)

Q(RX)

Q(RX1)

Q(RX2)

Q(RX3)

Q(RawSample)

Q(RawSample)

Q(ReadableBuffer)

Q(Rectangle)

Q(Rectangle)

Q(ReloadException)

Q(ReloadException)

Q(ResetReason)

Q(ResetReason)

Q(RoleError)

Q(RoleError)

Q(RunMode)

Q(RunMode)

Q(RunMode)

Q(RunReason)

Q(RunReason)

Q(Runtime)

Q(RuntimeError)

Q(RuntimeError)

Q(SAFE_MODE)

Q(SAFE_MODE)

Q(SCALE_OFFSET)

Q(SCALE_OFFSET)

Q(SCK)

Q(SCL)

Q(SCL1)

Q(SDA)

Q(SDA1)

Q(SDCard)

Q(SDCard)

Q(SDCard)

Q(SDCard)

Q(SDIO_CLOCK)

Q(SDIO_COMMAND)

Q(SDIO_DATA)

Q(SDK_FATAL_ERROR)

Q(SDK_FATAL_ERROR)

Q(SD_CARD_DETECT)

Q(SD_CS)

Q(SD_MISO)

Q(SD_MOSI)

Q(SD_SCK)

Q(SERCOM0_CORE)

Q(SERCOM0_CORE)

Q(SERCOM1_CORE)

Q(SERCOM1_CORE)

Q(SERCOM2_CORE)

Q(SERCOM2_CORE)

Q(SERCOM3_CORE)

Q(SERCOM3_CORE)

Q(SERCOM4_CORE)

Q(SERCOM4_CORE)

Q(SERCOM5_CORE)

Q(SERCOM5_CORE)

Q(SERCOM6_CORE)

Q(SERCOM6_CORE)

Q(SERCOM7_CORE)

Q(SERCOM7_CORE)

Q(SH1107_addressing)

Q(SH1107_addressing)

Q(SIGNED_NO_MITM)

Q(SIGNED_WITH_MITM)

Q(SOFTWARE)

Q(SOFTWARE)

Q(SPEED_FULL)

Q(SPEED_HIGH)

Q(SPEED_LOW)

Q(SPI)

Q(SPI)

Q(SPI)

Q(SPI)

Q(SPI)

Q(SPIDevice)

Q(SPIDevice)

Q(SPITarget)

Q(SPITarget)

Q(SS)

Q(STACK_OVERFLOW)

Q(STACK_OVERFLOW)

Q(STARTUP)

Q(STARTUP)

Q(SUM)

Q(SUM)

Q(SUPERVISOR_RELOAD)

Q(SUPERVISOR_RELOAD)

Q(SUSTAIN)

Q(SUSTAIN)

Q(SYSTICK)

Q(SYSTICK)

Q(SafeModeReason)

Q(SafeModeReason)

Q(ScanEntry)

Q(ScanEntry)

Q(ScanResults)

Q(ScanResults)

Q(Screen)

Q(Screen)

Q(SecurityError)

Q(SecurityError)

Q(Serial)

Q(Serial)

Q(Service)

Q(Service)

Q(SharpMemoryFramebuffer)

Q(SharpMemoryFramebuffer)

Q(ShiftRegisterKeys)

Q(ShiftRegisterKeys)

Q(SleepMemory)

Q(SleepMemory)

Q(Status_Bar)

Q(StopAsyncIteration)

Q(StopAsyncIteration)

Q(StopAsyncIteration)

Q(StopIteration)

Q(StopIteration)

Q(StringIO)

Q(StringIO)

Q(SyntaxError)

Q(SyntaxError)

Q(Synthesizer)

Q(Synthesizer)

Q(SystemExit)

Q(SystemExit)

Q(T)

Q(TC0_TC1)

Q(TC0_TC1)

Q(TC2_TC3)

Q(TC2_TC3)

Q(TC4_TC5)

Q(TC4_TC5)

Q(TC6_TC7)

Q(TC6_TC7)

Q(TCC0_TCC1)

Q(TCC0_TCC1)

Q(TCC2_TCC3)

Q(TCC2_TCC3)

Q(TCC4)

Q(TCC4)

Q(TX)

Q(TX1)

Q(TX2)

Q(TX3)

Q(Task)

Q(Task)

Q(TaskQueue)

Q(TaskQueue)

Q(Terminal)

Q(Terminal)

Q(TextIOWrapper)

Q(TextIOWrapper)

Q(TileGrid)

Q(TileGrid)

Q(TilePaletteMapper)

Q(TilePaletteMapper)

Q(TimeAlarm)

Q(TimeAlarm)

Q(TimeoutError)

Q(TimeoutError)

Q(TouchAlarm)

Q(TouchAlarm)

Q(TouchAlarm)

Q(TouchIn)

Q(TouchIn)

Q(True)

Q(True)

Q(TypeError)

Q(TypeError)

Q(UART)

Q(UART)

Q(UART)

Q(UART)

Q(UART)

Q(UF2)

Q(UF2)

Q(UNKNOWN)

Q(UNKNOWN)

Q(UP)

Q(UP)

Q(USB)

Q(USB)

Q(USBDevices)

Q(USBError)

Q(USBError)

Q(USBTimeoutError)

Q(USBTimeoutError)

Q(USB_BOOT_DEVICE_NOT_INTERFACE_ZERO)

Q(USB_BOOT_DEVICE_NOT_INTERFACE_ZERO)

Q(USB_TOO_MANY_ENDPOINTS)

Q(USB_TOO_MANY_ENDPOINTS)

Q(USB_TOO_MANY_INTERFACE_NAMES)

Q(USB_TOO_MANY_INTERFACE_NAMES)

Q(USER)

Q(USER)

Q(UUID)

Q(UUID)

Q(UnicodeError)

Q(UnicodeError)

Q(ValueError)

Q(ValueError)

Q(VectorShape)

Q(VfsFat)

Q(VfsFat)

Q(WATCHDOG)

Q(WATCHDOG)

Q(WATCHDOG)

Q(WATCHDOG)

Q(WRITE)

Q(WRITE_NO_RESPONSE)

Q(Warning)

Q(Warning)

Q(Warning)

Q(WatchDogMode)

Q(WatchDogMode)

Q(WatchDogTimeout)

Q(WatchDogTimeout)

Q(WatchDogTimer)

Q(WaveFile)

Q(WaveFile)

Q(XOSC0)

Q(XOSC0)

Q(XOSC1)

Q(XOSC1)

Q(XOSC32K)

Q(XOSC32K)

Q(ZeroDivisionError)

Q(ZeroDivisionError)

Q(_)

Q(_0x0a_)

Q(__abs__)

Q(__add__)

Q(__aenter__)

Q(__aenter__)

Q(__aexit__)

Q(__aexit__)

Q(__aiter__)

Q(__and__)

Q(__anext__)

Q(__await__)

Q(__await__)

Q(__await__)

Q(__bases__)

Q(__bool__)

Q(__build_class__)

Q(__build_class__)

Q(__bytes__)

Q(__call__)

Q(__cause__)

Q(__cause__)

Q(__cause__)

Q(__cause__)

Q(__class__)

Q(__class__)

Q(__class__)

Q(__class__)

Q(__class__)

Q(__class__)

Q(__class__)

Q(__class__)

Q(__complex__)

Q(__contains__)

Q(__contains__)

Q(__contains__)

Q(__context__)

Q(__context__)

Q(__context__)

Q(__context__)

Q(__context__)

Q(__context__)

Q(__context__)

Q(__del__)

Q(__del__)

Q(__del__)

Q(__del__)

Q(__del__)

Q(__del__)

Q(__del__)

Q(__del__)

Q(__del__)

Q(__del__)

Q(__del__)

Q(__del__)

Q(__del__)

Q(__del__)

Q(__del__)

Q(__del__)

Q(__del__)

Q(__del__)

Q(__del__)

Q(__del__)

Q(__delete__)

Q(__delete__)

Q(__delitem__)

Q(__delitem__)

Q(__dict__)

Q(__dict__)

Q(__dict__)

Q(__dir__)

Q(__divmod__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__enter__)

Q(__eq__)

Q(__eq__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__exit__)

Q(__file__)

Q(__file__)

Q(__file__)

Q(__file__)

Q(__float__)

Q(__floordiv__)

Q(__future__)

Q(__future__)

Q(__ge__)

Q(__get__)

Q(__get__)

Q(__get__)

Q(__getattr__)

Q(__getattr__)

Q(__getattr__)

Q(__getattr__)

Q(__getitem__)

Q(__getitem__)

Q(__getitem__)

Q(__getitem__)

Q(__globals__)

Q(__gt__)

Q(__hash__)

Q(__iadd__)

Q(__import__)

Q(__import__)

Q(__init__)

Q(__init__)

Q(__init__)

Q(__init__)

Q(__init__)

Q(__int__)

Q(__invert__)

Q(__isub__)

Q(__iter__)

Q(__le__)

Q(__len__)

Q(__lshift__)

Q(__lt__)

Q(__main__)

Q(__main__)

Q(__matmul__)

Q(__mod__)

Q(__module__)

Q(__mul__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__name__)

Q(__ne__)

Q(__neg__)

Q(__new__)

Q(__new__)

Q(__new__)

Q(__next__)

Q(__next__)

Q(__next__)

Q(__next__)

Q(__or__)

Q(__path__)

Q(__path__)

Q(__path__)

Q(__path__)

Q(__pos__)

Q(__pow__)

Q(__qualname__)

Q(__radd__)

Q(__rand__)

Q(__repl_print__)

Q(__repl_print__)

Q(__repr__)

Q(__repr__)

Q(__reversed__)

Q(__rfloordiv__)

Q(__rlshift__)

Q(__rmatmul__)

Q(__rmod__)

Q(__rmul__)

Q(__ror__)

Q(__rpow__)

Q(__rrshift__)

Q(__rshift__)

Q(__rsub__)

Q(__rtruediv__)

Q(__rxor__)

Q(__set__)

Q(__set__)

Q(__setitem__)

Q(__setitem__)

Q(__str__)

Q(__sub__)

Q(__suppress_context__)

Q(__suppress_context__)

Q(__traceback__)

Q(__traceback__)

Q(__truediv__)

Q(__version__)

Q(__xor__)

Q(_asyncio)

Q(_asyncio)

Q(_bleio)

Q(_bleio)

Q(_machine)

Q(_mpy)

Q(_pixelmap)

Q(_pixelmap)

Q(_task_queue)

Q(_transmit)

Q(a)

Q(a)

Q(a)

Q(a)

Q(a2b_base64)

Q(abs)

Q(ack)

Q(ack)

Q(acos)

Q(acos)

Q(acosh)

Q(active)

Q(adafruit_bus_device)

Q(adafruit_bus_device)

Q(adafruit_bus_device.i2c_device)

Q(adafruit_bus_device.spi_device)

Q(adafruit_pixelbuf)

Q(adafruit_pixelbuf)

Q(adapter)

Q(adapter)

Q(adapter)

Q(add)

Q(add_frame)

Q(add_to_characteristic)

Q(add_to_service)

Q(addr_pins)

Q(addr_pins)

Q(address)

Q(address)

Q(address)

Q(address)

Q(address)

Q(address)

Q(address)

Q(address)

Q(address)

Q(address)

Q(address)

Q(address)

Q(address)

Q(address_bytes)

Q(address_little_endian)

Q(address_type)

Q(address_type)

Q(addresses)

Q(advanced_color_epaper)

Q(advertisement_bytes)

Q(advertising)

Q(aesio)

Q(aesio)

Q(alarm)

Q(alarm)

Q(alarm)

Q(algorithm)

Q(algorithm)

Q(all)

Q(all)

Q(alphablend)

Q(always_toggle_chip_select)

Q(amplitude)

Q(amplitude)

Q(amplitude)

Q(analogio)

Q(analogio)

Q(angle)

Q(annotations)

Q(anonymous)

Q(any)

Q(any)

Q(append)

Q(append)

Q(append)

Q(append)

Q(append)

Q(appendleft)

Q(arange)

Q(arctan2)

Q(argmax)

Q(argmin)

Q(args)

Q(args)

Q(argsort)

Q(argv)

Q(around)

Q(array)

Q(array)

Q(array)

Q(array)

Q(array)

Q(arrayblit)

Q(asarray)

Q(asin)

Q(asin)

Q(asinh)

Q(atan)

Q(atan)

Q(atan2)

Q(atanh)

Q(atexit)

Q(atexit)

Q(attach_kernel_driver)

Q(attack_level)

Q(attack_level)

Q(attack_level)

Q(attack_time)

Q(attack_time)

Q(attack_time)

Q(audio_control_interface_name)

Q(audio_control_interface_name)

Q(audiobusio)

Q(audiobusio)

Q(audiocore)

Q(audiocore)

Q(audioio)

Q(audioio)

Q(audiomixer)

Q(audiomixer)

Q(audiomp3)

Q(audiomp3)

Q(auto_refresh)

Q(auto_refresh)

Q(auto_refresh)

Q(auto_refresh)

Q(auto_write)

Q(auto_write)

Q(auto_write)

Q(autoreload)

Q(axis)

Q(axis)

Q(axis)

Q(axis)

Q(axis)

Q(axis)

Q(axis)

Q(axis)

Q(axis)

Q(axis)

Q(axis)

Q(axis)

Q(axis)

Q(axis)

Q(b)

Q(b)

Q(b)

Q(b2a_base64)

Q(bRequest)

Q(backlight_on_high)

Q(backlight_pin)

Q(backlight_pin)

Q(backlight_pwm_frequency)

Q(base)

Q(base)

Q(baudrate)

Q(baudrate)

Q(baudrate)

Q(baudrate)

Q(baudrate)

Q(baudrate)

Q(baudrate)

Q(baudrate)

Q(baudrate)

Q(baudrate)

Q(bend)

Q(bend)

Q(bend)

Q(big)

Q(big)

Q(big)

Q(bin)

Q(binascii)

Q(binascii)

Q(bisect)

Q(bit_clock)

Q(bit_clock)

Q(bit_clock)

Q(bit_depth)

Q(bit_depth)

Q(bit_depth)

Q(bit_depth)

Q(bit_length)

Q(bitbangio)

Q(bitbangio)

Q(bitmap)

Q(bitmap)

Q(bitmap)

Q(bitmap)

Q(bitmap)

Q(bitmap)

Q(bitmap)

Q(bitmap)

Q(bitmap)

Q(bitmap)

Q(bitmap)

Q(bitmap)

Q(bitmap)

Q(bitmap)

Q(bitmaptools)

Q(bitmaptools)

Q(bitmaptools)

Q(bitmaptools)

Q(bits)

Q(bits)

Q(bits)

Q(bits)

Q(bits)

Q(bits)

Q(bits)

Q(bits)

Q(bits_per_pixel)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_sample)

Q(bits_per_value)

Q(bitwise_and)

Q(bitwise_or)

Q(bitwise_xor)

Q(black_bits_inverted)

Q(ble_workflow)

Q(blendmode)

Q(blendmode)

Q(blit)

Q(block_size)

Q(blocks)

Q(bmRequestType)

Q(board)

Q(board)

Q(board)

Q(board)

Q(board)

Q(board)

Q(board)

Q(board)

Q(board)

Q(board)

Q(board)

Q(board_id)

Q(board_id)

Q(board_id)

Q(board_id)

Q(board_id)

Q(board_id)

Q(board_id)

Q(board_id)

Q(board_id)

Q(bond)

Q(bond)

Q(bool)

Q(bool)

Q(bool)

Q(boot_device)

Q(boot_device)

Q(bottom_left_x)

Q(bottom_left_y)

Q(bottom_right_x)

Q(bottom_right_y)

Q(bound_method)

Q(bound_method)

Q(bound_method)

Q(bound_method)

Q(boundary_fill)

Q(bpp)

Q(bpp)

Q(brightness)

Q(brightness)

Q(brightness)

Q(brightness)

Q(brightness)

Q(brightness)

Q(brightness)

Q(brightness)

Q(brightness)

Q(brightness)

Q(brightness_command)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer)

Q(buffer_size)

Q(buffer_size)

Q(buffer_size)

Q(buffer_size)

Q(buffer_size)

Q(buffer_size)

Q(buffering)

Q(builtins)

Q(builtins)

Q(bus)

Q(bus)

Q(bus)

Q(busdisplay)

Q(busdisplay)

Q(busio)

Q(busio)

Q(busio)

Q(busy)

Q(busy_pin)

Q(busy_pin)

Q(busy_state)

Q(bytearray)

Q(bytearray)

Q(bytecode)

Q(byteorder)

Q(byteorder)

Q(byteorder)

Q(byteorder)

Q(byteorder)

Q(byteorder)

Q(byteorder)

Q(byteorder)

Q(byteorder)

Q(bytes)

Q(bytes)

Q(bytes)

Q(bytes)

Q(bytes)

Q(bytes)

Q(bytes_per_cell)

Q(byteswap)

Q(byteswap)

Q(c)

Q(c)

Q(c)

Q(calcsize)

Q(calibration)

Q(calibration)

Q(calibration)

Q(callable)

Q(cancel)

Q(capture)

Q(capture_period)

Q(capture_period)

Q(capture_period)

Q(capture_period)

Q(cast)

Q(category)

Q(category)

Q(ceil)

Q(ceil)

Q(center)

Q(chain)

Q(change)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(channel_count)

Q(characteristic)

Q(characteristic)

Q(characteristic)

Q(characteristic)

Q(characteristic)

Q(characteristic)

Q(characteristic)

Q(characteristics)

Q(chdir)

Q(chdir)

Q(chdir)

Q(chdir)

Q(chdir)

Q(chdir)

Q(chip_select)

Q(chip_select)

Q(chip_select)

Q(chip_select)

Q(chip_select)

Q(chip_select)

Q(chip_select)

Q(chip_select)

Q(chip_select)

Q(chip_select)

Q(cho_solve)

Q(choice)

Q(cholesky)

Q(chr)

Q(circuitpython)

Q(circuitpython)

Q(classmethod)

Q(classmethod)

Q(clear)

Q(clear)

Q(clear)

Q(clear)

Q(clear)

Q(clear)

Q(clear_errors)

Q(clear_validity)

Q(clip)

Q(clock)

Q(clock)

Q(clock)

Q(clock)

Q(clock)

Q(clock)

Q(clock)

Q(clock)

Q(clock)

Q(clock)

Q(clock)

Q(clock)

Q(clock)

Q(clock)

Q(clock)

Q(clock)

Q(clock_pin)

Q(clock_pin)

Q(clock_pin)

Q(clock_pin)

Q(clock_pin)

Q(clock_pin)

Q(clock_pin)

Q(close)

Q(close)

Q(close)

Q(close)

Q(close)

Q(close)

Q(close)

Q(close)

Q(closure)

Q(code)

Q(code)

Q(code)

Q(code)

Q(codeop)

Q(codeop)

Q(codepoint)

Q(collect)

Q(collections)

Q(collections)

Q(color)

Q(color)

Q(color_bits_inverted)

Q(color_count)

Q(color_count)

Q(color_depth)

Q(color_depth)

Q(color_index)

Q(color_index)

Q(color_index)

Q(color_index)

Q(color_index)

Q(color_index)

Q(colorspace)

Q(colorspace)

Q(colorspace)

Q(colorspace)

Q(colorwheel)

Q(colstart)

Q(colstart)

Q(column)

Q(column_pins)

Q(column_pins)

Q(columns_to_anodes)

Q(command)

Q(command)

Q(command)

Q(command)

Q(command)

Q(command)

Q(command)

Q(command)

Q(command)

Q(command)

Q(command)

Q(comments)

Q(comments)

Q(compile)

Q(compile)

Q(compile_command)

Q(complex)

Q(complex)

Q(compress)

Q(concatenate)

Q(configuration)

Q(configure)

Q(configure)

Q(configure)

Q(configure)

Q(connect)

Q(connectable)

Q(connectable)

Q(connected)

Q(connected)

Q(connected)

Q(connection_interval)

Q(connections)

Q(console)

Q(console)

Q(console)

Q(console)

Q(const)

Q(const)

Q(contains)

Q(contains)

Q(contains)

Q(contains)

Q(continuous_capture_get_frame)

Q(continuous_capture_start)

Q(continuous_capture_stop)

Q(convert)

Q(convolve)

Q(copy)

Q(copy)

Q(copy)

Q(copy)

Q(copy)

Q(copysign)

Q(core)

Q(coro)

Q(coroutine)

Q(coroutine)

Q(cos)

Q(cos)

Q(cosh)

Q(count)

Q(count)

Q(count)

Q(count)

Q(count)

Q(count)

Q(count)

Q(count)

Q(count)

Q(counter)

Q(countio)

Q(countio)

Q(countio)

Q(cp437)

Q(cp874)

Q(cpu)

Q(crc32)

Q(cross)

Q(cs)

Q(cs)

Q(cs_active_value)

Q(ctrl)

Q(ctrl_transfer)

Q(cts)

Q(cts)

Q(cts)

Q(cts)

Q(cur_task)

Q(cur_task)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data)

Q(data0)

Q(data0)

Q(data0)

Q(data1)

Q(data2)

Q(data3)

Q(data_as_commands)

Q(data_clock)

Q(data_or_wLength)

Q(data_pin)

Q(data_pin)

Q(data_pin)

Q(data_pin)

Q(data_pins)

Q(data_pins)

Q(data_pins)

Q(data_source)

Q(data_type)

Q(datacount)

Q(datetime)

Q(datetime)

Q(ddof)

Q(debounce_threshold)

Q(debounce_threshold)

Q(debounce_threshold)

Q(debounce_threshold)

Q(debounce_threshold)

Q(debounce_threshold)

Q(decay_time)

Q(decay_time)

Q(decay_time)

Q(decimals)

Q(decode)

Q(decode)

Q(decode)

Q(decode)

Q(decode)

Q(decompress)

Q(decrypt_into)

Q(default)

Q(default)

Q(default)

Q(default_tile)

Q(degrees)

Q(degrees)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(deinit)

Q(delattr)

Q(delay)

Q(delay)

Q(delay)

Q(delay_us)

Q(delete)

Q(deleter)

Q(delimiter)

Q(delimiter)

Q(deque)

Q(deque)

Q(descriptors)

Q(dest_bitmap)

Q(dest_bitmap)

Q(dest_bitmap)

Q(dest_bitmap)

Q(dest_bitmap)

Q(dest_bitmap)

Q(dest_bitmap)

Q(dest_bitmap)

Q(dest_bitmap)

Q(dest_bitmap)

Q(dest_bitmap)

Q(dest_bitmap)

Q(dest_bitmap)

Q(dest_clip0)

Q(dest_clip1)

Q(det)

Q(detach_kernel_driver)

Q(device_address)

Q(device_address)

Q(devices)

Q(devices)

Q(devices)

Q(devices)

Q(diag)

Q(dict)

Q(dict)

Q(dict)

Q(dict_view)

Q(diff)

Q(difference)

Q(difference)

Q(difference_update)

Q(digitalinout)

Q(digitalio)

Q(digitalio)

Q(digitalio)

Q(digitalio)

Q(digitalio)

Q(dir)

Q(directed_to)

Q(directed_to)

Q(direction)

Q(direction)

Q(dirty)

Q(disable)

Q(disable)

Q(disable)

Q(disable)

Q(disable_concurrent_write_protection)

Q(disable_interrupts)

Q(disable_usb_drive)

Q(discard)

Q(disconnect)

Q(discover_remote_services)

Q(display)

Q(display)

Q(display_bus)

Q(display_bus)

Q(displayio)

Q(displayio)

Q(displayio)

Q(displayio)

Q(displayio)

Q(displayio)

Q(displayio)

Q(displayio)

Q(displayio)

Q(dither)

Q(dither)

Q(dither)

Q(dither)

Q(dither)

Q(dither)

Q(divisor)

Q(divisor)

Q(divmod)

Q(doc)

Q(done)

Q(dot)

Q(doublebuffer)

Q(draw_circle)

Q(draw_line)

Q(draw_polygon)

Q(drive_mode)

Q(drive_mode)

Q(dtype)

Q(dtype)

Q(dtype)

Q(dtype)

Q(dtype)

Q(dtype)

Q(dtype)

Q(dtype)

Q(dtype)

Q(dtype)

Q(dtype)

Q(dtype)

Q(dtype)

Q(dtype)

Q(dump)

Q(dumps)

Q(duration)

Q(duty_cycle)

Q(duty_cycle)

Q(duty_cycle)

Q(duty_cycle)

Q(dx)

Q(dx)

Q(dy)

Q(e)

Q(e)

Q(edge)

Q(edge)

Q(edge)

Q(edgeitems)

Q(edgeitems)

Q(eig)

Q(element_size)

Q(empty)

Q(enable)

Q(enable)

Q(enable)

Q(enable)

Q(enable_interrupts)

Q(enable_usb_drive)

Q(enabled)

Q(enabled)

Q(encode)

Q(encoding)

Q(encrypt_into)

Q(end)

Q(end)

Q(end)

Q(end)

Q(end)

Q(end)

Q(end)

Q(end)

Q(end)

Q(end)

Q(end)

Q(end)

Q(end)

Q(end)

Q(endpoint)

Q(endpoint)

Q(endpoint)

Q(endpoint)

Q(endswith)

Q(enumerate)

Q(enumerate)

Q(envelope)

Q(envelope)

Q(envelope)

Q(envelope)

Q(envelope)

Q(envelope)

Q(envelope)

Q(envelope)

Q(epaperdisplay)

Q(epaperdisplay)

Q(epoch_time)

Q(equal)

Q(erase_bonding)

Q(erase_filesystem)

Q(erf)

Q(erfc)

Q(errno)

Q(errno)

Q(errno)

Q(errno)

Q(error_location)

Q(errorcode)

Q(eval)

Q(eval)

Q(event)

Q(events)

Q(events)

Q(events)

Q(exec)

Q(exec)

Q(exit)

Q(exit_and_deep_sleep_until_alarms)

Q(exp)

Q(exp)

Q(expm1)

Q(ext_hook)

Q(extend)

Q(extend)

Q(extend)

Q(extend)

Q(extended)

Q(extended)

Q(extended)

Q(extra_clocks)

Q(eye)

Q(fabs)

Q(factor_1)

Q(factor_2)

Q(fatol)

Q(feed)

Q(fft)

Q(fft)

Q(fft)

Q(file)

Q(file)

Q(file)

Q(file)

Q(file)

Q(file)

Q(file)

Q(file)

Q(file)

Q(file)

Q(file)

Q(file)

Q(file)

Q(file)

Q(file)

Q(filename)

Q(filename)

Q(filename)

Q(filename)

Q(filename)

Q(filename2)

Q(filesystem)

Q(fill)

Q(fill)

Q(fill)

Q(fill_color_value)

Q(fill_region)

Q(fill_row)

Q(fill_row)

Q(filter)

Q(filter)

Q(filter)

Q(filter)

Q(filter)

Q(find)

Q(find)

Q(find)

Q(find)

Q(find_all)

Q(fixed_length)

Q(fixed_length)

Q(flat)

Q(flatiter)

Q(flatten)

Q(flip)

Q(flip_x)

Q(flip_y)

Q(float)

Q(float)

Q(float)

Q(float)

Q(floor)

Q(floor)

Q(floppyio)

Q(floppyio)

Q(flush)

Q(flush)

Q(flush)

Q(flush)

Q(flux)

Q(flux_readinto)

Q(flux_t2_max)

Q(flux_t3_max)

Q(fmin)

Q(fmod)

Q(font)

Q(font)

Q(fontio)

Q(fontio)

Q(footer)

Q(format)

Q(format)

Q(format_exception)

Q(fourwire)

Q(fourwire)

Q(fourwire)

Q(frame_count)

Q(framebuffer)

Q(framebuffer)

Q(framebuffer)

Q(framebuffer)

Q(framebufferio)

Q(framebufferio)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequency)

Q(frequencyin)

Q(frequencyio)

Q(frequencyio)

Q(frexp)

Q(from_bytes)

Q(from_file)

Q(from_int16_buffer)

Q(from_int32_buffer)

Q(from_uint16_buffer)

Q(from_uint32_buffer)

Q(frombuffer)

Q(fromhex)

Q(fromkeys)

Q(frozenset)

Q(frozenset)

Q(full)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(function)

Q(gamma)

Q(gammaln)

Q(gc)

Q(gc)

Q(generator)

Q(generator)

Q(generator)

Q(get)

Q(get)

Q(get_boot_device)

Q(get_bounding_box)

Q(get_glyph)

Q(get_into)

Q(get_last_received_report)

Q(get_previous_traceback)

Q(get_printoptions)

Q(getattr)

Q(getcwd)

Q(getcwd)

Q(getcwd)

Q(getenv)

Q(getlocale)

Q(getmount)

Q(getpass)

Q(getpass)

Q(getpass)

Q(getrandbits)

Q(getter)

Q(getvalue)

Q(gifio)

Q(gifio)

Q(globals)

Q(grayscale)

Q(grayscale)

Q(group)

Q(groups)

Q(half_duplex)

Q(half_duplex)

Q(hasattr)

Q(hash)

Q(header)

Q(header)

Q(header)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(height)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(help)

Q(hex)

Q(hex)

Q(hex)

Q(hexlify)

Q(hidden)

Q(hidden)

Q(hidden)

Q(hidden)

Q(hidden)

Q(high)

Q(highlight_color)

Q(href)

Q(href)

Q(href)

Q(i)

Q(i2c)

Q(i2c_bus)

Q(i2c_bus)

Q(i2c_device)

Q(i2c_device)

Q(i2cdisplaybus)

Q(i2cdisplaybus)

Q(i2cdisplaybus)

Q(i2ctarget)

Q(i2ctarget)

Q(id)

Q(idProduct)

Q(idProduct)

Q(idVendor)

Q(idVendor)

Q(idle_state)

Q(ifft)

Q(ilistdir)

Q(ilistdir)

Q(ilistdir)

Q(ilistdir)

Q(imag)

Q(imagecapture)

Q(imagecapture)

Q(implementation)

Q(in_buffer)

Q(in_buffer)

Q(in_buffer)

Q(in_buffer)

Q(in_buffer)

Q(in_end)

Q(in_end)

Q(in_end)

Q(in_end)

Q(in_end)

Q(in_end)

Q(in_jack_name)

Q(in_jack_name)

Q(in_report_lengths)

Q(in_report_lengths)

Q(in_report_lengths)

Q(in_start)

Q(in_start)

Q(in_start)

Q(in_start)

Q(in_start)

Q(in_start)

Q(in_waiting)

Q(in_waiting)

Q(in_waiting)

Q(incoming_packet_length)

Q(index)

Q(index)

Q(index)

Q(index)

Q(index)

Q(index)

Q(index)

Q(index)

Q(index)

Q(index)

Q(index)

Q(index)

Q(index)

Q(index)

Q(index_wait)

Q(index_wait)

Q(indicate)

Q(indices)

Q(indices)

Q(indices)

Q(indices)

Q(inf)

Q(init_sequence)

Q(initial_value)

Q(initial_value)

Q(inplace)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input)

Q(input_color_count)

Q(input_colorspace)

Q(input_colorspace)

Q(insert)

Q(insert)

Q(int)

Q(int)

Q(int)

Q(int)

Q(int)

Q(int16)

Q(int8)

Q(interface_name)

Q(interface_name)

Q(interp)

Q(interpolate)

Q(interpolate)

Q(intersection)

Q(intersection)

Q(intersection_update)

Q(interval)

Q(interval)

Q(interval)

Q(interval)

Q(interval)

Q(interval)

Q(interval)

Q(interval)

Q(inv)

Q(io)

Q(io)

Q(ioctl)

Q(ioctl)

Q(ioctl)

Q(ipoll)

Q(irq)

Q(irq)

Q(is_kernel_driver_active)

Q(is_read)

Q(is_restart)

Q(is_transparent)

Q(isalpha)

Q(isdigit)

Q(isdisjoint)

Q(isdisjoint)

Q(isenabled)

Q(isfinite)

Q(isfinite)

Q(isinf)

Q(isinf)

Q(isinstance)

Q(islower)

Q(isnan)

Q(iso_8859-1)

Q(iso_8859-13)

Q(iso_8859-15)

Q(iso_8859-2)

Q(iso_8859-3)

Q(iso_8859-4)

Q(iso_8859-5)

Q(iso_8859-6)

Q(iso_8859-7)

Q(iso_8859-8)

Q(iso_8859-9)

Q(isspace)

Q(issubclass)

Q(issubset)

Q(issubset)

Q(issuperset)

Q(issuperset)

Q(isupper)

Q(items)

Q(items)

Q(itemsize)

Q(iter)

Q(iterable)

Q(iterator)

Q(iterator)

Q(iterator)

Q(iterator)

Q(iterator)

Q(iterator)

Q(jdi_display)

Q(join)

Q(jpegio)

Q(jpegio)

Q(json)

Q(json)

Q(json)

Q(k)

Q(k)

Q(keepends)

Q(key)

Q(key)

Q(key)

Q(key)

Q(key)

Q(key)

Q(key_count)

Q(key_count)

Q(key_count)

Q(key_count)

Q(key_count)

Q(key_count)

Q(key_count)

Q(key_number)

Q(key_number)

Q(key_number)

Q(key_number)

Q(key_number_to_row_column)

Q(key_size)

Q(keypad)

Q(keypad)

Q(keys)

Q(keys)

Q(label)

Q(last)

Q(latch)

Q(latch)

Q(latch_pin)

Q(latch_pin)

Q(ldexp)

Q(left)

Q(left_channel)

Q(left_channel)

Q(left_channel)

Q(left_channel)

Q(left_justified)

Q(left_shift)

Q(len)

Q(length)

Q(length)

Q(length)

Q(level)

Q(level)

Q(light_sleep_until_alarms)

Q(limit)

Q(linalg)

Q(linalg)

Q(linalg)

Q(linalg)

Q(linspace)

Q(list)

Q(list)

Q(list)

Q(listdir)

Q(little)

Q(little)

Q(little)

Q(little)

Q(load)

Q(load)

Q(load_packet)

Q(loads)

Q(loadtxt)

Q(loc)

Q(locale)

Q(locale)

Q(locals)

Q(localtime)

Q(location)

Q(location)

Q(location)

Q(location)

Q(log)

Q(log)

Q(log10)

Q(log2)

Q(logspace)

Q(loop)

Q(loop)

Q(loop)

Q(loop)

Q(loop)

Q(loop)

Q(low)

Q(lower)

Q(lower)

Q(lstrip)

Q(machine)

Q(main_clock)

Q(main_clock)

Q(main_clock)

Q(make_opaque)

Q(make_opaque)

Q(make_transparent)

Q(make_transparent)

Q(manufacturer)

Q(manufacturer)

Q(manufacturer)

Q(map)

Q(map)

Q(mapping_length)

Q(mapping_value)

Q(mapping_value)

Q(match)

Q(match)

Q(match)

Q(match_all)

Q(matches)

Q(math)

Q(math)

Q(max)

Q(max)

Q(max3421e)

Q(max3421e)

Q(max3421e)

Q(max_delay)

Q(max_events)

Q(max_events)

Q(max_events)

Q(max_events)

Q(max_events)

Q(max_events)

Q(max_length)

Q(max_length)

Q(max_length)

Q(max_length)

Q(max_length)

Q(max_packet_length)

Q(max_packet_size)

Q(max_polyphony)

Q(max_rows)

Q(maximum)

Q(maxiter)

Q(maxiter)

Q(maxiter)

Q(maxlen)

Q(maxlen)

Q(maxsize)

Q(mean)

Q(median)

Q(mem_alloc)

Q(mem_free)

Q(memoryview)

Q(memoryview)

Q(message)

Q(mfm_readinto)

Q(microcontroller)

Q(microcontroller)

Q(microcontroller)

Q(microcontroller)

Q(microcontroller)

Q(micropython)

Q(micropython)

Q(micropython)

Q(midi_to_hz)

Q(min)

Q(min)

Q(min_delay)

Q(minimum)

Q(minimum_frames_per_second)

Q(minimum_frames_per_second)

Q(minimum_rssi)

Q(miso)

Q(miso)

Q(miso)

Q(miso)

Q(miso)

Q(miso)

Q(miso)

Q(miso_packet)

Q(mkdir)

Q(mkdir)

Q(mkdir)

Q(mkdir)

Q(mkfs)

Q(mkfs)

Q(mktime)

Q(mode)

Q(mode)

Q(mode)

Q(mode)

Q(mode)

Q(mode)

Q(mode)

Q(mode)

Q(mode)

Q(mode)

Q(modf)

Q(modify)

Q(module)

Q(modules)

Q(modules)

Q(mono)

Q(monotonic)

Q(monotonic_ns)

Q(monotonic_time)

Q(monotonic_time)

Q(mosi)

Q(mosi)

Q(mosi)

Q(mosi)

Q(mosi)

Q(mosi)

Q(mosi)

Q(mosi_packet)

Q(mount)

Q(mount)

Q(mount)

Q(mount)

Q(mount)

Q(mount)

Q(mount_path)

Q(mount_path)

Q(move_to_end)

Q(msgpack)

Q(msgpack)

Q(n)

Q(n)

Q(name)

Q(name)

Q(namedtuple)

Q(nan)

Q(native_frames_per_second)

Q(ndarray)

Q(ndarray)

Q(ndinfo)

Q(neopixel_write)

Q(neopixel_write)

Q(neopixel_write)

Q(newline)

Q(newton)

Q(next)

Q(next_frame)

Q(nodename)

Q(nonzero)

Q(norm)

Q(normal)

Q(not_equal)

Q(note)

Q(note)

Q(note)

Q(note_info)

Q(notify)

Q(num)

Q(num)

Q(numpy)

Q(numpy)

Q(nvm)

Q(nvm)

Q(nvm)

Q(obj)

Q(object)

Q(object)

Q(object)

Q(oct)

Q(offset)

Q(offset)

Q(offset)

Q(offset)

Q(offset)

Q(offset)

Q(offset)

Q(on_next_reset)

Q(once)

Q(once)

Q(ones)

Q(onewireio)

Q(onewireio)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(open)

Q(operation)

Q(operation)

Q(operation)

Q(optimize)

Q(optimize)

Q(ord)

Q(order)

Q(os)

Q(os)

Q(otypes)

Q(out)

Q(out)

Q(out)

Q(out)

Q(out)

Q(out_buffer)

Q(out_buffer)

Q(out_buffer)

Q(out_buffer)

Q(out_buffer)

Q(out_buffer)

Q(out_end)

Q(out_end)

Q(out_end)

Q(out_end)

Q(out_end)

Q(out_end)

Q(out_jack_name)

Q(out_jack_name)

Q(out_report_lengths)

Q(out_report_lengths)

Q(out_report_lengths)

Q(out_start)

Q(out_start)

Q(out_start)

Q(out_start)

Q(out_start)

Q(out_start)

Q(out_waiting)

Q(outgoing_packet_length)

Q(output_enable_pin)

Q(output_enable_pin)

Q(overflowed)

Q(oversample)

Q(oversample)

Q(ox)

Q(oy)

Q(pack)

Q(pack)

Q(pack_into)

Q(pack_into)

Q(pair)

Q(paired)

Q(palette)

Q(palette)

Q(palette_index)

Q(palette_index)

Q(palette_index)

Q(palette_index)

Q(palette_index)

Q(palette_index)

Q(panning)

Q(panning)

Q(panning)

Q(paralleldisplay)

Q(paralleldisplay)

Q(paralleldisplay)

Q(paralleldisplaybus)

Q(paralleldisplaybus)

Q(paralleldisplaybus)

Q(parent)

Q(parity)

Q(partition)

Q(path)

Q(pause)

Q(pause)

Q(pause)

Q(pause)

Q(paused)

Q(paused)

Q(paused)

Q(payload)

Q(peek)

Q(pend_throw)

Q(pend_throw)

Q(ph_key)

Q(phase)

Q(phase)

Q(phase)

Q(phase)

Q(phase)

Q(phase)

Q(phase)

Q(phase)

Q(phase)

Q(phase_offset)

Q(phase_offset)

Q(phase_offset)

Q(pi)

Q(pi)

Q(pid)

Q(pid)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin)

Q(pin_a)

Q(pin_a)

Q(pin_a)

Q(pin_b)

Q(pin_b)

Q(pin_b)

Q(pins)

Q(pins)

Q(pixel_policy)

Q(pixel_policy)

Q(pixel_policy)

Q(pixel_policy)

Q(pixel_shader)

Q(pixel_shader)

Q(pixel_shader)

Q(pixel_shader)

Q(pixel_shader)

Q(pixel_shader)

Q(pixel_shader)

Q(pixel_shader)

Q(pixel_shader)

Q(pixel_shader)

Q(pixel_shader)

Q(pixel_shader)

Q(pixel_shader)

Q(pixel_shader)

Q(pixelbuf)

Q(pixelbuf)

Q(pixels_in_byte_share_row)

Q(platform)

Q(play)

Q(play)

Q(play)

Q(play)

Q(playing)

Q(playing)

Q(playing)

Q(playing)

Q(point)

Q(point)

Q(points)

Q(points)

Q(points)

Q(polarity)

Q(polarity)

Q(polarity)

Q(polarity)

Q(polarity)

Q(polarity)

Q(polarity)

Q(polarity)

Q(poll)

Q(poll)

Q(poll)

Q(polyfit)

Q(polyval)

Q(pop)

Q(pop)

Q(pop)

Q(pop)

Q(pop)

Q(pop)

Q(pop_head)

Q(popitem)

Q(popleft)

Q(popleft)

Q(popleft)

Q(port_numbers)

Q(ports)

Q(ports)

Q(position)

Q(pow)

Q(pow)

Q(prefixes)

Q(prefixes)

Q(preserve_dios)

Q(preserve_dios)

Q(press)

Q(press)

Q(pressed)

Q(pressed)

Q(pressed)

Q(pressed)

Q(print)

Q(print_exception)

Q(print_exception)

Q(print_exception)

Q(probe)

Q(probe)

Q(probe)

Q(probe)

Q(product)

Q(product)

Q(product)

Q(prompt)

Q(properties)

Q(properties)

Q(properties)

Q(property)

Q(property)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_audiosample)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_draw)

Q(protocol_framebuffer)

Q(protocol_framebuffer)

Q(protocol_framebuffer)

Q(protocol_vfs)

Q(ps2io)

Q(ps2io)

Q(pull)

Q(pull)

Q(pull)

Q(pull)

Q(pull)

Q(pull)

Q(pull)

Q(pull)

Q(pull)

Q(pull)

Q(pulseio)

Q(pulseio)

Q(push)

Q(push_head)

Q(push_sorted)

Q(pwmio)

Q(pwmio)

Q(px)

Q(py)

Q(pystack exhausted)

Q(qr)

Q(qrio)

Q(qrio)

Q(qrio)

Q(quiescent_value)

Q(r)

Q(r)

Q(radians)

Q(radians)

Q(radius)

Q(radius)

Q(radius)

Q(radius)

Q(radius)

Q(rainbowio)

Q(rainbowio)

Q(ram_height)

Q(ram_width)

Q(randint)

Q(random)

Q(random)

Q(random)

Q(random)

Q(random)

Q(randrange)

Q(randrange)

Q(range)

Q(range)

Q(range)

Q(range)

Q(rate)

Q(rate)

Q(rate)

Q(raw_value)

Q(rb)

Q(rb)

Q(rb)

Q(rb)

Q(rb)

Q(rb)

Q(rb)

Q(rb)

Q(re)

Q(re)

Q(re)

Q(read)

Q(read)

Q(read)

Q(read)

Q(read)

Q(read)

Q(read)

Q(read)

Q(read)

Q(read)

Q(read)

Q(read_bit)

Q(read_perm)

Q(read_perm)

Q(readblocks)

Q(readblocks)

Q(readblocks)

Q(readblocks)

Q(readfrom_into)

Q(readfrom_into)

Q(readfrom_into)

Q(readinto)

Q(readinto)

Q(readinto)

Q(readinto)

Q(readinto)

Q(readinto)

Q(readinto)

Q(readinto)

Q(readinto)

Q(readinto)

Q(readinto)

Q(readinto)

Q(readinto)

Q(readinto)

Q(readline)

Q(readline)

Q(readline)

Q(readline)

Q(readline)

Q(readline)

Q(readlines)

Q(readlines)

Q(readlines)

Q(readonly)

Q(readonly)

Q(readonly)

Q(readonly)

Q(real)

Q(receiver_buffer_size)

Q(receiver_buffer_size)

Q(receiver_buffer_size)

Q(record)

Q(reduced)

Q(reference_voltage)

Q(refresh)

Q(refresh)

Q(refresh)

Q(refresh)

Q(refresh_display_command)

Q(refresh_display_command)

Q(refresh_time)

Q(register)

Q(register)

Q(rekey)

Q(release)

Q(release)

Q(release)

Q(release_all)

Q(release_all_then_press)

Q(release_displays)

Q(release_then_press)

Q(release_time)

Q(release_time)

Q(release_time)

Q(released)

Q(released)

Q(reload)

Q(reload_on_error)

Q(reload_on_success)

Q(remote)

Q(remount)

Q(remove)

Q(remove)

Q(remove)

Q(remove)

Q(remove)

Q(remove)

Q(remove)

Q(remove)

Q(remove)

Q(rename)

Q(rename)

Q(rename)

Q(rename)

Q(replace)

Q(replaced_color_value)

Q(report)

Q(report)

Q(report_descriptor)

Q(report_id 0)

Q(report_id)

Q(report_id)

Q(report_id)

Q(report_ids)

Q(report_ids)

Q(report_ids)

Q(report_ids)

Q(report_ids)

Q(repr)

Q(request)

Q(reset)

Q(reset)

Q(reset)

Q(reset)

Q(reset)

Q(reset)

Q(reset)

Q(reset)

Q(reset)

Q(reset)

Q(reset)

Q(reset)

Q(reset)

Q(reset)

Q(reset)

Q(reset)

Q(reset)

Q(reset)

Q(reset_input_buffer)

Q(reset_input_buffer)

Q(reset_input_buffer)

Q(reset_output_buffer)

Q(reset_reason)

Q(reset_terminal)

Q(reshape)

Q(resume)

Q(resume)

Q(resume)

Q(resume)

Q(retrigger)

Q(retrigger)

Q(retrigger)

Q(retrigger)

Q(retstep)

Q(reverse)

Q(reverse)

Q(reverse_bytes_in_word)

Q(reverse_pixels_in_byte)

Q(reverse_pixels_in_element)

Q(reverse_rows)

Q(reversed)

Q(reversed)

Q(rfind)

Q(rfind)

Q(rgb_pins)

Q(rgb_pins)

Q(rgb_status_brightness)

Q(rgbmatrix)

Q(rgbmatrix)

Q(right)

Q(right_channel)

Q(right_channel)

Q(right_channel)

Q(right_channel)

Q(right_shift)

Q(rindex)

Q(rindex)

Q(ring_bend)

Q(ring_bend)

Q(ring_bend)

Q(ring_frequency)

Q(ring_frequency)

Q(ring_frequency)

Q(ring_waveform)

Q(ring_waveform)

Q(ring_waveform_loop_end)

Q(ring_waveform_loop_end)

Q(ring_waveform_loop_end)

Q(ring_waveform_loop_start)

Q(ring_waveform_loop_start)

Q(ring_waveform_loop_start)

Q(rmdir)

Q(rmdir)

Q(rmdir)

Q(rmdir)

Q(rms_level)

Q(roll)

Q(root_group)

Q(root_group)

Q(root_group)

Q(rotaryio)

Q(rotaryio)

Q(rotation)

Q(rotation)

Q(rotation)

Q(rotation)

Q(rotation)

Q(rotation)

Q(rotozoom)

Q(round)

Q(row)

Q(row_column_to_key_number)

Q(row_pins)

Q(row_pins)

Q(row_pins)

Q(rowstart)

Q(rowstart)

Q(rpartition)

Q(rs485_dir)

Q(rs485_dir)

Q(rs485_invert)

Q(rsplit)

Q(rssi)

Q(rstrip)

Q(rtc)

Q(rtc)

Q(rtol)

Q(rts)

Q(rts)

Q(rts)

Q(rts)

Q(run_mode)

Q(run_reason)

Q(runtime)

Q(rx)

Q(rx)

Q(rx)

Q(safe_mode_reason)

Q(samd)

Q(samd)

Q(samd)

Q(sample)

Q(sample)

Q(sample)

Q(sample)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(sample_rate)

Q(samplerate)

Q(samples_decoded)

Q(samples_signed)

Q(save)

Q(savetxt)

Q(scale)

Q(scale)

Q(scale)

Q(scale)

Q(scale)

Q(scale)

Q(scale)

Q(scale)

Q(scale)

Q(scale)

Q(scale)

Q(scan)

Q(scan)

Q(scan_response)

Q(scan_response)

Q(scipy)

Q(scipy)

Q(sck)

Q(sck)

Q(scl)

Q(scl)

Q(scl)

Q(scl)

Q(scl)

Q(scl)

Q(scroll_area)

Q(scroll_area)

Q(scroll_area_area)

Q(sd_mmc_check)

Q(sda)

Q(sda)

Q(sda)

Q(sda)

Q(sda)

Q(sda)

Q(sdcardio)

Q(sdcardio)

Q(sdio)

Q(sdioio)

Q(search)

Q(search)

Q(secondary)

Q(secondary)

Q(seconds)

Q(seconds_per_frame)

Q(seconds_per_frame)

Q(security_mode)

Q(seed)

Q(seek)

Q(seek)

Q(segment_size)

Q(select)

Q(select)

Q(select)

Q(self)

Q(self)

Q(self)

Q(send)

Q(send)

Q(send)

Q(send)

Q(send)

Q(send)

Q(send)

Q(send_report)

Q(sendcmd)

Q(sep)

Q(sep)

Q(separators)

Q(serial_bytes_available)

Q(serial_connected)

Q(serial_number)

Q(serpentine)

Q(service)

Q(service)

Q(service_uuids_whitelist)

Q(set)

Q(set)

Q(set)

Q(set_adapter)

Q(set_cccd)

Q(set_column_command)

Q(set_column_window_command)

Q(set_configuration)

Q(set_current_column_command)

Q(set_current_row_command)

Q(set_interface_name)

Q(set_names)

Q(set_next_code_file)

Q(set_printoptions)

Q(set_row_command)

Q(set_row_window_command)

Q(set_time_source)

Q(set_usb_identification)

Q(set_vertical_scroll)

Q(setattr)

Q(setdefault)

Q(setter)

Q(settimeout)

Q(shape)

Q(shape)

Q(shape)

Q(shape)

Q(sharpdisplay)

Q(sharpdisplay)

Q(shift_underscore_jis)

Q(shift_x)

Q(shift_y)

Q(show)

Q(show)

Q(show)

Q(show)

Q(show)

Q(signal)

Q(signal)

Q(signed)

Q(signed)

Q(signed)

Q(signedness)

Q(simplefilter)

Q(sin)

Q(sin)

Q(sinc)

Q(single)

Q(single)

Q(single_buffer)

Q(single_byte_bounds)

Q(sinh)

Q(size)

Q(size)

Q(size)

Q(size)

Q(size)

Q(size)

Q(size)

Q(size)

Q(size_or_buffer)

Q(skip_dest_index)

Q(skip_dest_index)

Q(skip_index)

Q(skip_index)

Q(skip_source1_index)

Q(skip_source2_index)

Q(skip_source_index)

Q(skip_source_index)

Q(skiprows)

Q(sleep)

Q(sleep_memory)

Q(slice)

Q(slice)

Q(slice)

Q(smbus)

Q(solve_triangular)

Q(sort)

Q(sort)

Q(sort)

Q(sort)

Q(sorted)

Q(sos)

Q(sosfilt)

Q(source)

Q(source)

Q(source_bitmap)

Q(source_bitmap)

Q(source_bitmap)

Q(source_bitmap)

Q(source_bitmap)

Q(source_bitmap_1)

Q(source_bitmap_1)

Q(source_bitmap_2)

Q(source_bitmap_2)

Q(source_clip0)

Q(source_clip1)

Q(source_colorspace)

Q(source_colorspace)

Q(span)

Q(special)

Q(special)

Q(spectrogram)

Q(speed)

Q(spi)

Q(spi)

Q(spi)

Q(spi_bus)

Q(spi_bus)

Q(spi_bus)

Q(spi_bus)

Q(spi_bus)

Q(spi_bus)

Q(spi_device)

Q(spi_device)

Q(spitarget)

Q(spitarget)

Q(split)

Q(split)

Q(splitlines)

Q(sqrt)

Q(sqrt)

Q(ss)

Q(ss)

Q(start)

Q(start)

Q(start)

Q(start)

Q(start)

Q(start)

Q(start)

Q(start)

Q(start)

Q(start)

Q(start)

Q(start)

Q(start)

Q(start)

Q(start)

Q(start)

Q(start_advertising)

Q(start_scan)

Q(start_sequence)

Q(start_sequence)

Q(start_up_time)

Q(startswith)

Q(startup_delay)

Q(startup_delay)

Q(stat)

Q(stat)

Q(stat)

Q(stat)

Q(stat)

Q(state)

Q(state)

Q(staticmethod)

Q(staticmethod)

Q(status_bar)

Q(status_bar)

Q(status_bar)

Q(statvfs)

Q(statvfs)

Q(statvfs)

Q(statvfs)

Q(std)

Q(stderr)

Q(stdin)

Q(stdout)

Q(step)

Q(step)

Q(sticky_on_error)

Q(sticky_on_reload)

Q(sticky_on_success)

Q(stop)

Q(stop)

Q(stop)

Q(stop)

Q(stop)

Q(stop)

Q(stop)

Q(stop_advertising)

Q(stop_scan)

Q(stop_sequence)

Q(stop_voice)

Q(storage)

Q(storage)

Q(str)

Q(str)

Q(str)

Q(str)

Q(str)

Q(str)

Q(str)

Q(stream)

Q(stream)

Q(stream)

Q(streaming_interface_name)

Q(streaming_interface_name)

Q(strerror)

Q(strides)

Q(strip)

Q(struct)

Q(struct)

Q(struct_time)

Q(struct_time)

Q(sub)

Q(sub)

Q(sum)

Q(sum)

Q(super)

Q(super)

Q(super)

Q(supervisor)

Q(supervisor)

Q(supervisor)

Q(supervisor)

Q(sustain_level)

Q(sustain_level)

Q(sustain_level)

Q(swap_bytes_in_element)

Q(switch_to_input)

Q(switch_to_output)

Q(symbol)

Q(symmetric_difference)

Q(symmetric_difference)

Q(symmetric_difference_update)

Q(sync)

Q(sync)

Q(sync)

Q(synthio)

Q(synthio)

Q(synthio)

Q(synthio)

Q(synthio)

Q(synthio_block)

Q(synthio_block)

Q(synthio_block)

Q(sys)

Q(sys)

Q(sys)

Q(sysname)

Q(tan)

Q(tan)

Q(tanh)

Q(target_frames_per_second)

Q(target_frames_per_second)

Q(tb)

Q(tb)

Q(tell)

Q(tell)

Q(temperature)

Q(tempo)

Q(terminalio)

Q(terminalio)

Q(threshold)

Q(threshold)

Q(threshold)

Q(threshold)

Q(throw)

Q(throw)

Q(throw)

Q(ticks_ms)

Q(tile)

Q(tile)

Q(tile)

Q(tile_height)

Q(tile_height)

Q(tile_index)

Q(tile_width)

Q(tile_width)

Q(tilepalettemapper)

Q(tilepalettemapper)

Q(time)

Q(time)

Q(time)

Q(time)

Q(time)

Q(time_to_refresh)

Q(timeout)

Q(timeout)

Q(timeout)

Q(timeout)

Q(timeout)

Q(timeout)

Q(timeout)

Q(timeout)

Q(timeout)

Q(timeout)

Q(timeout)

Q(timeout)

Q(timeout)

Q(timeout)

Q(timeout)

Q(timeout)

Q(timeout)

Q(timeout)

Q(timeout)

Q(timeout)

Q(timestamp)

Q(timestamp)

Q(tm_hour)

Q(tm_isdst)

Q(tm_mday)

Q(tm_min)

Q(tm_mon)

Q(tm_sec)

Q(tm_wday)

Q(tm_yday)

Q(tm_year)

Q(tm_year)

Q(to_bytes)

Q(tobytes)

Q(toggle_every_byte)

Q(tol)

Q(tolist)

Q(top_left_x)

Q(top_left_y)

Q(top_right_x)

Q(top_right_y)

Q(touch)

Q(touch)

Q(touchio)

Q(touchio)

Q(trace)

Q(traceback)

Q(traceback)

Q(traceback)

Q(traceback)

Q(traceback)

Q(traceback)

Q(trailer)

Q(transpose)

Q(transpose_xy)

Q(trapz)

Q(trigger_duration)

Q(trunc)

Q(try_lock)

Q(try_lock)

Q(try_lock)

Q(try_lock)

Q(try_lock)

Q(try_lock)

Q(tuple)

Q(tuple)

Q(tuple)

Q(tuple)

Q(tuple)

Q(two_byte_sequence_length)

Q(tx)

Q(tx)

Q(tx)

Q(tx_power)

Q(type)

Q(type)

Q(type)

Q(uart)

Q(uart)

Q(uid)

Q(uint16)

Q(uint8)

Q(ulab)

Q(ulab)

Q(ulab.numpy)

Q(ulab.numpy.fft)

Q(ulab.numpy.linalg)

Q(ulab.scipy)

Q(ulab.scipy.linalg)

Q(ulab.scipy.optimize)

Q(ulab.scipy.signal)

Q(ulab.scipy.special)

Q(ulab.utils)

Q(umount)

Q(umount)

Q(umount)

Q(umount)

Q(uname)

Q(unhexlify)

Q(uniform)

Q(uniform)

Q(union)

Q(union)

Q(unlink)

Q(unlock)

Q(unlock)

Q(unlock)

Q(unlock)

Q(unlock)

Q(unlock)

Q(unpack)

Q(unpack)

Q(unpack_from)

Q(unregister)

Q(unregister)

Q(update)

Q(update)

Q(update_refresh_mode)

Q(upper)

Q(urandom)

Q(usage)

Q(usage)

Q(usage)

Q(usage_page)

Q(usage_page)

Q(usage_page)

Q(usb)

Q(usb)

Q(usb.core)

Q(usb.core)

Q(usb.util)

Q(usb.util)

Q(usb_cdc)

Q(usb_cdc)

Q(usb_connected)

Q(usb_hid)

Q(usb_hid)

Q(usb_midi)

Q(usb_midi)

Q(use_list)

Q(use_palette)

Q(usecols)

Q(user_description)

Q(usys)

Q(utf-8)

Q(utf-8)

Q(utf-8)

Q(utf-8)

Q(utf-8)

Q(util)

Q(utils)

Q(utils)

Q(utime)

Q(utime)

Q(utime)

Q(uuid)

Q(uuid)

Q(uuid)

Q(uuid)

Q(uuid)

Q(uuid)

Q(uuid)

Q(uuid)

Q(uuid)

Q(uuid128)

Q(uuid16)

Q(v)

Q(validity)

Q(validity)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value)

Q(value_count)

Q(value_to_latch)

Q(value_when_pressed)

Q(value_when_pressed)

Q(values)

Q(values)

Q(variable_frequency)

Q(variable_frequency)

Q(variable_frequency)

Q(vectorio)

Q(vectorio)

Q(vectorize)

Q(version)

Q(version)

Q(version)

Q(version_info)

Q(vid)

Q(vid)

Q(voct_to_hz)

Q(voice)

Q(voice)

Q(voice)

Q(voice)

Q(voice)

Q(voice)

Q(voice_count)

Q(voice_count)

Q(voltage)

Q(vsync)

Q(vsync)

Q(vsync)

Q(w)

Q(wIndex)

Q(wValue)

Q(wait_transfer)

Q(wake_alarm)

Q(wake_alarm)

Q(wake_alarm)

Q(warn)

Q(warnings)

Q(warnings)

Q(watchdog)

Q(watchdog)

Q(watchdog)

Q(watchdog)

Q(waveform)

Q(waveform)

Q(waveform)

Q(waveform)

Q(waveform)

Q(waveform)

Q(waveform)

Q(waveform)

Q(waveform_loop_end)

Q(waveform_loop_end)

Q(waveform_loop_end)

Q(waveform_loop_start)

Q(waveform_loop_start)

Q(waveform_loop_start)

Q(waveform_max_length)

Q(wb)

Q(wb)

Q(where)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(width)

Q(window)

Q(word_select)

Q(word_select)

Q(word_select)

Q(word_select)

Q(write)

Q(write)

Q(write)

Q(write)

Q(write)

Q(write)

Q(write)

Q(write)

Q(write)

Q(write)

Q(write)

Q(write)

Q(write)

Q(write)

Q(write)

Q(write)

Q(write)

Q(write_bit)

Q(write_black_ram_command)

Q(write_color_ram_command)

Q(write_perm)

Q(write_perm)

Q(write_ram_command)

Q(write_readinto)

Q(write_readinto)

Q(write_then_readinto)

Q(write_timeout)

Q(write_value)

Q(write_value)

Q(writeblocks)

Q(writeblocks)

Q(writeblocks)

Q(writeblocks)

Q(writeto)

Q(writeto)

Q(writeto)

Q(writeto_then_readfrom)

Q(writeto_then_readfrom)

Q(writeto_then_readfrom)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x)

Q(x1)

Q(x1)

Q(x1)

Q(x1)

Q(x1)

Q(x1)

Q(x1)

Q(x1)

Q(x1)

Q(x1)

Q(x1)

Q(x1)

Q(x2)

Q(x2)

Q(x2)

Q(x2)

Q(x2)

Q(x2)

Q(x2)

Q(x2)

Q(x2)

Q(x2)

Q(x2)

Q(x2)

Q(xatol)

Q(xs)

Q(xtol)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y)

Q(y1)

Q(y1)

Q(y1)

Q(y1)

Q(y1)

Q(y1)

Q(y1)

Q(y1)

Q(y1)

Q(y1)

Q(y1)

Q(y1)

Q(y2)

Q(y2)

Q(y2)

Q(y2)

Q(y2)

Q(y2)

Q(y2)

Q(y2)

Q(y2)

Q(y2)

Q(y2)

Q(y2)

Q(ys)

Q(zeros)

Q(zi)

Q(zip)

Q(zip)

Q(zip)

Q(zlib)

Q(zlib)

Q({_colon_#b})

TRANSLATE("  File \"%q\", line %d")

TRANSLATE(" is of type %q\n")

TRANSLATE(" not found.\n")

TRANSLATE(" output:\n")

TRANSLATE("%%c requires int or char")

TRANSLATE("%%c requires int or char")

TRANSLATE("%02X")

TRANSLATE("%S")

TRANSLATE("%S")

TRANSLATE("%S")

TRANSLATE("%S")

TRANSLATE("%d address pins, %d rgb pins and %d tiles indicate a height of %d, not %d")

TRANSLATE("%q and %q contain duplicate pins")

TRANSLATE("%q and %q must be different")

TRANSLATE("%q and %q must share a clock unit")

TRANSLATE("%q contains duplicate pins")

TRANSLATE("%q failure: %d")

TRANSLATE("%q in %q must be of type %q, not %q")

TRANSLATE("%q in use")

TRANSLATE("%q in use")

TRANSLATE("%q in use")

TRANSLATE("%q index out of range")

TRANSLATE("%q index out of range")

TRANSLATE("%q indices must be integers, not %s")

TRANSLATE("%q init failed")

TRANSLATE("%q init failed")

TRANSLATE("%q init failed")

TRANSLATE("%q length must be %d")

TRANSLATE("%q length must be %d")

TRANSLATE("%q length must be %d-%d")

TRANSLATE("%q length must be <= %d")

TRANSLATE("%q length must be >= %d")

TRANSLATE("%q moved from %q to %q")

TRANSLATE("%q moved from %q to %q")

TRANSLATE("%q moved from %q to %q")

TRANSLATE("%q moved from %q to %q")

TRANSLATE("%q moved from %q to %q")

TRANSLATE("%q must be %d")

TRANSLATE("%q must be %d-%d")

TRANSLATE("%q must be %d-%d")

TRANSLATE("%q must be %d-%d")

TRANSLATE("%q must be %d-%d")

TRANSLATE("%q must be %d-%d")

TRANSLATE("%q must be %d-%d")

TRANSLATE("%q must be %d-%d")

TRANSLATE("%q must be %d-%d")

TRANSLATE("%q must be 1 when %q is True")

TRANSLATE("%q must be <= %d")

TRANSLATE("%q must be <= %d")

TRANSLATE("%q must be <= %d")

TRANSLATE("%q must be >= %d")

TRANSLATE("%q must be >= %d")

TRANSLATE("%q must be a bytearray or array of type 'h', 'H', 'b', or 'B'")

TRANSLATE("%q must be a subclass of %q")

TRANSLATE("%q must be array of type 'h'")

TRANSLATE("%q must be multiple of 8.")

TRANSLATE("%q must be multiple of 8.")

TRANSLATE("%q must be of type %q or %q, not %q")

TRANSLATE("%q must be of type %q or %q, not %q")

TRANSLATE("%q must be of type %q or %q, not %q")

TRANSLATE("%q must be of type %q or %q, not %q")

TRANSLATE("%q must be of type %q or %q, not %q")

TRANSLATE("%q must be of type %q or %q, not %q")

TRANSLATE("%q must be of type %q or %q, not %q")

TRANSLATE("%q must be of type %q or %q, not %q")

TRANSLATE("%q must be of type %q, %q, or %q, not %q")

TRANSLATE("%q must be of type %q, not %q")

TRANSLATE("%q must be of type %q, not %q")

TRANSLATE("%q must be of type %q, not %q")

TRANSLATE("%q must be of type %q, not %q")

TRANSLATE("%q must be of type %q, not %q")

TRANSLATE("%q must be of type %q, not %q")

TRANSLATE("%q must be of type %q, not %q")

TRANSLATE("%q must be power of 2")

TRANSLATE("%q out of range")

TRANSLATE("%q out of range")

TRANSLATE("%q out of range")

TRANSLATE("%q renamed %q")

TRANSLATE("%q renamed %q")

TRANSLATE("%q renamed %q")

TRANSLATE("%q step cannot be zero")

TRANSLATE("%q step cannot be zero")

TRANSLATE("%q step cannot be zero")

TRANSLATE("%q too long")

TRANSLATE("%q")

TRANSLATE("%q")

TRANSLATE("%q")

TRANSLATE("%q")

TRANSLATE("%q() without %q()")

TRANSLATE("%q, %q, and %q must all be the same length")

TRANSLATE("%q=%q")

TRANSLATE("%q=%q")

TRANSLATE("%q=%q")

TRANSLATE("%s")

TRANSLATE("'%q' argument required")

TRANSLATE("'%q' object does not support '%q'")

TRANSLATE("'%q' object is not an iterator")

TRANSLATE("'%q' object is not an iterator")

TRANSLATE("'%q' object is not callable")

TRANSLATE("'%q' object is not callable")

TRANSLATE("'%q' object is not callable")

TRANSLATE("'%q' object is not iterable")

TRANSLATE("'%s' object doesn't support item assignment")

TRANSLATE("'%s' object doesn't support item deletion")

TRANSLATE("'%s' object has no attribute '%q'")

TRANSLATE("'%s' object isn't subscriptable")

TRANSLATE("'=' alignment not allowed in string format specifier")

TRANSLATE("'await' outside function")

TRANSLATE("'break'/'continue' outside loop")

TRANSLATE("'return' outside function")

TRANSLATE("'yield from' inside async function")

TRANSLATE("'yield' outside function")

TRANSLATE("* arg after **")

TRANSLATE("*x must be assignment target")

TRANSLATE(", in %q\n")

TRANSLATE(".show(x) removed. Use .root_group = x")

TRANSLATE(".show(x) removed. Use .root_group = x")

TRANSLATE(".show(x) removed. Use .root_group = x")

TRANSLATE("0.0 to a complex power")

TRANSLATE("Adapter not enabled")

TRANSLATE("Address must be %d bytes long")

TRANSLATE("All event channels in use")

TRANSLATE("All sync event channels in use")

TRANSLATE("All timers in use")

TRANSLATE("All timers in use")

TRANSLATE("All timers in use")

TRANSLATE("Already advertising")

TRANSLATE("An error occurred while retrieving '%s':\n")

TRANSLATE("Another send is already active")

TRANSLATE("Array must contain halfwords (type 'H')")

TRANSLATE("Array values should be single bytes.")

TRANSLATE("Array values should be single bytes.")

TRANSLATE("Async SPI transfer in progress on this bus, keep awaiting.")

TRANSLATE("Attribute not found")

TRANSLATE("Attribute not long")

TRANSLATE("Auto-reload is off.\n")

TRANSLATE("Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.\n")

TRANSLATE("Below minimum frame rate")

TRANSLATE("Below minimum frame rate")

TRANSLATE("Bitmap size and bits per value must match")

TRANSLATE("Boot device must be first (interface #0).")

TRANSLATE("Brightness not adjustable")

TRANSLATE("Brightness not adjustable")

TRANSLATE("Brightness not adjustable")

TRANSLATE("Brightness not adjustable")

TRANSLATE("Buffer + offset too small %d %d %d")

TRANSLATE("Buffer is not a bytearray.")

TRANSLATE("Buffer must be a multiple of %d bytes")

TRANSLATE("Buffer must be a multiple of %d bytes")

TRANSLATE("Buffer must be a multiple of %d bytes")

TRANSLATE("Buffer must be a multiple of %d bytes")

TRANSLATE("Buffer too large and unable to allocate")

TRANSLATE("Buffer too short by %d bytes")

TRANSLATE("Buffer too small")

TRANSLATE("Buffer too small")

TRANSLATE("Buffer too small")

TRANSLATE("Buffer too small")

TRANSLATE("Buffer too small")

TRANSLATE("Bus pin %d is already in use")

TRANSLATE("Byte buffer must be 16 bytes.")

TRANSLATE("CBC blocks must be multiples of 16 bytes")

TRANSLATE("CIRCUITPY drive could not be found or created.")

TRANSLATE("Call super().__init__() before accessing native object.")

TRANSLATE("Can't set CCCD on local Characteristic")

TRANSLATE("Cannot change USB devices now")

TRANSLATE("Cannot change USB devices now")

TRANSLATE("Cannot change USB devices now")

TRANSLATE("Cannot change USB devices now")

TRANSLATE("Cannot change USB devices now")

TRANSLATE("Cannot change USB devices now")

TRANSLATE("Cannot change USB devices now")

TRANSLATE("Cannot change USB devices now")

TRANSLATE("Cannot delete values")

TRANSLATE("Cannot delete values")

TRANSLATE("Cannot get pull while in output mode")

TRANSLATE("Cannot have scan responses for extended, connectable advertisements.")

TRANSLATE("Cannot record to a file")

TRANSLATE("Cannot remount path when visible via USB.")

TRANSLATE("Cannot set value when direction is input.")

TRANSLATE("Cannot subclass slice")

TRANSLATE("Characteristic can only be added to most recently added service")

TRANSLATE("Characteristic not writable")

TRANSLATE("CharacteristicBuffer writing not provided")

TRANSLATE("CircuitPython core code crashed hard. Whoops!\n")

TRANSLATE("Connection has been disconnected and can no longer be used. Create a new connection.")

TRANSLATE("Coordinate arrays have different lengths")

TRANSLATE("Coordinate arrays types have different sizes")

TRANSLATE("Could not get max advertising length")

TRANSLATE("Could not read BLE buffer info")

TRANSLATE("Could not read BLE features")

TRANSLATE("Could not read HCI version")

TRANSLATE("Could not set address")

TRANSLATE("Could not set event mask")

TRANSLATE("Couldn't allocate decoder")

TRANSLATE("DAC already in use")

TRANSLATE("DB out of sync")

TRANSLATE("Data 0 pin must be byte aligned")

TRANSLATE("Data format error (may be broken data)")

TRANSLATE("Data length needs extended advertising, but this adapter does not support it")

TRANSLATE("Data too large for advertisement packet")

TRANSLATE("Descriptor can only be added to most recently added characteristic")

TRANSLATE("Destination capacity is smaller than destination_length.")

TRANSLATE("Device error or wrong termination of input stream")

TRANSLATE("Display must have a 16 bit colorspace.")

TRANSLATE("Display must have a 16 bit colorspace.")

TRANSLATE("Display rotation must be in 90 degree increments")

TRANSLATE("Display rotation must be in 90 degree increments")

TRANSLATE("Display rotation must be in 90 degree increments")

TRANSLATE("Done")

TRANSLATE("Drive mode not used when direction is input.")

TRANSLATE("Drive mode not used when direction is input.")

TRANSLATE("During handling of the above exception, another exception occurred:")

TRANSLATE("ECB only operates on 16 bytes at a time")

TRANSLATE("Encryption key size")

TRANSLATE("Error in ATT protocol code")

TRANSLATE("Error in regex")

TRANSLATE("Error in safemode.py.")

TRANSLATE("Error reading from HCI adapter")

TRANSLATE("Error writing to HCI adapter")

TRANSLATE("Expected a kind of %q")

TRANSLATE("Extended advertisements with scan response not supported.")

TRANSLATE("FFT is defined for ndarrays only")

TRANSLATE("FFT is defined for ndarrays only")

TRANSLATE("FFT is implemented for linear arrays only")

TRANSLATE("FFT is implemented for linear arrays only")

TRANSLATE("Failed sending command.")

TRANSLATE("Failed to add service")

TRANSLATE("Failed to allocate %q buffer")

TRANSLATE("Failed to connect: internal error")

TRANSLATE("Failed to parse MP3 file")

TRANSLATE("Failed to write internal flash.")

TRANSLATE("File exists")

TRANSLATE("File not found")

TRANSLATE("For L8 colorspace, input bitmap must have 8 bits per pixel")

TRANSLATE("For RGB colorspaces, input bitmap must have 16 bits per pixel")

TRANSLATE("Function requires lock")

TRANSLATE("Function requires lock")

TRANSLATE("Function requires lock")

TRANSLATE("Function requires lock")

TRANSLATE("Group already used")

TRANSLATE("Group already used")

TRANSLATE("Group already used")

TRANSLATE("HCI packet size mismatch")

TRANSLATE("HCI status error: %02x")

TRANSLATE("Hard fault: memory access or instruction error.")

TRANSLATE("Heap allocation when VM not running.")

TRANSLATE("I/O operation on closed file")

TRANSLATE("Input taking too long")

TRANSLATE("Input/output error")

TRANSLATE("Insufficient authentication")

TRANSLATE("Insufficient encryption")

TRANSLATE("Insufficient memory pool for the image")

TRANSLATE("Insufficient resources")

TRANSLATE("Insufficient stream input buffer")

TRANSLATE("Internal audio buffer too small")

TRANSLATE("Internal error #%d")

TRANSLATE("Internal error")

TRANSLATE("Internal error")

TRANSLATE("Internal resource(s) in use")

TRANSLATE("Internal resource(s) in use")

TRANSLATE("Internal resource(s) in use")

TRANSLATE("Internal resource(s) in use")

TRANSLATE("Internal resource(s) in use")

TRANSLATE("Internal resource(s) in use")

TRANSLATE("Internal resource(s) in use")

TRANSLATE("Internal resource(s) in use")

TRANSLATE("Internal resource(s) in use")

TRANSLATE("Internal resource(s) in use")

TRANSLATE("Internal resource(s) in use")

TRANSLATE("Internal watchdog timer expired.")

TRANSLATE("Interrupt error.")

TRANSLATE("Interrupted by output function")

TRANSLATE("Invalid %q pin")

TRANSLATE("Invalid %q pin")

TRANSLATE("Invalid %q")

TRANSLATE("Invalid %q")

TRANSLATE("Invalid %q")

TRANSLATE("Invalid BLE attribute")

TRANSLATE("Invalid PDU")

TRANSLATE("Invalid argument")

TRANSLATE("Invalid attribute length")

TRANSLATE("Invalid bits per value")

TRANSLATE("Invalid byte %.*s")

TRANSLATE("Invalid data_pins[%d]")

TRANSLATE("Invalid format chunk size")

TRANSLATE("Invalid format")

TRANSLATE("Invalid handle")

TRANSLATE("Invalid offset")

TRANSLATE("Invalid unicode escape")

TRANSLATE("Key must be 16, 24, or 32 bytes long")

TRANSLATE("Key must be 16, 24, or 32 bytes long")

TRANSLATE("Key not found")

TRANSLATE("LHS of keyword arg must be an id")

TRANSLATE("Layer already in a group")

TRANSLATE("Layer already in a group")

TRANSLATE("Layer must be a Group or TileGrid subclass")

TRANSLATE("Length of %q must be an even multiple of channel_count * type_size")

TRANSLATE("Mount point directory missing")

TRANSLATE("Mount point directory missing")

TRANSLATE("Must be a %q subclass.")

TRANSLATE("Must be a %q subclass.")

TRANSLATE("Must provide MISO or MOSI pin")

TRANSLATE("Must use a multiple of 6 rgb pins, not %d")

TRANSLATE("NLR jump failed. Likely memory corruption.")

TRANSLATE("New bitmap must be same size as old bitmap")

TRANSLATE("New bitmap must be same size as old bitmap")

TRANSLATE("No %q pin")

TRANSLATE("No %q pin")

TRANSLATE("No %q pin")

TRANSLATE("No %q pin")

TRANSLATE("No %q pin")

TRANSLATE("No %q pin")

TRANSLATE("No %q pin")

TRANSLATE("No %q pin")

TRANSLATE("No %q pin")

TRANSLATE("No CCCD for this Characteristic")

TRANSLATE("No DMA channel found")

TRANSLATE("No DMA channel found")

TRANSLATE("No I2C device at address: 0x%x")

TRANSLATE("No bootloader present")

TRANSLATE("No configuration set")

TRANSLATE("No connection: length cannot be determined")

TRANSLATE("No connection: length cannot be determined")

TRANSLATE("No free GCLKs")

TRANSLATE("No free GCLKs")

TRANSLATE("No hardware random available")

TRANSLATE("No pull up found on SDA or SCL; check your wiring")

TRANSLATE("No pulldown on pin; 1Mohm recommended")

TRANSLATE("No pullup on pin; 1Mohm recommended")

TRANSLATE("No space left on device")

TRANSLATE("No such device")

TRANSLATE("No such file/directory")

TRANSLATE("No timer available")

TRANSLATE("No usb host port initialized")

TRANSLATE("Not connected")

TRANSLATE("Not connected")

TRANSLATE("Not playing")

TRANSLATE("Not playing")

TRANSLATE("Not supported JPEG standard")

TRANSLATE("Not supported")

TRANSLATE("Object has been deinitialized and can no longer be used. Create a new object.")

TRANSLATE("Only 8 or 16 bit mono with %dx oversampling supported.")

TRANSLATE("Only Windows format, uncompressed BMP supported: given header size is %d")

TRANSLATE("Only connectable advertisements can be directed")

TRANSLATE("Only one alarm.time alarm can be set")

TRANSLATE("Only one color can be transparent at a time")

TRANSLATE("Only tx_power=0 supported")

TRANSLATE("Operation not permitted")

TRANSLATE("Packet buffers for an SPI transfer must have the same length.")

TRANSLATE("Parameter error")

TRANSLATE("Permission denied")

TRANSLATE("Pinout uses %d bytes per element, which consumes more than the ideal %d bytes.  If this cannot be avoided, pass allow_inefficient=True to the constructor")

TRANSLATE("Pipe error")

TRANSLATE("Pipe error")

TRANSLATE("Plus any modules on the filesystem\n")

TRANSLATE("Polygon needs at least 3 points")

TRANSLATE("Power dipped. Make sure you are providing enough power.")

TRANSLATE("Prefix buffer must be on the heap")

TRANSLATE("Prepare queue full")

TRANSLATE("Press any key to enter the REPL. Use CTRL-D to reload.\n")

TRANSLATE("Pretending to deep sleep until alarm, CTRL-C or file write.\n")

TRANSLATE("Pull not used when direction is output.")

TRANSLATE("Pull not used when direction is output.")

TRANSLATE("RLE-compressed BMP not supported")

TRANSLATE("RS485")

TRANSLATE("RTC is not supported on this board")

TRANSLATE("RTC is not supported on this board")

TRANSLATE("Read not permitted")

TRANSLATE("Read-only filesystem")

TRANSLATE("Read-only filesystem")

TRANSLATE("Read-only")

TRANSLATE("Read-only")

TRANSLATE("Read-only")

TRANSLATE("Read-only")

TRANSLATE("Read-only")

TRANSLATE("Read-only")

TRANSLATE("Read-only")

TRANSLATE("Refresh too soon")

TRANSLATE("Requested AES mode is unsupported")

TRANSLATE("Requested AES mode is unsupported")

TRANSLATE("Right format but not supported")

TRANSLATE("Running in safe mode! Not running saved code.\n")

TRANSLATE("SD card CSD format not supported")

TRANSLATE("Scan already in progress. Stop with stop_scan.")

TRANSLATE("Serializer in use")

TRANSLATE("Serializer in use")

TRANSLATE("Slice and value different lengths.")

TRANSLATE("Slice and value different lengths.")

TRANSLATE("Slices not supported")

TRANSLATE("Slices not supported")

TRANSLATE("Slices not supported")

TRANSLATE("Slices not supported")

TRANSLATE("Slices not supported")

TRANSLATE("Source and destination buffers must be the same length")

TRANSLATE("Specify exactly one of data0 or data_pins")

TRANSLATE("Stack overflow. Increase stack size.")

TRANSLATE("Supply one of monotonic_time or epoch_time")

TRANSLATE("The `microcontroller` module was used to boot into safe mode.")

TRANSLATE("The above exception was the direct cause of the following exception:")

TRANSLATE("The length of rgb_pins must be 6, 12, 18, 24, or 30")

TRANSLATE("The sample's %q does not match")

TRANSLATE("The sample's %q does not match")

TRANSLATE("The sample's %q does not match")

TRANSLATE("The sample's %q does not match")

TRANSLATE("Third-party firmware fatal error.")

TRANSLATE("This microcontroller does not support continuous capture.")

TRANSLATE("This microcontroller does not support continuous capture.")

TRANSLATE("This microcontroller does not support continuous capture.")

TRANSLATE("This microcontroller only supports data0=, not data_pins=, because it requires contiguous pins.")

TRANSLATE("Tile height must exactly divide bitmap height")

TRANSLATE("Tile index out of bounds")

TRANSLATE("Tile index out of bounds")

TRANSLATE("Tile index out of bounds")

TRANSLATE("Tile index out of bounds")

TRANSLATE("Tile width must exactly divide bitmap width")

TRANSLATE("Time is in the past.")

TRANSLATE("Timeout is too long: Maximum timeout length is %d seconds")

TRANSLATE("Timeout waiting for HCI response")

TRANSLATE("Timeout waiting to write HCI request")

TRANSLATE("Too many Adapters")

TRANSLATE("Too many channels in sample")

TRANSLATE("Too many display busses; forgot displayio.release_displays() ?")

TRANSLATE("Too many displays")

TRANSLATE("Total data to write is larger than outgoing_packet_length")

TRANSLATE("Traceback (most recent call last):\n")

TRANSLATE("UID:")

TRANSLATE("USB busy")

TRANSLATE("USB devices need more endpoints than are available.")

TRANSLATE("USB devices specify too many interface names.")

TRANSLATE("USB error")

TRANSLATE("UUID integer value must be 0-0xffff")

TRANSLATE("UUID string not 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'")

TRANSLATE("UUID value is not str, int or byte buffer")

TRANSLATE("Unable to allocate buffers for signed conversion")

TRANSLATE("Unable to allocate buffers for signed conversion")

TRANSLATE("Unable to allocate to the heap.")

TRANSLATE("Unable to find I2C Display at %x")

TRANSLATE("Unable to init parser")

TRANSLATE("Unable to read color palette data")

TRANSLATE("Unable to write to nvm.")

TRANSLATE("Unable to write to nvm.")

TRANSLATE("Unable to write to sleep_memory.")

TRANSLATE("Unable to write to sleep_memory.")

TRANSLATE("Unknown ATT error: 0x%02x")

TRANSLATE("Unknown hci_result_t: %d")

TRANSLATE("Unknown reason.")

TRANSLATE("Unknown reason.")

TRANSLATE("Unlikely")

TRANSLATE("Unmatched number of items on RHS (expected %d, got %d).")

TRANSLATE("Unmatched number of items on RHS (expected %d, got %d).")

TRANSLATE("Unsupported colorspace")

TRANSLATE("Unsupported display bus type")

TRANSLATE("Unsupported format")

TRANSLATE("Unsupported group type")

TRANSLATE("Value length != required fixed length")

TRANSLATE("Value length != required fixed length")

TRANSLATE("Value length > max_length")

TRANSLATE("Value length > max_length")

TRANSLATE("Value not allowed")

TRANSLATE("WARNING: Your code filename has two extensions\n")

TRANSLATE("Welcome to Adafruit CircuitPython %s!\n\nVisit circuitpython.org for more information.\n\nTo list built-in modules type `help(\"modules\")`.\n")

TRANSLATE("Woken up by alarm.\n")

TRANSLATE("Write not permitted")

TRANSLATE("Writes not supported on Characteristic")

TRANSLATE("You pressed the reset button during boot.")

TRANSLATE("[truncated due to length]")

TRANSLATE("[truncated due to length]")

TRANSLATE("\nCode done running.\n")

TRANSLATE("\nCode stopped by auto-reload. Reloading soon.\n")

TRANSLATE("\nPlease file an issue with your program at github.com/adafruit/circuitpython/issues.")

TRANSLATE("\nPress reset to exit safe mode.\n")

TRANSLATE("\nYou are in safe mode because:\n")

TRANSLATE("__init__() should return None, not '%s'")

TRANSLATE("__new__ arg must be a user-type")

TRANSLATE("a bytes-like object is required")

TRANSLATE("a bytes-like object is required")

TRANSLATE("abort() called")

TRANSLATE("addresses is empty")

TRANSLATE("arange: cannot compute length")

TRANSLATE("arg is an empty sequence")

TRANSLATE("argsort argument must be an ndarray")

TRANSLATE("argsort is not implemented for flattened arrays")

TRANSLATE("argument must be None, an integer or a tuple of integers")

TRANSLATE("argument name reused")

TRANSLATE("argument num/types mismatch")

TRANSLATE("arguments must be ndarrays")

TRANSLATE("arguments must be ndarrays")

TRANSLATE("array and index length must be equal")

TRANSLATE("array is too big")

TRANSLATE("array/bytes required on right side")

TRANSLATE("array/bytes required on right side")

TRANSLATE("array/bytes required on right side")

TRANSLATE("async for/with outside async function")

TRANSLATE("attempt to get (arg)min/(arg)max of empty sequence")

TRANSLATE("attempt to get argmin/argmax of an empty sequence")

TRANSLATE("attributes not supported")

TRANSLATE("axis is out of bounds")

TRANSLATE("axis must be None, or an integer")

TRANSLATE("axis must be None, or an integer")

TRANSLATE("axis must be None, or an integer")

TRANSLATE("axis too long")

TRANSLATE("background value out of range of target")

TRANSLATE("bad compile mode")

TRANSLATE("bad conversion specifier")

TRANSLATE("bad typecode")

TRANSLATE("bad typecode")

TRANSLATE("bitmap sizes must match")

TRANSLATE("bits_per_sample must be 8 or 16")

TRANSLATE("buffer is smaller than requested size")

TRANSLATE("buffer is smaller than requested size")

TRANSLATE("buffer size must be a multiple of element size")

TRANSLATE("buffer size must be a multiple of element size")

TRANSLATE("buffer size must match format")

TRANSLATE("buffer slices must be of equal length")

TRANSLATE("buffer slices must be of equal length")

TRANSLATE("buffer too small")

TRANSLATE("bytecode overflow")

TRANSLATE("bytes length not a multiple of item size")

TRANSLATE("bytes value out of range")

TRANSLATE("calibration is out of range")

TRANSLATE("calibration is read only")

TRANSLATE("can only have one parent")

TRANSLATE("can only have one parent")

TRANSLATE("can only have one parent")

TRANSLATE("can only specify one unknown dimension")

TRANSLATE("can't add special method to already-subclassed class")

TRANSLATE("can't assign to expression")

TRANSLATE("can't assign to expression")

TRANSLATE("can't assign to expression")

TRANSLATE("can't cancel self")

TRANSLATE("can't convert %q to %q")

TRANSLATE("can't convert %q to %q")

TRANSLATE("can't convert %s to complex")

TRANSLATE("can't convert %s to float")

TRANSLATE("can't convert %s to int")

TRANSLATE("can't convert %s to int")

TRANSLATE("can't convert %s to int")

TRANSLATE("can't convert '%q' object to %q implicitly")

TRANSLATE("can't declare nonlocal in outer code")

TRANSLATE("can't delete expression")

TRANSLATE("can't import name %q")

TRANSLATE("can't perform relative import")

TRANSLATE("can't send non-None value to a just-started generator")

TRANSLATE("can't set 512 block size")

TRANSLATE("can't set attribute '%q'")

TRANSLATE("can't set attribute")

TRANSLATE("can't switch from automatic field numbering to manual field specification")

TRANSLATE("can't switch from manual field specification to automatic field numbering")

TRANSLATE("can't truncate-divide a complex number")

TRANSLATE("can't wait")

TRANSLATE("cannot assign new shape")

TRANSLATE("cannot cast output with casting rule")

TRANSLATE("cannot create '%q' instances")

TRANSLATE("cannot delete array elements")

TRANSLATE("cannot reshape array")

TRANSLATE("chr() arg not in range(0x110000)")

TRANSLATE("clip point must be (x,y) tuple")

TRANSLATE("code outside range 0~127")

TRANSLATE("color buffer must be 3 bytes (RGB) or 4 bytes (RGB + pad byte)")

TRANSLATE("color buffer must be a buffer, tuple, list, or int")

TRANSLATE("color buffer must be a bytearray or array of type 'b' or 'B'")

TRANSLATE("color must be between 0x000000 and 0xffffff")

TRANSLATE("complex divide by zero")

TRANSLATE("convolve arguments must be linear arrays")

TRANSLATE("convolve arguments must be ndarrays")

TRANSLATE("convolve arguments must not be empty")

TRANSLATE("corrupted file")

TRANSLATE("corrupted file")

TRANSLATE("corrupted file")

TRANSLATE("could not invert Vandermonde matrix")

TRANSLATE("couldn't determine SD card version")

TRANSLATE("cross is defined for 1D arrays of length 3")

TRANSLATE("data pin #%d in use")

TRANSLATE("data type not understood")

TRANSLATE("default 'except' must be last")

TRANSLATE("default is not a function")

TRANSLATE("destination buffer must be a bytearray or array of type 'B' for bit_depth = 8")

TRANSLATE("destination buffer must be an array of type 'H' for bit_depth = 16")

TRANSLATE("dict update sequence has wrong length")

TRANSLATE("diff argument must be an ndarray")

TRANSLATE("differentiation order out of range")

TRANSLATE("differentiation order out of range")

TRANSLATE("dimensions do not match")

TRANSLATE("divide by zero")

TRANSLATE("division by zero")

TRANSLATE("dtype of int32 is not supported")

TRANSLATE("empty file")

TRANSLATE("empty heap")

TRANSLATE("empty separator")

TRANSLATE("empty separator")

TRANSLATE("empty separator")

TRANSLATE("empty sequence")

TRANSLATE("empty")

TRANSLATE("empty")

TRANSLATE("en_US")

TRANSLATE("exceptions must derive from BaseException")

TRANSLATE("expected ':' after format specifier")

TRANSLATE("expecting just a value for set")

TRANSLATE("expecting key:value for dict")

TRANSLATE("ext_hook is not a function")

TRANSLATE("extra keyword arguments given")

TRANSLATE("extra positional arguments given")

TRANSLATE("file must be a file opened in byte mode")

TRANSLATE("file must be a file opened in byte mode")

TRANSLATE("file must be a file opened in byte mode")

TRANSLATE("file must be a file opened in byte mode")

TRANSLATE("file must be a file opened in byte mode")

TRANSLATE("file must be a file opened in byte mode")

TRANSLATE("file must be a file opened in byte mode")

TRANSLATE("filesystem must provide mount method")

TRANSLATE("first argument must be a callable")

TRANSLATE("first argument must be a function")

TRANSLATE("first argument must be a function")

TRANSLATE("first argument must be a function")

TRANSLATE("first argument must be a tuple of ndarrays")

TRANSLATE("first argument must be an ndarray")

TRANSLATE("first argument must be an ndarray")

TRANSLATE("first argument must be an ndarray")

TRANSLATE("first argument to super() must be type")

TRANSLATE("first two arguments must be ndarrays")

TRANSLATE("first two arguments must be ndarrays")

TRANSLATE("flattening order must be either 'C', or 'F'")

TRANSLATE("flip argument must be an ndarray")

TRANSLATE("format requires a dict")

TRANSLATE("full")

TRANSLATE("full")

TRANSLATE("function doesn't take keyword arguments")

TRANSLATE("function expected at most %d arguments, got %d")

TRANSLATE("function got multiple values for argument '%q'")

TRANSLATE("function got multiple values for argument '%q'")

TRANSLATE("function has the same sign at the ends of interval")

TRANSLATE("function is defined for ndarrays only")

TRANSLATE("function missing %d required positional arguments")

TRANSLATE("function missing keyword-only argument")

TRANSLATE("function missing required keyword argument '%q'")

TRANSLATE("function missing required positional argument #%d")

TRANSLATE("function takes %d positional arguments but %d were given")

TRANSLATE("function takes %d positional arguments but %d were given")

TRANSLATE("function takes %d positional arguments but %d were given")

TRANSLATE("function takes %d positional arguments but %d were given")

TRANSLATE("function takes %d positional arguments but %d were given")

TRANSLATE("generator already executing")

TRANSLATE("generator already executing")

TRANSLATE("generator ignored GeneratorExit")

TRANSLATE("generator raised StopIteration")

TRANSLATE("generator raised StopIteration")

TRANSLATE("identifier redefined as global")

TRANSLATE("identifier redefined as nonlocal")

TRANSLATE("import * not at module level")

TRANSLATE("incompatible .mpy arch")

TRANSLATE("incompatible .mpy file")

TRANSLATE("incompatible .mpy file")

TRANSLATE("incomplete format key")

TRANSLATE("incomplete format")

TRANSLATE("incorrect padding")

TRANSLATE("index is out of bounds")

TRANSLATE("index is out of bounds")

TRANSLATE("index is out of bounds")

TRANSLATE("index is out of bounds")

TRANSLATE("index must be tuple or int")

TRANSLATE("index out of range")

TRANSLATE("index out of range")

TRANSLATE("index out of range")

TRANSLATE("indices must be integers, slices, or Boolean lists")

TRANSLATE("initial_value length is wrong")

TRANSLATE("initial_value length is wrong")

TRANSLATE("input and output dimensions differ")

TRANSLATE("input and output shapes differ")

TRANSLATE("input argument must be an integer, a tuple, or a list")

TRANSLATE("input array length must be power of 2")

TRANSLATE("input arrays are not compatible")

TRANSLATE("input arrays are not compatible")

TRANSLATE("input data must be an iterable")

TRANSLATE("input data must be an iterable")

TRANSLATE("input is not iterable")

TRANSLATE("input matrix is asymmetric")

TRANSLATE("input matrix is asymmetric")

TRANSLATE("input matrix is singular")

TRANSLATE("input matrix is singular")

TRANSLATE("input must be a dense ndarray")

TRANSLATE("input must be a dense ndarray")

TRANSLATE("input must be one-dimensional")

TRANSLATE("input must be square matrix")

TRANSLATE("input must be tuple, list, range, or ndarray")

TRANSLATE("input must be tuple, list, range, or ndarray")

TRANSLATE("input vectors must be of equal length")

TRANSLATE("interp is defined for 1D iterables of equal length")

TRANSLATE("interval must be in range %s-%s")

TRANSLATE("interval must be in range %s-%s")

TRANSLATE("invalid bits_per_pixel %d, must be, 1, 2, 4, 8, 16, 24, or 32")

TRANSLATE("invalid element size %d for bits_per_pixel %d\n")

TRANSLATE("invalid element_size %d, must be, 1, 2, or 4")

TRANSLATE("invalid exception")

TRANSLATE("invalid format specifier")

TRANSLATE("invalid micropython decorator")

TRANSLATE("invalid micropython decorator")

TRANSLATE("invalid step")

TRANSLATE("invalid syntax for integer with base %d")

TRANSLATE("invalid syntax for number")

TRANSLATE("invalid syntax")

TRANSLATE("invalid syntax")

TRANSLATE("invalid syntax")

TRANSLATE("issubclass() arg 1 must be a class")

TRANSLATE("issubclass() arg 2 must be a class or a tuple of classes")

TRANSLATE("iterations did not converge")

TRANSLATE("join expects a list of str/bytes objects consistent with self object")

TRANSLATE("keyword argument(s) not implemented - use normal args instead")

TRANSLATE("lhs and rhs should be compatible")

TRANSLATE("local variable referenced before assignment")

TRANSLATE("malformed f-string")

TRANSLATE("math domain error")

TRANSLATE("matrix is not positive definite")

TRANSLATE("max_length must be 0-%d when fixed_length is %s")

TRANSLATE("maximum number of dimensions is " "2")

TRANSLATE("maximum number of dimensions is " "2")

TRANSLATE("maximum number of dimensions is " "2")

TRANSLATE("maximum number of dimensions is " "2")

TRANSLATE("maximum recursion depth exceeded")

TRANSLATE("maxiter must be > 0")

TRANSLATE("maxiter must be > 0")

TRANSLATE("maxiter should be > 0")

TRANSLATE("median argument must be an ndarray")

TRANSLATE("memory allocation failed, allocating %u bytes")

TRANSLATE("memory allocation failed, heap is locked")

TRANSLATE("memoryview offset too large")

TRANSLATE("memoryview: length is not a multiple of itemsize")

TRANSLATE("mode must be complete, or reduced")

TRANSLATE("more degrees of freedom than data points")

TRANSLATE("more degrees of freedom than data points")

TRANSLATE("multiple *x in assignment")

TRANSLATE("multiple bases have instance lay-out conflict")

TRANSLATE("must use keyword argument for key function")

TRANSLATE("name '%q' is not defined")

TRANSLATE("name too long")

TRANSLATE("native code in .mpy unsupported")

TRANSLATE("ndarray length overflows")

TRANSLATE("need more than %d values to unpack")

TRANSLATE("need more than %d values to unpack")

TRANSLATE("negative shift count")

TRANSLATE("negative shift count")

TRANSLATE("negative shift count")

TRANSLATE("nested index must be int")

TRANSLATE("no SD card")

TRANSLATE("no active exception to reraise")

TRANSLATE("no binding for nonlocal found")

TRANSLATE("no default packer")

TRANSLATE("no default seed")

TRANSLATE("no module named '%q'")

TRANSLATE("no response from SD card")

TRANSLATE("non-default argument follows default argument")

TRANSLATE("non-hex digit found")

TRANSLATE("non-zero timeout must be >= interval")

TRANSLATE("not a 128-bit UUID")

TRANSLATE("not a constant")

TRANSLATE("not all arguments converted during string formatting")

TRANSLATE("not enough arguments for format string")

TRANSLATE("not supported for input types")

TRANSLATE("number of points must be at least 2")

TRANSLATE("number of points must be at least 2")

TRANSLATE("object ")

TRANSLATE("object '%s' isn't a tuple or list")

TRANSLATE("object not in sequence")

TRANSLATE("object not in sequence")

TRANSLATE("object of type '%s' has no len()")

TRANSLATE("object with buffer protocol required")

TRANSLATE("odd-length string")

TRANSLATE("offset is too large")

TRANSLATE("offset must be non-negative and no greater than buffer length")

TRANSLATE("only ndarrays can be concatenated")

TRANSLATE("only slices with step=1 (aka None) are supported")

TRANSLATE("only slices with step=1 (aka None) are supported")

TRANSLATE("only slices with step=1 (aka None) are supported")

TRANSLATE("only slices with step=1 (aka None) are supported")

TRANSLATE("only slices with step=1 (aka None) are supported")

TRANSLATE("only slices with step=1 (aka None) are supported")

TRANSLATE("opcode")

TRANSLATE("operands could not be broadcast together")

TRANSLATE("operands could not be broadcast together")

TRANSLATE("operands could not be broadcast together")

TRANSLATE("operands could not be broadcast together")

TRANSLATE("operands could not be broadcast together")

TRANSLATE("operands could not be broadcast together")

TRANSLATE("operation is defined for 2D arrays only")

TRANSLATE("operation is defined for ndarrays only")

TRANSLATE("operation is implemented for 1D Boolean arrays only")

TRANSLATE("operation is not implemented on ndarrays")

TRANSLATE("operation is not supported for given type")

TRANSLATE("operation not supported for the input types")

TRANSLATE("ord() expected a character, but string of length %d found")

TRANSLATE("out array is too small")

TRANSLATE("out has wrong type")

TRANSLATE("out keyword is not supported for function")

TRANSLATE("out must be a float dense array")

TRANSLATE("out must be an ndarray")

TRANSLATE("out must be of float dtype")

TRANSLATE("out of range of target")

TRANSLATE("out of range of target")

TRANSLATE("out of range of target")

TRANSLATE("out of range of target")

TRANSLATE("out of range of target")

TRANSLATE("out of range of target")

TRANSLATE("output array has wrong type")

TRANSLATE("output array must be contiguous")

TRANSLATE("overflow converting long int to machine word")

TRANSLATE("overflow converting long int to machine word")

TRANSLATE("pop from empty %q")

TRANSLATE("pop from empty %q")

TRANSLATE("pop from empty %q")

TRANSLATE("pop from empty %q")

TRANSLATE("pop from empty %q")

TRANSLATE("positional arg after **")

TRANSLATE("positional arg after keyword arg")

TRANSLATE("pow() 3rd argument cannot be 0")

TRANSLATE("pow() with 3 arguments requires integers")

TRANSLATE("raw f-strings are not supported")

TRANSLATE("real and imaginary parts must be of equal length")

TRANSLATE("requested length %d but object has length %d")

TRANSLATE("results cannot be cast to specified type")

TRANSLATE("results cannot be cast to specified type")

TRANSLATE("rgb_pins[%d] duplicates another pin assignment")

TRANSLATE("rgb_pins[%d] is not on the same port as clock")

TRANSLATE("roll argument must be an ndarray")

TRANSLATE("rsplit(None,n)")

TRANSLATE("sampling rate out of range")

TRANSLATE("shape must be None, and integer or a tuple of integers")

TRANSLATE("shape must be None, and integer or a tuple of integers")

TRANSLATE("shape must be None, and integer or a tuple of integers")

TRANSLATE("shape must be integer or tuple of integers")

TRANSLATE("short read")

TRANSLATE("sign not allowed in string format specifier")

TRANSLATE("sign not allowed with integer format specifier 'c'")

TRANSLATE("size is defined for ndarrays only")

TRANSLATE("size must match out.shape when used together")

TRANSLATE("small int overflow")

TRANSLATE("soft reboot\n")

TRANSLATE("sort argument must be an ndarray")

TRANSLATE("sos array must be of shape (n_section, 6)")

TRANSLATE("sos[:, 3] should be all ones")

TRANSLATE("sosfilt requires iterable arguments")

TRANSLATE("source palette too large")

TRANSLATE("source palette too large")

TRANSLATE("source_bitmap must have value_count of 2 or 65536")

TRANSLATE("source_bitmap must have value_count of 65536")

TRANSLATE("source_bitmap must have value_count of 8")

TRANSLATE("splitting with sub-captures")

TRANSLATE("start/end indices")

TRANSLATE("stop not reachable from start")

TRANSLATE("stop not reachable from start")

TRANSLATE("stream operation not supported")

TRANSLATE("string argument without an encoding")

TRANSLATE("string argument without an encoding")

TRANSLATE("string index out of range")

TRANSLATE("string index out of range")

TRANSLATE("string indices must be integers, not %s")

TRANSLATE("substring not found")

TRANSLATE("substring not found")

TRANSLATE("super() can't find self")

TRANSLATE("syntax error in JSON")

TRANSLATE("timeout waiting for index pulse")

TRANSLATE("timeout waiting for v1 card")

TRANSLATE("timeout waiting for v2 card")

TRANSLATE("timestamp out of range for platform time_t")

TRANSLATE("tobytes can be invoked for dense arrays only")

TRANSLATE("too many args")

TRANSLATE("too many dimensions")

TRANSLATE("too many dimensions")

TRANSLATE("too many indices")

TRANSLATE("too many values to unpack (expected %d)")

TRANSLATE("trapz is defined for 1D arrays of equal length")

TRANSLATE("trapz is defined for 1D iterables")

TRANSLATE("tx and rx cannot both be None")

TRANSLATE("type '%q' is not an acceptable base type")

TRANSLATE("type object '%q' has no attribute '%q'")

TRANSLATE("type takes 1 or 3 arguments")

TRANSLATE("unexpected indent")

TRANSLATE("unexpected keyword argument '%q'")

TRANSLATE("unexpected keyword argument '%q'")

TRANSLATE("unexpected keyword argument '%q'")

TRANSLATE("unexpected keyword argument '%q'")

TRANSLATE("unicode name escapes")

TRANSLATE("unindent doesn't match any outer indent level")

TRANSLATE("unknown format code '%c' for object of type '%q'")

TRANSLATE("unknown format code '%c' for object of type '%q'")

TRANSLATE("unknown format code '%c' for object of type '%q'")

TRANSLATE("unmatched '%c' in format")

TRANSLATE("unmatched '%c' in format")

TRANSLATE("unreadable attribute")

TRANSLATE("unreadable attribute")

TRANSLATE("unreadable attribute")

TRANSLATE("unsupported %q type")

TRANSLATE("unsupported %q type")

TRANSLATE("unsupported %q type")

TRANSLATE("unsupported %q type")

TRANSLATE("unsupported %q type")

TRANSLATE("unsupported %q type")

TRANSLATE("unsupported %q type")

TRANSLATE("unsupported %q type")

TRANSLATE("unsupported %q type")

TRANSLATE("unsupported colorspace for GifWriter")

TRANSLATE("unsupported colorspace for dither")

TRANSLATE("unsupported format character '%c' (0x%x) at index %d")

TRANSLATE("unsupported type for %q: '%s'")

TRANSLATE("unsupported types for %q: '%q', '%q'")

TRANSLATE("usecols is too high")

TRANSLATE("value must fit in %d byte(s)")

TRANSLATE("value must fit in %d byte(s)")

TRANSLATE("value out of range of target")

TRANSLATE("window must be <= interval")

TRANSLATE("wrong axis index")

TRANSLATE("wrong axis index")

TRANSLATE("wrong axis specified")

TRANSLATE("wrong dtype")

TRANSLATE("wrong index type")

TRANSLATE("wrong input type")

TRANSLATE("wrong input type")

TRANSLATE("wrong input type")

TRANSLATE("wrong input type")

TRANSLATE("wrong input type")

TRANSLATE("wrong input type")

TRANSLATE("wrong input type")

TRANSLATE("wrong length of condition array")

TRANSLATE("wrong length of index array")

TRANSLATE("wrong number of arguments")

TRANSLATE("wrong number of arguments")

TRANSLATE("wrong number of arguments")

TRANSLATE("wrong output type")

TRANSLATE("wrong output type")

TRANSLATE("zi must be an ndarray")

TRANSLATE("zi must be of float type")

TRANSLATE("zi must be of shape (n_section, 2)")
