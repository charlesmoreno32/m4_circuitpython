// # words 127
// words ['on', 'er', '%q', 'in', 'at', 'al', 're', 'or', 'un', 'th', '%d', 'de', 'no', '\r\n', 'us', 'ow', 'ke', 'ed', 'le', 'ing', ' is', ' in', ' %d', 'arg', 'the', 'ed ', 'an ', 'all', ' %q', 'put', 'out', 'No ', 'ent', 'ive', 'be ', '.\r\n', 'ail', '() ', 'pro', 'USB', 'sub', 'loc', 'of ', '16 ', ' of ', ' to ', ' or ', ' out', 'ment', 'tion', 'only', 'able', 'ould', ' use', 'long', "'%s'", 'ide ', 'when', 'HCI ', 'wait', 'mple', "n't ", 'byte', 'ield', '0000', ' but', 'ffff', 'miss', 'Not ', ' not ', ' for ', " '%q'", ' too ', ' with', 'found', ' and ', 'have ', 'class', ' has ', 'excep', ' from', 'Only ', 'first', ' does', 'same ', ', 24,', ' safe', "can't ", ' must ', 'annot ', ' error', 'wrong ', 'string', 'expect', 'number', 'Buffer', 'assign', 'valid ', 'syntax', 'nvalid ', 'integer', 'keyword', 'xxxxxxx', ' specif', 'support', 'nknown ', 'memory ', 'channel', 'SD card', 'x-xxxx-', ' device', ' duplic', ' require', 'multiple', 'oo many ', 'overflow', 'Internal', 'exactly ', ' must be ', ' argument', 'supported', 'attribute', 'dimension', ' sequence', 'compatible', ' is defined', 'Insufficien']
// 1  921 000 0
// 32   1121 001 1
// 97 a 229 01000 8
// 101 e 242 01001 9
// 105 i 213 01010 10
// 115 s 324 01011 11
// 116 t 253 01100 12
// 246  must be  101 011010 26
// 99 c 165 011011 27
// 100 d 121 011100 28
// 110 n 114 011101 29
// 111 o 130 011110 30
// 112 p 101 011111 31
// 114 r 119 100000 32
// 149  in 65 1000010 66
// 148  is 57 1000011 67
// 197  not  83 1000100 68
// 172  of  72 1000101 69
// 130 %q 64 1000110 70
// 39 \' 63 1000111 71
// 44 , 70 1001000 72
// 46 . 73 1001001 73
// 67 C 47 1001010 74
// 132 at 68 1001011 75
// 98 b 54 1001100 76
// 153 ed  54 1001101 77
// 129 er 87 1001110 78
// 102 f 66 1001111 79
// 103 g 48 1010000 80
// 104 h 57 1010001 81
// 131 in 73 1010010 82
// 108 l 58 1010011 83
// 109 m 92 1010100 84
// 128 on 75 1010101 85
// 134 re 71 1010110 86
// 117 u 79 1010111 87
// 120 x 57 1011000 88
// 121 y 64 1011001 89
// 150  %d 34 10110100 180
// 247  argument 38 10110101 181
// 198  for  42 10110110 182
// 174  or  41 10110111 183
// 175  out 29 10111000 184
// 173  to  47 10111001 185
// 37 % 24 10111010 186
// 40 ( 25 10111011 187
// 41 ) 25 10111100 188
// 45 - 34 10111101 189
// 48 0 25 10111110 190
// 49 1 25 10111111 191
// 58 : 25 11000000 192
// 68 D 24 11000001 193
// 73 I 29 11000010 194
// 80 P 25 11000011 195
// 84 T 31 11000100 196
// 133 al 39 11000101 197
// 155 all 28 11000110 198
// 154 an  45 11000111 199
// 151 arg 29 11001000 200
// 162 be  26 11001001 201
// 139 de 47 11001010 202
// 145 ed 26 11001011 203
// 147 ing 47 11001100 204
// 176 ment 27 11001101 205
// 140 no 36 11001110 206
// 135 or 45 11001111 207
// 248 supported 33 11010000 208
// 137 th 25 11010001 209
// 152 the 27 11010010 210
// 136 un 33 11010011 211
// 142 us 26 11010100 212
// 118 v 37 11010101 213
// 119 w 32 11010110 214
// 141 \r\n 19 110101110 430
// 156  %q 20 110101111 431
// 199  \'%q\' 16 110110000 432
// 203  and  18 110110001 433
// 218  error 17 110110010 434
// 216  must  22 110110011 435
// 240  require 14 110110100 436
// 200  too  20 110110101 437
// 181  use 17 110110110 438
// 138 %d 23 110110111 439
// 165 ()  13 110111000 440
// 163 .\r\n 12 110111001 441
// 47 / 14 110111010 442
// 50 2 23 110111011 443
// 51 3 14 110111100 444
// 61 = 17 110111101 445
// 65 A 19 110111110 446
// 66 B 21 110111111 447
// 69 E 17 111000000 448
// 70 F 17 111000001 449
// 76 L 17 111000010 450
// 77 M 13 111000011 451
// 159 No  17 111000100 452
// 82 R 22 111000101 453
// 83 S 21 111000110 454
// 85 U 22 111000111 455
// 179 able 18 111001000 456
// 164 ail 14 111001001 457
// 217 annot  20 111001010 458
// 215 can\'t  21 111001011 459
// 160 ent 13 111001100 460
// 204 have  12 111001101 461
// 184 ide  14 111001110 462
// 228 integer 12 111001111 463
// 161 ive 14 111010000 464
// 107 k 15 111010001 465
// 144 ke 18 111010010 466
// 146 le 22 111010011 467
// 227 nvalid  14 111010100 468
// 178 only 20 111010101 469
// 180 ould 16 111010110 470
// 158 out 20 111010111 471
// 143 ow 17 111011000 472
// 157 put 20 111011001 473
// 220 string 13 111011010 474
// 177 tion 15 111011011 475
// 219 wrong  13 111011100 476
// 193  but 6 1110111010 954
// 238  device 7 1110111011 955
// 211  does 8 1110111100 956
// 208  from 8 1110111101 957
// 206  has  11 1110111110 958
// 253  is defined 9 1110111111 959
// 251  sequence 6 1111000000 960
// 231  specif 11 1111000001 961
// 201  with 11 1111000010 962
// 34 \" 6 1111000011 963
// 183 \'%s\' 9 1111000100 964
// 42 * 10 1111000101 965
// 171 16  6 1111000110 966
// 53 5 6 1111000111 967
// 54 6 11 1111001000 968
// 56 8 11 1111001001 969
// 62 > 6 1111001010 970
// 223 Buffer 6 1111001011 971
// 71 G 6 1111001100 972
// 72 H 7 1111001101 973
// 186 HCI  7 1111001110 974
// 209 Only  6 1111001111 975
// 167 USB 7 1111010000 976
// 86 V 6 1111010001 977
// 87 W 7 1111010010 978
// 95 _ 9 1111010011 979
// 224 assign 7 1111010100 980
// 249 attribute 8 1111010101 981
// 190 byte 6 1111010110 982
// 205 class 9 1111010111 983
// 250 dimension 6 1111011000 984
// 207 excep 8 1111011001 985
// 221 expect 10 1111011010 986
// 210 first 7 1111011011 987
// 202 found 11 1111011100 988
// 191 ield 6 1111011101 989
// 229 keyword 10 1111011110 990
// 169 loc 8 1111011111 991
// 182 long 11 1111100000 992
// 195 miss 6 1111100001 993
// 188 mple 8 1111100010 994
// 241 multiple 11 1111100011 995
// 189 n\'t  9 1111100100 996
// 222 number 8 1111100101 997
// 170 of  11 1111100110 998
// 242 oo many  8 1111100111 999
// 166 pro 9 1111101000 1000
// 212 same  6 1111101001 1001
// 168 sub 8 1111101010 1002
// 232 support 6 1111101011 1003
// 225 valid  10 1111101100 1004
// 187 wait 8 1111101101 1005
// 185 when 8 1111101110 1006
// 122 z 11 1111101111 1007
// 239  duplic 3 11111100000 2016
// 214  safe 5 11111100001 2017
// 33 ! 4 11111100010 2018
// 35 # 4 11111100011 2019
// 213 , 24, 3 11111100100 2020
// 52 4 4 11111100101 2021
// 59 ; 4 11111100110 2022
// 254 Insufficien 5 11111100111 2023
// 244 Internal 5 11111101000 2024
// 75 K 3 11111101001 2025
// 78 N 5 11111101010 2026
// 196 Not  5 11111101011 2027
// 79 O 4 11111101100 2028
// 236 SD card 4 11111101101 2029
// 89 Y 4 11111101110 2030
// 91 [ 5 11111101111 2031
// 93 ] 5 11111110000 2032
// 96 ` 4 11111110001 2033
// 235 channel 4 11111110010 2034
// 252 compatible 4 11111110011 2035
// 245 exactly  3 11111110100 2036
// 106 j 5 11111110101 2037
// 234 memory  5 11111110110 2038
// 233 nknown  3 11111110111 2039
// 243 overflow 5 11111111000 2040
// 113 q 3 11111111001 2041
// 226 syntax 4 11111111010 2042
// 43 + 2 111111110110 4086
// 192 0000 2 111111110111 4087
// 60 < 3 111111111000 4088
// 74 J 2 111111111001 4089
// 88 X 1 111111111010 4090
// 194 ffff 2 111111111011 4091
// 237 x-xxxx- 2 111111111100 4092
// 230 xxxxxxx 2 111111111101 4093
// 55 7 1 1111111111100 8188
// 57 9 1 1111111111101 8189
// 63 ? 1 1111111111110 8190
// 126 ~ 1 1111111111111 8191
// length count {3: 2, 5: 5, 6: 7, 7: 24, 8: 35, 9: 47, 10: 54, 11: 27, 12: 8, 13: 4}
// values ['\x01', ' ', 'a', 'e', 'i', 's', 't', ' must be ', 'c', 'd', 'n', 'o', 'p', 'r', ' in', ' is', ' not ', ' of ', '%q', "'", ',', '.', 'C', 'at', 'b', 'ed ', 'er', 'f', 'g', 'h', 'in', 'l', 'm', 'on', 're', 'u', 'x', 'y', ' %d', ' argument', ' for ', ' or ', ' out', ' to ', '%', '(', ')', '-', '0', '1', ':', 'D', 'I', 'P', 'T', 'al', 'all', 'an ', 'arg', 'be ', 'de', 'ed', 'ing', 'ment', 'no', 'or', 'supported', 'th', 'the', 'un', 'us', 'v', 'w', '\r\n', ' %q', " '%q'", ' and ', ' error', ' must ', ' require', ' too ', ' use', '%d', '() ', '.\r\n', '/', '2', '3', '=', 'A', 'B', 'E', 'F', 'L', 'M', 'No ', 'R', 'S', 'U', 'able', 'ail', 'annot ', "can't ", 'ent', 'have ', 'ide ', 'integer', 'ive', 'k', 'ke', 'le', 'nvalid ', 'only', 'ould', 'out', 'ow', 'put', 'string', 'tion', 'wrong ', ' but', ' device', ' does', ' from', ' has ', ' is defined', ' sequence', ' specif', ' with', '"', "'%s'", '*', '16 ', '5', '6', '8', '>', 'Buffer', 'G', 'H', 'HCI ', 'Only ', 'USB', 'V', 'W', '_', 'assign', 'attribute', 'byte', 'class', 'dimension', 'excep', 'expect', 'first', 'found', 'ield', 'keyword', 'loc', 'long', 'miss', 'mple', 'multiple', "n't ", 'number', 'of ', 'oo many ', 'pro', 'same ', 'sub', 'support', 'valid ', 'wait', 'when', 'z', ' duplic', ' safe', '!', '#', ', 24,', '4', ';', 'Insufficien', 'Internal', 'K', 'N', 'Not ', 'O', 'SD card', 'Y', '[', ']', '`', 'channel', 'compatible', 'exactly ', 'j', 'memory ', 'nknown ', 'overflow', 'q', 'syntax', '+', '0000', '<', 'J', 'X', 'ffff', 'x-xxxx-', 'xxxxxxx', '7', '9', '?', '~'] lengths 14 bytearray(b'\x00\x00\x02\x00\x05\x07\x18#/6\x1b\x08\x04\x00')
// ['\x01', ' ', 'a', 'e', 'i', 's', 't', ' must be ', 'c', 'd', 'n', 'o', 'p', 'r', ' in', ' is', ' not ', ' of ', '%q', "'", ',', '.', 'C', 'at', 'b', 'ed ', 'er', 'f', 'g', 'h', 'in', 'l', 'm', 'on', 're', 'u', 'x', 'y', ' %d', ' argument', ' for ', ' or ', ' out', ' to ', '%', '(', ')', '-', '0', '1', ':', 'D', 'I', 'P', 'T', 'al', 'all', 'an ', 'arg', 'be ', 'de', 'ed', 'ing', 'ment', 'no', 'or', 'supported', 'th', 'the', 'un', 'us', 'v', 'w', '\r\n', ' %q', " '%q'", ' and ', ' error', ' must ', ' require', ' too ', ' use', '%d', '() ', '.\r\n', '/', '2', '3', '=', 'A', 'B', 'E', 'F', 'L', 'M', 'No ', 'R', 'S', 'U', 'able', 'ail', 'annot ', "can't ", 'ent', 'have ', 'ide ', 'integer', 'ive', 'k', 'ke', 'le', 'nvalid ', 'only', 'ould', 'out', 'ow', 'put', 'string', 'tion', 'wrong ', ' but', ' device', ' does', ' from', ' has ', ' is defined', ' sequence', ' specif', ' with', '"', "'%s'", '*', '16 ', '5', '6', '8', '>', 'Buffer', 'G', 'H', 'HCI ', 'Only ', 'USB', 'V', 'W', '_', 'assign', 'attribute', 'byte', 'class', 'dimension', 'excep', 'expect', 'first', 'found', 'ield', 'keyword', 'loc', 'long', 'miss', 'mple', 'multiple', "n't ", 'number', 'of ', 'oo many ', 'pro', 'same ', 'sub', 'support', 'valid ', 'wait', 'when', 'z', ' duplic', ' safe', '!', '#', ', 24,', '4', ';', 'Insufficien', 'Internal', 'K', 'N', 'Not ', 'O', 'SD card', 'Y', '[', ']', '`', 'channel', 'compatible', 'exactly ', 'j', 'memory ', 'nknown ', 'overflow', 'q', 'syntax', '+', '0000', '<', 'J', 'X', 'ffff', 'x-xxxx-', 'xxxxxxx', '7', '9', '?', '~'] bytearray(b'\x00\x00\x02\x00\x05\x07\x18#/6\x1b\x08\x04\x00')
typedef uint8_t mchar_t;
const uint8_t lengths[] = { 0, 0, 2, 0, 5, 7, 24, 35, 47, 54, 27, 8, 4, 0 };
const mchar_t values[] = { 1, 32, 97, 101, 105, 115, 116, 246, 99, 100, 110, 111, 112, 114, 149, 148, 197, 172, 130, 39, 44, 46, 67, 132, 98, 153, 129, 102, 103, 104, 131, 108, 109, 128, 134, 117, 120, 121, 150, 247, 198, 174, 175, 173, 37, 40, 41, 45, 48, 49, 58, 68, 73, 80, 84, 133, 155, 154, 151, 162, 139, 145, 147, 176, 140, 135, 248, 137, 152, 136, 142, 118, 119, 141, 156, 199, 203, 218, 216, 240, 200, 181, 138, 165, 163, 47, 50, 51, 61, 65, 66, 69, 70, 76, 77, 159, 82, 83, 85, 179, 164, 217, 215, 160, 204, 184, 228, 161, 107, 144, 146, 227, 178, 180, 158, 143, 157, 220, 177, 219, 193, 238, 211, 208, 206, 253, 251, 231, 201, 34, 183, 42, 171, 53, 54, 56, 62, 223, 71, 72, 186, 209, 167, 86, 87, 95, 224, 249, 190, 205, 250, 207, 221, 210, 202, 191, 229, 169, 182, 195, 188, 241, 189, 222, 170, 242, 166, 212, 168, 232, 225, 187, 185, 122, 239, 214, 33, 35, 213, 52, 59, 254, 244, 75, 78, 196, 79, 236, 89, 91, 93, 96, 235, 252, 245, 106, 234, 233, 243, 113, 226, 43, 192, 60, 74, 88, 194, 237, 230, 55, 57, 63, 126 };
#define compress_max_length_bits (8)
const mchar_t words[] = { 111, 110, 101, 114, 37, 113, 105, 110, 97, 116, 97, 108, 114, 101, 111, 114, 117, 110, 116, 104, 37, 100, 100, 101, 110, 111, 13, 10, 117, 115, 111, 119, 107, 101, 101, 100, 108, 101, 105, 110, 103, 32, 105, 115, 32, 105, 110, 32, 37, 100, 97, 114, 103, 116, 104, 101, 101, 100, 32, 97, 110, 32, 97, 108, 108, 32, 37, 113, 112, 117, 116, 111, 117, 116, 78, 111, 32, 101, 110, 116, 105, 118, 101, 98, 101, 32, 46, 13, 10, 97, 105, 108, 40, 41, 32, 112, 114, 111, 85, 83, 66, 115, 117, 98, 108, 111, 99, 111, 102, 32, 49, 54, 32, 32, 111, 102, 32, 32, 116, 111, 32, 32, 111, 114, 32, 32, 111, 117, 116, 109, 101, 110, 116, 116, 105, 111, 110, 111, 110, 108, 121, 97, 98, 108, 101, 111, 117, 108, 100, 32, 117, 115, 101, 108, 111, 110, 103, 39, 37, 115, 39, 105, 100, 101, 32, 119, 104, 101, 110, 72, 67, 73, 32, 119, 97, 105, 116, 109, 112, 108, 101, 110, 39, 116, 32, 98, 121, 116, 101, 105, 101, 108, 100, 48, 48, 48, 48, 32, 98, 117, 116, 102, 102, 102, 102, 109, 105, 115, 115, 78, 111, 116, 32, 32, 110, 111, 116, 32, 32, 102, 111, 114, 32, 32, 39, 37, 113, 39, 32, 116, 111, 111, 32, 32, 119, 105, 116, 104, 102, 111, 117, 110, 100, 32, 97, 110, 100, 32, 104, 97, 118, 101, 32, 99, 108, 97, 115, 115, 32, 104, 97, 115, 32, 101, 120, 99, 101, 112, 32, 102, 114, 111, 109, 79, 110, 108, 121, 32, 102, 105, 114, 115, 116, 32, 100, 111, 101, 115, 115, 97, 109, 101, 32, 44, 32, 50, 52, 44, 32, 115, 97, 102, 101, 99, 97, 110, 39, 116, 32, 32, 109, 117, 115, 116, 32, 97, 110, 110, 111, 116, 32, 32, 101, 114, 114, 111, 114, 119, 114, 111, 110, 103, 32, 115, 116, 114, 105, 110, 103, 101, 120, 112, 101, 99, 116, 110, 117, 109, 98, 101, 114, 66, 117, 102, 102, 101, 114, 97, 115, 115, 105, 103, 110, 118, 97, 108, 105, 100, 32, 115, 121, 110, 116, 97, 120, 110, 118, 97, 108, 105, 100, 32, 105, 110, 116, 101, 103, 101, 114, 107, 101, 121, 119, 111, 114, 100, 120, 120, 120, 120, 120, 120, 120, 32, 115, 112, 101, 99, 105, 102, 115, 117, 112, 112, 111, 114, 116, 110, 107, 110, 111, 119, 110, 32, 109, 101, 109, 111, 114, 121, 32, 99, 104, 97, 110, 110, 101, 108, 83, 68, 32, 99, 97, 114, 100, 120, 45, 120, 120, 120, 120, 45, 32, 100, 101, 118, 105, 99, 101, 32, 100, 117, 112, 108, 105, 99, 32, 114, 101, 113, 117, 105, 114, 101, 109, 117, 108, 116, 105, 112, 108, 101, 111, 111, 32, 109, 97, 110, 121, 32, 111, 118, 101, 114, 102, 108, 111, 119, 73, 110, 116, 101, 114, 110, 97, 108, 101, 120, 97, 99, 116, 108, 121, 32, 32, 109, 117, 115, 116, 32, 98, 101, 32, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 117, 112, 112, 111, 114, 116, 101, 100, 97, 116, 116, 114, 105, 98, 117, 116, 101, 100, 105, 109, 101, 110, 115, 105, 111, 110, 32, 115, 101, 113, 117, 101, 110, 99, 101, 99, 111, 109, 112, 97, 116, 105, 98, 108, 101, 32, 105, 115, 32, 100, 101, 102, 105, 110, 101, 100, 73, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110 };
const uint8_t wlencount[] = { 19, 25, 25, 18, 12, 13, 6, 6, 1, 2 };
#define word_start 128
#define word_end 254
#define minlen 2
#define maxlen 11
#define translation_offstart 0
#define translation_offset 0
#define translation_qstr_bits 11
